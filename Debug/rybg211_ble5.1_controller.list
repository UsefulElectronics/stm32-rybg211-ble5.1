
rybg211_ble5.1_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a43c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800a5dc  0800a5dc  0001a5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e0  0800a7e0  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7e0  0800a7e0  0001a7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7e8  0800a7e8  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7e8  0800a7e8  0001a7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800a7f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021c4  20000160  0800a950  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002324  0800a950  00022324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184d4  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000398f  00000000  00000000  00038664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003bff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003d410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a258  00000000  00000000  0003e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018dae  00000000  00000000  00058918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933e1  00000000  00000000  000716c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104aa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000580c  00000000  00000000  00104af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a5c4 	.word	0x0800a5c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800a5c4 	.word	0x0800a5c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fcda 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f834 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f946 	bl	8000830 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f91c 	bl	80007e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f8f0 	bl	800078c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005ac:	f008 fcc2 	bl	8008f34 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80005b0:	f000 f892 	bl	80006d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  CDC_Handler_Init_FS	(main_UsbRxTask);
 80005b4:	480e      	ldr	r0, [pc, #56]	; (80005f0 <main+0x5c>)
 80005b6:	f008 fdc7 	bl	8009148 <CDC_Handler_Init_FS>

  rybg211_bleModuleInit();
 80005ba:	f009 fa0b 	bl	80099d4 <rybg211_bleModuleInit>

  rybg211_setDeviceName(hBleModule.txBuffer, "BLE Bridge");
 80005be:	490d      	ldr	r1, [pc, #52]	; (80005f4 <main+0x60>)
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <main+0x64>)
 80005c2:	f009 fa1b 	bl	80099fc <rybg211_setDeviceName>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	490c      	ldr	r1, [pc, #48]	; (80005fc <main+0x68>)
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <main+0x6c>)
 80005ce:	f003 ff4d 	bl	800446c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <main+0x70>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <main+0x70>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f022 0208 	bic.w	r2, r2, #8
 80005e0:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  main_UartTxTask();
 80005e2:	f000 f99f 	bl	8000924 <main_UartTxTask>

	  main_UartRxTask();
 80005e6:	f000 f9c9 	bl	800097c <main_UartRxTask>

	  main_bridgeDataTransfare();
 80005ea:	f000 fa29 	bl	8000a40 <main_bridgeDataTransfare>
	  main_UartTxTask();
 80005ee:	e7f8      	b.n	80005e2 <main+0x4e>
 80005f0:	080009ed 	.word	0x080009ed
 80005f4:	0800a5dc 	.word	0x0800a5dc
 80005f8:	20002111 	.word	0x20002111
 80005fc:	20002211 	.word	0x20002211
 8000600:	200001c4 	.word	0x200001c4
 8000604:	20000208 	.word	0x20000208

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f009 fb6c 	bl	8009cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <SystemClock_Config+0xc8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <SystemClock_Config+0xc8>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <SystemClock_Config+0xc8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <SystemClock_Config+0xcc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a20      	ldr	r2, [pc, #128]	; (80006d4 <SystemClock_Config+0xcc>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000678:	230f      	movs	r3, #15
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800067c:	2390      	movs	r3, #144	; 0x90
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000680:	2304      	movs	r3, #4
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000684:	2305      	movs	r3, #5
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fe3d 	bl	800330c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 fa56 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 f89f 	bl	80037fc <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c4:	f000 fa40 	bl	8000b48 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
 80006f6:	615a      	str	r2, [r3, #20]
 80006f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_TIM3_Init+0xac>)
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <MX_TIM3_Init+0xb0>)
 80006fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_TIM3_Init+0xac>)
 8000702:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000706:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_TIM3_Init+0xac>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_TIM3_Init+0xac>)
 8000710:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000714:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_TIM3_Init+0xac>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_TIM3_Init+0xac>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <MX_TIM3_Init+0xac>)
 8000724:	f003 fa4a 	bl	8003bbc <HAL_TIM_PWM_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800072e:	f000 fa0b 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4619      	mov	r1, r3
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <MX_TIM3_Init+0xac>)
 8000742:	f003 fd59 	bl	80041f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800074c:	f000 f9fc 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2208      	movs	r2, #8
 8000764:	4619      	mov	r1, r3
 8000766:	4807      	ldr	r0, [pc, #28]	; (8000784 <MX_TIM3_Init+0xac>)
 8000768:	f003 fa78 	bl	8003c5c <HAL_TIM_PWM_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000772:	f000 f9e9 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <MX_TIM3_Init+0xac>)
 8000778:	f000 fa36 	bl	8000be8 <HAL_TIM_MspPostInit>

}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000017c 	.word	0x2000017c
 8000788:	40000400 	.word	0x40000400

0800078c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART1_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 8000798:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007c4:	f003 fd86 	bl	80042d4 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f9bb 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001c4 	.word	0x200001c4
 80007dc:	40011000 	.word	0x40011000

080007e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_DMA_Init+0x4c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <MX_DMA_Init+0x4c>)
 80007f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_DMA_Init+0x4c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	203a      	movs	r0, #58	; 0x3a
 8000808:	f000 fd13 	bl	8001232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800080c:	203a      	movs	r0, #58	; 0x3a
 800080e:	f000 fd2c 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2046      	movs	r0, #70	; 0x46
 8000818:	f000 fd0b 	bl	8001232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800081c:	2046      	movs	r0, #70	; 0x46
 800081e:	f000 fd24 	bl	800126a <HAL_NVIC_EnableIRQ>

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_GPIO_Init+0x9c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <MX_GPIO_Init+0x9c>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_GPIO_Init+0x9c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_GPIO_Init+0x9c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <MX_GPIO_Init+0x9c>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_GPIO_Init+0x9c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_GPIO_Init+0x9c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <MX_GPIO_Init+0x9c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_GPIO_Init+0x9c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin|LED1_Pin|MODULE_RESET_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f244 4106 	movw	r1, #17414	; 0x4406
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_GPIO_Init+0xa0>)
 80008a2:	f001 fa83 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin MODULE_RESET_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin|MODULE_RESET_Pin;
 80008a6:	f244 4306 	movw	r3, #17414	; 0x4406
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_GPIO_Init+0xa0>)
 80008c0:	f001 f8f0 	bl	8001aa4 <HAL_GPIO_Init>

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400

080008d4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	807b      	strh	r3, [r7, #2]
	hBleModule.controlFlags.flag.packetReceived = ENABLE;
 80008e0:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <HAL_UARTEx_RxEventCallback+0x40>)
 80008e2:	7813      	ldrb	r3, [r2, #0]
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	7013      	strb	r3, [r2, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80008ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ee:	490a      	ldr	r1, [pc, #40]	; (8000918 <HAL_UARTEx_RxEventCallback+0x44>)
 80008f0:	480a      	ldr	r0, [pc, #40]	; (800091c <HAL_UARTEx_RxEventCallback+0x48>)
 80008f2:	f003 fdbb 	bl	800446c <HAL_UARTEx_ReceiveToIdle_DMA>

	hBleModule.rxPacketSize = Size;
 80008f6:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_UARTEx_RxEventCallback+0x40>)
 80008f8:	887b      	ldrh	r3, [r7, #2]
 80008fa:	8093      	strh	r3, [r2, #4]

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_UARTEx_RxEventCallback+0x4c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f022 0208 	bic.w	r2, r2, #8
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200020fc 	.word	0x200020fc
 8000918:	20002211 	.word	0x20002211
 800091c:	200001c4 	.word	0x200001c4
 8000920:	20000208 	.word	0x20000208

08000924 <main_UartTxTask>:
/**
 * @brief Module AT UART command transmission task
 *
 */
static void main_UartTxTask()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hBleModule.txTimer > 1000))
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <main_UartTxTask+0x4c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	f003 0302 	and.w	r3, r3, #2
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d019      	beq.n	800096a <main_UartTxTask+0x46>
 8000936:	f000 fb71 	bl	800101c <HAL_GetTick>
 800093a:	4602      	mov	r2, r0
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <main_UartTxTask+0x4c>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000946:	d910      	bls.n	800096a <main_UartTxTask+0x46>
	{
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <main_UartTxTask+0x4c>)
 800094a:	885b      	ldrh	r3, [r3, #2]
 800094c:	461a      	mov	r2, r3
 800094e:	4909      	ldr	r1, [pc, #36]	; (8000974 <main_UartTxTask+0x50>)
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <main_UartTxTask+0x54>)
 8000952:	f003 fd0d 	bl	8004370 <HAL_UART_Transmit_DMA>

		hBleModule.controlFlags.flag.packetToTransmit = DISABLE;
 8000956:	4a06      	ldr	r2, [pc, #24]	; (8000970 <main_UartTxTask+0x4c>)
 8000958:	7813      	ldrb	r3, [r2, #0]
 800095a:	f36f 0341 	bfc	r3, #1, #1
 800095e:	7013      	strb	r3, [r2, #0]

		hBleModule.txTimer = HAL_GetTick();
 8000960:	f000 fb5c 	bl	800101c <HAL_GetTick>
 8000964:	4603      	mov	r3, r0
 8000966:	4a02      	ldr	r2, [pc, #8]	; (8000970 <main_UartTxTask+0x4c>)
 8000968:	60d3      	str	r3, [r2, #12]
	}
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200020fc 	.word	0x200020fc
 8000974:	20002111 	.word	0x20002111
 8000978:	200001c4 	.word	0x200001c4

0800097c <main_UartRxTask>:
/**
 * @brief Module AT UART reception task
 *
 */
static void main_UartRxTask()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetReceived)
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <main_UartRxTask+0x60>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d024      	beq.n	80009d8 <main_UartRxTask+0x5c>
	{
		if(rybg211_rxPacketParser(hBleModule.rxBuffer, hBleModule.rxPacketSize))
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <main_UartRxTask+0x60>)
 8000990:	889b      	ldrh	r3, [r3, #4]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4619      	mov	r1, r3
 8000996:	4812      	ldr	r0, [pc, #72]	; (80009e0 <main_UartRxTask+0x64>)
 8000998:	f009 f866 	bl	8009a68 <rybg211_rxPacketParser>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d015      	beq.n	80009ce <main_UartRxTask+0x52>
		{
			hBridge.blePacketSize = (uint16_t)rybg211_rxDataRead(hBleModule.rxBuffer, hBridge.bleBuffer);
 80009a2:	4910      	ldr	r1, [pc, #64]	; (80009e4 <main_UartRxTask+0x68>)
 80009a4:	480e      	ldr	r0, [pc, #56]	; (80009e0 <main_UartRxTask+0x64>)
 80009a6:	f009 f909 	bl	8009bbc <rybg211_rxDataRead>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <main_UartRxTask+0x6c>)
 80009b0:	805a      	strh	r2, [r3, #2]

			if(CDC_UsbConnectionCheck())
 80009b2:	f008 fbe5 	bl	8009180 <CDC_UsbConnectionCheck>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d005      	beq.n	80009c8 <main_UartRxTask+0x4c>
			{
				hBridge.controlFlags.flag.bleToUsb = ENABLE;
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <main_UartRxTask+0x6c>)
 80009be:	7813      	ldrb	r3, [r2, #0]
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	7013      	strb	r3, [r2, #0]
 80009c6:	e002      	b.n	80009ce <main_UartRxTask+0x52>
			}
			else
			{
				main_bleCommandControl((uint8_t*) hBridge.bleBuffer);
 80009c8:	4806      	ldr	r0, [pc, #24]	; (80009e4 <main_UartRxTask+0x68>)
 80009ca:	f000 f881 	bl	8000ad0 <main_bleCommandControl>
			}

		}

		hBleModule.controlFlags.flag.packetReceived = DISABLE;
 80009ce:	4a03      	ldr	r2, [pc, #12]	; (80009dc <main_UartRxTask+0x60>)
 80009d0:	7813      	ldrb	r3, [r2, #0]
 80009d2:	f36f 0300 	bfc	r3, #0, #1
 80009d6:	7013      	strb	r3, [r2, #0]

	}
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200020fc 	.word	0x200020fc
 80009e0:	20002211 	.word	0x20002211
 80009e4:	200002d4 	.word	0x200002d4
 80009e8:	200002c8 	.word	0x200002c8

080009ec <main_UsbRxTask>:
 * @param 	cdcRxBuffer	:	Buffer will carry the data received over USB.
 *
 * @param 	packetSize	:	The size of the received packet.
 */
static void main_UsbRxTask(char* cdcRxBuffer, uint16_t packetSize)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
	if(hBleModule.ConnectedDevice)
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <main_UsbRxTask+0x44>)
 80009fa:	7d1b      	ldrb	r3, [r3, #20]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00e      	beq.n	8000a1e <main_UsbRxTask+0x32>
	{
		memcpy(hBridge.usbBuffer, cdcRxBuffer, packetSize);
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	461a      	mov	r2, r3
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <main_UsbRxTask+0x48>)
 8000a08:	f009 f966 	bl	8009cd8 <memcpy>

		hBridge.usbPacketSize = packetSize;
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <main_UsbRxTask+0x4c>)
 8000a0e:	887b      	ldrh	r3, [r7, #2]
 8000a10:	8093      	strh	r3, [r2, #4]

		hBridge.controlFlags.flag.usbToBle = ENABLE;
 8000a12:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <main_UsbRxTask+0x4c>)
 8000a14:	7813      	ldrb	r3, [r2, #0]
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	7013      	strb	r3, [r2, #0]
	}
	else
	{
		CDC_Transmit_FS(BLE_NO_CONNECTION_MESSAGE, strlen(BLE_NO_CONNECTION_MESSAGE));
	}
}
 8000a1c:	e003      	b.n	8000a26 <main_UsbRxTask+0x3a>
		CDC_Transmit_FS(BLE_NO_CONNECTION_MESSAGE, strlen(BLE_NO_CONNECTION_MESSAGE));
 8000a1e:	2112      	movs	r1, #18
 8000a20:	4806      	ldr	r0, [pc, #24]	; (8000a3c <main_UsbRxTask+0x50>)
 8000a22:	f008 fb59 	bl	80090d8 <CDC_Transmit_FS>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200020fc 	.word	0x200020fc
 8000a34:	200003d4 	.word	0x200003d4
 8000a38:	200002c8 	.word	0x200002c8
 8000a3c:	0800a5e8 	.word	0x0800a5e8

08000a40 <main_bridgeDataTransfare>:

static void main_bridgeDataTransfare()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	if(hBridge.controlFlags.flag.bleToUsb)
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <main_bridgeDataTransfare+0x78>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d016      	beq.n	8000a80 <main_bridgeDataTransfare+0x40>
	{
		hBridge.controlFlags.flag.bleToUsb = DISABLE;
 8000a52:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <main_bridgeDataTransfare+0x78>)
 8000a54:	7813      	ldrb	r3, [r2, #0]
 8000a56:	f36f 0300 	bfc	r3, #0, #1
 8000a5a:	7013      	strb	r3, [r2, #0]

		//Place feedline character at the end of the packet and increment the size by 1.
		hBridge.bleBuffer[hBridge.blePacketSize++] = '\n';
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <main_bridgeDataTransfare+0x78>)
 8000a5e:	885b      	ldrh	r3, [r3, #2]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	b291      	uxth	r1, r2
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <main_bridgeDataTransfare+0x78>)
 8000a66:	8051      	strh	r1, [r2, #2]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <main_bridgeDataTransfare+0x78>)
 8000a6c:	4413      	add	r3, r2
 8000a6e:	220a      	movs	r2, #10
 8000a70:	731a      	strb	r2, [r3, #12]

		CDC_Transmit_FS((uint8_t*) hBridge.bleBuffer, (uint16_t)hBridge.blePacketSize);
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <main_bridgeDataTransfare+0x78>)
 8000a74:	885b      	ldrh	r3, [r3, #2]
 8000a76:	4619      	mov	r1, r3
 8000a78:	4810      	ldr	r0, [pc, #64]	; (8000abc <main_bridgeDataTransfare+0x7c>)
 8000a7a:	f008 fb2d 	bl	80090d8 <CDC_Transmit_FS>

		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);

		hBridge.controlFlags.flag.usbToBle = DISABLE;
	}
}
 8000a7e:	e018      	b.n	8000ab2 <main_bridgeDataTransfare+0x72>
	else if(hBridge.controlFlags.flag.usbToBle)
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <main_bridgeDataTransfare+0x78>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d011      	beq.n	8000ab2 <main_bridgeDataTransfare+0x72>
		rybg211_txDataSend(hBridge.usbBuffer, hBridge.usbPacketSize);
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <main_bridgeDataTransfare+0x78>)
 8000a90:	889b      	ldrh	r3, [r3, #4]
 8000a92:	4619      	mov	r1, r3
 8000a94:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <main_bridgeDataTransfare+0x80>)
 8000a96:	f009 f8b5 	bl	8009c04 <rybg211_txDataSend>
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <main_bridgeDataTransfare+0x84>)
 8000a9c:	885b      	ldrh	r3, [r3, #2]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4909      	ldr	r1, [pc, #36]	; (8000ac8 <main_bridgeDataTransfare+0x88>)
 8000aa2:	480a      	ldr	r0, [pc, #40]	; (8000acc <main_bridgeDataTransfare+0x8c>)
 8000aa4:	f003 fc64 	bl	8004370 <HAL_UART_Transmit_DMA>
		hBridge.controlFlags.flag.usbToBle = DISABLE;
 8000aa8:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <main_bridgeDataTransfare+0x78>)
 8000aaa:	7813      	ldrb	r3, [r2, #0]
 8000aac:	f36f 0341 	bfc	r3, #1, #1
 8000ab0:	7013      	strb	r3, [r2, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200002c8 	.word	0x200002c8
 8000abc:	200002d4 	.word	0x200002d4
 8000ac0:	200003d4 	.word	0x200003d4
 8000ac4:	200020fc 	.word	0x200020fc
 8000ac8:	20002111 	.word	0x20002111
 8000acc:	200001c4 	.word	0x200001c4

08000ad0 <main_bleCommandControl>:


static void main_bleCommandControl(uint8_t* cmd)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	switch (cmd[0])
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	d82c      	bhi.n	8000b3a <main_bleCommandControl+0x6a>
 8000ae0:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <main_bleCommandControl+0x18>)
 8000ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae6:	bf00      	nop
 8000ae8:	08000af9 	.word	0x08000af9
 8000aec:	08000b1b 	.word	0x08000b1b
 8000af0:	08000b27 	.word	0x08000b27
 8000af4:	08000b31 	.word	0x08000b31
	{
		case 0:
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <main_bleCommandControl+0x74>)
 8000b00:	f001 f954 	bl	8001dac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2104      	movs	r1, #4
 8000b08:	480e      	ldr	r0, [pc, #56]	; (8000b44 <main_bleCommandControl+0x74>)
 8000b0a:	f001 f94f 	bl	8001dac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2102      	movs	r1, #2
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <main_bleCommandControl+0x74>)
 8000b14:	f001 f94a 	bl	8001dac <HAL_GPIO_WritePin>
			break;
 8000b18:	e010      	b.n	8000b3c <main_bleCommandControl+0x6c>
		case 1:
			HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 8000b1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1e:	4809      	ldr	r0, [pc, #36]	; (8000b44 <main_bleCommandControl+0x74>)
 8000b20:	f001 f95d 	bl	8001dde <HAL_GPIO_TogglePin>
			break;
 8000b24:	e00a      	b.n	8000b3c <main_bleCommandControl+0x6c>
		case 2:
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000b26:	2104      	movs	r1, #4
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <main_bleCommandControl+0x74>)
 8000b2a:	f001 f958 	bl	8001dde <HAL_GPIO_TogglePin>
			break;
 8000b2e:	e005      	b.n	8000b3c <main_bleCommandControl+0x6c>
		case 3:
			HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 8000b30:	2102      	movs	r1, #2
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <main_bleCommandControl+0x74>)
 8000b34:	f001 f953 	bl	8001dde <HAL_GPIO_TogglePin>
			break;
 8000b38:	e000      	b.n	8000b3c <main_bleCommandControl+0x6c>
		default:
			break;
 8000b3a:	bf00      	nop
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40020400 	.word	0x40020400

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10d      	bne.n	8000bd2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_TIM_PWM_MspInit+0x40>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <HAL_TIM_PWM_MspInit+0x40>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_TIM_PWM_MspInit+0x40>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40000400 	.word	0x40000400
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <HAL_TIM_MspPostInit+0x68>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d11d      	bne.n	8000c46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_TIM_MspPostInit+0x6c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_TIM_MspPostInit+0x6c>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_TIM_MspPostInit+0x6c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c26:	2301      	movs	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <HAL_TIM_MspPostInit+0x70>)
 8000c42:	f000 ff2f 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3720      	adds	r7, #32
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40000400 	.word	0x40000400
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020400 	.word	0x40020400

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a4c      	ldr	r2, [pc, #304]	; (8000dac <HAL_UART_MspInit+0x150>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	f040 8091 	bne.w	8000da2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <HAL_UART_MspInit+0x154>)
 8000c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c88:	4a49      	ldr	r2, [pc, #292]	; (8000db0 <HAL_UART_MspInit+0x154>)
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000c90:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <HAL_UART_MspInit+0x154>)
 8000c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c94:	f003 0310 	and.w	r3, r3, #16
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <HAL_UART_MspInit+0x154>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a42      	ldr	r2, [pc, #264]	; (8000db0 <HAL_UART_MspInit+0x154>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cac:	4b40      	ldr	r3, [pc, #256]	; (8000db0 <HAL_UART_MspInit+0x154>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cb8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4837      	ldr	r0, [pc, #220]	; (8000db4 <HAL_UART_MspInit+0x158>)
 8000cd6:	f000 fee5 	bl	8001aa4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000cda:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000cdc:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <HAL_UART_MspInit+0x160>)
 8000cde:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000ce0:	4b35      	ldr	r3, [pc, #212]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cee:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cfa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d08:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d1a:	4827      	ldr	r0, [pc, #156]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000d1c:	f000 fac0 	bl	80012a0 <HAL_DMA_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d26:	f7ff ff0f 	bl	8000b48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d30:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <HAL_UART_MspInit+0x15c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d38:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <HAL_UART_MspInit+0x168>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000d3c:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d42:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d46:	2240      	movs	r2, #64	; 0x40
 8000d48:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d56:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d76:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d78:	f000 fa92 	bl	80012a0 <HAL_DMA_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000d82:	f7ff fee1 	bl	8000b48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <HAL_UART_MspInit+0x164>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	2025      	movs	r0, #37	; 0x25
 8000d98:	f000 fa4b 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d9c:	2025      	movs	r0, #37	; 0x25
 8000d9e:	f000 fa64 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40011000 	.word	0x40011000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	20000208 	.word	0x20000208
 8000dbc:	40026440 	.word	0x40026440
 8000dc0:	20000268 	.word	0x20000268
 8000dc4:	400264b8 	.word	0x400264b8

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f8ee 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <USART1_IRQHandler+0x10>)
 8000e22:	f003 fb89 	bl	8004538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200001c4 	.word	0x200001c4

08000e30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <DMA2_Stream2_IRQHandler+0x10>)
 8000e36:	f000 fbcb 	bl	80015d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000208 	.word	0x20000208

08000e44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <OTG_FS_IRQHandler+0x10>)
 8000e4a:	f001 f932 	bl	80020b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200019d0 	.word	0x200019d0

08000e58 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <DMA2_Stream7_IRQHandler+0x10>)
 8000e5e:	f000 fbb7 	bl	80015d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000268 	.word	0x20000268

08000e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e74:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <_sbrk+0x5c>)
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <_sbrk+0x60>)
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <_sbrk+0x64>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <_sbrk+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d207      	bcs.n	8000eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e9c:	f008 fee2 	bl	8009c64 <__errno>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	e009      	b.n	8000ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <_sbrk+0x64>)
 8000ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20020000 	.word	0x20020000
 8000ecc:	00000400 	.word	0x00000400
 8000ed0:	200004d4 	.word	0x200004d4
 8000ed4:	20002328 	.word	0x20002328

08000ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ffd7 	bl	8000ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f008 fea1 	bl	8009c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fb31 	bl	8000594 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000f40:	0800a7f0 	.word	0x0800a7f0
  ldr r2, =_sbss
 8000f44:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000f48:	20002324 	.word	0x20002324

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f94f 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fde6 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f967 	bl	8001286 <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f92f 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	200004d8 	.word	0x200004d8

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200004d8 	.word	0x200004d8

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff ffee 	bl	800101c <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffde 	bl	800101c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff3e 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff31 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff feb6 	bl	800101c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e099      	b.n	80013f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0201 	bic.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012dc:	e00f      	b.n	80012fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012de:	f7ff fe9d 	bl	800101c <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d908      	bls.n	80012fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2220      	movs	r2, #32
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e078      	b.n	80013f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e8      	bne.n	80012de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_DMA_Init+0x158>)
 8001318:	4013      	ands	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800132a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	2b04      	cmp	r3, #4
 8001356:	d107      	bne.n	8001368 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4313      	orrs	r3, r2
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f023 0307 	bic.w	r3, r3, #7
 800137e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	4313      	orrs	r3, r2
 8001388:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	2b04      	cmp	r3, #4
 8001390:	d117      	bne.n	80013c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4313      	orrs	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00e      	beq.n	80013c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fb01 	bl	80019ac <DMA_CheckFifoParam>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013be:	2301      	movs	r3, #1
 80013c0:	e016      	b.n	80013f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fab8 	bl	8001940 <DMA_CalcBaseAndBitshift>
 80013d0:	4603      	mov	r3, r0
 80013d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	223f      	movs	r2, #63	; 0x3f
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	f010803f 	.word	0xf010803f

080013fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_DMA_Start_IT+0x26>
 800141e:	2302      	movs	r3, #2
 8001420:	e040      	b.n	80014a4 <HAL_DMA_Start_IT+0xa8>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d12f      	bne.n	8001496 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2202      	movs	r2, #2
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 fa4a 	bl	80018e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	223f      	movs	r2, #63	; 0x3f
 8001456:	409a      	lsls	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0216 	orr.w	r2, r2, #22
 800146a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	2b00      	cmp	r3, #0
 8001472:	d007      	beq.n	8001484 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0208 	orr.w	r2, r2, #8
 8001482:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e005      	b.n	80014a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800149e:	2302      	movs	r3, #2
 80014a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014ba:	f7ff fdaf 	bl	800101c <HAL_GetTick>
 80014be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d008      	beq.n	80014de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e052      	b.n	8001584 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0216 	bic.w	r2, r2, #22
 80014ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <HAL_DMA_Abort+0x62>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150a:	2b00      	cmp	r3, #0
 800150c:	d007      	beq.n	800151e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0208 	bic.w	r2, r2, #8
 800151c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0201 	bic.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800152e:	e013      	b.n	8001558 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001530:	f7ff fd74 	bl	800101c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b05      	cmp	r3, #5
 800153c:	d90c      	bls.n	8001558 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2203      	movs	r2, #3
 8001548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e015      	b.n	8001584 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1e4      	bne.n	8001530 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	223f      	movs	r2, #63	; 0x3f
 800156c:	409a      	lsls	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d004      	beq.n	80015aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00c      	b.n	80015c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2205      	movs	r2, #5
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0201 	bic.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015dc:	4b8e      	ldr	r3, [pc, #568]	; (8001818 <HAL_DMA_IRQHandler+0x248>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a8e      	ldr	r2, [pc, #568]	; (800181c <HAL_DMA_IRQHandler+0x24c>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0a9b      	lsrs	r3, r3, #10
 80015e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fa:	2208      	movs	r2, #8
 80015fc:	409a      	lsls	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01a      	beq.n	800163c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0204 	bic.w	r2, r2, #4
 8001622:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	2208      	movs	r2, #8
 800162a:	409a      	lsls	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	f043 0201 	orr.w	r2, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	2201      	movs	r2, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d012      	beq.n	8001672 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	2201      	movs	r2, #1
 8001660:	409a      	lsls	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166a:	f043 0202 	orr.w	r2, r3, #2
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	2204      	movs	r2, #4
 8001678:	409a      	lsls	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d012      	beq.n	80016a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001694:	2204      	movs	r2, #4
 8001696:	409a      	lsls	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a0:	f043 0204 	orr.w	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ac:	2210      	movs	r2, #16
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d043      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d03c      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ca:	2210      	movs	r2, #16
 80016cc:	409a      	lsls	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d018      	beq.n	8001712 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d108      	bne.n	8001700 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d024      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
 80016fe:	e01f      	b.n	8001740 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
 8001710:	e016      	b.n	8001740 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d107      	bne.n	8001730 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0208 	bic.w	r2, r2, #8
 800172e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	2220      	movs	r2, #32
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 808f 	beq.w	8001870 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 8087 	beq.w	8001870 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2220      	movs	r2, #32
 8001768:	409a      	lsls	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b05      	cmp	r3, #5
 8001778:	d136      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0216 	bic.w	r2, r2, #22
 8001788:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001798:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d103      	bne.n	80017aa <HAL_DMA_IRQHandler+0x1da>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0208 	bic.w	r2, r2, #8
 80017b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	223f      	movs	r2, #63	; 0x3f
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d07e      	beq.n	80018dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3
        }
        return;
 80017e6:	e079      	b.n	80018dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01d      	beq.n	8001832 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10d      	bne.n	8001820 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	2b00      	cmp	r3, #0
 800180a:	d031      	beq.n	8001870 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4798      	blx	r3
 8001814:	e02c      	b.n	8001870 <HAL_DMA_IRQHandler+0x2a0>
 8001816:	bf00      	nop
 8001818:	20000000 	.word	0x20000000
 800181c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	4798      	blx	r3
 8001830:	e01e      	b.n	8001870 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10f      	bne.n	8001860 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0210 	bic.w	r2, r2, #16
 800184e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	2b00      	cmp	r3, #0
 8001876:	d032      	beq.n	80018de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d022      	beq.n	80018ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2205      	movs	r2, #5
 8001888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	3301      	adds	r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d307      	bcc.n	80018b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f2      	bne.n	800189c <HAL_DMA_IRQHandler+0x2cc>
 80018b6:	e000      	b.n	80018ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
 80018da:	e000      	b.n	80018de <HAL_DMA_IRQHandler+0x30e>
        return;
 80018dc:	bf00      	nop
    }
  }
}
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001900:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b40      	cmp	r3, #64	; 0x40
 8001910:	d108      	bne.n	8001924 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001922:	e007      	b.n	8001934 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	60da      	str	r2, [r3, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3b10      	subs	r3, #16
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <DMA_CalcBaseAndBitshift+0x64>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <DMA_CalcBaseAndBitshift+0x68>)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d909      	bls.n	8001982 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	1d1a      	adds	r2, r3, #4
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	659a      	str	r2, [r3, #88]	; 0x58
 8001980:	e007      	b.n	8001992 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	aaaaaaab 	.word	0xaaaaaaab
 80019a8:	0800a6a4 	.word	0x0800a6a4

080019ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d11f      	bne.n	8001a06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d856      	bhi.n	8001a7a <DMA_CheckFifoParam+0xce>
 80019cc:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <DMA_CheckFifoParam+0x28>)
 80019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d2:	bf00      	nop
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	080019f7 	.word	0x080019f7
 80019dc:	080019e5 	.word	0x080019e5
 80019e0:	08001a7b 	.word	0x08001a7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d046      	beq.n	8001a7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f4:	e043      	b.n	8001a7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019fe:	d140      	bne.n	8001a82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a04:	e03d      	b.n	8001a82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a0e:	d121      	bne.n	8001a54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d837      	bhi.n	8001a86 <DMA_CheckFifoParam+0xda>
 8001a16:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <DMA_CheckFifoParam+0x70>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001a33 	.word	0x08001a33
 8001a24:	08001a2d 	.word	0x08001a2d
 8001a28:	08001a45 	.word	0x08001a45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a30:	e030      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d025      	beq.n	8001a8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a42:	e022      	b.n	8001a8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a4c:	d11f      	bne.n	8001a8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a52:	e01c      	b.n	8001a8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d903      	bls.n	8001a62 <DMA_CheckFifoParam+0xb6>
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d003      	beq.n	8001a68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a60:	e018      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
      break;
 8001a66:	e015      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00e      	beq.n	8001a92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
      break;
 8001a78:	e00b      	b.n	8001a92 <DMA_CheckFifoParam+0xe6>
      break;
 8001a7a:	bf00      	nop
 8001a7c:	e00a      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7e:	bf00      	nop
 8001a80:	e008      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;
 8001a82:	bf00      	nop
 8001a84:	e006      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;
 8001a86:	bf00      	nop
 8001a88:	e004      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;
 8001a8a:	bf00      	nop
 8001a8c:	e002      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a8e:	bf00      	nop
 8001a90:	e000      	b.n	8001a94 <DMA_CheckFifoParam+0xe8>
      break;
 8001a92:	bf00      	nop
    }
  } 
  
  return status; 
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e159      	b.n	8001d74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f040 8148 	bne.w	8001d6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d005      	beq.n	8001af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d130      	bne.n	8001b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 0201 	and.w	r2, r3, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d017      	beq.n	8001b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d123      	bne.n	8001be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80a2 	beq.w	8001d6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <HAL_GPIO_Init+0x2f0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x202>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a48      	ldr	r2, [pc, #288]	; (8001d98 <HAL_GPIO_Init+0x2f4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x1fe>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <HAL_GPIO_Init+0x2f8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x1fa>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a46      	ldr	r2, [pc, #280]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x1f6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a45      	ldr	r2, [pc, #276]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x1f2>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c96:	2307      	movs	r3, #7
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb8:	4935      	ldr	r1, [pc, #212]	; (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cea:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d14:	4a24      	ldr	r2, [pc, #144]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3e:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d68:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f67f aea2 	bls.w	8001ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40013c00 	.word	0x40013c00

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001df0:	887a      	ldrh	r2, [r7, #2]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4013      	ands	r3, r2
 8001df6:	041a      	lsls	r2, r3, #16
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	400b      	ands	r3, r1
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	619a      	str	r2, [r3, #24]
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e14:	b08f      	sub	sp, #60	; 0x3c
 8001e16:	af0a      	add	r7, sp, #40	; 0x28
 8001e18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e10f      	b.n	8002044 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f007 fabe 	bl	80093c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2203      	movs	r2, #3
 8001e48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 fd65 	bl	8005932 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	687e      	ldr	r6, [r7, #4]
 8001e70:	466d      	mov	r5, sp
 8001e72:	f106 0410 	add.w	r4, r6, #16
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e86:	1d33      	adds	r3, r6, #4
 8001e88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e8a:	6838      	ldr	r0, [r7, #0]
 8001e8c:	f003 fc3c 	bl	8005708 <USB_CoreInit>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0d0      	b.n	8002044 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 fd53 	bl	8005954 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e04a      	b.n	8001f4a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	333d      	adds	r3, #61	; 0x3d
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	333c      	adds	r3, #60	; 0x3c
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	b298      	uxth	r0, r3
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	3344      	adds	r3, #68	; 0x44
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	3340      	adds	r3, #64	; 0x40
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	3348      	adds	r3, #72	; 0x48
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	334c      	adds	r3, #76	; 0x4c
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3354      	adds	r3, #84	; 0x54
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	3301      	adds	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d3af      	bcc.n	8001eb4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e044      	b.n	8001fe4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d3b5      	bcc.n	8001f5a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	687e      	ldr	r6, [r7, #4]
 8001ff6:	466d      	mov	r5, sp
 8001ff8:	f106 0410 	add.w	r4, r6, #16
 8001ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002004:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002008:	e885 0003 	stmia.w	r5, {r0, r1}
 800200c:	1d33      	adds	r3, r6, #4
 800200e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002010:	6838      	ldr	r0, [r7, #0]
 8002012:	f003 fceb 	bl	80059ec <USB_DevInit>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e00d      	b.n	8002044 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f004 fe3a 	bl	8006cb6 <USB_DevDisconnect>

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800204c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_PCD_Start+0x1c>
 8002064:	2302      	movs	r3, #2
 8002066:	e020      	b.n	80020aa <HAL_PCD_Start+0x5e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	2b01      	cmp	r3, #1
 8002076:	d109      	bne.n	800208c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800207c:	2b01      	cmp	r3, #1
 800207e:	d005      	beq.n	800208c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f003 fc3d 	bl	8005910 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f004 fdea 	bl	8006c74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020b2:	b590      	push	{r4, r7, lr}
 80020b4:	b08d      	sub	sp, #52	; 0x34
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 fea8 	bl	8006e1e <USB_GetMode>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f040 848a 	bne.w	80029ea <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 fe0c 	bl	8006cf8 <USB_ReadInterrupts>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8480 	beq.w	80029e8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f004 fdf9 	bl	8006cf8 <USB_ReadInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b02      	cmp	r3, #2
 800210e:	d107      	bne.n	8002120 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f002 0202 	and.w	r2, r2, #2
 800211e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f004 fde7 	bl	8006cf8 <USB_ReadInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b10      	cmp	r3, #16
 8002132:	d161      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0210 	bic.w	r2, r2, #16
 8002142:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f003 020f 	and.w	r2, r3, #15
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	0c5b      	lsrs	r3, r3, #17
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	2b02      	cmp	r3, #2
 800216e:	d124      	bne.n	80021ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d035      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800218a:	b29b      	uxth	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	6a38      	ldr	r0, [r7, #32]
 8002190:	f004 fc1e 	bl	80069d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a0:	441a      	add	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b2:	441a      	add	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	621a      	str	r2, [r3, #32]
 80021b8:	e016      	b.n	80021e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	0c5b      	lsrs	r3, r3, #17
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d110      	bne.n	80021e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021cc:	2208      	movs	r2, #8
 80021ce:	4619      	mov	r1, r3
 80021d0:	6a38      	ldr	r0, [r7, #32]
 80021d2:	f004 fbfd 	bl	80069d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	6a1a      	ldr	r2, [r3, #32]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e2:	441a      	add	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0210 	orr.w	r2, r2, #16
 80021f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 fd7b 	bl	8006cf8 <USB_ReadInterrupts>
 8002202:	4603      	mov	r3, r0
 8002204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002208:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800220c:	f040 80a7 	bne.w	800235e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f004 fd80 	bl	8006d1e <USB_ReadDevAllOutEpInterrupt>
 800221e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002220:	e099      	b.n	8002356 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 808e 	beq.w	800234a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f004 fda4 	bl	8006d86 <USB_ReadDevOutEPInterrupt>
 800223e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002256:	461a      	mov	r2, r3
 8002258:	2301      	movs	r3, #1
 800225a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800225c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fec2 	bl	8002fe8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00c      	beq.n	8002288 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227a:	461a      	mov	r2, r3
 800227c:	2308      	movs	r3, #8
 800227e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 ff98 	bl	80031b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229e:	461a      	mov	r2, r3
 80022a0:	2310      	movs	r3, #16
 80022a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d030      	beq.n	8002310 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b6:	2b80      	cmp	r3, #128	; 0x80
 80022b8:	d109      	bne.n	80022ce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022cc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	78db      	ldrb	r3, [r3, #3]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d108      	bne.n	80022fe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2200      	movs	r2, #0
 80022f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f007 f95d 	bl	80095b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	4413      	add	r3, r2
 8002306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230a:	461a      	mov	r2, r3
 800230c:	2302      	movs	r3, #2
 800230e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	4413      	add	r3, r2
 8002322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002326:	461a      	mov	r2, r3
 8002328:	2320      	movs	r3, #32
 800232a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002342:	461a      	mov	r2, r3
 8002344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002348:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	3301      	adds	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	085b      	lsrs	r3, r3, #1
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	f47f af62 	bne.w	8002222 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f004 fcc8 	bl	8006cf8 <USB_ReadInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002372:	f040 80db 	bne.w	800252c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f004 fce9 	bl	8006d52 <USB_ReadDevAllInEpInterrupt>
 8002380:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002386:	e0cd      	b.n	8002524 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80c2 	beq.w	8002518 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 fd0f 	bl	8006dc2 <USB_ReadDevInEPInterrupt>
 80023a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d057      	beq.n	8002460 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	2201      	movs	r2, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69f9      	ldr	r1, [r7, #28]
 80023cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023d0:	4013      	ands	r3, r2
 80023d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e0:	461a      	mov	r2, r3
 80023e2:	2301      	movs	r3, #1
 80023e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d132      	bne.n	8002454 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	334c      	adds	r3, #76	; 0x4c
 80023fe:	6819      	ldr	r1, [r3, #0]
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4403      	add	r3, r0
 800240e:	3348      	adds	r3, #72	; 0x48
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4419      	add	r1, r3
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4403      	add	r3, r0
 8002422:	334c      	adds	r3, #76	; 0x4c
 8002424:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	2b00      	cmp	r3, #0
 800242a:	d113      	bne.n	8002454 <HAL_PCD_IRQHandler+0x3a2>
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3354      	adds	r3, #84	; 0x54
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d108      	bne.n	8002454 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800244c:	461a      	mov	r2, r3
 800244e:	2101      	movs	r1, #1
 8002450:	f004 fd16 	bl	8006e80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	b2db      	uxtb	r3, r3
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f007 f831 	bl	80094c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	4413      	add	r3, r2
 8002472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002476:	461a      	mov	r2, r3
 8002478:	2308      	movs	r3, #8
 800247a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002492:	461a      	mov	r2, r3
 8002494:	2310      	movs	r3, #16
 8002496:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ae:	461a      	mov	r2, r3
 80024b0:	2340      	movs	r3, #64	; 0x40
 80024b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d023      	beq.n	8002506 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024c0:	6a38      	ldr	r0, [r7, #32]
 80024c2:	f003 fbf7 	bl	8005cb4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	3338      	adds	r3, #56	; 0x38
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	3304      	adds	r3, #4
 80024d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	78db      	ldrb	r3, [r3, #3]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2200      	movs	r2, #0
 80024e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f007 f874 	bl	80095dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002500:	461a      	mov	r2, r3
 8002502:	2302      	movs	r3, #2
 8002504:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fcdb 	bl	8002ece <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	3301      	adds	r3, #1
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	085b      	lsrs	r3, r3, #1
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002526:	2b00      	cmp	r3, #0
 8002528:	f47f af2e 	bne.w	8002388 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f004 fbe1 	bl	8006cf8 <USB_ReadInterrupts>
 8002536:	4603      	mov	r3, r0
 8002538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800253c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002540:	d122      	bne.n	8002588 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800255c:	2b01      	cmp	r3, #1
 800255e:	d108      	bne.n	8002572 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002568:	2100      	movs	r1, #0
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fec2 	bl	80032f4 <HAL_PCDEx_LPM_Callback>
 8002570:	e002      	b.n	8002578 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f007 f812 	bl	800959c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002586:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f004 fbb3 	bl	8006cf8 <USB_ReadInterrupts>
 8002592:	4603      	mov	r3, r0
 8002594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800259c:	d112      	bne.n	80025c4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d102      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f006 ffce 	bl	8009550 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 fb95 	bl	8006cf8 <USB_ReadInterrupts>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d8:	f040 80b7 	bne.w	800274a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2110      	movs	r1, #16
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 fb5c 	bl	8005cb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002600:	e046      	b.n	8002690 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	4413      	add	r3, r2
 800260a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800260e:	461a      	mov	r2, r3
 8002610:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002614:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002626:	0151      	lsls	r1, r2, #5
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	440a      	add	r2, r1
 800262c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002630:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002634:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002642:	461a      	mov	r2, r3
 8002644:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002648:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265a:	0151      	lsls	r1, r2, #5
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	440a      	add	r2, r1
 8002660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002664:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002668:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267a:	0151      	lsls	r1, r2, #5
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	440a      	add	r2, r1
 8002680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002684:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002688:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	3301      	adds	r3, #1
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002696:	429a      	cmp	r2, r3
 8002698:	d3b3      	bcc.n	8002602 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c6:	f043 030b 	orr.w	r3, r3, #11
 80026ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026dc:	f043 030b 	orr.w	r3, r3, #11
 80026e0:	6453      	str	r3, [r2, #68]	; 0x44
 80026e2:	e015      	b.n	8002710 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026f6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800270a:	f043 030b 	orr.w	r3, r3, #11
 800270e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002722:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002734:	461a      	mov	r2, r3
 8002736:	f004 fba3 	bl	8006e80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002748:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f004 fad2 	bl	8006cf8 <USB_ReadInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275e:	d124      	bne.n	80027aa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f004 fb68 	bl	8006e3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fb1d 	bl	8005dae <USB_GetDevSpeed>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681c      	ldr	r4, [r3, #0]
 8002780:	f001 f9e8 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8002784:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800278a:	b2db      	uxtb	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	4620      	mov	r0, r4
 8002790:	f003 f81c 	bl	80057cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f006 febc 	bl	8009512 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f004 faa2 	bl	8006cf8 <USB_ReadInterrupts>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d10a      	bne.n	80027d4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f006 fe99 	bl	80094f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f002 0208 	and.w	r2, r2, #8
 80027d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 fa8d 	bl	8006cf8 <USB_ReadInterrupts>
 80027de:	4603      	mov	r3, r0
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d122      	bne.n	800282e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027f4:	2301      	movs	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
 80027f8:	e014      	b.n	8002824 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	b2db      	uxtb	r3, r3
 8002816:	4619      	mov	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fb27 	bl	8002e6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	3301      	adds	r3, #1
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282a:	429a      	cmp	r2, r3
 800282c:	d3e5      	bcc.n	80027fa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f004 fa60 	bl	8006cf8 <USB_ReadInterrupts>
 8002838:	4603      	mov	r3, r0
 800283a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002842:	d13b      	bne.n	80028bc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002844:	2301      	movs	r3, #1
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
 8002848:	e02b      	b.n	80028a2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3340      	adds	r3, #64	; 0x40
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d115      	bne.n	800289c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002870:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002872:	2b00      	cmp	r3, #0
 8002874:	da12      	bge.n	800289c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	333f      	adds	r3, #63	; 0x3f
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002892:	b2db      	uxtb	r3, r3
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fae8 	bl	8002e6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	3301      	adds	r3, #1
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d3ce      	bcc.n	800284a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f004 fa19 	bl	8006cf8 <USB_ReadInterrupts>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028d0:	d155      	bne.n	800297e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028d2:	2301      	movs	r3, #1
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	e045      	b.n	8002964 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d12e      	bne.n	800295e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002900:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002902:	2b00      	cmp	r3, #0
 8002904:	da2b      	bge.n	800295e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002912:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002916:	429a      	cmp	r2, r3
 8002918:	d121      	bne.n	800295e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800295a:	6053      	str	r3, [r2, #4]
            break;
 800295c:	e007      	b.n	800296e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	3301      	adds	r3, #1
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296a:	429a      	cmp	r2, r3
 800296c:	d3b4      	bcc.n	80028d8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800297c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f004 f9b8 	bl	8006cf8 <USB_ReadInterrupts>
 8002988:	4603      	mov	r3, r0
 800298a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800298e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002992:	d10a      	bne.n	80029aa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f006 fe33 	bl	8009600 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f004 f9a2 	bl	8006cf8 <USB_ReadInterrupts>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d115      	bne.n	80029ea <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f006 fe23 	bl	800961c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	e000      	b.n	80029ea <HAL_PCD_IRQHandler+0x938>
      return;
 80029e8:	bf00      	nop
    }
  }
}
 80029ea:	3734      	adds	r7, #52	; 0x34
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd90      	pop	{r4, r7, pc}

080029f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_PCD_SetAddress+0x1a>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e013      	b.n	8002a32 <HAL_PCD_SetAddress+0x42>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 f900 	bl	8006c28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	4608      	mov	r0, r1
 8002a44:	4611      	mov	r1, r2
 8002a46:	461a      	mov	r2, r3
 8002a48:	4603      	mov	r3, r0
 8002a4a:	70fb      	strb	r3, [r7, #3]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	803b      	strh	r3, [r7, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	da0f      	bge.n	8002a80 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	f003 020f 	and.w	r2, r3, #15
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	3338      	adds	r3, #56	; 0x38
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	3304      	adds	r3, #4
 8002a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	705a      	strb	r2, [r3, #1]
 8002a7e:	e00f      	b.n	8002aa0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 020f 	and.w	r2, r3, #15
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	3304      	adds	r3, #4
 8002a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aac:	883a      	ldrh	r2, [r7, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	78ba      	ldrb	r2, [r7, #2]
 8002ab6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002aca:	78bb      	ldrb	r3, [r7, #2]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d102      	bne.n	8002ad6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_PCD_EP_Open+0xaa>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e00e      	b.n	8002b02 <HAL_PCD_EP_Open+0xc8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68f9      	ldr	r1, [r7, #12]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 f980 	bl	8005df8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b00:	7afb      	ldrb	r3, [r7, #11]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	da0f      	bge.n	8002b3e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	f003 020f 	and.w	r2, r3, #15
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	3338      	adds	r3, #56	; 0x38
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	3304      	adds	r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	705a      	strb	r2, [r3, #1]
 8002b3c:	e00f      	b.n	8002b5e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	3304      	adds	r3, #4
 8002b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_PCD_EP_Close+0x6e>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e00e      	b.n	8002b96 <HAL_PCD_EP_Close+0x8c>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68f9      	ldr	r1, [r7, #12]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 f9be 	bl	8005f08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	460b      	mov	r3, r1
 8002bac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	f003 020f 	and.w	r2, r3, #15
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002be0:	7afb      	ldrb	r3, [r7, #11]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d102      	bne.n	8002bfa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bfa:	7afb      	ldrb	r3, [r7, #11]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6979      	ldr	r1, [r7, #20]
 8002c12:	f003 fc9d 	bl	8006550 <USB_EP0StartXfer>
 8002c16:	e008      	b.n	8002c2a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	6979      	ldr	r1, [r7, #20]
 8002c26:	f003 fa4b 	bl	80060c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	f003 020f 	and.w	r2, r3, #15
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	460b      	mov	r3, r1
 8002c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c74:	7afb      	ldrb	r3, [r7, #11]
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	3338      	adds	r3, #56	; 0x38
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	3304      	adds	r3, #4
 8002c8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca4:	7afb      	ldrb	r3, [r7, #11]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d102      	bne.n	8002cbe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cbe:	7afb      	ldrb	r3, [r7, #11]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d109      	bne.n	8002cdc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	6979      	ldr	r1, [r7, #20]
 8002cd6:	f003 fc3b 	bl	8006550 <USB_EP0StartXfer>
 8002cda:	e008      	b.n	8002cee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6979      	ldr	r1, [r7, #20]
 8002cea:	f003 f9e9 	bl	80060c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	f003 020f 	and.w	r2, r3, #15
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d901      	bls.n	8002d16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e050      	b.n	8002db8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da0f      	bge.n	8002d3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	3338      	adds	r3, #56	; 0x38
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	3304      	adds	r3, #4
 8002d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	705a      	strb	r2, [r3, #1]
 8002d3c:	e00d      	b.n	8002d5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_PCD_EP_SetStall+0x82>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e01e      	b.n	8002db8 <HAL_PCD_EP_SetStall+0xc0>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68f9      	ldr	r1, [r7, #12]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fe79 	bl	8006a80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	b2d9      	uxtb	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002da8:	461a      	mov	r2, r3
 8002daa:	f004 f869 	bl	8006e80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f003 020f 	and.w	r2, r3, #15
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d901      	bls.n	8002dde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e042      	b.n	8002e64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	da0f      	bge.n	8002e06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	f003 020f 	and.w	r2, r3, #15
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	3338      	adds	r3, #56	; 0x38
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	705a      	strb	r2, [r3, #1]
 8002e04:	e00f      	b.n	8002e26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 020f 	and.w	r2, r3, #15
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_PCD_EP_ClrStall+0x86>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e00e      	b.n	8002e64 <HAL_PCD_EP_ClrStall+0xa4>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68f9      	ldr	r1, [r7, #12]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f003 fe81 	bl	8006b5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da0c      	bge.n	8002e9a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	3338      	adds	r3, #56	; 0x38
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	3304      	adds	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	e00c      	b.n	8002eb4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	f003 020f 	and.w	r2, r3, #15
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4413      	add	r3, r2
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68f9      	ldr	r1, [r7, #12]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 fca0 	bl	8006800 <USB_EPStopXfer>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ec4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b08a      	sub	sp, #40	; 0x28
 8002ed2:	af02      	add	r7, sp, #8
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	3338      	adds	r3, #56	; 0x38
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1a      	ldr	r2, [r3, #32]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d901      	bls.n	8002f06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06c      	b.n	8002fe0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d902      	bls.n	8002f22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3303      	adds	r3, #3
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f2a:	e02b      	b.n	8002f84 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d902      	bls.n	8002f48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	3303      	adds	r3, #3
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6919      	ldr	r1, [r3, #16]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4603      	mov	r3, r0
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f003 fcf4 	bl	8006954 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	441a      	add	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a1a      	ldr	r2, [r3, #32]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	441a      	add	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d809      	bhi.n	8002fae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1a      	ldr	r2, [r3, #32]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d203      	bcs.n	8002fae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1be      	bne.n	8002f2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d811      	bhi.n	8002fde <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	6939      	ldr	r1, [r7, #16]
 8002fd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fda:	4013      	ands	r3, r2
 8002fdc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	333c      	adds	r3, #60	; 0x3c
 8003000:	3304      	adds	r3, #4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d17b      	bne.n	8003116 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	4a61      	ldr	r2, [pc, #388]	; (80031b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	f240 80b9 	bls.w	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80b3 	beq.w	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304a:	461a      	mov	r2, r3
 800304c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003050:	6093      	str	r3, [r2, #8]
 8003052:	e0a7      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306a:	461a      	mov	r2, r3
 800306c:	2320      	movs	r3, #32
 800306e:	6093      	str	r3, [r2, #8]
 8003070:	e098      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 8093 	bne.w	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	4a4b      	ldr	r2, [pc, #300]	; (80031b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d90f      	bls.n	80030a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309c:	461a      	mov	r2, r3
 800309e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a2:	6093      	str	r3, [r2, #8]
 80030a4:	e07e      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	3304      	adds	r3, #4
 80030ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	0159      	lsls	r1, r3, #5
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	440b      	add	r3, r1
 80030c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d114      	bne.n	8003108 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030f0:	461a      	mov	r2, r3
 80030f2:	2101      	movs	r1, #1
 80030f4:	f003 fec4 	bl	8006e80 <USB_EP0_OutStart>
 80030f8:	e006      	b.n	8003108 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	441a      	add	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f006 f9bc 	bl	800948c <HAL_PCD_DataOutStageCallback>
 8003114:	e046      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	4a26      	ldr	r2, [pc, #152]	; (80031b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d124      	bne.n	8003168 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	4413      	add	r3, r2
 8003130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003134:	461a      	mov	r2, r3
 8003136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800313a:	6093      	str	r3, [r2, #8]
 800313c:	e032      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003154:	461a      	mov	r2, r3
 8003156:	2320      	movs	r3, #32
 8003158:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	4619      	mov	r1, r3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f006 f993 	bl	800948c <HAL_PCD_DataOutStageCallback>
 8003166:	e01d      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d114      	bne.n	8003198 <PCD_EP_OutXfrComplete_int+0x1b0>
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003190:	461a      	mov	r2, r3
 8003192:	2100      	movs	r1, #0
 8003194:	f003 fe74 	bl	8006e80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f006 f974 	bl	800948c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	4f54300a 	.word	0x4f54300a
 80031b4:	4f54310a 	.word	0x4f54310a

080031b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	333c      	adds	r3, #60	; 0x3c
 80031d0:	3304      	adds	r3, #4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a15      	ldr	r2, [pc, #84]	; (8003240 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d90e      	bls.n	800320c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d009      	beq.n	800320c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003204:	461a      	mov	r2, r3
 8003206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f006 f92b 	bl	8009468 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <PCD_EP_OutSetupPacket_int+0x88>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d90c      	bls.n	8003234 <PCD_EP_OutSetupPacket_int+0x7c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d108      	bne.n	8003234 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800322c:	461a      	mov	r2, r3
 800322e:	2101      	movs	r1, #1
 8003230:	f003 fe26 	bl	8006e80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	4f54300a 	.word	0x4f54300a

08003244 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	70fb      	strb	r3, [r7, #3]
 8003250:	4613      	mov	r3, r2
 8003252:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003262:	883b      	ldrh	r3, [r7, #0]
 8003264:	0419      	lsls	r1, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	430a      	orrs	r2, r1
 800326e:	629a      	str	r2, [r3, #40]	; 0x28
 8003270:	e028      	b.n	80032c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	0c1b      	lsrs	r3, r3, #16
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	4413      	add	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e00d      	b.n	80032a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	3340      	adds	r3, #64	; 0x40
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4413      	add	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	3301      	adds	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d3ec      	bcc.n	8003286 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032ac:	883b      	ldrh	r3, [r7, #0]
 80032ae:	0418      	lsls	r0, r3, #16
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	4302      	orrs	r2, r0
 80032bc:	3340      	adds	r3, #64	; 0x40
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e267      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d075      	beq.n	8003416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332a:	4b88      	ldr	r3, [pc, #544]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b04      	cmp	r3, #4
 8003334:	d00c      	beq.n	8003350 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003336:	4b85      	ldr	r3, [pc, #532]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333e:	2b08      	cmp	r3, #8
 8003340:	d112      	bne.n	8003368 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003342:	4b82      	ldr	r3, [pc, #520]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334e:	d10b      	bne.n	8003368 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	4b7e      	ldr	r3, [pc, #504]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d05b      	beq.n	8003414 <HAL_RCC_OscConfig+0x108>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d157      	bne.n	8003414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e242      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d106      	bne.n	8003380 <HAL_RCC_OscConfig+0x74>
 8003372:	4b76      	ldr	r3, [pc, #472]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a75      	ldr	r2, [pc, #468]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e01d      	b.n	80033bc <HAL_RCC_OscConfig+0xb0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x98>
 800338a:	4b70      	ldr	r3, [pc, #448]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a6f      	ldr	r2, [pc, #444]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b6d      	ldr	r3, [pc, #436]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6c      	ldr	r2, [pc, #432]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0xb0>
 80033a4:	4b69      	ldr	r3, [pc, #420]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a68      	ldr	r2, [pc, #416]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b66      	ldr	r3, [pc, #408]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a65      	ldr	r2, [pc, #404]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d013      	beq.n	80033ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fd fe2a 	bl	800101c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fd fe26 	bl	800101c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e207      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b5b      	ldr	r3, [pc, #364]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0xc0>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fe16 	bl	800101c <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fd fe12 	bl	800101c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e1f3      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	4b51      	ldr	r3, [pc, #324]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0xe8>
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d063      	beq.n	80034ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003422:	4b4a      	ldr	r3, [pc, #296]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003436:	2b08      	cmp	r3, #8
 8003438:	d11c      	bne.n	8003474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b44      	ldr	r3, [pc, #272]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d116      	bne.n	8003474 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_RCC_OscConfig+0x152>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e1c7      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4937      	ldr	r1, [pc, #220]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003472:	e03a      	b.n	80034ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800347c:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCC_OscConfig+0x244>)
 800347e:	2201      	movs	r2, #1
 8003480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fd fdcb 	bl	800101c <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348a:	f7fd fdc7 	bl	800101c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e1a8      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	4b2b      	ldr	r3, [pc, #172]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4925      	ldr	r1, [pc, #148]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
 80034bc:	e015      	b.n	80034ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCC_OscConfig+0x244>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd fdaa 	bl	800101c <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034cc:	f7fd fda6 	bl	800101c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e187      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d036      	beq.n	8003564 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <HAL_RCC_OscConfig+0x248>)
 8003500:	2201      	movs	r2, #1
 8003502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fd fd8a 	bl	800101c <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350c:	f7fd fd86 	bl	800101c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e167      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x200>
 800352a:	e01b      	b.n	8003564 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_OscConfig+0x248>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003532:	f7fd fd73 	bl	800101c <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003538:	e00e      	b.n	8003558 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353a:	f7fd fd6f 	bl	800101c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d907      	bls.n	8003558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e150      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
 800354c:	40023800 	.word	0x40023800
 8003550:	42470000 	.word	0x42470000
 8003554:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b88      	ldr	r3, [pc, #544]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ea      	bne.n	800353a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8097 	beq.w	80036a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4b81      	ldr	r3, [pc, #516]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	4b7d      	ldr	r3, [pc, #500]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4a7c      	ldr	r2, [pc, #496]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	6413      	str	r3, [r2, #64]	; 0x40
 8003592:	4b7a      	ldr	r3, [pc, #488]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b77      	ldr	r3, [pc, #476]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b74      	ldr	r3, [pc, #464]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a73      	ldr	r2, [pc, #460]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fd fd2f 	bl	800101c <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fd fd2b 	bl	800101c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e10c      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x2ea>
 80035e8:	4b64      	ldr	r3, [pc, #400]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a63      	ldr	r2, [pc, #396]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	e01c      	b.n	8003630 <HAL_RCC_OscConfig+0x324>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x30c>
 80035fe:	4b5f      	ldr	r3, [pc, #380]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a5e      	ldr	r2, [pc, #376]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003604:	f043 0304 	orr.w	r3, r3, #4
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	4b5c      	ldr	r3, [pc, #368]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a5b      	ldr	r2, [pc, #364]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0x324>
 8003618:	4b58      	ldr	r3, [pc, #352]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a57      	ldr	r2, [pc, #348]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	4b55      	ldr	r3, [pc, #340]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a54      	ldr	r2, [pc, #336]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d015      	beq.n	8003664 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fd fcf0 	bl	800101c <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fd fcec 	bl	800101c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0cb      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	4b49      	ldr	r3, [pc, #292]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ee      	beq.n	8003640 <HAL_RCC_OscConfig+0x334>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003664:	f7fd fcda 	bl	800101c <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fd fcd6 	bl	800101c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0b5      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003682:	4b3e      	ldr	r3, [pc, #248]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1ee      	bne.n	800366c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003694:	4b39      	ldr	r3, [pc, #228]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4a38      	ldr	r2, [pc, #224]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800369a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80a1 	beq.w	80037ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036aa:	4b34      	ldr	r3, [pc, #208]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d05c      	beq.n	8003770 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d141      	bne.n	8003742 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	4b31      	ldr	r3, [pc, #196]	; (8003784 <HAL_RCC_OscConfig+0x478>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fd fcaa 	bl	800101c <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fd fca6 	bl	800101c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e087      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	4b27      	ldr	r3, [pc, #156]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	3b01      	subs	r3, #1
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	491b      	ldr	r1, [pc, #108]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x478>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fd fc7f 	bl	800101c <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003722:	f7fd fc7b 	bl	800101c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e05c      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x416>
 8003740:	e054      	b.n	80037ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_RCC_OscConfig+0x478>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fd fc68 	bl	800101c <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003750:	f7fd fc64 	bl	800101c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e045      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x444>
 800376e:	e03d      	b.n	80037ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d107      	bne.n	8003788 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e038      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
 800377c:	40023800 	.word	0x40023800
 8003780:	40007000 	.word	0x40007000
 8003784:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_RCC_OscConfig+0x4ec>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d028      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d121      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d11a      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d111      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	3b01      	subs	r3, #1
 80037d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800

080037fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0cc      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b68      	ldr	r3, [pc, #416]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d90c      	bls.n	8003838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b65      	ldr	r3, [pc, #404]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b63      	ldr	r3, [pc, #396]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0b8      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003850:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800385a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003868:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a52      	ldr	r2, [pc, #328]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	494d      	ldr	r1, [pc, #308]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d044      	beq.n	800391c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b47      	ldr	r3, [pc, #284]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d119      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e07f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d003      	beq.n	80038ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e06f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	4b3b      	ldr	r3, [pc, #236]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e067      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038da:	4b37      	ldr	r3, [pc, #220]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f023 0203 	bic.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4934      	ldr	r1, [pc, #208]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ec:	f7fd fb96 	bl	800101c <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	e00a      	b.n	800390a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f4:	f7fd fb92 	bl	800101c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e04f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 020c 	and.w	r2, r3, #12
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d1eb      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d20c      	bcs.n	8003944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e032      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003950:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4916      	ldr	r1, [pc, #88]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396e:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	490e      	ldr	r1, [pc, #56]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003982:	f000 f821 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8003986:	4602      	mov	r2, r0
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	490a      	ldr	r1, [pc, #40]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	5ccb      	ldrb	r3, [r1, r3]
 8003996:	fa22 f303 	lsr.w	r3, r2, r3
 800399a:	4a09      	ldr	r2, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCC_ClockConfig+0x1c8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd faf6 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40023c00 	.word	0x40023c00
 80039b8:	40023800 	.word	0x40023800
 80039bc:	0800a68c 	.word	0x0800a68c
 80039c0:	20000000 	.word	0x20000000
 80039c4:	20000004 	.word	0x20000004

080039c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039cc:	b090      	sub	sp, #64	; 0x40
 80039ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
 80039d4:	2300      	movs	r3, #0
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d8:	2300      	movs	r3, #0
 80039da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039e0:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d00d      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x40>
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	f200 80a1 	bhi.w	8003b34 <HAL_RCC_GetSysClockFreq+0x16c>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x34>
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d003      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80039fa:	e09b      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039fc:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x184>)
 80039fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a00:	e09b      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a02:	4b53      	ldr	r3, [pc, #332]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a06:	e098      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a08:	4b4f      	ldr	r3, [pc, #316]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a12:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d028      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	099b      	lsrs	r3, r3, #6
 8003a24:	2200      	movs	r2, #0
 8003a26:	623b      	str	r3, [r7, #32]
 8003a28:	627a      	str	r2, [r7, #36]	; 0x24
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a30:	2100      	movs	r1, #0
 8003a32:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a34:	fb03 f201 	mul.w	r2, r3, r1
 8003a38:	2300      	movs	r3, #0
 8003a3a:	fb00 f303 	mul.w	r3, r0, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a43      	ldr	r2, [pc, #268]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a42:	fba0 1202 	umull	r1, r2, r0, r2
 8003a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a48:	460a      	mov	r2, r1
 8003a4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4e:	4413      	add	r3, r2
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	2200      	movs	r2, #0
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	61fa      	str	r2, [r7, #28]
 8003a5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a62:	f7fc fc15 	bl	8000290 <__aeabi_uldivmod>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6e:	e053      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a70:	4b35      	ldr	r3, [pc, #212]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	099b      	lsrs	r3, r3, #6
 8003a76:	2200      	movs	r2, #0
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	617a      	str	r2, [r7, #20]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a82:	f04f 0b00 	mov.w	fp, #0
 8003a86:	4652      	mov	r2, sl
 8003a88:	465b      	mov	r3, fp
 8003a8a:	f04f 0000 	mov.w	r0, #0
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	0159      	lsls	r1, r3, #5
 8003a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a98:	0150      	lsls	r0, r2, #5
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	ebb2 080a 	subs.w	r8, r2, sl
 8003aa2:	eb63 090b 	sbc.w	r9, r3, fp
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ab2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ab6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003aba:	ebb2 0408 	subs.w	r4, r2, r8
 8003abe:	eb63 0509 	sbc.w	r5, r3, r9
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	00eb      	lsls	r3, r5, #3
 8003acc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad0:	00e2      	lsls	r2, r4, #3
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	461d      	mov	r5, r3
 8003ad6:	eb14 030a 	adds.w	r3, r4, sl
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	eb45 030b 	adc.w	r3, r5, fp
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aee:	4629      	mov	r1, r5
 8003af0:	028b      	lsls	r3, r1, #10
 8003af2:	4621      	mov	r1, r4
 8003af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af8:	4621      	mov	r1, r4
 8003afa:	028a      	lsls	r2, r1, #10
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b02:	2200      	movs	r2, #0
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	60fa      	str	r2, [r7, #12]
 8003b08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b0c:	f7fc fbc0 	bl	8000290 <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4613      	mov	r3, r2
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	3301      	adds	r3, #1
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b32:	e002      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3740      	adds	r7, #64	; 0x40
 8003b40:	46bd      	mov	sp, r7
 8003b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	00f42400 	.word	0x00f42400
 8003b50:	017d7840 	.word	0x017d7840

08003b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b58:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000000 	.word	0x20000000

08003b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b70:	f7ff fff0 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	0a9b      	lsrs	r3, r3, #10
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	4903      	ldr	r1, [pc, #12]	; (8003b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	0800a69c 	.word	0x0800a69c

08003b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b98:	f7ff ffdc 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	0b5b      	lsrs	r3, r3, #13
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	4903      	ldr	r1, [pc, #12]	; (8003bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	0800a69c 	.word	0x0800a69c

08003bbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e041      	b.n	8003c52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fc ffde 	bl	8000ba4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f000 f8f0 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e0ae      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b0c      	cmp	r3, #12
 8003c86:	f200 809f 	bhi.w	8003dc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c8a:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003cc5 	.word	0x08003cc5
 8003c94:	08003dc9 	.word	0x08003dc9
 8003c98:	08003dc9 	.word	0x08003dc9
 8003c9c:	08003dc9 	.word	0x08003dc9
 8003ca0:	08003d05 	.word	0x08003d05
 8003ca4:	08003dc9 	.word	0x08003dc9
 8003ca8:	08003dc9 	.word	0x08003dc9
 8003cac:	08003dc9 	.word	0x08003dc9
 8003cb0:	08003d47 	.word	0x08003d47
 8003cb4:	08003dc9 	.word	0x08003dc9
 8003cb8:	08003dc9 	.word	0x08003dc9
 8003cbc:	08003dc9 	.word	0x08003dc9
 8003cc0:	08003d87 	.word	0x08003d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f908 	bl	8003ee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0208 	orr.w	r2, r2, #8
 8003cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0204 	bic.w	r2, r2, #4
 8003cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6999      	ldr	r1, [r3, #24]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	619a      	str	r2, [r3, #24]
      break;
 8003d02:	e064      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f94e 	bl	8003fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6999      	ldr	r1, [r3, #24]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	619a      	str	r2, [r3, #24]
      break;
 8003d44:	e043      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 f999 	bl	8004084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0208 	orr.w	r2, r2, #8
 8003d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0204 	bic.w	r2, r2, #4
 8003d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69d9      	ldr	r1, [r3, #28]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	61da      	str	r2, [r3, #28]
      break;
 8003d84:	e023      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f9e3 	bl	8004158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69d9      	ldr	r1, [r3, #28]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	021a      	lsls	r2, r3, #8
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	61da      	str	r2, [r3, #28]
      break;
 8003dc6:	e002      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
      break;
 8003dcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a34      	ldr	r2, [pc, #208]	; (8003ec4 <TIM_Base_SetConfig+0xe4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00f      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d00b      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a31      	ldr	r2, [pc, #196]	; (8003ec8 <TIM_Base_SetConfig+0xe8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a30      	ldr	r2, [pc, #192]	; (8003ecc <TIM_Base_SetConfig+0xec>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <TIM_Base_SetConfig+0xf0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d108      	bne.n	8003e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <TIM_Base_SetConfig+0xe4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01b      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e38:	d017      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a22      	ldr	r2, [pc, #136]	; (8003ec8 <TIM_Base_SetConfig+0xe8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <TIM_Base_SetConfig+0xec>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00f      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <TIM_Base_SetConfig+0xf0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <TIM_Base_SetConfig+0xf4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <TIM_Base_SetConfig+0xf8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <TIM_Base_SetConfig+0xfc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <TIM_Base_SetConfig+0xe4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d103      	bne.n	8003eb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	615a      	str	r2, [r3, #20]
}
 8003eb6:	bf00      	nop
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	40000c00 	.word	0x40000c00
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800

08003ee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f023 0201 	bic.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 0302 	bic.w	r3, r3, #2
 8003f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <TIM_OC1_SetConfig+0xc8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d10c      	bne.n	8003f56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0308 	bic.w	r3, r3, #8
 8003f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f023 0304 	bic.w	r3, r3, #4
 8003f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <TIM_OC1_SetConfig+0xc8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d111      	bne.n	8003f82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40010000 	.word	0x40010000

08003fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0210 	bic.w	r2, r3, #16
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0320 	bic.w	r3, r3, #32
 8003ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <TIM_OC2_SetConfig+0xd4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d10d      	bne.n	8004028 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004026:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a15      	ldr	r2, [pc, #84]	; (8004080 <TIM_OC2_SetConfig+0xd4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d113      	bne.n	8004058 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800403e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40010000 	.word	0x40010000

08004084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <TIM_OC3_SetConfig+0xd0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10d      	bne.n	80040fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a14      	ldr	r2, [pc, #80]	; (8004154 <TIM_OC3_SetConfig+0xd0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d113      	bne.n	800412e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800410c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	621a      	str	r2, [r3, #32]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40010000 	.word	0x40010000

08004158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	031b      	lsls	r3, r3, #12
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a10      	ldr	r2, [pc, #64]	; (80041f4 <TIM_OC4_SetConfig+0x9c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d109      	bne.n	80041cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	019b      	lsls	r3, r3, #6
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000

080041f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800420c:	2302      	movs	r3, #2
 800420e:	e050      	b.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1c      	ldr	r2, [pc, #112]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d013      	beq.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a15      	ldr	r2, [pc, #84]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a13      	ldr	r2, [pc, #76]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10c      	bne.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	4313      	orrs	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40014000 	.word	0x40014000

080042d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e03f      	b.n	8004366 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fc fcae 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2224      	movs	r2, #36	; 0x24
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 ff81 	bl	8005220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800432c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800433c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800434c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08c      	sub	sp, #48	; 0x30
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	4613      	mov	r3, r2
 800437c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b20      	cmp	r3, #32
 8004388:	d165      	bne.n	8004456 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_UART_Transmit_DMA+0x26>
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e05e      	b.n	8004458 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Transmit_DMA+0x38>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e057      	b.n	8004458 <HAL_UART_Transmit_DMA+0xe8>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	88fa      	ldrh	r2, [r7, #6]
 80043ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2221      	movs	r2, #33	; 0x21
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	4a22      	ldr	r2, [pc, #136]	; (8004460 <HAL_UART_Transmit_DMA+0xf0>)
 80043d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043dc:	4a21      	ldr	r2, [pc, #132]	; (8004464 <HAL_UART_Transmit_DMA+0xf4>)
 80043de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e4:	4a20      	ldr	r2, [pc, #128]	; (8004468 <HAL_UART_Transmit_DMA+0xf8>)
 80043e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	2200      	movs	r2, #0
 80043ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80043f0:	f107 0308 	add.w	r3, r7, #8
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3304      	adds	r3, #4
 8004404:	461a      	mov	r2, r3
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	f7fc fff8 	bl	80013fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004414:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	617b      	str	r3, [r7, #20]
   return(result);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3314      	adds	r3, #20
 800443c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800443e:	627a      	str	r2, [r7, #36]	; 0x24
 8004440:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	6a39      	ldr	r1, [r7, #32]
 8004444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	61fb      	str	r3, [r7, #28]
   return(result);
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e5      	bne.n	800441e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e000      	b.n	8004458 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
  }
}
 8004458:	4618      	mov	r0, r3
 800445a:	3730      	adds	r7, #48	; 0x30
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	08004ab9 	.word	0x08004ab9
 8004464:	08004b53 	.word	0x08004b53
 8004468:	08004ccb 	.word	0x08004ccb

0800446c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08c      	sub	sp, #48	; 0x30
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b20      	cmp	r3, #32
 8004484:	d152      	bne.n	800452c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e04b      	b.n	800452e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e044      	b.n	800452e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	461a      	mov	r2, r3
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 fc51 	bl	8004d60 <UART_Start_Receive_DMA>
 80044be:	4603      	mov	r3, r0
 80044c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80044c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d12c      	bne.n	8004526 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d125      	bne.n	8004520 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	617b      	str	r3, [r7, #20]
   return(result);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f043 0310 	orr.w	r3, r3, #16
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800450a:	627a      	str	r2, [r7, #36]	; 0x24
 800450c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	6a39      	ldr	r1, [r7, #32]
 8004510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	61fb      	str	r3, [r7, #28]
   return(result);
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e5      	bne.n	80044ea <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800451e:	e002      	b.n	8004526 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800452a:	e000      	b.n	800452e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3730      	adds	r7, #48	; 0x30
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b0ba      	sub	sp, #232	; 0xe8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800455e:	2300      	movs	r3, #0
 8004560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004564:	2300      	movs	r3, #0
 8004566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800456a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10f      	bne.n	800459e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_UART_IRQHandler+0x66>
 800458a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fd87 	bl	80050aa <UART_Receive_IT>
      return;
 800459c:	e256      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800459e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80de 	beq.w	8004764 <HAL_UART_IRQHandler+0x22c>
 80045a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80d1 	beq.w	8004764 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_UART_IRQHandler+0xae>
 80045ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <HAL_UART_IRQHandler+0xd2>
 80045f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f043 0202 	orr.w	r2, r3, #2
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <HAL_UART_IRQHandler+0xf6>
 8004616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f043 0204 	orr.w	r2, r3, #4
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d011      	beq.n	800465e <HAL_UART_IRQHandler+0x126>
 800463a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d105      	bne.n	8004652 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f043 0208 	orr.w	r2, r3, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 81ed 	beq.w	8004a42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_UART_IRQHandler+0x14e>
 8004674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fd12 	bl	80050aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d103      	bne.n	80046b2 <HAL_UART_IRQHandler+0x17a>
 80046aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d04f      	beq.n	8004752 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fc1a 	bl	8004eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d141      	bne.n	800474a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3314      	adds	r3, #20
 80046cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3314      	adds	r3, #20
 80046ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800470a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1d9      	bne.n	80046c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	2b00      	cmp	r3, #0
 8004718:	d013      	beq.n	8004742 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	4a7d      	ldr	r2, [pc, #500]	; (8004914 <HAL_UART_IRQHandler+0x3dc>)
 8004720:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	4618      	mov	r0, r3
 8004728:	f7fc ff30 	bl	800158c <HAL_DMA_Abort_IT>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800473c:	4610      	mov	r0, r2
 800473e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e00e      	b.n	8004760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f9ae 	bl	8004aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e00a      	b.n	8004760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f9aa 	bl	8004aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	e006      	b.n	8004760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f9a6 	bl	8004aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800475e:	e170      	b.n	8004a42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004760:	bf00      	nop
    return;
 8004762:	e16e      	b.n	8004a42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	2b01      	cmp	r3, #1
 800476a:	f040 814a 	bne.w	8004a02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8143 	beq.w	8004a02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 813c 	beq.w	8004a02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047aa:	2b40      	cmp	r3, #64	; 0x40
 80047ac:	f040 80b4 	bne.w	8004918 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8140 	beq.w	8004a46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ce:	429a      	cmp	r2, r3
 80047d0:	f080 8139 	bcs.w	8004a46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e6:	f000 8088 	beq.w	80048fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004816:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800481a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004822:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800482e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1d9      	bne.n	80047ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3314      	adds	r3, #20
 800483c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3314      	adds	r3, #20
 8004856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800485a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800485e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004862:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800486c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e1      	bne.n	8004836 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3314      	adds	r3, #20
 8004878:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3314      	adds	r3, #20
 8004892:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004896:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004898:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800489c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e3      	bne.n	8004872 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ca:	f023 0310 	bic.w	r3, r3, #16
 80048ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80048de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e3      	bne.n	80048b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fc fdd9 	bl	80014ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004902:	b29b      	uxth	r3, r3
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	b29b      	uxth	r3, r3
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fb ffe2 	bl	80008d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004910:	e099      	b.n	8004a46 <HAL_UART_IRQHandler+0x50e>
 8004912:	bf00      	nop
 8004914:	08004fb3 	.word	0x08004fb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004920:	b29b      	uxth	r3, r3
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 808b 	beq.w	8004a4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8086 	beq.w	8004a4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004950:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004954:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004962:	647a      	str	r2, [r7, #68]	; 0x44
 8004964:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e3      	bne.n	800493e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3314      	adds	r3, #20
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	623b      	str	r3, [r7, #32]
   return(result);
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3314      	adds	r3, #20
 8004996:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800499a:	633a      	str	r2, [r7, #48]	; 0x30
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e3      	bne.n	8004976 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0310 	bic.w	r3, r3, #16
 80049d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049e0:	61fa      	str	r2, [r7, #28]
 80049e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	69b9      	ldr	r1, [r7, #24]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	617b      	str	r3, [r7, #20]
   return(result);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e3      	bne.n	80049bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fb ff6a 	bl	80008d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a00:	e023      	b.n	8004a4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_UART_IRQHandler+0x4ea>
 8004a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fadd 	bl	8004fda <UART_Transmit_IT>
    return;
 8004a20:	e014      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00e      	beq.n	8004a4c <HAL_UART_IRQHandler+0x514>
 8004a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fb1d 	bl	800507a <UART_EndTransmit_IT>
    return;
 8004a40:	e004      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
    return;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
      return;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
      return;
 8004a4a:	bf00      	nop
  }
}
 8004a4c:	37e8      	adds	r7, #232	; 0xe8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop

08004a54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b090      	sub	sp, #64	; 0x40
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d137      	bne.n	8004b44 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3314      	adds	r3, #20
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3314      	adds	r3, #20
 8004af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004afa:	633a      	str	r2, [r7, #48]	; 0x30
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e5      	bne.n	8004ada <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	330c      	adds	r3, #12
 8004b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34
 8004b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b2e:	61fa      	str	r2, [r7, #28]
 8004b30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	69b9      	ldr	r1, [r7, #24]
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e5      	bne.n	8004b0e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b42:	e002      	b.n	8004b4a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004b44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b46:	f7ff ff85 	bl	8004a54 <HAL_UART_TxCpltCallback>
}
 8004b4a:	bf00      	nop
 8004b4c:	3740      	adds	r7, #64	; 0x40
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff ff81 	bl	8004a68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b09c      	sub	sp, #112	; 0x70
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d172      	bne.n	8004c70 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	330c      	adds	r3, #12
 8004bae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e5      	bne.n	8004b90 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3314      	adds	r3, #20
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	667b      	str	r3, [r7, #100]	; 0x64
 8004bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3314      	adds	r3, #20
 8004be2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004be4:	647a      	str	r2, [r7, #68]	; 0x44
 8004be6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	623b      	str	r3, [r7, #32]
   return(result);
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3314      	adds	r3, #20
 8004c16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c18:	633a      	str	r2, [r7, #48]	; 0x30
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e5      	bne.n	8004bf8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d119      	bne.n	8004c70 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	330c      	adds	r3, #12
 8004c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0310 	bic.w	r3, r3, #16
 8004c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	330c      	adds	r3, #12
 8004c5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c5c:	61fa      	str	r2, [r7, #28]
 8004c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	69b9      	ldr	r1, [r7, #24]
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	617b      	str	r3, [r7, #20]
   return(result);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e5      	bne.n	8004c3c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d106      	bne.n	8004c86 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004c80:	f7fb fe28 	bl	80008d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c84:	e002      	b.n	8004c8c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004c86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004c88:	f7ff fef8 	bl	8004a7c <HAL_UART_RxCpltCallback>
}
 8004c8c:	bf00      	nop
 8004c8e:	3770      	adds	r7, #112	; 0x70
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d108      	bne.n	8004cbc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cae:	085b      	lsrs	r3, r3, #1
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7fb fe0d 	bl	80008d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cba:	e002      	b.n	8004cc2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff fee7 	bl	8004a90 <HAL_UART_RxHalfCpltCallback>
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b21      	cmp	r3, #33	; 0x21
 8004cfc:	d108      	bne.n	8004d10 <UART_DMAError+0x46>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2200      	movs	r2, #0
 8004d08:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004d0a:	68b8      	ldr	r0, [r7, #8]
 8004d0c:	f000 f8c6 	bl	8004e9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	bf0c      	ite	eq
 8004d1e:	2301      	moveq	r3, #1
 8004d20:	2300      	movne	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b22      	cmp	r3, #34	; 0x22
 8004d30:	d108      	bne.n	8004d44 <UART_DMAError+0x7a>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004d3e:	68b8      	ldr	r0, [r7, #8]
 8004d40:	f000 f8d4 	bl	8004eec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f043 0210 	orr.w	r2, r3, #16
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d50:	68b8      	ldr	r0, [r7, #8]
 8004d52:	f7ff fea7 	bl	8004aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b098      	sub	sp, #96	; 0x60
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	88fa      	ldrh	r2, [r7, #6]
 8004d78:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2222      	movs	r2, #34	; 0x22
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	4a40      	ldr	r2, [pc, #256]	; (8004e90 <UART_Start_Receive_DMA+0x130>)
 8004d8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	4a3f      	ldr	r2, [pc, #252]	; (8004e94 <UART_Start_Receive_DMA+0x134>)
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	4a3e      	ldr	r2, [pc, #248]	; (8004e98 <UART_Start_Receive_DMA+0x138>)
 8004d9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	2200      	movs	r2, #0
 8004da6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004da8:	f107 0308 	add.w	r3, r7, #8
 8004dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	f7fc fb1c 	bl	80013fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d019      	beq.n	8004e1e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	330c      	adds	r3, #12
 8004df0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e00:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	330c      	adds	r3, #12
 8004e08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e0a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004e0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e5      	bne.n	8004dea <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3314      	adds	r3, #20
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	657b      	str	r3, [r7, #84]	; 0x54
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3314      	adds	r3, #20
 8004e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e5      	bne.n	8004e1e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3314      	adds	r3, #20
 8004e58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	617b      	str	r3, [r7, #20]
   return(result);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e68:	653b      	str	r3, [r7, #80]	; 0x50
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3314      	adds	r3, #20
 8004e70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e72:	627a      	str	r2, [r7, #36]	; 0x24
 8004e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6a39      	ldr	r1, [r7, #32]
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e5      	bne.n	8004e52 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3760      	adds	r7, #96	; 0x60
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	08004b6f 	.word	0x08004b6f
 8004e94:	08004c95 	.word	0x08004c95
 8004e98:	08004ccb 	.word	0x08004ccb

08004e9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b089      	sub	sp, #36	; 0x24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	61ba      	str	r2, [r7, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6979      	ldr	r1, [r7, #20]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e5      	bne.n	8004ea4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004ee0:	bf00      	nop
 8004ee2:	3724      	adds	r7, #36	; 0x24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b095      	sub	sp, #84	; 0x54
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f14:	643a      	str	r2, [r7, #64]	; 0x40
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e5      	bne.n	8004ef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3314      	adds	r3, #20
 8004f2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f023 0301 	bic.w	r3, r3, #1
 8004f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3314      	adds	r3, #20
 8004f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e5      	bne.n	8004f28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d119      	bne.n	8004f98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f023 0310 	bic.w	r3, r3, #16
 8004f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f84:	61ba      	str	r2, [r7, #24]
 8004f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6979      	ldr	r1, [r7, #20]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	613b      	str	r3, [r7, #16]
   return(result);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e5      	bne.n	8004f64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fa6:	bf00      	nop
 8004fa8:	3754      	adds	r7, #84	; 0x54
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff fd69 	bl	8004aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b21      	cmp	r3, #33	; 0x21
 8004fec:	d13e      	bne.n	800506c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	d114      	bne.n	8005022 <UART_Transmit_IT+0x48>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d110      	bne.n	8005022 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005014:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	1c9a      	adds	r2, r3, #2
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	621a      	str	r2, [r3, #32]
 8005020:	e008      	b.n	8005034 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	1c59      	adds	r1, r3, #1
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6211      	str	r1, [r2, #32]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29b      	uxth	r3, r3
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	4619      	mov	r1, r3
 8005042:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10f      	bne.n	8005068 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005056:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005066:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	e000      	b.n	800506e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800506c:	2302      	movs	r3, #2
  }
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005090:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fcda 	bl	8004a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b08c      	sub	sp, #48	; 0x30
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b22      	cmp	r3, #34	; 0x22
 80050bc:	f040 80ab 	bne.w	8005216 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d117      	bne.n	80050fa <UART_Receive_IT+0x50>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d113      	bne.n	80050fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	1c9a      	adds	r2, r3, #2
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
 80050f8:	e026      	b.n	8005148 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005100:	2300      	movs	r3, #0
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510c:	d007      	beq.n	800511e <UART_Receive_IT+0x74>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <UART_Receive_IT+0x82>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e008      	b.n	800513e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005138:	b2da      	uxtb	r2, r3
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4619      	mov	r1, r3
 8005156:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005158:	2b00      	cmp	r3, #0
 800515a:	d15a      	bne.n	8005212 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0220 	bic.w	r2, r2, #32
 800516a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695a      	ldr	r2, [r3, #20]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	2b01      	cmp	r3, #1
 800519a:	d135      	bne.n	8005208 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	330c      	adds	r3, #12
 80051a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	613b      	str	r3, [r7, #16]
   return(result);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f023 0310 	bic.w	r3, r3, #16
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c2:	623a      	str	r2, [r7, #32]
 80051c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	69f9      	ldr	r1, [r7, #28]
 80051c8:	6a3a      	ldr	r2, [r7, #32]
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e5      	bne.n	80051a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d10a      	bne.n	80051fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fb fb67 	bl	80008d4 <HAL_UARTEx_RxEventCallback>
 8005206:	e002      	b.n	800520e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fc37 	bl	8004a7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e002      	b.n	8005218 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	e000      	b.n	8005218 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005216:	2302      	movs	r3, #2
  }
}
 8005218:	4618      	mov	r0, r3
 800521a:	3730      	adds	r7, #48	; 0x30
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005224:	b0c0      	sub	sp, #256	; 0x100
 8005226:	af00      	add	r7, sp, #0
 8005228:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	68d9      	ldr	r1, [r3, #12]
 800523e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	ea40 0301 	orr.w	r3, r0, r1
 8005248:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	431a      	orrs	r2, r3
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	431a      	orrs	r2, r3
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005278:	f021 010c 	bic.w	r1, r1, #12
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005286:	430b      	orrs	r3, r1
 8005288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529a:	6999      	ldr	r1, [r3, #24]
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	ea40 0301 	orr.w	r3, r0, r1
 80052a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4b8f      	ldr	r3, [pc, #572]	; (80054ec <UART_SetConfig+0x2cc>)
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d005      	beq.n	80052c0 <UART_SetConfig+0xa0>
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b8d      	ldr	r3, [pc, #564]	; (80054f0 <UART_SetConfig+0x2d0>)
 80052bc:	429a      	cmp	r2, r3
 80052be:	d104      	bne.n	80052ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052c0:	f7fe fc68 	bl	8003b94 <HAL_RCC_GetPCLK2Freq>
 80052c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052c8:	e003      	b.n	80052d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ca:	f7fe fc4f 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 80052ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052dc:	f040 810c 	bne.w	80054f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052f2:	4622      	mov	r2, r4
 80052f4:	462b      	mov	r3, r5
 80052f6:	1891      	adds	r1, r2, r2
 80052f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80052fa:	415b      	adcs	r3, r3
 80052fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005302:	4621      	mov	r1, r4
 8005304:	eb12 0801 	adds.w	r8, r2, r1
 8005308:	4629      	mov	r1, r5
 800530a:	eb43 0901 	adc.w	r9, r3, r1
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800531a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800531e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005322:	4690      	mov	r8, r2
 8005324:	4699      	mov	r9, r3
 8005326:	4623      	mov	r3, r4
 8005328:	eb18 0303 	adds.w	r3, r8, r3
 800532c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005330:	462b      	mov	r3, r5
 8005332:	eb49 0303 	adc.w	r3, r9, r3
 8005336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005346:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800534a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800534e:	460b      	mov	r3, r1
 8005350:	18db      	adds	r3, r3, r3
 8005352:	653b      	str	r3, [r7, #80]	; 0x50
 8005354:	4613      	mov	r3, r2
 8005356:	eb42 0303 	adc.w	r3, r2, r3
 800535a:	657b      	str	r3, [r7, #84]	; 0x54
 800535c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005360:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005364:	f7fa ff94 	bl	8000290 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4b61      	ldr	r3, [pc, #388]	; (80054f4 <UART_SetConfig+0x2d4>)
 800536e:	fba3 2302 	umull	r2, r3, r3, r2
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	011c      	lsls	r4, r3, #4
 8005376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005380:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005384:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	1891      	adds	r1, r2, r2
 800538e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005390:	415b      	adcs	r3, r3
 8005392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005394:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005398:	4641      	mov	r1, r8
 800539a:	eb12 0a01 	adds.w	sl, r2, r1
 800539e:	4649      	mov	r1, r9
 80053a0:	eb43 0b01 	adc.w	fp, r3, r1
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b8:	4692      	mov	sl, r2
 80053ba:	469b      	mov	fp, r3
 80053bc:	4643      	mov	r3, r8
 80053be:	eb1a 0303 	adds.w	r3, sl, r3
 80053c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053c6:	464b      	mov	r3, r9
 80053c8:	eb4b 0303 	adc.w	r3, fp, r3
 80053cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053e4:	460b      	mov	r3, r1
 80053e6:	18db      	adds	r3, r3, r3
 80053e8:	643b      	str	r3, [r7, #64]	; 0x40
 80053ea:	4613      	mov	r3, r2
 80053ec:	eb42 0303 	adc.w	r3, r2, r3
 80053f0:	647b      	str	r3, [r7, #68]	; 0x44
 80053f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053fa:	f7fa ff49 	bl	8000290 <__aeabi_uldivmod>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4611      	mov	r1, r2
 8005404:	4b3b      	ldr	r3, [pc, #236]	; (80054f4 <UART_SetConfig+0x2d4>)
 8005406:	fba3 2301 	umull	r2, r3, r3, r1
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	2264      	movs	r2, #100	; 0x64
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	1acb      	subs	r3, r1, r3
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800541a:	4b36      	ldr	r3, [pc, #216]	; (80054f4 <UART_SetConfig+0x2d4>)
 800541c:	fba3 2302 	umull	r2, r3, r3, r2
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005428:	441c      	add	r4, r3
 800542a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800542e:	2200      	movs	r2, #0
 8005430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005434:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005438:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	1891      	adds	r1, r2, r2
 8005442:	63b9      	str	r1, [r7, #56]	; 0x38
 8005444:	415b      	adcs	r3, r3
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800544c:	4641      	mov	r1, r8
 800544e:	1851      	adds	r1, r2, r1
 8005450:	6339      	str	r1, [r7, #48]	; 0x30
 8005452:	4649      	mov	r1, r9
 8005454:	414b      	adcs	r3, r1
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005464:	4659      	mov	r1, fp
 8005466:	00cb      	lsls	r3, r1, #3
 8005468:	4651      	mov	r1, sl
 800546a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800546e:	4651      	mov	r1, sl
 8005470:	00ca      	lsls	r2, r1, #3
 8005472:	4610      	mov	r0, r2
 8005474:	4619      	mov	r1, r3
 8005476:	4603      	mov	r3, r0
 8005478:	4642      	mov	r2, r8
 800547a:	189b      	adds	r3, r3, r2
 800547c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005480:	464b      	mov	r3, r9
 8005482:	460a      	mov	r2, r1
 8005484:	eb42 0303 	adc.w	r3, r2, r3
 8005488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005498:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800549c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054a0:	460b      	mov	r3, r1
 80054a2:	18db      	adds	r3, r3, r3
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a6:	4613      	mov	r3, r2
 80054a8:	eb42 0303 	adc.w	r3, r2, r3
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054b6:	f7fa feeb 	bl	8000290 <__aeabi_uldivmod>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <UART_SetConfig+0x2d4>)
 80054c0:	fba3 1302 	umull	r1, r3, r3, r2
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	2164      	movs	r1, #100	; 0x64
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	3332      	adds	r3, #50	; 0x32
 80054d2:	4a08      	ldr	r2, [pc, #32]	; (80054f4 <UART_SetConfig+0x2d4>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	f003 0207 	and.w	r2, r3, #7
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4422      	add	r2, r4
 80054e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054e8:	e105      	b.n	80056f6 <UART_SetConfig+0x4d6>
 80054ea:	bf00      	nop
 80054ec:	40011000 	.word	0x40011000
 80054f0:	40011400 	.word	0x40011400
 80054f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054fc:	2200      	movs	r2, #0
 80054fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005502:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005506:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800550a:	4642      	mov	r2, r8
 800550c:	464b      	mov	r3, r9
 800550e:	1891      	adds	r1, r2, r2
 8005510:	6239      	str	r1, [r7, #32]
 8005512:	415b      	adcs	r3, r3
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
 8005516:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800551a:	4641      	mov	r1, r8
 800551c:	1854      	adds	r4, r2, r1
 800551e:	4649      	mov	r1, r9
 8005520:	eb43 0501 	adc.w	r5, r3, r1
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	00eb      	lsls	r3, r5, #3
 800552e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005532:	00e2      	lsls	r2, r4, #3
 8005534:	4614      	mov	r4, r2
 8005536:	461d      	mov	r5, r3
 8005538:	4643      	mov	r3, r8
 800553a:	18e3      	adds	r3, r4, r3
 800553c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005540:	464b      	mov	r3, r9
 8005542:	eb45 0303 	adc.w	r3, r5, r3
 8005546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005556:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005566:	4629      	mov	r1, r5
 8005568:	008b      	lsls	r3, r1, #2
 800556a:	4621      	mov	r1, r4
 800556c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005570:	4621      	mov	r1, r4
 8005572:	008a      	lsls	r2, r1, #2
 8005574:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005578:	f7fa fe8a 	bl	8000290 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4b60      	ldr	r3, [pc, #384]	; (8005704 <UART_SetConfig+0x4e4>)
 8005582:	fba3 2302 	umull	r2, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	011c      	lsls	r4, r3, #4
 800558a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800558e:	2200      	movs	r2, #0
 8005590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005594:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005598:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	1891      	adds	r1, r2, r2
 80055a2:	61b9      	str	r1, [r7, #24]
 80055a4:	415b      	adcs	r3, r3
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ac:	4641      	mov	r1, r8
 80055ae:	1851      	adds	r1, r2, r1
 80055b0:	6139      	str	r1, [r7, #16]
 80055b2:	4649      	mov	r1, r9
 80055b4:	414b      	adcs	r3, r1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055c4:	4659      	mov	r1, fp
 80055c6:	00cb      	lsls	r3, r1, #3
 80055c8:	4651      	mov	r1, sl
 80055ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ce:	4651      	mov	r1, sl
 80055d0:	00ca      	lsls	r2, r1, #3
 80055d2:	4610      	mov	r0, r2
 80055d4:	4619      	mov	r1, r3
 80055d6:	4603      	mov	r3, r0
 80055d8:	4642      	mov	r2, r8
 80055da:	189b      	adds	r3, r3, r2
 80055dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055e0:	464b      	mov	r3, r9
 80055e2:	460a      	mov	r2, r1
 80055e4:	eb42 0303 	adc.w	r3, r2, r3
 80055e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005604:	4649      	mov	r1, r9
 8005606:	008b      	lsls	r3, r1, #2
 8005608:	4641      	mov	r1, r8
 800560a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800560e:	4641      	mov	r1, r8
 8005610:	008a      	lsls	r2, r1, #2
 8005612:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005616:	f7fa fe3b 	bl	8000290 <__aeabi_uldivmod>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4b39      	ldr	r3, [pc, #228]	; (8005704 <UART_SetConfig+0x4e4>)
 8005620:	fba3 1302 	umull	r1, r3, r3, r2
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	2164      	movs	r1, #100	; 0x64
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	3332      	adds	r3, #50	; 0x32
 8005632:	4a34      	ldr	r2, [pc, #208]	; (8005704 <UART_SetConfig+0x4e4>)
 8005634:	fba2 2303 	umull	r2, r3, r2, r3
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800563e:	441c      	add	r4, r3
 8005640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005644:	2200      	movs	r2, #0
 8005646:	673b      	str	r3, [r7, #112]	; 0x70
 8005648:	677a      	str	r2, [r7, #116]	; 0x74
 800564a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800564e:	4642      	mov	r2, r8
 8005650:	464b      	mov	r3, r9
 8005652:	1891      	adds	r1, r2, r2
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	415b      	adcs	r3, r3
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800565e:	4641      	mov	r1, r8
 8005660:	1851      	adds	r1, r2, r1
 8005662:	6039      	str	r1, [r7, #0]
 8005664:	4649      	mov	r1, r9
 8005666:	414b      	adcs	r3, r1
 8005668:	607b      	str	r3, [r7, #4]
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005676:	4659      	mov	r1, fp
 8005678:	00cb      	lsls	r3, r1, #3
 800567a:	4651      	mov	r1, sl
 800567c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005680:	4651      	mov	r1, sl
 8005682:	00ca      	lsls	r2, r1, #3
 8005684:	4610      	mov	r0, r2
 8005686:	4619      	mov	r1, r3
 8005688:	4603      	mov	r3, r0
 800568a:	4642      	mov	r2, r8
 800568c:	189b      	adds	r3, r3, r2
 800568e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005690:	464b      	mov	r3, r9
 8005692:	460a      	mov	r2, r1
 8005694:	eb42 0303 	adc.w	r3, r2, r3
 8005698:	66fb      	str	r3, [r7, #108]	; 0x6c
 800569a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	663b      	str	r3, [r7, #96]	; 0x60
 80056a4:	667a      	str	r2, [r7, #100]	; 0x64
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056b2:	4649      	mov	r1, r9
 80056b4:	008b      	lsls	r3, r1, #2
 80056b6:	4641      	mov	r1, r8
 80056b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056bc:	4641      	mov	r1, r8
 80056be:	008a      	lsls	r2, r1, #2
 80056c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056c4:	f7fa fde4 	bl	8000290 <__aeabi_uldivmod>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <UART_SetConfig+0x4e4>)
 80056ce:	fba3 1302 	umull	r1, r3, r3, r2
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	2164      	movs	r1, #100	; 0x64
 80056d6:	fb01 f303 	mul.w	r3, r1, r3
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	3332      	adds	r3, #50	; 0x32
 80056e0:	4a08      	ldr	r2, [pc, #32]	; (8005704 <UART_SetConfig+0x4e4>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	f003 020f 	and.w	r2, r3, #15
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4422      	add	r2, r4
 80056f4:	609a      	str	r2, [r3, #8]
}
 80056f6:	bf00      	nop
 80056f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056fc:	46bd      	mov	sp, r7
 80056fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005702:	bf00      	nop
 8005704:	51eb851f 	.word	0x51eb851f

08005708 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005708:	b084      	sub	sp, #16
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	f107 001c 	add.w	r0, r7, #28
 8005716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	2b01      	cmp	r3, #1
 800571e:	d122      	bne.n	8005766 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800574a:	2b01      	cmp	r3, #1
 800574c:	d105      	bne.n	800575a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f001 fbee 	bl	8006f3c <USB_CoreReset>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	e01a      	b.n	800579c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f001 fbe2 	bl	8006f3c <USB_CoreReset>
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800577c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
 800578e:	e005      	b.n	800579c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d10b      	bne.n	80057ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f043 0206 	orr.w	r2, r3, #6
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057c6:	b004      	add	sp, #16
 80057c8:	4770      	bx	lr
	...

080057cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d165      	bne.n	80058ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4a41      	ldr	r2, [pc, #260]	; (80058e8 <USB_SetTurnaroundTime+0x11c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d906      	bls.n	80057f6 <USB_SetTurnaroundTime+0x2a>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a40      	ldr	r2, [pc, #256]	; (80058ec <USB_SetTurnaroundTime+0x120>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d202      	bcs.n	80057f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057f0:	230f      	movs	r3, #15
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	e062      	b.n	80058bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4a3c      	ldr	r2, [pc, #240]	; (80058ec <USB_SetTurnaroundTime+0x120>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d306      	bcc.n	800580c <USB_SetTurnaroundTime+0x40>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4a3b      	ldr	r2, [pc, #236]	; (80058f0 <USB_SetTurnaroundTime+0x124>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d202      	bcs.n	800580c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005806:	230e      	movs	r3, #14
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	e057      	b.n	80058bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4a38      	ldr	r2, [pc, #224]	; (80058f0 <USB_SetTurnaroundTime+0x124>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d306      	bcc.n	8005822 <USB_SetTurnaroundTime+0x56>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4a37      	ldr	r2, [pc, #220]	; (80058f4 <USB_SetTurnaroundTime+0x128>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d202      	bcs.n	8005822 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800581c:	230d      	movs	r3, #13
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e04c      	b.n	80058bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4a33      	ldr	r2, [pc, #204]	; (80058f4 <USB_SetTurnaroundTime+0x128>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d306      	bcc.n	8005838 <USB_SetTurnaroundTime+0x6c>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4a32      	ldr	r2, [pc, #200]	; (80058f8 <USB_SetTurnaroundTime+0x12c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d802      	bhi.n	8005838 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005832:	230c      	movs	r3, #12
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	e041      	b.n	80058bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4a2f      	ldr	r2, [pc, #188]	; (80058f8 <USB_SetTurnaroundTime+0x12c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d906      	bls.n	800584e <USB_SetTurnaroundTime+0x82>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4a2e      	ldr	r2, [pc, #184]	; (80058fc <USB_SetTurnaroundTime+0x130>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d802      	bhi.n	800584e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005848:	230b      	movs	r3, #11
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e036      	b.n	80058bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <USB_SetTurnaroundTime+0x130>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d906      	bls.n	8005864 <USB_SetTurnaroundTime+0x98>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4a29      	ldr	r2, [pc, #164]	; (8005900 <USB_SetTurnaroundTime+0x134>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d802      	bhi.n	8005864 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800585e:	230a      	movs	r3, #10
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	e02b      	b.n	80058bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4a26      	ldr	r2, [pc, #152]	; (8005900 <USB_SetTurnaroundTime+0x134>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d906      	bls.n	800587a <USB_SetTurnaroundTime+0xae>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4a25      	ldr	r2, [pc, #148]	; (8005904 <USB_SetTurnaroundTime+0x138>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d202      	bcs.n	800587a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005874:	2309      	movs	r3, #9
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e020      	b.n	80058bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4a21      	ldr	r2, [pc, #132]	; (8005904 <USB_SetTurnaroundTime+0x138>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d306      	bcc.n	8005890 <USB_SetTurnaroundTime+0xc4>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4a20      	ldr	r2, [pc, #128]	; (8005908 <USB_SetTurnaroundTime+0x13c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d802      	bhi.n	8005890 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800588a:	2308      	movs	r3, #8
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e015      	b.n	80058bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4a1d      	ldr	r2, [pc, #116]	; (8005908 <USB_SetTurnaroundTime+0x13c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d906      	bls.n	80058a6 <USB_SetTurnaroundTime+0xda>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a1c      	ldr	r2, [pc, #112]	; (800590c <USB_SetTurnaroundTime+0x140>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d202      	bcs.n	80058a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058a0:	2307      	movs	r3, #7
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e00a      	b.n	80058bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80058a6:	2306      	movs	r3, #6
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	e007      	b.n	80058bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058b2:	2309      	movs	r3, #9
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e001      	b.n	80058bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058b8:	2309      	movs	r3, #9
 80058ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	029b      	lsls	r3, r3, #10
 80058d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80058d4:	431a      	orrs	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	00d8acbf 	.word	0x00d8acbf
 80058ec:	00e4e1c0 	.word	0x00e4e1c0
 80058f0:	00f42400 	.word	0x00f42400
 80058f4:	01067380 	.word	0x01067380
 80058f8:	011a499f 	.word	0x011a499f
 80058fc:	01312cff 	.word	0x01312cff
 8005900:	014ca43f 	.word	0x014ca43f
 8005904:	016e3600 	.word	0x016e3600
 8005908:	01a6ab1f 	.word	0x01a6ab1f
 800590c:	01e84800 	.word	0x01e84800

08005910 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f043 0201 	orr.w	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d115      	bne.n	80059a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005982:	2001      	movs	r0, #1
 8005984:	f7fb fb56 	bl	8001034 <HAL_Delay>
      ms++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f001 fa45 	bl	8006e1e <USB_GetMode>
 8005994:	4603      	mov	r3, r0
 8005996:	2b01      	cmp	r3, #1
 8005998:	d01e      	beq.n	80059d8 <USB_SetCurrentMode+0x84>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b31      	cmp	r3, #49	; 0x31
 800599e:	d9f0      	bls.n	8005982 <USB_SetCurrentMode+0x2e>
 80059a0:	e01a      	b.n	80059d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d115      	bne.n	80059d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059b4:	2001      	movs	r0, #1
 80059b6:	f7fb fb3d 	bl	8001034 <HAL_Delay>
      ms++;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3301      	adds	r3, #1
 80059be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 fa2c 	bl	8006e1e <USB_GetMode>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <USB_SetCurrentMode+0x84>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b31      	cmp	r3, #49	; 0x31
 80059d0:	d9f0      	bls.n	80059b4 <USB_SetCurrentMode+0x60>
 80059d2:	e001      	b.n	80059d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e005      	b.n	80059e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b32      	cmp	r3, #50	; 0x32
 80059dc:	d101      	bne.n	80059e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059ec:	b084      	sub	sp, #16
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b086      	sub	sp, #24
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a06:	2300      	movs	r3, #0
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	e009      	b.n	8005a20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3340      	adds	r3, #64	; 0x40
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	2200      	movs	r2, #0
 8005a18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b0e      	cmp	r3, #14
 8005a24:	d9f2      	bls.n	8005a0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d11c      	bne.n	8005a66 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a3a:	f043 0302 	orr.w	r3, r3, #2
 8005a3e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38
 8005a64:	e00b      	b.n	8005a7e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a84:	461a      	mov	r2, r3
 8005a86:	2300      	movs	r3, #0
 8005a88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a90:	4619      	mov	r1, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a98:	461a      	mov	r2, r3
 8005a9a:	680b      	ldr	r3, [r1, #0]
 8005a9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d10c      	bne.n	8005abe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005aaa:	2100      	movs	r1, #0
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f965 	bl	8005d7c <USB_SetDevSpeed>
 8005ab2:	e008      	b.n	8005ac6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f960 	bl	8005d7c <USB_SetDevSpeed>
 8005abc:	e003      	b.n	8005ac6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005abe:	2103      	movs	r1, #3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f95b 	bl	8005d7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ac6:	2110      	movs	r1, #16
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f8f3 	bl	8005cb4 <USB_FlushTxFifo>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f91f 	bl	8005d1c <USB_FlushRxFifo>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	461a      	mov	r2, r3
 8005af0:	2300      	movs	r3, #0
 8005af2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afa:	461a      	mov	r2, r3
 8005afc:	2300      	movs	r3, #0
 8005afe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	461a      	mov	r2, r3
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	e043      	b.n	8005b9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b28:	d118      	bne.n	8005b5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	e013      	b.n	8005b6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b52:	461a      	mov	r2, r3
 8005b54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	e008      	b.n	8005b6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	461a      	mov	r2, r3
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	3301      	adds	r3, #1
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d3b7      	bcc.n	8005b12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	e043      	b.n	8005c30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bbe:	d118      	bne.n	8005bf2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e013      	b.n	8005c04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	461a      	mov	r2, r3
 8005bea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	e008      	b.n	8005c04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2300      	movs	r3, #0
 8005c02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	461a      	mov	r2, r3
 8005c12:	2300      	movs	r3, #0
 8005c14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c22:	461a      	mov	r2, r3
 8005c24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d3b7      	bcc.n	8005ba8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f043 0210 	orr.w	r2, r3, #16
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <USB_DevInit+0x2c4>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f043 0208 	orr.w	r2, r3, #8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d107      	bne.n	8005ca0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c98:	f043 0304 	orr.w	r3, r3, #4
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cac:	b004      	add	sp, #16
 8005cae:	4770      	bx	lr
 8005cb0:	803c3800 	.word	0x803c3800

08005cb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4a13      	ldr	r2, [pc, #76]	; (8005d18 <USB_FlushTxFifo+0x64>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d901      	bls.n	8005cd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e01b      	b.n	8005d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	daf2      	bge.n	8005cc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	019b      	lsls	r3, r3, #6
 8005ce4:	f043 0220 	orr.w	r2, r3, #32
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <USB_FlushTxFifo+0x64>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d901      	bls.n	8005cfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e006      	b.n	8005d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d0f0      	beq.n	8005cec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	00030d40 	.word	0x00030d40

08005d1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <USB_FlushRxFifo+0x5c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e018      	b.n	8005d6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	daf2      	bge.n	8005d28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2210      	movs	r2, #16
 8005d4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4a08      	ldr	r2, [pc, #32]	; (8005d78 <USB_FlushRxFifo+0x5c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e006      	b.n	8005d6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0310 	and.w	r3, r3, #16
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d0f0      	beq.n	8005d4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	00030d40 	.word	0x00030d40

08005d7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	68f9      	ldr	r1, [r7, #12]
 8005d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b087      	sub	sp, #28
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 0306 	and.w	r3, r3, #6
 8005dc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	75fb      	strb	r3, [r7, #23]
 8005dd2:	e00a      	b.n	8005dea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d002      	beq.n	8005de0 <USB_GetDevSpeed+0x32>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b06      	cmp	r3, #6
 8005dde:	d102      	bne.n	8005de6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005de0:	2302      	movs	r3, #2
 8005de2:	75fb      	strb	r3, [r7, #23]
 8005de4:	e001      	b.n	8005dea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005de6:	230f      	movs	r3, #15
 8005de8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	371c      	adds	r7, #28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d13a      	bne.n	8005e8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	2101      	movs	r1, #1
 8005e26:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	68f9      	ldr	r1, [r7, #12]
 8005e2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e32:	4313      	orrs	r3, r2
 8005e34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d155      	bne.n	8005ef8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	791b      	ldrb	r3, [r3, #4]
 8005e66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	059b      	lsls	r3, r3, #22
 8005e6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e70:	4313      	orrs	r3, r2
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	e036      	b.n	8005ef8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e90:	69da      	ldr	r2, [r3, #28]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	68f9      	ldr	r1, [r7, #12]
 8005ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d11a      	bne.n	8005ef8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	791b      	ldrb	r3, [r3, #4]
 8005edc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
	...

08005f08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d161      	bne.n	8005fe8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f3a:	d11f      	bne.n	8005f7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 030f 	and.w	r3, r3, #15
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	68f9      	ldr	r1, [r7, #12]
 8005fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	0159      	lsls	r1, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	440b      	add	r3, r1
 8005fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4b35      	ldr	r3, [pc, #212]	; (80060b8 <USB_DeactivateEndpoint+0x1b0>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	600b      	str	r3, [r1, #0]
 8005fe6:	e060      	b.n	80060aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ffe:	d11f      	bne.n	8006040 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800601e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800603a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800603e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	2101      	movs	r1, #1
 8006052:	fa01 f303 	lsl.w	r3, r1, r3
 8006056:	041b      	lsls	r3, r3, #16
 8006058:	43db      	mvns	r3, r3
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006060:	4013      	ands	r3, r2
 8006062:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	2101      	movs	r1, #1
 8006076:	fa01 f303 	lsl.w	r3, r1, r3
 800607a:	041b      	lsls	r3, r3, #16
 800607c:	43db      	mvns	r3, r3
 800607e:	68f9      	ldr	r1, [r7, #12]
 8006080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006084:	4013      	ands	r3, r2
 8006086:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	0159      	lsls	r1, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	440b      	add	r3, r1
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	4619      	mov	r1, r3
 80060a4:	4b05      	ldr	r3, [pc, #20]	; (80060bc <USB_DeactivateEndpoint+0x1b4>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	ec337800 	.word	0xec337800
 80060bc:	eff37800 	.word	0xeff37800

080060c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	f040 815c 	bne.w	800639a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d132      	bne.n	8006150 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006104:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006108:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800610c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006128:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800612c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	440a      	add	r2, r1
 8006144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006148:	0cdb      	lsrs	r3, r3, #19
 800614a:	04db      	lsls	r3, r3, #19
 800614c:	6113      	str	r3, [r2, #16]
 800614e:	e074      	b.n	800623a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	440a      	add	r2, r1
 8006166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616a:	0cdb      	lsrs	r3, r3, #19
 800616c:	04db      	lsls	r3, r3, #19
 800616e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	440a      	add	r2, r1
 8006186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800618e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006192:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6999      	ldr	r1, [r3, #24]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	440b      	add	r3, r1
 80061ac:	1e59      	subs	r1, r3, #1
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80061b6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80061b8:	4b9d      	ldr	r3, [pc, #628]	; (8006430 <USB_EPStartXfer+0x370>)
 80061ba:	400b      	ands	r3, r1
 80061bc:	69b9      	ldr	r1, [r7, #24]
 80061be:	0148      	lsls	r0, r1, #5
 80061c0:	69f9      	ldr	r1, [r7, #28]
 80061c2:	4401      	add	r1, r0
 80061c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061c8:	4313      	orrs	r3, r2
 80061ca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e2:	69b9      	ldr	r1, [r7, #24]
 80061e4:	0148      	lsls	r0, r1, #5
 80061e6:	69f9      	ldr	r1, [r7, #28]
 80061e8:	4401      	add	r1, r0
 80061ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061ee:	4313      	orrs	r3, r2
 80061f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	791b      	ldrb	r3, [r3, #4]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d11f      	bne.n	800623a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006214:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006218:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006234:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006238:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d14b      	bne.n	80062d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	461a      	mov	r2, r3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	791b      	ldrb	r3, [r3, #4]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d128      	bne.n	80062b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d110      	bne.n	8006296 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	e00f      	b.n	80062b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	69fa      	ldr	r2, [r7, #28]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e133      	b.n	8006540 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	791b      	ldrb	r3, [r3, #4]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d015      	beq.n	800632c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 811b 	beq.w	8006540 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	2101      	movs	r1, #1
 800631c:	fa01 f303 	lsl.w	r3, r1, r3
 8006320:	69f9      	ldr	r1, [r7, #28]
 8006322:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006326:	4313      	orrs	r3, r2
 8006328:	634b      	str	r3, [r1, #52]	; 0x34
 800632a:	e109      	b.n	8006540 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d110      	bne.n	800635e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	440a      	add	r2, r1
 8006352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006356:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	e00f      	b.n	800637e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	440a      	add	r2, r1
 8006374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6919      	ldr	r1, [r3, #16]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	781a      	ldrb	r2, [r3, #0]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	b298      	uxth	r0, r3
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	4603      	mov	r3, r0
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fade 	bl	8006954 <USB_WritePacket>
 8006398:	e0d2      	b.n	8006540 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b4:	0cdb      	lsrs	r3, r3, #19
 80063b6:	04db      	lsls	r3, r3, #19
 80063b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	0151      	lsls	r1, r2, #5
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	440a      	add	r2, r1
 80063d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d126      	bne.n	8006434 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063fc:	69b9      	ldr	r1, [r7, #24]
 80063fe:	0148      	lsls	r0, r1, #5
 8006400:	69f9      	ldr	r1, [r7, #28]
 8006402:	4401      	add	r1, r0
 8006404:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006408:	4313      	orrs	r3, r2
 800640a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	440a      	add	r2, r1
 8006422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800642a:	6113      	str	r3, [r2, #16]
 800642c:	e03a      	b.n	80064a4 <USB_EPStartXfer+0x3e4>
 800642e:	bf00      	nop
 8006430:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4413      	add	r3, r2
 800643e:	1e5a      	subs	r2, r3, #1
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	fbb2 f3f3 	udiv	r3, r2, r3
 8006448:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	8afa      	ldrh	r2, [r7, #22]
 8006450:	fb03 f202 	mul.w	r2, r3, r2
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	8afb      	ldrh	r3, [r7, #22]
 8006468:	04d9      	lsls	r1, r3, #19
 800646a:	4b38      	ldr	r3, [pc, #224]	; (800654c <USB_EPStartXfer+0x48c>)
 800646c:	400b      	ands	r3, r1
 800646e:	69b9      	ldr	r1, [r7, #24]
 8006470:	0148      	lsls	r0, r1, #5
 8006472:	69f9      	ldr	r1, [r7, #28]
 8006474:	4401      	add	r1, r0
 8006476:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800647a:	4313      	orrs	r3, r2
 800647c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006494:	69b9      	ldr	r1, [r7, #24]
 8006496:	0148      	lsls	r0, r1, #5
 8006498:	69f9      	ldr	r1, [r7, #28]
 800649a:	4401      	add	r1, r0
 800649c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064a0:	4313      	orrs	r3, r2
 80064a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d10d      	bne.n	80064c6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6919      	ldr	r1, [r3, #16]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	460a      	mov	r2, r1
 80064c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	791b      	ldrb	r3, [r3, #4]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d128      	bne.n	8006520 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d110      	bne.n	8006500 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	0151      	lsls	r1, r2, #5
 80064f0:	69fa      	ldr	r2, [r7, #28]
 80064f2:	440a      	add	r2, r1
 80064f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	e00f      	b.n	8006520 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	440a      	add	r2, r1
 8006516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800651a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800651e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800653a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800653e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3720      	adds	r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	1ff80000 	.word	0x1ff80000

08006550 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b01      	cmp	r3, #1
 800656e:	f040 80ce 	bne.w	800670e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d132      	bne.n	80065e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006594:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006598:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800659c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d8:	0cdb      	lsrs	r3, r3, #19
 80065da:	04db      	lsls	r3, r3, #19
 80065dc:	6113      	str	r3, [r2, #16]
 80065de:	e04e      	b.n	800667e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fa:	0cdb      	lsrs	r3, r3, #19
 80065fc:	04db      	lsls	r3, r3, #19
 80065fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800661a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800661e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006622:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	699a      	ldr	r2, [r3, #24]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	429a      	cmp	r2, r3
 800662e:	d903      	bls.n	8006638 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006656:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800666e:	6939      	ldr	r1, [r7, #16]
 8006670:	0148      	lsls	r0, r1, #5
 8006672:	6979      	ldr	r1, [r7, #20]
 8006674:	4401      	add	r1, r0
 8006676:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800667a:	4313      	orrs	r3, r2
 800667c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d11e      	bne.n	80066c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006698:	461a      	mov	r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	e097      	b.n	80067f2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8083 	beq.w	80067f2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	2101      	movs	r1, #1
 80066fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006702:	6979      	ldr	r1, [r7, #20]
 8006704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006708:	4313      	orrs	r3, r2
 800670a:	634b      	str	r3, [r1, #52]	; 0x34
 800670c:	e071      	b.n	80067f2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	440a      	add	r2, r1
 8006724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006728:	0cdb      	lsrs	r3, r3, #19
 800672a:	04db      	lsls	r3, r3, #19
 800672c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	440a      	add	r2, r1
 8006744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006748:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800674c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006750:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006788:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067a0:	6939      	ldr	r1, [r7, #16]
 80067a2:	0148      	lsls	r0, r1, #5
 80067a4:	6979      	ldr	r1, [r7, #20]
 80067a6:	4401      	add	r1, r0
 80067a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067ac:	4313      	orrs	r3, r2
 80067ae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d10d      	bne.n	80067d2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d009      	beq.n	80067d2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	6919      	ldr	r1, [r3, #16]
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ce:	460a      	mov	r2, r1
 80067d0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	785b      	ldrb	r3, [r3, #1]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d14a      	bne.n	80068b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006836:	f040 8086 	bne.w	8006946 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	7812      	ldrb	r2, [r2, #0]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	440a      	add	r2, r1
 8006854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006858:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800685c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	7812      	ldrb	r2, [r2, #0]
 8006872:	0151      	lsls	r1, r2, #5
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	440a      	add	r2, r1
 8006878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800687c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006880:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3301      	adds	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f242 7210 	movw	r2, #10000	; 0x2710
 800688e:	4293      	cmp	r3, r2
 8006890:	d902      	bls.n	8006898 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	75fb      	strb	r3, [r7, #23]
          break;
 8006896:	e056      	b.n	8006946 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068b0:	d0e7      	beq.n	8006882 <USB_EPStopXfer+0x82>
 80068b2:	e048      	b.n	8006946 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068cc:	d13b      	bne.n	8006946 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	7812      	ldrb	r2, [r2, #0]
 80068e2:	0151      	lsls	r1, r2, #5
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	440a      	add	r2, r1
 80068e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	7812      	ldrb	r2, [r2, #0]
 8006906:	0151      	lsls	r1, r2, #5
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	440a      	add	r2, r1
 800690c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006914:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006922:	4293      	cmp	r3, r2
 8006924:	d902      	bls.n	800692c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	75fb      	strb	r3, [r7, #23]
          break;
 800692a:	e00c      	b.n	8006946 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006944:	d0e7      	beq.n	8006916 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
}
 8006948:	4618      	mov	r0, r3
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006954:	b480      	push	{r7}
 8006956:	b089      	sub	sp, #36	; 0x24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	4611      	mov	r1, r2
 8006960:	461a      	mov	r2, r3
 8006962:	460b      	mov	r3, r1
 8006964:	71fb      	strb	r3, [r7, #7]
 8006966:	4613      	mov	r3, r2
 8006968:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006972:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006976:	2b00      	cmp	r3, #0
 8006978:	d123      	bne.n	80069c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800697a:	88bb      	ldrh	r3, [r7, #4]
 800697c:	3303      	adds	r3, #3
 800697e:	089b      	lsrs	r3, r3, #2
 8006980:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006982:	2300      	movs	r3, #0
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	e018      	b.n	80069ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	031a      	lsls	r2, r3, #12
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	4413      	add	r3, r2
 8006990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006994:	461a      	mov	r2, r3
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	3301      	adds	r3, #1
 80069a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	3301      	adds	r3, #1
 80069a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	3301      	adds	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	3301      	adds	r3, #1
 80069b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	3301      	adds	r3, #1
 80069b8:	61bb      	str	r3, [r7, #24]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d3e2      	bcc.n	8006988 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3724      	adds	r7, #36	; 0x24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b08b      	sub	sp, #44	; 0x2c
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	f003 0303 	and.w	r3, r3, #3
 80069f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069f6:	2300      	movs	r3, #0
 80069f8:	623b      	str	r3, [r7, #32]
 80069fa:	e014      	b.n	8006a26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	3301      	adds	r3, #1
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	3301      	adds	r3, #1
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	3301      	adds	r3, #1
 8006a24:	623b      	str	r3, [r7, #32]
 8006a26:	6a3a      	ldr	r2, [r7, #32]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d3e6      	bcc.n	80069fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a2e:	8bfb      	ldrh	r3, [r7, #30]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01e      	beq.n	8006a72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f107 0310 	add.w	r3, r7, #16
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	fa22 f303 	lsr.w	r3, r2, r3
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	701a      	strb	r2, [r3, #0]
      i++;
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	3301      	adds	r3, #1
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a66:	8bfb      	ldrh	r3, [r7, #30]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a6c:	8bfb      	ldrh	r3, [r7, #30]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1ea      	bne.n	8006a48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	372c      	adds	r7, #44	; 0x2c
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	785b      	ldrb	r3, [r3, #1]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d12c      	bne.n	8006af6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	db12      	blt.n	8006ad4 <USB_EPSetStall+0x54>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00f      	beq.n	8006ad4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ace:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ad2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	e02b      	b.n	8006b4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	db12      	blt.n	8006b2e <USB_EPSetStall+0xae>
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00f      	beq.n	8006b2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	0151      	lsls	r1, r2, #5
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	440a      	add	r2, r1
 8006b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d128      	bne.n	8006bca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	0151      	lsls	r1, r2, #5
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	440a      	add	r2, r1
 8006b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	791b      	ldrb	r3, [r3, #4]
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d003      	beq.n	8006ba8 <USB_EPClearStall+0x4c>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	791b      	ldrb	r3, [r3, #4]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d138      	bne.n	8006c1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	e027      	b.n	8006c1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	0151      	lsls	r1, r2, #5
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	440a      	add	r2, r1
 8006be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006be8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	791b      	ldrb	r3, [r3, #4]
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d003      	beq.n	8006bfa <USB_EPClearStall+0x9e>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	791b      	ldrb	r3, [r3, #4]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d10f      	bne.n	8006c1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c5c:	68f9      	ldr	r1, [r7, #12]
 8006c5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c62:	4313      	orrs	r3, r2
 8006c64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c8e:	f023 0303 	bic.w	r3, r3, #3
 8006c92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ca2:	f023 0302 	bic.w	r3, r3, #2
 8006ca6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b085      	sub	sp, #20
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cd0:	f023 0303 	bic.w	r3, r3, #3
 8006cd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ce4:	f043 0302 	orr.w	r3, r3, #2
 8006ce8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d10:	68fb      	ldr	r3, [r7, #12]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	0c1b      	lsrs	r3, r3, #16
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	4013      	ands	r3, r2
 8006d74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	b29b      	uxth	r3, r3
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	4013      	ands	r3, r2
 8006db2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006db4:	68bb      	ldr	r3, [r7, #8]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b087      	sub	sp, #28
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	fa22 f303 	lsr.w	r3, r2, r3
 8006df2:	01db      	lsls	r3, r3, #7
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e10:	68bb      	ldr	r3, [r7, #8]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e58:	f023 0307 	bic.w	r3, r3, #7
 8006e5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	333c      	adds	r3, #60	; 0x3c
 8006e96:	3304      	adds	r3, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	4a26      	ldr	r2, [pc, #152]	; (8006f38 <USB_EP0_OutStart+0xb8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d90a      	bls.n	8006eba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb4:	d101      	bne.n	8006eba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e037      	b.n	8006f2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee8:	f043 0318 	orr.w	r3, r3, #24
 8006eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006efc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f02:	7afb      	ldrb	r3, [r7, #11]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d10f      	bne.n	8006f28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0e:	461a      	mov	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	4f54300a 	.word	0x4f54300a

08006f3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4a13      	ldr	r2, [pc, #76]	; (8006fa0 <USB_CoreReset+0x64>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d901      	bls.n	8006f5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e01b      	b.n	8006f92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	daf2      	bge.n	8006f48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f043 0201 	orr.w	r2, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3301      	adds	r3, #1
 8006f76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <USB_CoreReset+0x64>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d901      	bls.n	8006f84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e006      	b.n	8006f92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d0f0      	beq.n	8006f72 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	00030d40 	.word	0x00030d40

08006fa4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006fb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006fb4:	f002 fcca 	bl	800994c <USBD_static_malloc>
 8006fb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d109      	bne.n	8006fd4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	32b0      	adds	r2, #176	; 0xb0
 8006fca:	2100      	movs	r1, #0
 8006fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e0d4      	b.n	800717e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006fd4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006fd8:	2100      	movs	r1, #0
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f002 fe8a 	bl	8009cf4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	32b0      	adds	r2, #176	; 0xb0
 8006fea:	68f9      	ldr	r1, [r7, #12]
 8006fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	32b0      	adds	r2, #176	; 0xb0
 8006ffa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7c1b      	ldrb	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d138      	bne.n	800707e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800700c:	4b5e      	ldr	r3, [pc, #376]	; (8007188 <USBD_CDC_Init+0x1e4>)
 800700e:	7819      	ldrb	r1, [r3, #0]
 8007010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007014:	2202      	movs	r2, #2
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f002 fb75 	bl	8009706 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800701c:	4b5a      	ldr	r3, [pc, #360]	; (8007188 <USBD_CDC_Init+0x1e4>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	f003 020f 	and.w	r2, r3, #15
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	3324      	adds	r3, #36	; 0x24
 8007032:	2201      	movs	r2, #1
 8007034:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007036:	4b55      	ldr	r3, [pc, #340]	; (800718c <USBD_CDC_Init+0x1e8>)
 8007038:	7819      	ldrb	r1, [r3, #0]
 800703a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800703e:	2202      	movs	r2, #2
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f002 fb60 	bl	8009706 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007046:	4b51      	ldr	r3, [pc, #324]	; (800718c <USBD_CDC_Init+0x1e8>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	f003 020f 	and.w	r2, r3, #15
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800705e:	2201      	movs	r2, #1
 8007060:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007062:	4b4b      	ldr	r3, [pc, #300]	; (8007190 <USBD_CDC_Init+0x1ec>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	f003 020f 	and.w	r2, r3, #15
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	3326      	adds	r3, #38	; 0x26
 8007078:	2210      	movs	r2, #16
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	e035      	b.n	80070ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800707e:	4b42      	ldr	r3, [pc, #264]	; (8007188 <USBD_CDC_Init+0x1e4>)
 8007080:	7819      	ldrb	r1, [r3, #0]
 8007082:	2340      	movs	r3, #64	; 0x40
 8007084:	2202      	movs	r2, #2
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f002 fb3d 	bl	8009706 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800708c:	4b3e      	ldr	r3, [pc, #248]	; (8007188 <USBD_CDC_Init+0x1e4>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	f003 020f 	and.w	r2, r3, #15
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	3324      	adds	r3, #36	; 0x24
 80070a2:	2201      	movs	r2, #1
 80070a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80070a6:	4b39      	ldr	r3, [pc, #228]	; (800718c <USBD_CDC_Init+0x1e8>)
 80070a8:	7819      	ldrb	r1, [r3, #0]
 80070aa:	2340      	movs	r3, #64	; 0x40
 80070ac:	2202      	movs	r2, #2
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f002 fb29 	bl	8009706 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80070b4:	4b35      	ldr	r3, [pc, #212]	; (800718c <USBD_CDC_Init+0x1e8>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	f003 020f 	and.w	r2, r3, #15
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070cc:	2201      	movs	r2, #1
 80070ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80070d0:	4b2f      	ldr	r3, [pc, #188]	; (8007190 <USBD_CDC_Init+0x1ec>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f003 020f 	and.w	r2, r3, #15
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	3326      	adds	r3, #38	; 0x26
 80070e6:	2210      	movs	r2, #16
 80070e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070ea:	4b29      	ldr	r3, [pc, #164]	; (8007190 <USBD_CDC_Init+0x1ec>)
 80070ec:	7819      	ldrb	r1, [r3, #0]
 80070ee:	2308      	movs	r3, #8
 80070f0:	2203      	movs	r2, #3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f002 fb07 	bl	8009706 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80070f8:	4b25      	ldr	r3, [pc, #148]	; (8007190 <USBD_CDC_Init+0x1ec>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	3324      	adds	r3, #36	; 0x24
 800710e:	2201      	movs	r2, #1
 8007110:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	33b0      	adds	r3, #176	; 0xb0
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007148:	2302      	movs	r3, #2
 800714a:	e018      	b.n	800717e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	7c1b      	ldrb	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007154:	4b0d      	ldr	r3, [pc, #52]	; (800718c <USBD_CDC_Init+0x1e8>)
 8007156:	7819      	ldrb	r1, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800715e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f002 fbbe 	bl	80098e4 <USBD_LL_PrepareReceive>
 8007168:	e008      	b.n	800717c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800716a:	4b08      	ldr	r3, [pc, #32]	; (800718c <USBD_CDC_Init+0x1e8>)
 800716c:	7819      	ldrb	r1, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007174:	2340      	movs	r3, #64	; 0x40
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f002 fbb4 	bl	80098e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20000093 	.word	0x20000093
 800718c:	20000094 	.word	0x20000094
 8007190:	20000095 	.word	0x20000095

08007194 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80071a0:	4b3a      	ldr	r3, [pc, #232]	; (800728c <USBD_CDC_DeInit+0xf8>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f002 fad3 	bl	8009752 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80071ac:	4b37      	ldr	r3, [pc, #220]	; (800728c <USBD_CDC_DeInit+0xf8>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	f003 020f 	and.w	r2, r3, #15
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	3324      	adds	r3, #36	; 0x24
 80071c2:	2200      	movs	r2, #0
 80071c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80071c6:	4b32      	ldr	r3, [pc, #200]	; (8007290 <USBD_CDC_DeInit+0xfc>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f002 fac0 	bl	8009752 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80071d2:	4b2f      	ldr	r3, [pc, #188]	; (8007290 <USBD_CDC_DeInit+0xfc>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	f003 020f 	and.w	r2, r3, #15
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071ea:	2200      	movs	r2, #0
 80071ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80071ee:	4b29      	ldr	r3, [pc, #164]	; (8007294 <USBD_CDC_DeInit+0x100>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f002 faac 	bl	8009752 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80071fa:	4b26      	ldr	r3, [pc, #152]	; (8007294 <USBD_CDC_DeInit+0x100>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	f003 020f 	and.w	r2, r3, #15
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	440b      	add	r3, r1
 800720e:	3324      	adds	r3, #36	; 0x24
 8007210:	2200      	movs	r2, #0
 8007212:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007214:	4b1f      	ldr	r3, [pc, #124]	; (8007294 <USBD_CDC_DeInit+0x100>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	f003 020f 	and.w	r2, r3, #15
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	440b      	add	r3, r1
 8007228:	3326      	adds	r3, #38	; 0x26
 800722a:	2200      	movs	r2, #0
 800722c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	32b0      	adds	r2, #176	; 0xb0
 8007238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01f      	beq.n	8007280 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	33b0      	adds	r3, #176	; 0xb0
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	32b0      	adds	r2, #176	; 0xb0
 800725e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007262:	4618      	mov	r0, r3
 8007264:	f002 fb80 	bl	8009968 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	32b0      	adds	r2, #176	; 0xb0
 8007272:	2100      	movs	r1, #0
 8007274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000093 	.word	0x20000093
 8007290:	20000094 	.word	0x20000094
 8007294:	20000095 	.word	0x20000095

08007298 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	32b0      	adds	r2, #176	; 0xb0
 80072ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e0bf      	b.n	8007448 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d050      	beq.n	8007376 <USBD_CDC_Setup+0xde>
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	f040 80af 	bne.w	8007438 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	88db      	ldrh	r3, [r3, #6]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d03a      	beq.n	8007358 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b25b      	sxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	da1b      	bge.n	8007324 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	33b0      	adds	r3, #176	; 0xb0
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007302:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	88d2      	ldrh	r2, [r2, #6]
 8007308:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	88db      	ldrh	r3, [r3, #6]
 800730e:	2b07      	cmp	r3, #7
 8007310:	bf28      	it	cs
 8007312:	2307      	movcs	r3, #7
 8007314:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	89fa      	ldrh	r2, [r7, #14]
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fd89 	bl	8008e34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007322:	e090      	b.n	8007446 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	785a      	ldrb	r2, [r3, #1]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	88db      	ldrh	r3, [r3, #6]
 8007332:	2b3f      	cmp	r3, #63	; 0x3f
 8007334:	d803      	bhi.n	800733e <USBD_CDC_Setup+0xa6>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	88db      	ldrh	r3, [r3, #6]
 800733a:	b2da      	uxtb	r2, r3
 800733c:	e000      	b.n	8007340 <USBD_CDC_Setup+0xa8>
 800733e:	2240      	movs	r2, #64	; 0x40
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007346:	6939      	ldr	r1, [r7, #16]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800734e:	461a      	mov	r2, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 fd9b 	bl	8008e8c <USBD_CtlPrepareRx>
      break;
 8007356:	e076      	b.n	8007446 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	33b0      	adds	r3, #176	; 0xb0
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	7850      	ldrb	r0, [r2, #1]
 800736e:	2200      	movs	r2, #0
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	4798      	blx	r3
      break;
 8007374:	e067      	b.n	8007446 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	2b0b      	cmp	r3, #11
 800737c:	d851      	bhi.n	8007422 <USBD_CDC_Setup+0x18a>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <USBD_CDC_Setup+0xec>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073b5 	.word	0x080073b5
 8007388:	08007431 	.word	0x08007431
 800738c:	08007423 	.word	0x08007423
 8007390:	08007423 	.word	0x08007423
 8007394:	08007423 	.word	0x08007423
 8007398:	08007423 	.word	0x08007423
 800739c:	08007423 	.word	0x08007423
 80073a0:	08007423 	.word	0x08007423
 80073a4:	08007423 	.word	0x08007423
 80073a8:	08007423 	.word	0x08007423
 80073ac:	080073df 	.word	0x080073df
 80073b0:	08007409 	.word	0x08007409
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d107      	bne.n	80073d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80073c0:	f107 030a 	add.w	r3, r7, #10
 80073c4:	2202      	movs	r2, #2
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 fd33 	bl	8008e34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073ce:	e032      	b.n	8007436 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 fcbd 	bl	8008d52 <USBD_CtlError>
            ret = USBD_FAIL;
 80073d8:	2303      	movs	r3, #3
 80073da:	75fb      	strb	r3, [r7, #23]
          break;
 80073dc:	e02b      	b.n	8007436 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d107      	bne.n	80073fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073ea:	f107 030d 	add.w	r3, r7, #13
 80073ee:	2201      	movs	r2, #1
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 fd1e 	bl	8008e34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073f8:	e01d      	b.n	8007436 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 fca8 	bl	8008d52 <USBD_CtlError>
            ret = USBD_FAIL;
 8007402:	2303      	movs	r3, #3
 8007404:	75fb      	strb	r3, [r7, #23]
          break;
 8007406:	e016      	b.n	8007436 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b03      	cmp	r3, #3
 8007412:	d00f      	beq.n	8007434 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 fc9b 	bl	8008d52 <USBD_CtlError>
            ret = USBD_FAIL;
 800741c:	2303      	movs	r3, #3
 800741e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007420:	e008      	b.n	8007434 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 fc94 	bl	8008d52 <USBD_CtlError>
          ret = USBD_FAIL;
 800742a:	2303      	movs	r3, #3
 800742c:	75fb      	strb	r3, [r7, #23]
          break;
 800742e:	e002      	b.n	8007436 <USBD_CDC_Setup+0x19e>
          break;
 8007430:	bf00      	nop
 8007432:	e008      	b.n	8007446 <USBD_CDC_Setup+0x1ae>
          break;
 8007434:	bf00      	nop
      }
      break;
 8007436:	e006      	b.n	8007446 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 fc89 	bl	8008d52 <USBD_CtlError>
      ret = USBD_FAIL;
 8007440:	2303      	movs	r3, #3
 8007442:	75fb      	strb	r3, [r7, #23]
      break;
 8007444:	bf00      	nop
  }

  return (uint8_t)ret;
 8007446:	7dfb      	ldrb	r3, [r7, #23]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007462:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	32b0      	adds	r2, #176	; 0xb0
 800746e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007476:	2303      	movs	r3, #3
 8007478:	e065      	b.n	8007546 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	32b0      	adds	r2, #176	; 0xb0
 8007484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007488:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	f003 020f 	and.w	r2, r3, #15
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	440b      	add	r3, r1
 800749c:	3318      	adds	r3, #24
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d02f      	beq.n	8007504 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	f003 020f 	and.w	r2, r3, #15
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	3318      	adds	r3, #24
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	f003 010f 	and.w	r1, r3, #15
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	460b      	mov	r3, r1
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	440b      	add	r3, r1
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4403      	add	r3, r0
 80074cc:	3348      	adds	r3, #72	; 0x48
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80074d4:	fb01 f303 	mul.w	r3, r1, r3
 80074d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d112      	bne.n	8007504 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80074de:	78fb      	ldrb	r3, [r7, #3]
 80074e0:	f003 020f 	and.w	r2, r3, #15
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	440b      	add	r3, r1
 80074f0:	3318      	adds	r3, #24
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074f6:	78f9      	ldrb	r1, [r7, #3]
 80074f8:	2300      	movs	r3, #0
 80074fa:	2200      	movs	r2, #0
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f002 f9d0 	bl	80098a2 <USBD_LL_Transmit>
 8007502:	e01f      	b.n	8007544 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	33b0      	adds	r3, #176	; 0xb0
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d010      	beq.n	8007544 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	33b0      	adds	r3, #176	; 0xb0
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007540:	78fa      	ldrb	r2, [r7, #3]
 8007542:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	32b0      	adds	r2, #176	; 0xb0
 8007564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007568:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	32b0      	adds	r2, #176	; 0xb0
 8007574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800757c:	2303      	movs	r3, #3
 800757e:	e01a      	b.n	80075b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f002 f9ce 	bl	8009926 <USBD_LL_GetRxDataSize>
 800758a:	4602      	mov	r2, r0
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	33b0      	adds	r3, #176	; 0xb0
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80075b0:	4611      	mov	r1, r2
 80075b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	32b0      	adds	r2, #176	; 0xb0
 80075d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075dc:	2303      	movs	r3, #3
 80075de:	e025      	b.n	800762c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	33b0      	adds	r3, #176	; 0xb0
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01a      	beq.n	800762a <USBD_CDC_EP0_RxReady+0x6c>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80075fa:	2bff      	cmp	r3, #255	; 0xff
 80075fc:	d015      	beq.n	800762a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	33b0      	adds	r3, #176	; 0xb0
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007616:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800761e:	b292      	uxth	r2, r2
 8007620:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	22ff      	movs	r2, #255	; 0xff
 8007626:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800763c:	2182      	movs	r1, #130	; 0x82
 800763e:	4818      	ldr	r0, [pc, #96]	; (80076a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007640:	f000 fd4f 	bl	80080e2 <USBD_GetEpDesc>
 8007644:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007646:	2101      	movs	r1, #1
 8007648:	4815      	ldr	r0, [pc, #84]	; (80076a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800764a:	f000 fd4a 	bl	80080e2 <USBD_GetEpDesc>
 800764e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007650:	2181      	movs	r1, #129	; 0x81
 8007652:	4813      	ldr	r0, [pc, #76]	; (80076a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007654:	f000 fd45 	bl	80080e2 <USBD_GetEpDesc>
 8007658:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2210      	movs	r2, #16
 8007664:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d006      	beq.n	800767a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	2200      	movs	r2, #0
 8007670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007674:	711a      	strb	r2, [r3, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d006      	beq.n	800768e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007688:	711a      	strb	r2, [r3, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2243      	movs	r2, #67	; 0x43
 8007692:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20000050 	.word	0x20000050

080076a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076ac:	2182      	movs	r1, #130	; 0x82
 80076ae:	4818      	ldr	r0, [pc, #96]	; (8007710 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076b0:	f000 fd17 	bl	80080e2 <USBD_GetEpDesc>
 80076b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076b6:	2101      	movs	r1, #1
 80076b8:	4815      	ldr	r0, [pc, #84]	; (8007710 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076ba:	f000 fd12 	bl	80080e2 <USBD_GetEpDesc>
 80076be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076c0:	2181      	movs	r1, #129	; 0x81
 80076c2:	4813      	ldr	r0, [pc, #76]	; (8007710 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076c4:	f000 fd0d 	bl	80080e2 <USBD_GetEpDesc>
 80076c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2210      	movs	r2, #16
 80076d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d006      	beq.n	80076ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	2200      	movs	r2, #0
 80076e0:	711a      	strb	r2, [r3, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f042 0202 	orr.w	r2, r2, #2
 80076e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d006      	beq.n	80076fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	711a      	strb	r2, [r3, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f042 0202 	orr.w	r2, r2, #2
 80076fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2243      	movs	r2, #67	; 0x43
 8007702:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007704:	4b02      	ldr	r3, [pc, #8]	; (8007710 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007706:	4618      	mov	r0, r3
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20000050 	.word	0x20000050

08007714 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800771c:	2182      	movs	r1, #130	; 0x82
 800771e:	4818      	ldr	r0, [pc, #96]	; (8007780 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007720:	f000 fcdf 	bl	80080e2 <USBD_GetEpDesc>
 8007724:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007726:	2101      	movs	r1, #1
 8007728:	4815      	ldr	r0, [pc, #84]	; (8007780 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800772a:	f000 fcda 	bl	80080e2 <USBD_GetEpDesc>
 800772e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007730:	2181      	movs	r1, #129	; 0x81
 8007732:	4813      	ldr	r0, [pc, #76]	; (8007780 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007734:	f000 fcd5 	bl	80080e2 <USBD_GetEpDesc>
 8007738:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2210      	movs	r2, #16
 8007744:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d006      	beq.n	800775a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2200      	movs	r2, #0
 8007750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007754:	711a      	strb	r2, [r3, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d006      	beq.n	800776e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007768:	711a      	strb	r2, [r3, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2243      	movs	r2, #67	; 0x43
 8007772:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007774:	4b02      	ldr	r3, [pc, #8]	; (8007780 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007776:	4618      	mov	r0, r3
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20000050 	.word	0x20000050

08007784 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	220a      	movs	r2, #10
 8007790:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007792:	4b03      	ldr	r3, [pc, #12]	; (80077a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	2000000c 	.word	0x2000000c

080077a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e009      	b.n	80077cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	33b0      	adds	r3, #176	; 0xb0
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	32b0      	adds	r2, #176	; 0xb0
 80077ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e008      	b.n	8007810 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	32b0      	adds	r2, #176	; 0xb0
 8007830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007834:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800783c:	2303      	movs	r3, #3
 800783e:	e004      	b.n	800784a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
	...

08007858 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	32b0      	adds	r2, #176	; 0xb0
 800786a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007870:	2301      	movs	r3, #1
 8007872:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	32b0      	adds	r2, #176	; 0xb0
 800787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007886:	2303      	movs	r3, #3
 8007888:	e025      	b.n	80078d6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007890:	2b00      	cmp	r3, #0
 8007892:	d11f      	bne.n	80078d4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2201      	movs	r2, #1
 8007898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800789c:	4b10      	ldr	r3, [pc, #64]	; (80078e0 <USBD_CDC_TransmitPacket+0x88>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	f003 020f 	and.w	r2, r3, #15
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4403      	add	r3, r0
 80078b6:	3318      	adds	r3, #24
 80078b8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80078ba:	4b09      	ldr	r3, [pc, #36]	; (80078e0 <USBD_CDC_TransmitPacket+0x88>)
 80078bc:	7819      	ldrb	r1, [r3, #0]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 ffe9 	bl	80098a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000093 	.word	0x20000093

080078e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	32b0      	adds	r2, #176	; 0xb0
 80078f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32b0      	adds	r2, #176	; 0xb0
 8007906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800790e:	2303      	movs	r3, #3
 8007910:	e018      	b.n	8007944 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7c1b      	ldrb	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800791a:	4b0c      	ldr	r3, [pc, #48]	; (800794c <USBD_CDC_ReceivePacket+0x68>)
 800791c:	7819      	ldrb	r1, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 ffdb 	bl	80098e4 <USBD_LL_PrepareReceive>
 800792e:	e008      	b.n	8007942 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007930:	4b06      	ldr	r3, [pc, #24]	; (800794c <USBD_CDC_ReceivePacket+0x68>)
 8007932:	7819      	ldrb	r1, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800793a:	2340      	movs	r3, #64	; 0x40
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 ffd1 	bl	80098e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000094 	.word	0x20000094

08007950 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	4613      	mov	r3, r2
 800795c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007964:	2303      	movs	r3, #3
 8007966:	e01f      	b.n	80079a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	79fa      	ldrb	r2, [r7, #7]
 800799a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f001 fe4b 	bl	8009638 <USBD_LL_Init>
 80079a2:	4603      	mov	r3, r0
 80079a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e025      	b.n	8007a14 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	32ae      	adds	r2, #174	; 0xae
 80079da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00f      	beq.n	8007a04 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	32ae      	adds	r2, #174	; 0xae
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f4:	f107 020e 	add.w	r2, r7, #14
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	4602      	mov	r2, r0
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fe53 	bl	80096d0 <USBD_LL_Start>
 8007a2a:	4603      	mov	r3, r0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d009      	beq.n	8007a78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	78fa      	ldrb	r2, [r7, #3]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	78fa      	ldrb	r2, [r7, #3]
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 f908 	bl	8008cde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007adc:	461a      	mov	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007aea:	f003 031f 	and.w	r3, r3, #31
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d01a      	beq.n	8007b28 <USBD_LL_SetupStage+0x72>
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d822      	bhi.n	8007b3c <USBD_LL_SetupStage+0x86>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <USBD_LL_SetupStage+0x4a>
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d00a      	beq.n	8007b14 <USBD_LL_SetupStage+0x5e>
 8007afe:	e01d      	b.n	8007b3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fb5f 	bl	80081cc <USBD_StdDevReq>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73fb      	strb	r3, [r7, #15]
      break;
 8007b12:	e020      	b.n	8007b56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fbc7 	bl	80082b0 <USBD_StdItfReq>
 8007b22:	4603      	mov	r3, r0
 8007b24:	73fb      	strb	r3, [r7, #15]
      break;
 8007b26:	e016      	b.n	8007b56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fc29 	bl	8008388 <USBD_StdEPReq>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]
      break;
 8007b3a:	e00c      	b.n	8007b56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 fe20 	bl	8009790 <USBD_LL_StallEP>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
      break;
 8007b54:	bf00      	nop
  }

  return ret;
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007b72:	7afb      	ldrb	r3, [r7, #11]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d16e      	bne.n	8007c56 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	f040 8098 	bne.w	8007cbc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d913      	bls.n	8007bc0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	1ad2      	subs	r2, r2, r3
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	bf28      	it	cs
 8007bb2:	4613      	movcs	r3, r2
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f001 f984 	bl	8008ec6 <USBD_CtlContinueRx>
 8007bbe:	e07d      	b.n	8007cbc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bc6:	f003 031f 	and.w	r3, r3, #31
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d014      	beq.n	8007bf8 <USBD_LL_DataOutStage+0x98>
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d81d      	bhi.n	8007c0e <USBD_LL_DataOutStage+0xae>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <USBD_LL_DataOutStage+0x7c>
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d003      	beq.n	8007be2 <USBD_LL_DataOutStage+0x82>
 8007bda:	e018      	b.n	8007c0e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	75bb      	strb	r3, [r7, #22]
            break;
 8007be0:	e018      	b.n	8007c14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	4619      	mov	r1, r3
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fa5e 	bl	80080ae <USBD_CoreFindIF>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	75bb      	strb	r3, [r7, #22]
            break;
 8007bf6:	e00d      	b.n	8007c14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	4619      	mov	r1, r3
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 fa60 	bl	80080c8 <USBD_CoreFindEP>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	75bb      	strb	r3, [r7, #22]
            break;
 8007c0c:	e002      	b.n	8007c14 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	75bb      	strb	r3, [r7, #22]
            break;
 8007c12:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007c14:	7dbb      	ldrb	r3, [r7, #22]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d119      	bne.n	8007c4e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d113      	bne.n	8007c4e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007c26:	7dba      	ldrb	r2, [r7, #22]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	32ae      	adds	r2, #174	; 0xae
 8007c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00b      	beq.n	8007c4e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007c36:	7dba      	ldrb	r2, [r7, #22]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007c3e:	7dba      	ldrb	r2, [r7, #22]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	32ae      	adds	r2, #174	; 0xae
 8007c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f001 f94a 	bl	8008ee8 <USBD_CtlSendStatus>
 8007c54:	e032      	b.n	8007cbc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007c56:	7afb      	ldrb	r3, [r7, #11]
 8007c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fa31 	bl	80080c8 <USBD_CoreFindEP>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c6a:	7dbb      	ldrb	r3, [r7, #22]
 8007c6c:	2bff      	cmp	r3, #255	; 0xff
 8007c6e:	d025      	beq.n	8007cbc <USBD_LL_DataOutStage+0x15c>
 8007c70:	7dbb      	ldrb	r3, [r7, #22]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d122      	bne.n	8007cbc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d117      	bne.n	8007cb2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007c82:	7dba      	ldrb	r2, [r7, #22]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	32ae      	adds	r2, #174	; 0xae
 8007c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00f      	beq.n	8007cb2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007c92:	7dba      	ldrb	r2, [r7, #22]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007c9a:	7dba      	ldrb	r2, [r7, #22]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	32ae      	adds	r2, #174	; 0xae
 8007ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	7afa      	ldrb	r2, [r7, #11]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	4798      	blx	r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	e000      	b.n	8007cbe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b086      	sub	sp, #24
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	607a      	str	r2, [r7, #4]
 8007cd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d16f      	bne.n	8007dba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3314      	adds	r3, #20
 8007cde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d15a      	bne.n	8007da0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d914      	bls.n	8007d20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f001 f8ac 	bl	8008e6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d12:	2300      	movs	r3, #0
 8007d14:	2200      	movs	r2, #0
 8007d16:	2100      	movs	r1, #0
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f001 fde3 	bl	80098e4 <USBD_LL_PrepareReceive>
 8007d1e:	e03f      	b.n	8007da0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d11c      	bne.n	8007d66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d316      	bcc.n	8007d66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d20f      	bcs.n	8007d66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d46:	2200      	movs	r2, #0
 8007d48:	2100      	movs	r1, #0
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f001 f88d 	bl	8008e6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d58:	2300      	movs	r3, #0
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f001 fdc0 	bl	80098e4 <USBD_LL_PrepareReceive>
 8007d64:	e01c      	b.n	8007da0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d10f      	bne.n	8007d92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d009      	beq.n	8007d92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d92:	2180      	movs	r1, #128	; 0x80
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f001 fcfb 	bl	8009790 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f001 f8b7 	bl	8008f0e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d03a      	beq.n	8007e20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff fe42 	bl	8007a34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007db8:	e032      	b.n	8007e20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007dba:	7afb      	ldrb	r3, [r7, #11]
 8007dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f97f 	bl	80080c8 <USBD_CoreFindEP>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
 8007dd0:	2bff      	cmp	r3, #255	; 0xff
 8007dd2:	d025      	beq.n	8007e20 <USBD_LL_DataInStage+0x15a>
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d122      	bne.n	8007e20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d11c      	bne.n	8007e20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007de6:	7dfa      	ldrb	r2, [r7, #23]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	32ae      	adds	r2, #174	; 0xae
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d014      	beq.n	8007e20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007df6:	7dfa      	ldrb	r2, [r7, #23]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007dfe:	7dfa      	ldrb	r2, [r7, #23]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	32ae      	adds	r2, #174	; 0xae
 8007e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	7afa      	ldrb	r2, [r7, #11]
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	4798      	blx	r3
 8007e12:	4603      	mov	r3, r0
 8007e14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007e16:	7dbb      	ldrb	r3, [r7, #22]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007e1c:	7dbb      	ldrb	r3, [r7, #22]
 8007e1e:	e000      	b.n	8007e22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d014      	beq.n	8007e90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00e      	beq.n	8007e90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6852      	ldr	r2, [r2, #4]
 8007e7e:	b2d2      	uxtb	r2, r2
 8007e80:	4611      	mov	r1, r2
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	4798      	blx	r3
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e90:	2340      	movs	r3, #64	; 0x40
 8007e92:	2200      	movs	r2, #0
 8007e94:	2100      	movs	r1, #0
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 fc35 	bl	8009706 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2240      	movs	r2, #64	; 0x40
 8007ea8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007eac:	2340      	movs	r3, #64	; 0x40
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2180      	movs	r1, #128	; 0x80
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 fc27 	bl	8009706 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2240      	movs	r2, #64	; 0x40
 8007ec2:	621a      	str	r2, [r3, #32]

  return ret;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2204      	movs	r2, #4
 8007f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d106      	bne.n	8007f3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d110      	bne.n	8007f80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	32ae      	adds	r2, #174	; 0xae
 8007fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e01c      	b.n	8007fe6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d115      	bne.n	8007fe4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	32ae      	adds	r2, #174	; 0xae
 8007fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	32ae      	adds	r2, #174	; 0xae
 8007fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	78fa      	ldrb	r2, [r7, #3]
 8007fde:	4611      	mov	r1, r2
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	32ae      	adds	r2, #174	; 0xae
 8008004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800800c:	2303      	movs	r3, #3
 800800e:	e01c      	b.n	800804a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b03      	cmp	r3, #3
 800801a:	d115      	bne.n	8008048 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	32ae      	adds	r2, #174	; 0xae
 8008026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	32ae      	adds	r2, #174	; 0xae
 800803a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	78fa      	ldrb	r2, [r7, #3]
 8008042:	4611      	mov	r1, r2
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00e      	beq.n	80080a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	6852      	ldr	r2, [r2, #4]
 8008092:	b2d2      	uxtb	r2, r2
 8008094:	4611      	mov	r1, r2
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80080a0:	2303      	movs	r3, #3
 80080a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	460b      	mov	r3, r1
 80080b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b086      	sub	sp, #24
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	885b      	ldrh	r3, [r3, #2]
 80080fe:	b29a      	uxth	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	b29b      	uxth	r3, r3
 8008106:	429a      	cmp	r2, r3
 8008108:	d920      	bls.n	800814c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008112:	e013      	b.n	800813c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008114:	f107 030a 	add.w	r3, r7, #10
 8008118:	4619      	mov	r1, r3
 800811a:	6978      	ldr	r0, [r7, #20]
 800811c:	f000 f81b 	bl	8008156 <USBD_GetNextDesc>
 8008120:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	785b      	ldrb	r3, [r3, #1]
 8008126:	2b05      	cmp	r3, #5
 8008128:	d108      	bne.n	800813c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	789b      	ldrb	r3, [r3, #2]
 8008132:	78fa      	ldrb	r2, [r7, #3]
 8008134:	429a      	cmp	r2, r3
 8008136:	d008      	beq.n	800814a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008138:	2300      	movs	r3, #0
 800813a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	885b      	ldrh	r3, [r3, #2]
 8008140:	b29a      	uxth	r2, r3
 8008142:	897b      	ldrh	r3, [r7, #10]
 8008144:	429a      	cmp	r2, r3
 8008146:	d8e5      	bhi.n	8008114 <USBD_GetEpDesc+0x32>
 8008148:	e000      	b.n	800814c <USBD_GetEpDesc+0x6a>
          break;
 800814a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800814c:	693b      	ldr	r3, [r7, #16]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008156:	b480      	push	{r7}
 8008158:	b085      	sub	sp, #20
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	881a      	ldrh	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b29b      	uxth	r3, r3
 800816e:	4413      	add	r3, r2
 8008170:	b29a      	uxth	r2, r3
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4413      	add	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008182:	68fb      	ldr	r3, [r7, #12]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	3301      	adds	r3, #1
 80081a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80081ae:	8a3b      	ldrh	r3, [r7, #16]
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	b21a      	sxth	r2, r3
 80081b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	b21b      	sxth	r3, r3
 80081bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80081be:	89fb      	ldrh	r3, [r7, #14]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	371c      	adds	r7, #28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	d005      	beq.n	80081f2 <USBD_StdDevReq+0x26>
 80081e6:	2b40      	cmp	r3, #64	; 0x40
 80081e8:	d857      	bhi.n	800829a <USBD_StdDevReq+0xce>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00f      	beq.n	800820e <USBD_StdDevReq+0x42>
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d153      	bne.n	800829a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	32ae      	adds	r2, #174	; 0xae
 80081fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]
      break;
 800820c:	e04a      	b.n	80082a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	785b      	ldrb	r3, [r3, #1]
 8008212:	2b09      	cmp	r3, #9
 8008214:	d83b      	bhi.n	800828e <USBD_StdDevReq+0xc2>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <USBD_StdDevReq+0x50>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008271 	.word	0x08008271
 8008220:	08008285 	.word	0x08008285
 8008224:	0800828f 	.word	0x0800828f
 8008228:	0800827b 	.word	0x0800827b
 800822c:	0800828f 	.word	0x0800828f
 8008230:	0800824f 	.word	0x0800824f
 8008234:	08008245 	.word	0x08008245
 8008238:	0800828f 	.word	0x0800828f
 800823c:	08008267 	.word	0x08008267
 8008240:	08008259 	.word	0x08008259
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa3c 	bl	80086c4 <USBD_GetDescriptor>
          break;
 800824c:	e024      	b.n	8008298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fba1 	bl	8008998 <USBD_SetAddress>
          break;
 8008256:	e01f      	b.n	8008298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fbe0 	bl	8008a20 <USBD_SetConfig>
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]
          break;
 8008264:	e018      	b.n	8008298 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fc83 	bl	8008b74 <USBD_GetConfig>
          break;
 800826e:	e013      	b.n	8008298 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fcb4 	bl	8008be0 <USBD_GetStatus>
          break;
 8008278:	e00e      	b.n	8008298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fce3 	bl	8008c48 <USBD_SetFeature>
          break;
 8008282:	e009      	b.n	8008298 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fd07 	bl	8008c9a <USBD_ClrFeature>
          break;
 800828c:	e004      	b.n	8008298 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fd5e 	bl	8008d52 <USBD_CtlError>
          break;
 8008296:	bf00      	nop
      }
      break;
 8008298:	e004      	b.n	80082a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fd58 	bl	8008d52 <USBD_CtlError>
      break;
 80082a2:	bf00      	nop
  }

  return ret;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop

080082b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	d005      	beq.n	80082d6 <USBD_StdItfReq+0x26>
 80082ca:	2b40      	cmp	r3, #64	; 0x40
 80082cc:	d852      	bhi.n	8008374 <USBD_StdItfReq+0xc4>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <USBD_StdItfReq+0x26>
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d14e      	bne.n	8008374 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	3b01      	subs	r3, #1
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d840      	bhi.n	8008366 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	889b      	ldrh	r3, [r3, #4]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d836      	bhi.n	800835c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	889b      	ldrh	r3, [r3, #4]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff fed9 	bl	80080ae <USBD_CoreFindIF>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	2bff      	cmp	r3, #255	; 0xff
 8008304:	d01d      	beq.n	8008342 <USBD_StdItfReq+0x92>
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d11a      	bne.n	8008342 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800830c:	7bba      	ldrb	r2, [r7, #14]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	32ae      	adds	r2, #174	; 0xae
 8008312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00f      	beq.n	800833c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800831c:	7bba      	ldrb	r2, [r7, #14]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008324:	7bba      	ldrb	r2, [r7, #14]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	32ae      	adds	r2, #174	; 0xae
 800832a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	4798      	blx	r3
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800833a:	e004      	b.n	8008346 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800833c:	2303      	movs	r3, #3
 800833e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008340:	e001      	b.n	8008346 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008342:	2303      	movs	r3, #3
 8008344:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	88db      	ldrh	r3, [r3, #6]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d110      	bne.n	8008370 <USBD_StdItfReq+0xc0>
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10d      	bne.n	8008370 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fdc7 	bl	8008ee8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800835a:	e009      	b.n	8008370 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fcf7 	bl	8008d52 <USBD_CtlError>
          break;
 8008364:	e004      	b.n	8008370 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fcf2 	bl	8008d52 <USBD_CtlError>
          break;
 800836e:	e000      	b.n	8008372 <USBD_StdItfReq+0xc2>
          break;
 8008370:	bf00      	nop
      }
      break;
 8008372:	e004      	b.n	800837e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fceb 	bl	8008d52 <USBD_CtlError>
      break;
 800837c:	bf00      	nop
  }

  return ret;
 800837e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	889b      	ldrh	r3, [r3, #4]
 800839a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083a4:	2b40      	cmp	r3, #64	; 0x40
 80083a6:	d007      	beq.n	80083b8 <USBD_StdEPReq+0x30>
 80083a8:	2b40      	cmp	r3, #64	; 0x40
 80083aa:	f200 817f 	bhi.w	80086ac <USBD_StdEPReq+0x324>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d02a      	beq.n	8008408 <USBD_StdEPReq+0x80>
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	f040 817a 	bne.w	80086ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff fe83 	bl	80080c8 <USBD_CoreFindEP>
 80083c2:	4603      	mov	r3, r0
 80083c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083c6:	7b7b      	ldrb	r3, [r7, #13]
 80083c8:	2bff      	cmp	r3, #255	; 0xff
 80083ca:	f000 8174 	beq.w	80086b6 <USBD_StdEPReq+0x32e>
 80083ce:	7b7b      	ldrb	r3, [r7, #13]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f040 8170 	bne.w	80086b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80083d6:	7b7a      	ldrb	r2, [r7, #13]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80083de:	7b7a      	ldrb	r2, [r7, #13]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	32ae      	adds	r2, #174	; 0xae
 80083e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 8163 	beq.w	80086b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80083f0:	7b7a      	ldrb	r2, [r7, #13]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	32ae      	adds	r2, #174	; 0xae
 80083f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	4798      	blx	r3
 8008402:	4603      	mov	r3, r0
 8008404:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008406:	e156      	b.n	80086b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	785b      	ldrb	r3, [r3, #1]
 800840c:	2b03      	cmp	r3, #3
 800840e:	d008      	beq.n	8008422 <USBD_StdEPReq+0x9a>
 8008410:	2b03      	cmp	r3, #3
 8008412:	f300 8145 	bgt.w	80086a0 <USBD_StdEPReq+0x318>
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 809b 	beq.w	8008552 <USBD_StdEPReq+0x1ca>
 800841c:	2b01      	cmp	r3, #1
 800841e:	d03c      	beq.n	800849a <USBD_StdEPReq+0x112>
 8008420:	e13e      	b.n	80086a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b02      	cmp	r3, #2
 800842c:	d002      	beq.n	8008434 <USBD_StdEPReq+0xac>
 800842e:	2b03      	cmp	r3, #3
 8008430:	d016      	beq.n	8008460 <USBD_StdEPReq+0xd8>
 8008432:	e02c      	b.n	800848e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00d      	beq.n	8008456 <USBD_StdEPReq+0xce>
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b80      	cmp	r3, #128	; 0x80
 800843e:	d00a      	beq.n	8008456 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 f9a3 	bl	8009790 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800844a:	2180      	movs	r1, #128	; 0x80
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 f99f 	bl	8009790 <USBD_LL_StallEP>
 8008452:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008454:	e020      	b.n	8008498 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fc7a 	bl	8008d52 <USBD_CtlError>
              break;
 800845e:	e01b      	b.n	8008498 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	885b      	ldrh	r3, [r3, #2]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10e      	bne.n	8008486 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00b      	beq.n	8008486 <USBD_StdEPReq+0xfe>
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	2b80      	cmp	r3, #128	; 0x80
 8008472:	d008      	beq.n	8008486 <USBD_StdEPReq+0xfe>
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	88db      	ldrh	r3, [r3, #6]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 f985 	bl	8009790 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fd2e 	bl	8008ee8 <USBD_CtlSendStatus>

              break;
 800848c:	e004      	b.n	8008498 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fc5e 	bl	8008d52 <USBD_CtlError>
              break;
 8008496:	bf00      	nop
          }
          break;
 8008498:	e107      	b.n	80086aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d002      	beq.n	80084ac <USBD_StdEPReq+0x124>
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d016      	beq.n	80084d8 <USBD_StdEPReq+0x150>
 80084aa:	e04b      	b.n	8008544 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00d      	beq.n	80084ce <USBD_StdEPReq+0x146>
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b80      	cmp	r3, #128	; 0x80
 80084b6:	d00a      	beq.n	80084ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 f967 	bl	8009790 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084c2:	2180      	movs	r1, #128	; 0x80
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 f963 	bl	8009790 <USBD_LL_StallEP>
 80084ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084cc:	e040      	b.n	8008550 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fc3e 	bl	8008d52 <USBD_CtlError>
              break;
 80084d6:	e03b      	b.n	8008550 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	885b      	ldrh	r3, [r3, #2]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d136      	bne.n	800854e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d004      	beq.n	80084f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f001 f96d 	bl	80097ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fcf7 	bl	8008ee8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff fde2 	bl	80080c8 <USBD_CoreFindEP>
 8008504:	4603      	mov	r3, r0
 8008506:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008508:	7b7b      	ldrb	r3, [r7, #13]
 800850a:	2bff      	cmp	r3, #255	; 0xff
 800850c:	d01f      	beq.n	800854e <USBD_StdEPReq+0x1c6>
 800850e:	7b7b      	ldrb	r3, [r7, #13]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d11c      	bne.n	800854e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008514:	7b7a      	ldrb	r2, [r7, #13]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800851c:	7b7a      	ldrb	r2, [r7, #13]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	32ae      	adds	r2, #174	; 0xae
 8008522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d010      	beq.n	800854e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800852c:	7b7a      	ldrb	r2, [r7, #13]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	32ae      	adds	r2, #174	; 0xae
 8008532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008542:	e004      	b.n	800854e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fc03 	bl	8008d52 <USBD_CtlError>
              break;
 800854c:	e000      	b.n	8008550 <USBD_StdEPReq+0x1c8>
              break;
 800854e:	bf00      	nop
          }
          break;
 8008550:	e0ab      	b.n	80086aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b02      	cmp	r3, #2
 800855c:	d002      	beq.n	8008564 <USBD_StdEPReq+0x1dc>
 800855e:	2b03      	cmp	r3, #3
 8008560:	d032      	beq.n	80085c8 <USBD_StdEPReq+0x240>
 8008562:	e097      	b.n	8008694 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d007      	beq.n	800857a <USBD_StdEPReq+0x1f2>
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b80      	cmp	r3, #128	; 0x80
 800856e:	d004      	beq.n	800857a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fbed 	bl	8008d52 <USBD_CtlError>
                break;
 8008578:	e091      	b.n	800869e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800857a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800857e:	2b00      	cmp	r3, #0
 8008580:	da0b      	bge.n	800859a <USBD_StdEPReq+0x212>
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	3310      	adds	r3, #16
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	4413      	add	r3, r2
 8008596:	3304      	adds	r3, #4
 8008598:	e00b      	b.n	80085b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	4413      	add	r3, r2
 80085b0:	3304      	adds	r3, #4
 80085b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2202      	movs	r2, #2
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fc37 	bl	8008e34 <USBD_CtlSendData>
              break;
 80085c6:	e06a      	b.n	800869e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	da11      	bge.n	80085f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	f003 020f 	and.w	r2, r3, #15
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	3324      	adds	r3, #36	; 0x24
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d117      	bne.n	800861a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fbb0 	bl	8008d52 <USBD_CtlError>
                  break;
 80085f2:	e054      	b.n	800869e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	f003 020f 	and.w	r2, r3, #15
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d104      	bne.n	800861a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fb9d 	bl	8008d52 <USBD_CtlError>
                  break;
 8008618:	e041      	b.n	800869e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800861a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800861e:	2b00      	cmp	r3, #0
 8008620:	da0b      	bge.n	800863a <USBD_StdEPReq+0x2b2>
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	3310      	adds	r3, #16
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	4413      	add	r3, r2
 8008636:	3304      	adds	r3, #4
 8008638:	e00b      	b.n	8008652 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008640:	4613      	mov	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	4413      	add	r3, r2
 8008650:	3304      	adds	r3, #4
 8008652:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <USBD_StdEPReq+0x2d8>
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	2b80      	cmp	r3, #128	; 0x80
 800865e:	d103      	bne.n	8008668 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	e00e      	b.n	8008686 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 f8cd 	bl	800980c <USBD_LL_IsStallEP>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2201      	movs	r2, #1
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	e002      	b.n	8008686 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2202      	movs	r2, #2
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fbd1 	bl	8008e34 <USBD_CtlSendData>
              break;
 8008692:	e004      	b.n	800869e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fb5b 	bl	8008d52 <USBD_CtlError>
              break;
 800869c:	bf00      	nop
          }
          break;
 800869e:	e004      	b.n	80086aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fb55 	bl	8008d52 <USBD_CtlError>
          break;
 80086a8:	bf00      	nop
      }
      break;
 80086aa:	e005      	b.n	80086b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fb4f 	bl	8008d52 <USBD_CtlError>
      break;
 80086b4:	e000      	b.n	80086b8 <USBD_StdEPReq+0x330>
      break;
 80086b6:	bf00      	nop
  }

  return ret;
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	885b      	ldrh	r3, [r3, #2]
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	3b01      	subs	r3, #1
 80086e4:	2b06      	cmp	r3, #6
 80086e6:	f200 8128 	bhi.w	800893a <USBD_GetDescriptor+0x276>
 80086ea:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <USBD_GetDescriptor+0x2c>)
 80086ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f0:	0800870d 	.word	0x0800870d
 80086f4:	08008725 	.word	0x08008725
 80086f8:	08008765 	.word	0x08008765
 80086fc:	0800893b 	.word	0x0800893b
 8008700:	0800893b 	.word	0x0800893b
 8008704:	080088db 	.word	0x080088db
 8008708:	08008907 	.word	0x08008907
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	7c12      	ldrb	r2, [r2, #16]
 8008718:	f107 0108 	add.w	r1, r7, #8
 800871c:	4610      	mov	r0, r2
 800871e:	4798      	blx	r3
 8008720:	60f8      	str	r0, [r7, #12]
      break;
 8008722:	e112      	b.n	800894a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	7c1b      	ldrb	r3, [r3, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10d      	bne.n	8008748 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008734:	f107 0208 	add.w	r2, r7, #8
 8008738:	4610      	mov	r0, r2
 800873a:	4798      	blx	r3
 800873c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3301      	adds	r3, #1
 8008742:	2202      	movs	r2, #2
 8008744:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008746:	e100      	b.n	800894a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	f107 0208 	add.w	r2, r7, #8
 8008754:	4610      	mov	r0, r2
 8008756:	4798      	blx	r3
 8008758:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3301      	adds	r3, #1
 800875e:	2202      	movs	r2, #2
 8008760:	701a      	strb	r2, [r3, #0]
      break;
 8008762:	e0f2      	b.n	800894a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	885b      	ldrh	r3, [r3, #2]
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b05      	cmp	r3, #5
 800876c:	f200 80ac 	bhi.w	80088c8 <USBD_GetDescriptor+0x204>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <USBD_GetDescriptor+0xb4>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	08008791 	.word	0x08008791
 800877c:	080087c5 	.word	0x080087c5
 8008780:	080087f9 	.word	0x080087f9
 8008784:	0800882d 	.word	0x0800882d
 8008788:	08008861 	.word	0x08008861
 800878c:	08008895 	.word	0x08008895
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	7c12      	ldrb	r2, [r2, #16]
 80087a8:	f107 0108 	add.w	r1, r7, #8
 80087ac:	4610      	mov	r0, r2
 80087ae:	4798      	blx	r3
 80087b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087b2:	e091      	b.n	80088d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 facb 	bl	8008d52 <USBD_CtlError>
            err++;
 80087bc:	7afb      	ldrb	r3, [r7, #11]
 80087be:	3301      	adds	r3, #1
 80087c0:	72fb      	strb	r3, [r7, #11]
          break;
 80087c2:	e089      	b.n	80088d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00b      	beq.n	80087e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	7c12      	ldrb	r2, [r2, #16]
 80087dc:	f107 0108 	add.w	r1, r7, #8
 80087e0:	4610      	mov	r0, r2
 80087e2:	4798      	blx	r3
 80087e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087e6:	e077      	b.n	80088d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fab1 	bl	8008d52 <USBD_CtlError>
            err++;
 80087f0:	7afb      	ldrb	r3, [r7, #11]
 80087f2:	3301      	adds	r3, #1
 80087f4:	72fb      	strb	r3, [r7, #11]
          break;
 80087f6:	e06f      	b.n	80088d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00b      	beq.n	800881c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	7c12      	ldrb	r2, [r2, #16]
 8008810:	f107 0108 	add.w	r1, r7, #8
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
 8008818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800881a:	e05d      	b.n	80088d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa97 	bl	8008d52 <USBD_CtlError>
            err++;
 8008824:	7afb      	ldrb	r3, [r7, #11]
 8008826:	3301      	adds	r3, #1
 8008828:	72fb      	strb	r3, [r7, #11]
          break;
 800882a:	e055      	b.n	80088d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00b      	beq.n	8008850 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	7c12      	ldrb	r2, [r2, #16]
 8008844:	f107 0108 	add.w	r1, r7, #8
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
 800884c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800884e:	e043      	b.n	80088d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fa7d 	bl	8008d52 <USBD_CtlError>
            err++;
 8008858:	7afb      	ldrb	r3, [r7, #11]
 800885a:	3301      	adds	r3, #1
 800885c:	72fb      	strb	r3, [r7, #11]
          break;
 800885e:	e03b      	b.n	80088d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00b      	beq.n	8008884 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	7c12      	ldrb	r2, [r2, #16]
 8008878:	f107 0108 	add.w	r1, r7, #8
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
 8008880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008882:	e029      	b.n	80088d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fa63 	bl	8008d52 <USBD_CtlError>
            err++;
 800888c:	7afb      	ldrb	r3, [r7, #11]
 800888e:	3301      	adds	r3, #1
 8008890:	72fb      	strb	r3, [r7, #11]
          break;
 8008892:	e021      	b.n	80088d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	7c12      	ldrb	r2, [r2, #16]
 80088ac:	f107 0108 	add.w	r1, r7, #8
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
 80088b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088b6:	e00f      	b.n	80088d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fa49 	bl	8008d52 <USBD_CtlError>
            err++;
 80088c0:	7afb      	ldrb	r3, [r7, #11]
 80088c2:	3301      	adds	r3, #1
 80088c4:	72fb      	strb	r3, [r7, #11]
          break;
 80088c6:	e007      	b.n	80088d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa41 	bl	8008d52 <USBD_CtlError>
          err++;
 80088d0:	7afb      	ldrb	r3, [r7, #11]
 80088d2:	3301      	adds	r3, #1
 80088d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80088d6:	bf00      	nop
      }
      break;
 80088d8:	e037      	b.n	800894a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	7c1b      	ldrb	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d109      	bne.n	80088f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ea:	f107 0208 	add.w	r2, r7, #8
 80088ee:	4610      	mov	r0, r2
 80088f0:	4798      	blx	r3
 80088f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088f4:	e029      	b.n	800894a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fa2a 	bl	8008d52 <USBD_CtlError>
        err++;
 80088fe:	7afb      	ldrb	r3, [r7, #11]
 8008900:	3301      	adds	r3, #1
 8008902:	72fb      	strb	r3, [r7, #11]
      break;
 8008904:	e021      	b.n	800894a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	7c1b      	ldrb	r3, [r3, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10d      	bne.n	800892a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	f107 0208 	add.w	r2, r7, #8
 800891a:	4610      	mov	r0, r2
 800891c:	4798      	blx	r3
 800891e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3301      	adds	r3, #1
 8008924:	2207      	movs	r2, #7
 8008926:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008928:	e00f      	b.n	800894a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fa10 	bl	8008d52 <USBD_CtlError>
        err++;
 8008932:	7afb      	ldrb	r3, [r7, #11]
 8008934:	3301      	adds	r3, #1
 8008936:	72fb      	strb	r3, [r7, #11]
      break;
 8008938:	e007      	b.n	800894a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fa08 	bl	8008d52 <USBD_CtlError>
      err++;
 8008942:	7afb      	ldrb	r3, [r7, #11]
 8008944:	3301      	adds	r3, #1
 8008946:	72fb      	strb	r3, [r7, #11]
      break;
 8008948:	bf00      	nop
  }

  if (err != 0U)
 800894a:	7afb      	ldrb	r3, [r7, #11]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d11e      	bne.n	800898e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	88db      	ldrh	r3, [r3, #6]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d016      	beq.n	8008986 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008958:	893b      	ldrh	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00e      	beq.n	800897c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	88da      	ldrh	r2, [r3, #6]
 8008962:	893b      	ldrh	r3, [r7, #8]
 8008964:	4293      	cmp	r3, r2
 8008966:	bf28      	it	cs
 8008968:	4613      	movcs	r3, r2
 800896a:	b29b      	uxth	r3, r3
 800896c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800896e:	893b      	ldrh	r3, [r7, #8]
 8008970:	461a      	mov	r2, r3
 8008972:	68f9      	ldr	r1, [r7, #12]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fa5d 	bl	8008e34 <USBD_CtlSendData>
 800897a:	e009      	b.n	8008990 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f9e7 	bl	8008d52 <USBD_CtlError>
 8008984:	e004      	b.n	8008990 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 faae 	bl	8008ee8 <USBD_CtlSendStatus>
 800898c:	e000      	b.n	8008990 <USBD_GetDescriptor+0x2cc>
    return;
 800898e:	bf00      	nop
  }
}
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop

08008998 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	889b      	ldrh	r3, [r3, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d131      	bne.n	8008a0e <USBD_SetAddress+0x76>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	88db      	ldrh	r3, [r3, #6]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d12d      	bne.n	8008a0e <USBD_SetAddress+0x76>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	885b      	ldrh	r3, [r3, #2]
 80089b6:	2b7f      	cmp	r3, #127	; 0x7f
 80089b8:	d829      	bhi.n	8008a0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	885b      	ldrh	r3, [r3, #2]
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d104      	bne.n	80089dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f9bc 	bl	8008d52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089da:	e01d      	b.n	8008a18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	7bfa      	ldrb	r2, [r7, #15]
 80089e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 ff3b 	bl	8009864 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fa7a 	bl	8008ee8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d004      	beq.n	8008a04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2202      	movs	r2, #2
 80089fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a02:	e009      	b.n	8008a18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a0c:	e004      	b.n	8008a18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f99e 	bl	8008d52 <USBD_CtlError>
  }
}
 8008a16:	bf00      	nop
 8008a18:	bf00      	nop
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	4b4e      	ldr	r3, [pc, #312]	; (8008b70 <USBD_SetConfig+0x150>)
 8008a36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a38:	4b4d      	ldr	r3, [pc, #308]	; (8008b70 <USBD_SetConfig+0x150>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d905      	bls.n	8008a4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f985 	bl	8008d52 <USBD_CtlError>
    return USBD_FAIL;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e08c      	b.n	8008b66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d002      	beq.n	8008a5e <USBD_SetConfig+0x3e>
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d029      	beq.n	8008ab0 <USBD_SetConfig+0x90>
 8008a5c:	e075      	b.n	8008b4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a5e:	4b44      	ldr	r3, [pc, #272]	; (8008b70 <USBD_SetConfig+0x150>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d020      	beq.n	8008aa8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a66:	4b42      	ldr	r3, [pc, #264]	; (8008b70 <USBD_SetConfig+0x150>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a70:	4b3f      	ldr	r3, [pc, #252]	; (8008b70 <USBD_SetConfig+0x150>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fe ffe7 	bl	8007a4a <USBD_SetClassConfig>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d008      	beq.n	8008a98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f962 	bl	8008d52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2202      	movs	r2, #2
 8008a92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a96:	e065      	b.n	8008b64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fa25 	bl	8008ee8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2203      	movs	r2, #3
 8008aa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008aa6:	e05d      	b.n	8008b64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fa1d 	bl	8008ee8 <USBD_CtlSendStatus>
      break;
 8008aae:	e059      	b.n	8008b64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ab0:	4b2f      	ldr	r3, [pc, #188]	; (8008b70 <USBD_SetConfig+0x150>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d112      	bne.n	8008ade <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008ac0:	4b2b      	ldr	r3, [pc, #172]	; (8008b70 <USBD_SetConfig+0x150>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008aca:	4b29      	ldr	r3, [pc, #164]	; (8008b70 <USBD_SetConfig+0x150>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7fe ffd6 	bl	8007a82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa06 	bl	8008ee8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008adc:	e042      	b.n	8008b64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ade:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <USBD_SetConfig+0x150>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d02a      	beq.n	8008b42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7fe ffc4 	bl	8007a82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008afa:	4b1d      	ldr	r3, [pc, #116]	; (8008b70 <USBD_SetConfig+0x150>)
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b04:	4b1a      	ldr	r3, [pc, #104]	; (8008b70 <USBD_SetConfig+0x150>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7fe ff9d 	bl	8007a4a <USBD_SetClassConfig>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00f      	beq.n	8008b3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f918 	bl	8008d52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7fe ffa9 	bl	8007a82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2202      	movs	r2, #2
 8008b34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b38:	e014      	b.n	8008b64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f9d4 	bl	8008ee8 <USBD_CtlSendStatus>
      break;
 8008b40:	e010      	b.n	8008b64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f9d0 	bl	8008ee8 <USBD_CtlSendStatus>
      break;
 8008b48:	e00c      	b.n	8008b64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f900 	bl	8008d52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b52:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <USBD_SetConfig+0x150>)
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7fe ff92 	bl	8007a82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	73fb      	strb	r3, [r7, #15]
      break;
 8008b62:	bf00      	nop
  }

  return ret;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200004dc 	.word	0x200004dc

08008b74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	88db      	ldrh	r3, [r3, #6]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d004      	beq.n	8008b90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f8e2 	bl	8008d52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b8e:	e023      	b.n	8008bd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	dc02      	bgt.n	8008ba2 <USBD_GetConfig+0x2e>
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dc03      	bgt.n	8008ba8 <USBD_GetConfig+0x34>
 8008ba0:	e015      	b.n	8008bce <USBD_GetConfig+0x5a>
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d00b      	beq.n	8008bbe <USBD_GetConfig+0x4a>
 8008ba6:	e012      	b.n	8008bce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3308      	adds	r3, #8
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f93c 	bl	8008e34 <USBD_CtlSendData>
        break;
 8008bbc:	e00c      	b.n	8008bd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f934 	bl	8008e34 <USBD_CtlSendData>
        break;
 8008bcc:	e004      	b.n	8008bd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f8be 	bl	8008d52 <USBD_CtlError>
        break;
 8008bd6:	bf00      	nop
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d81e      	bhi.n	8008c36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	88db      	ldrh	r3, [r3, #6]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d004      	beq.n	8008c0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f8a5 	bl	8008d52 <USBD_CtlError>
        break;
 8008c08:	e01a      	b.n	8008c40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d005      	beq.n	8008c26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f043 0202 	orr.w	r2, r3, #2
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f900 	bl	8008e34 <USBD_CtlSendData>
      break;
 8008c34:	e004      	b.n	8008c40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f88a 	bl	8008d52 <USBD_CtlError>
      break;
 8008c3e:	bf00      	nop
  }
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	885b      	ldrh	r3, [r3, #2]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d107      	bne.n	8008c6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f940 	bl	8008ee8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c68:	e013      	b.n	8008c92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	885b      	ldrh	r3, [r3, #2]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d10b      	bne.n	8008c8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	889b      	ldrh	r3, [r3, #4]
 8008c76:	0a1b      	lsrs	r3, r3, #8
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f930 	bl	8008ee8 <USBD_CtlSendStatus>
}
 8008c88:	e003      	b.n	8008c92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f860 	bl	8008d52 <USBD_CtlError>
}
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	3b01      	subs	r3, #1
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d80b      	bhi.n	8008cca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	885b      	ldrh	r3, [r3, #2]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d10c      	bne.n	8008cd4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f910 	bl	8008ee8 <USBD_CtlSendStatus>
      }
      break;
 8008cc8:	e004      	b.n	8008cd4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f840 	bl	8008d52 <USBD_CtlError>
      break;
 8008cd2:	e000      	b.n	8008cd6 <USBD_ClrFeature+0x3c>
      break;
 8008cd4:	bf00      	nop
  }
}
 8008cd6:	bf00      	nop
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	781a      	ldrb	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	781a      	ldrb	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	3301      	adds	r3, #1
 8008d06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7ff fa41 	bl	8008190 <SWAPBYTE>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	461a      	mov	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7ff fa34 	bl	8008190 <SWAPBYTE>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	3301      	adds	r3, #1
 8008d34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f7ff fa27 	bl	8008190 <SWAPBYTE>
 8008d42:	4603      	mov	r3, r0
 8008d44:	461a      	mov	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	80da      	strh	r2, [r3, #6]
}
 8008d4a:	bf00      	nop
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d5c:	2180      	movs	r1, #128	; 0x80
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fd16 	bl	8009790 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d64:	2100      	movs	r1, #0
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fd12 	bl	8009790 <USBD_LL_StallEP>
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d036      	beq.n	8008df8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d8e:	6938      	ldr	r0, [r7, #16]
 8008d90:	f000 f836 	bl	8008e00 <USBD_GetLen>
 8008d94:	4603      	mov	r3, r0
 8008d96:	3301      	adds	r3, #1
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	4413      	add	r3, r2
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	7812      	ldrb	r2, [r2, #0]
 8008dac:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	3301      	adds	r3, #1
 8008db2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	4413      	add	r3, r2
 8008dba:	2203      	movs	r2, #3
 8008dbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008dc4:	e013      	b.n	8008dee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	4413      	add	r3, r2
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	7812      	ldrb	r2, [r2, #0]
 8008dd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	613b      	str	r3, [r7, #16]
    idx++;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	4413      	add	r3, r2
 8008de4:	2200      	movs	r2, #0
 8008de6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	3301      	adds	r3, #1
 8008dec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e7      	bne.n	8008dc6 <USBD_GetString+0x52>
 8008df6:	e000      	b.n	8008dfa <USBD_GetString+0x86>
    return;
 8008df8:	bf00      	nop
  }
}
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e10:	e005      	b.n	8008e1e <USBD_GetLen+0x1e>
  {
    len++;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	3301      	adds	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f5      	bne.n	8008e12 <USBD_GetLen+0x12>
  }

  return len;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2202      	movs	r2, #2
 8008e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	2100      	movs	r1, #0
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 fd21 	bl	80098a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	60f8      	str	r0, [r7, #12]
 8008e72:	60b9      	str	r1, [r7, #8]
 8008e74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fd10 	bl	80098a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2203      	movs	r2, #3
 8008e9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 fd14 	bl	80098e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 fd03 	bl	80098e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2204      	movs	r2, #4
 8008ef4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ef8:	2300      	movs	r3, #0
 8008efa:	2200      	movs	r2, #0
 8008efc:	2100      	movs	r1, #0
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fccf 	bl	80098a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b082      	sub	sp, #8
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2205      	movs	r2, #5
 8008f1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f1e:	2300      	movs	r3, #0
 8008f20:	2200      	movs	r2, #0
 8008f22:	2100      	movs	r1, #0
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fcdd 	bl	80098e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4912      	ldr	r1, [pc, #72]	; (8008f84 <MX_USB_DEVICE_Init+0x50>)
 8008f3c:	4812      	ldr	r0, [pc, #72]	; (8008f88 <MX_USB_DEVICE_Init+0x54>)
 8008f3e:	f7fe fd07 	bl	8007950 <USBD_Init>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f48:	f7f7 fdfe 	bl	8000b48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f4c:	490f      	ldr	r1, [pc, #60]	; (8008f8c <MX_USB_DEVICE_Init+0x58>)
 8008f4e:	480e      	ldr	r0, [pc, #56]	; (8008f88 <MX_USB_DEVICE_Init+0x54>)
 8008f50:	f7fe fd2e 	bl	80079b0 <USBD_RegisterClass>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f5a:	f7f7 fdf5 	bl	8000b48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f5e:	490c      	ldr	r1, [pc, #48]	; (8008f90 <MX_USB_DEVICE_Init+0x5c>)
 8008f60:	4809      	ldr	r0, [pc, #36]	; (8008f88 <MX_USB_DEVICE_Init+0x54>)
 8008f62:	f7fe fc1f 	bl	80077a4 <USBD_CDC_RegisterInterface>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f6c:	f7f7 fdec 	bl	8000b48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f70:	4805      	ldr	r0, [pc, #20]	; (8008f88 <MX_USB_DEVICE_Init+0x54>)
 8008f72:	f7fe fd53 	bl	8007a1c <USBD_Start>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f7c:	f7f7 fde4 	bl	8000b48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f80:	bf00      	nop
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	200000ac 	.word	0x200000ac
 8008f88:	200004e0 	.word	0x200004e0
 8008f8c:	20000018 	.word	0x20000018
 8008f90:	20000098 	.word	0x20000098

08008f94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4905      	ldr	r1, [pc, #20]	; (8008fb0 <CDC_Init_FS+0x1c>)
 8008f9c:	4805      	ldr	r0, [pc, #20]	; (8008fb4 <CDC_Init_FS+0x20>)
 8008f9e:	f7fe fc1b 	bl	80077d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008fa2:	4905      	ldr	r1, [pc, #20]	; (8008fb8 <CDC_Init_FS+0x24>)
 8008fa4:	4803      	ldr	r0, [pc, #12]	; (8008fb4 <CDC_Init_FS+0x20>)
 8008fa6:	f7fe fc39 	bl	800781c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008faa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20000fbc 	.word	0x20000fbc
 8008fb4:	200004e0 	.word	0x200004e0
 8008fb8:	200007bc 	.word	0x200007bc

08008fbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	6039      	str	r1, [r7, #0]
 8008fd6:	71fb      	strb	r3, [r7, #7]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	//USB connection has been detected.
	cdcHandeler.cdcUsbConnectionFlag = true;
 8008fdc:	4b2c      	ldr	r3, [pc, #176]	; (8009090 <CDC_Control_FS+0xc4>)
 8008fde:	2201      	movs	r2, #1
 8008fe0:	821a      	strh	r2, [r3, #16]

	switch(cmd)
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	2b23      	cmp	r3, #35	; 0x23
 8008fe6:	d84b      	bhi.n	8009080 <CDC_Control_FS+0xb4>
 8008fe8:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <CDC_Control_FS+0x24>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009081 	.word	0x08009081
 8008ff4:	08009081 	.word	0x08009081
 8008ff8:	08009081 	.word	0x08009081
 8008ffc:	08009081 	.word	0x08009081
 8009000:	08009081 	.word	0x08009081
 8009004:	08009081 	.word	0x08009081
 8009008:	08009081 	.word	0x08009081
 800900c:	08009081 	.word	0x08009081
 8009010:	08009081 	.word	0x08009081
 8009014:	08009081 	.word	0x08009081
 8009018:	08009081 	.word	0x08009081
 800901c:	08009081 	.word	0x08009081
 8009020:	08009081 	.word	0x08009081
 8009024:	08009081 	.word	0x08009081
 8009028:	08009081 	.word	0x08009081
 800902c:	08009081 	.word	0x08009081
 8009030:	08009081 	.word	0x08009081
 8009034:	08009081 	.word	0x08009081
 8009038:	08009081 	.word	0x08009081
 800903c:	08009081 	.word	0x08009081
 8009040:	08009081 	.word	0x08009081
 8009044:	08009081 	.word	0x08009081
 8009048:	08009081 	.word	0x08009081
 800904c:	08009081 	.word	0x08009081
 8009050:	08009081 	.word	0x08009081
 8009054:	08009081 	.word	0x08009081
 8009058:	08009081 	.word	0x08009081
 800905c:	08009081 	.word	0x08009081
 8009060:	08009081 	.word	0x08009081
 8009064:	08009081 	.word	0x08009081
 8009068:	08009081 	.word	0x08009081
 800906c:	08009081 	.word	0x08009081
 8009070:	08009081 	.word	0x08009081
 8009074:	08009081 	.word	0x08009081
 8009078:	08009081 	.word	0x08009081
 800907c:	08009081 	.word	0x08009081
	case CDC_SEND_BREAK:

	break;

	default:
	break;
 8009080:	bf00      	nop
	}

	return (USBD_OK);
 8009082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	200017bc 	.word	0x200017bc

08009094 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	480b      	ldr	r0, [pc, #44]	; (80090d0 <CDC_Receive_FS+0x3c>)
 80090a2:	f7fe fbbb 	bl	800781c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80090a6:	480a      	ldr	r0, [pc, #40]	; (80090d0 <CDC_Receive_FS+0x3c>)
 80090a8:	f7fe fc1c 	bl	80078e4 <USBD_CDC_ReceivePacket>
	//Set the received packet length
	cdcHandeler.cdcRxPacketSize = *Len;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	4b08      	ldr	r3, [pc, #32]	; (80090d4 <CDC_Receive_FS+0x40>)
 80090b4:	811a      	strh	r2, [r3, #8]

	cdcHandeler.cbCdcRxPacket((char*)cdcHandeler.pCdcRxBuffer, cdcHandeler.cdcRxPacketSize);
 80090b6:	4b07      	ldr	r3, [pc, #28]	; (80090d4 <CDC_Receive_FS+0x40>)
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	4a06      	ldr	r2, [pc, #24]	; (80090d4 <CDC_Receive_FS+0x40>)
 80090bc:	6812      	ldr	r2, [r2, #0]
 80090be:	4905      	ldr	r1, [pc, #20]	; (80090d4 <CDC_Receive_FS+0x40>)
 80090c0:	8909      	ldrh	r1, [r1, #8]
 80090c2:	4610      	mov	r0, r2
 80090c4:	4798      	blx	r3

	return (USBD_OK);
 80090c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	200004e0 	.word	0x200004e0
 80090d4:	200017bc 	.word	0x200017bc

080090d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80090e8:	4b0d      	ldr	r3, [pc, #52]	; (8009120 <CDC_Transmit_FS+0x48>)
 80090ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e00b      	b.n	8009116 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80090fe:	887b      	ldrh	r3, [r7, #2]
 8009100:	461a      	mov	r2, r3
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	4806      	ldr	r0, [pc, #24]	; (8009120 <CDC_Transmit_FS+0x48>)
 8009106:	f7fe fb67 	bl	80077d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800910a:	4805      	ldr	r0, [pc, #20]	; (8009120 <CDC_Transmit_FS+0x48>)
 800910c:	f7fe fba4 	bl	8007858 <USBD_CDC_TransmitPacket>
 8009110:	4603      	mov	r3, r0
 8009112:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009114:	7bfb      	ldrb	r3, [r7, #15]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	200004e0 	.word	0x200004e0

08009124 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009124:	b480      	push	{r7}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	4613      	mov	r3, r2
 8009130:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009136:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800913a:	4618      	mov	r0, r3
 800913c:	371c      	adds	r7, #28
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
	...

08009148 <CDC_Handler_Init_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Handler_Init_FS	(void* cdcRxCallback)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
	memset(&cdcHandeler, 0, sizeof(hCdcBuffer_t));
 8009150:	2214      	movs	r2, #20
 8009152:	2100      	movs	r1, #0
 8009154:	4807      	ldr	r0, [pc, #28]	; (8009174 <CDC_Handler_Init_FS+0x2c>)
 8009156:	f000 fdcd 	bl	8009cf4 <memset>

	cdcHandeler.cbCdcRxPacket = cdcRxCallback;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a05      	ldr	r2, [pc, #20]	; (8009174 <CDC_Handler_Init_FS+0x2c>)
 800915e:	60d3      	str	r3, [r2, #12]

	cdcHandeler.pCdcRxBuffer = UserRxBufferFS;
 8009160:	4b04      	ldr	r3, [pc, #16]	; (8009174 <CDC_Handler_Init_FS+0x2c>)
 8009162:	4a05      	ldr	r2, [pc, #20]	; (8009178 <CDC_Handler_Init_FS+0x30>)
 8009164:	601a      	str	r2, [r3, #0]

	cdcHandeler.pCdcTxBuffer = UserTxBufferFS;
 8009166:	4b03      	ldr	r3, [pc, #12]	; (8009174 <CDC_Handler_Init_FS+0x2c>)
 8009168:	4a04      	ldr	r2, [pc, #16]	; (800917c <CDC_Handler_Init_FS+0x34>)
 800916a:	605a      	str	r2, [r3, #4]
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	200017bc 	.word	0x200017bc
 8009178:	200007bc 	.word	0x200007bc
 800917c:	20000fbc 	.word	0x20000fbc

08009180 <CDC_UsbConnectionCheck>:

	return packetSize;
}

bool CDC_UsbConnectionCheck(void)
{
 8009180:	b480      	push	{r7}
 8009182:	af00      	add	r7, sp, #0
	return cdcHandeler.cdcUsbConnectionFlag;
 8009184:	4b05      	ldr	r3, [pc, #20]	; (800919c <CDC_UsbConnectionCheck+0x1c>)
 8009186:	8a1b      	ldrh	r3, [r3, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	bf14      	ite	ne
 800918c:	2301      	movne	r3, #1
 800918e:	2300      	moveq	r3, #0
 8009190:	b2db      	uxtb	r3, r3
}
 8009192:	4618      	mov	r0, r3
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	200017bc 	.word	0x200017bc

080091a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	6039      	str	r1, [r7, #0]
 80091aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	2212      	movs	r2, #18
 80091b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091b2:	4b03      	ldr	r3, [pc, #12]	; (80091c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	200000c8 	.word	0x200000c8

080091c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	6039      	str	r1, [r7, #0]
 80091ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2204      	movs	r2, #4
 80091d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091d6:	4b03      	ldr	r3, [pc, #12]	; (80091e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	200000dc 	.word	0x200000dc

080091e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	6039      	str	r1, [r7, #0]
 80091f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d105      	bne.n	8009206 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	4907      	ldr	r1, [pc, #28]	; (800921c <USBD_FS_ProductStrDescriptor+0x34>)
 80091fe:	4808      	ldr	r0, [pc, #32]	; (8009220 <USBD_FS_ProductStrDescriptor+0x38>)
 8009200:	f7ff fdb8 	bl	8008d74 <USBD_GetString>
 8009204:	e004      	b.n	8009210 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	4904      	ldr	r1, [pc, #16]	; (800921c <USBD_FS_ProductStrDescriptor+0x34>)
 800920a:	4805      	ldr	r0, [pc, #20]	; (8009220 <USBD_FS_ProductStrDescriptor+0x38>)
 800920c:	f7ff fdb2 	bl	8008d74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009210:	4b02      	ldr	r3, [pc, #8]	; (800921c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	200017d0 	.word	0x200017d0
 8009220:	0800a5fc 	.word	0x0800a5fc

08009224 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	6039      	str	r1, [r7, #0]
 800922e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	4904      	ldr	r1, [pc, #16]	; (8009244 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009234:	4804      	ldr	r0, [pc, #16]	; (8009248 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009236:	f7ff fd9d 	bl	8008d74 <USBD_GetString>
  return USBD_StrDesc;
 800923a:	4b02      	ldr	r3, [pc, #8]	; (8009244 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800923c:	4618      	mov	r0, r3
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	200017d0 	.word	0x200017d0
 8009248:	0800a608 	.word	0x0800a608

0800924c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	6039      	str	r1, [r7, #0]
 8009256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	221a      	movs	r2, #26
 800925c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800925e:	f000 f843 	bl	80092e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009262:	4b02      	ldr	r3, [pc, #8]	; (800926c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	200000e0 	.word	0x200000e0

08009270 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	6039      	str	r1, [r7, #0]
 800927a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d105      	bne.n	800928e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	4907      	ldr	r1, [pc, #28]	; (80092a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009286:	4808      	ldr	r0, [pc, #32]	; (80092a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009288:	f7ff fd74 	bl	8008d74 <USBD_GetString>
 800928c:	e004      	b.n	8009298 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	4904      	ldr	r1, [pc, #16]	; (80092a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009292:	4805      	ldr	r0, [pc, #20]	; (80092a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009294:	f7ff fd6e 	bl	8008d74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009298:	4b02      	ldr	r3, [pc, #8]	; (80092a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800929a:	4618      	mov	r0, r3
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	200017d0 	.word	0x200017d0
 80092a8:	0800a61c 	.word	0x0800a61c

080092ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	6039      	str	r1, [r7, #0]
 80092b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d105      	bne.n	80092ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	4907      	ldr	r1, [pc, #28]	; (80092e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092c2:	4808      	ldr	r0, [pc, #32]	; (80092e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092c4:	f7ff fd56 	bl	8008d74 <USBD_GetString>
 80092c8:	e004      	b.n	80092d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	4904      	ldr	r1, [pc, #16]	; (80092e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ce:	4805      	ldr	r0, [pc, #20]	; (80092e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092d0:	f7ff fd50 	bl	8008d74 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092d4:	4b02      	ldr	r3, [pc, #8]	; (80092e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	200017d0 	.word	0x200017d0
 80092e4:	0800a628 	.word	0x0800a628

080092e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092ee:	4b0f      	ldr	r3, [pc, #60]	; (800932c <Get_SerialNum+0x44>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092f4:	4b0e      	ldr	r3, [pc, #56]	; (8009330 <Get_SerialNum+0x48>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092fa:	4b0e      	ldr	r3, [pc, #56]	; (8009334 <Get_SerialNum+0x4c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4413      	add	r3, r2
 8009306:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d009      	beq.n	8009322 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800930e:	2208      	movs	r2, #8
 8009310:	4909      	ldr	r1, [pc, #36]	; (8009338 <Get_SerialNum+0x50>)
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 f814 	bl	8009340 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009318:	2204      	movs	r2, #4
 800931a:	4908      	ldr	r1, [pc, #32]	; (800933c <Get_SerialNum+0x54>)
 800931c:	68b8      	ldr	r0, [r7, #8]
 800931e:	f000 f80f 	bl	8009340 <IntToUnicode>
  }
}
 8009322:	bf00      	nop
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	1fff7a10 	.word	0x1fff7a10
 8009330:	1fff7a14 	.word	0x1fff7a14
 8009334:	1fff7a18 	.word	0x1fff7a18
 8009338:	200000e2 	.word	0x200000e2
 800933c:	200000f2 	.word	0x200000f2

08009340 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009340:	b480      	push	{r7}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	4613      	mov	r3, r2
 800934c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009352:	2300      	movs	r3, #0
 8009354:	75fb      	strb	r3, [r7, #23]
 8009356:	e027      	b.n	80093a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	0f1b      	lsrs	r3, r3, #28
 800935c:	2b09      	cmp	r3, #9
 800935e:	d80b      	bhi.n	8009378 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	0f1b      	lsrs	r3, r3, #28
 8009364:	b2da      	uxtb	r2, r3
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	005b      	lsls	r3, r3, #1
 800936a:	4619      	mov	r1, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	440b      	add	r3, r1
 8009370:	3230      	adds	r2, #48	; 0x30
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	701a      	strb	r2, [r3, #0]
 8009376:	e00a      	b.n	800938e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	0f1b      	lsrs	r3, r3, #28
 800937c:	b2da      	uxtb	r2, r3
 800937e:	7dfb      	ldrb	r3, [r7, #23]
 8009380:	005b      	lsls	r3, r3, #1
 8009382:	4619      	mov	r1, r3
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	440b      	add	r3, r1
 8009388:	3237      	adds	r2, #55	; 0x37
 800938a:	b2d2      	uxtb	r2, r2
 800938c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	005b      	lsls	r3, r3, #1
 8009398:	3301      	adds	r3, #1
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	4413      	add	r3, r2
 800939e:	2200      	movs	r2, #0
 80093a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	3301      	adds	r3, #1
 80093a6:	75fb      	strb	r3, [r7, #23]
 80093a8:	7dfa      	ldrb	r2, [r7, #23]
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d3d3      	bcc.n	8009358 <IntToUnicode+0x18>
  }
}
 80093b0:	bf00      	nop
 80093b2:	bf00      	nop
 80093b4:	371c      	adds	r7, #28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
	...

080093c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08a      	sub	sp, #40	; 0x28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093c8:	f107 0314 	add.w	r3, r7, #20
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	605a      	str	r2, [r3, #4]
 80093d2:	609a      	str	r2, [r3, #8]
 80093d4:	60da      	str	r2, [r3, #12]
 80093d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093e0:	d13a      	bne.n	8009458 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093e2:	2300      	movs	r3, #0
 80093e4:	613b      	str	r3, [r7, #16]
 80093e6:	4b1e      	ldr	r3, [pc, #120]	; (8009460 <HAL_PCD_MspInit+0xa0>)
 80093e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ea:	4a1d      	ldr	r2, [pc, #116]	; (8009460 <HAL_PCD_MspInit+0xa0>)
 80093ec:	f043 0301 	orr.w	r3, r3, #1
 80093f0:	6313      	str	r3, [r2, #48]	; 0x30
 80093f2:	4b1b      	ldr	r3, [pc, #108]	; (8009460 <HAL_PCD_MspInit+0xa0>)
 80093f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	613b      	str	r3, [r7, #16]
 80093fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80093fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009404:	2302      	movs	r3, #2
 8009406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009408:	2300      	movs	r3, #0
 800940a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800940c:	2303      	movs	r3, #3
 800940e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009410:	230a      	movs	r3, #10
 8009412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009414:	f107 0314 	add.w	r3, r7, #20
 8009418:	4619      	mov	r1, r3
 800941a:	4812      	ldr	r0, [pc, #72]	; (8009464 <HAL_PCD_MspInit+0xa4>)
 800941c:	f7f8 fb42 	bl	8001aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009420:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <HAL_PCD_MspInit+0xa0>)
 8009422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009424:	4a0e      	ldr	r2, [pc, #56]	; (8009460 <HAL_PCD_MspInit+0xa0>)
 8009426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800942a:	6353      	str	r3, [r2, #52]	; 0x34
 800942c:	2300      	movs	r3, #0
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	4b0b      	ldr	r3, [pc, #44]	; (8009460 <HAL_PCD_MspInit+0xa0>)
 8009432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009434:	4a0a      	ldr	r2, [pc, #40]	; (8009460 <HAL_PCD_MspInit+0xa0>)
 8009436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800943a:	6453      	str	r3, [r2, #68]	; 0x44
 800943c:	4b08      	ldr	r3, [pc, #32]	; (8009460 <HAL_PCD_MspInit+0xa0>)
 800943e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009448:	2200      	movs	r2, #0
 800944a:	2100      	movs	r1, #0
 800944c:	2043      	movs	r0, #67	; 0x43
 800944e:	f7f7 fef0 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009452:	2043      	movs	r0, #67	; 0x43
 8009454:	f7f7 ff09 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009458:	bf00      	nop
 800945a:	3728      	adds	r7, #40	; 0x28
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	40023800 	.word	0x40023800
 8009464:	40020000 	.word	0x40020000

08009468 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7fe fb19 	bl	8007ab6 <USBD_LL_SetupStage>
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800949e:	78fa      	ldrb	r2, [r7, #3]
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4613      	mov	r3, r2
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	440b      	add	r3, r1
 80094ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	4619      	mov	r1, r3
 80094b6:	f7fe fb53 	bl	8007b60 <USBD_LL_DataOutStage>
}
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80094d4:	78fa      	ldrb	r2, [r7, #3]
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	4613      	mov	r3, r2
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	334c      	adds	r3, #76	; 0x4c
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	78fb      	ldrb	r3, [r7, #3]
 80094e8:	4619      	mov	r1, r3
 80094ea:	f7fe fbec 	bl	8007cc6 <USBD_LL_DataInStage>
}
 80094ee:	bf00      	nop
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b082      	sub	sp, #8
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009504:	4618      	mov	r0, r3
 8009506:	f7fe fd20 	bl	8007f4a <USBD_LL_SOF>
}
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800951a:	2301      	movs	r3, #1
 800951c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	2b02      	cmp	r3, #2
 8009524:	d001      	beq.n	800952a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009526:	f7f7 fb0f 	bl	8000b48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009530:	7bfa      	ldrb	r2, [r7, #15]
 8009532:	4611      	mov	r1, r2
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fcca 	bl	8007ece <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe fc72 	bl	8007e2a <USBD_LL_Reset>
}
 8009546:	bf00      	nop
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe fcc5 	bl	8007eee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6812      	ldr	r2, [r2, #0]
 8009572:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009576:	f043 0301 	orr.w	r3, r3, #1
 800957a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d005      	beq.n	8009590 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009584:	4b04      	ldr	r3, [pc, #16]	; (8009598 <HAL_PCD_SuspendCallback+0x48>)
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	4a03      	ldr	r2, [pc, #12]	; (8009598 <HAL_PCD_SuspendCallback+0x48>)
 800958a:	f043 0306 	orr.w	r3, r3, #6
 800958e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	e000ed00 	.word	0xe000ed00

0800959c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe fcb5 	bl	8007f1a <USBD_LL_Resume>
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095ca:	78fa      	ldrb	r2, [r7, #3]
 80095cc:	4611      	mov	r1, r2
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe fd0d 	bl	8007fee <USBD_LL_IsoOUTIncomplete>
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fcc9 	bl	8007f8a <USBD_LL_IsoINIncomplete>
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fd1f 	bl	8008052 <USBD_LL_DevConnected>
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe fd1c 	bl	8008068 <USBD_LL_DevDisconnected>
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d13c      	bne.n	80096c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009648:	4a20      	ldr	r2, [pc, #128]	; (80096cc <USBD_LL_Init+0x94>)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a1e      	ldr	r2, [pc, #120]	; (80096cc <USBD_LL_Init+0x94>)
 8009654:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009658:	4b1c      	ldr	r3, [pc, #112]	; (80096cc <USBD_LL_Init+0x94>)
 800965a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800965e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009660:	4b1a      	ldr	r3, [pc, #104]	; (80096cc <USBD_LL_Init+0x94>)
 8009662:	2204      	movs	r2, #4
 8009664:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009666:	4b19      	ldr	r3, [pc, #100]	; (80096cc <USBD_LL_Init+0x94>)
 8009668:	2202      	movs	r2, #2
 800966a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800966c:	4b17      	ldr	r3, [pc, #92]	; (80096cc <USBD_LL_Init+0x94>)
 800966e:	2200      	movs	r2, #0
 8009670:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009672:	4b16      	ldr	r3, [pc, #88]	; (80096cc <USBD_LL_Init+0x94>)
 8009674:	2202      	movs	r2, #2
 8009676:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009678:	4b14      	ldr	r3, [pc, #80]	; (80096cc <USBD_LL_Init+0x94>)
 800967a:	2200      	movs	r2, #0
 800967c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800967e:	4b13      	ldr	r3, [pc, #76]	; (80096cc <USBD_LL_Init+0x94>)
 8009680:	2200      	movs	r2, #0
 8009682:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009684:	4b11      	ldr	r3, [pc, #68]	; (80096cc <USBD_LL_Init+0x94>)
 8009686:	2200      	movs	r2, #0
 8009688:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800968a:	4b10      	ldr	r3, [pc, #64]	; (80096cc <USBD_LL_Init+0x94>)
 800968c:	2200      	movs	r2, #0
 800968e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009690:	4b0e      	ldr	r3, [pc, #56]	; (80096cc <USBD_LL_Init+0x94>)
 8009692:	2200      	movs	r2, #0
 8009694:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009696:	480d      	ldr	r0, [pc, #52]	; (80096cc <USBD_LL_Init+0x94>)
 8009698:	f7f8 fbbb 	bl	8001e12 <HAL_PCD_Init>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80096a2:	f7f7 fa51 	bl	8000b48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80096a6:	2180      	movs	r1, #128	; 0x80
 80096a8:	4808      	ldr	r0, [pc, #32]	; (80096cc <USBD_LL_Init+0x94>)
 80096aa:	f7f9 fe12 	bl	80032d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80096ae:	2240      	movs	r2, #64	; 0x40
 80096b0:	2100      	movs	r1, #0
 80096b2:	4806      	ldr	r0, [pc, #24]	; (80096cc <USBD_LL_Init+0x94>)
 80096b4:	f7f9 fdc6 	bl	8003244 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80096b8:	2280      	movs	r2, #128	; 0x80
 80096ba:	2101      	movs	r1, #1
 80096bc:	4803      	ldr	r0, [pc, #12]	; (80096cc <USBD_LL_Init+0x94>)
 80096be:	f7f9 fdc1 	bl	8003244 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	200019d0 	.word	0x200019d0

080096d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7f8 fcb0 	bl	800204c <HAL_PCD_Start>
 80096ec:	4603      	mov	r3, r0
 80096ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 f942 	bl	800997c <USBD_Get_USB_Status>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	4608      	mov	r0, r1
 8009710:	4611      	mov	r1, r2
 8009712:	461a      	mov	r2, r3
 8009714:	4603      	mov	r3, r0
 8009716:	70fb      	strb	r3, [r7, #3]
 8009718:	460b      	mov	r3, r1
 800971a:	70bb      	strb	r3, [r7, #2]
 800971c:	4613      	mov	r3, r2
 800971e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800972e:	78bb      	ldrb	r3, [r7, #2]
 8009730:	883a      	ldrh	r2, [r7, #0]
 8009732:	78f9      	ldrb	r1, [r7, #3]
 8009734:	f7f9 f981 	bl	8002a3a <HAL_PCD_EP_Open>
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 f91c 	bl	800997c <USBD_Get_USB_Status>
 8009744:	4603      	mov	r3, r0
 8009746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009748:	7bbb      	ldrb	r3, [r7, #14]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800976c:	78fa      	ldrb	r2, [r7, #3]
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f7f9 f9ca 	bl	8002b0a <HAL_PCD_EP_Close>
 8009776:	4603      	mov	r3, r0
 8009778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f8fd 	bl	800997c <USBD_Get_USB_Status>
 8009782:	4603      	mov	r3, r0
 8009784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009786:	7bbb      	ldrb	r3, [r7, #14]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097aa:	78fa      	ldrb	r2, [r7, #3]
 80097ac:	4611      	mov	r1, r2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7f9 faa2 	bl	8002cf8 <HAL_PCD_EP_SetStall>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 f8de 	bl	800997c <USBD_Get_USB_Status>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	460b      	mov	r3, r1
 80097d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097e8:	78fa      	ldrb	r2, [r7, #3]
 80097ea:	4611      	mov	r1, r2
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7f9 fae7 	bl	8002dc0 <HAL_PCD_EP_ClrStall>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 f8bf 	bl	800997c <USBD_Get_USB_Status>
 80097fe:	4603      	mov	r3, r0
 8009800:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009802:	7bbb      	ldrb	r3, [r7, #14]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800981e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009824:	2b00      	cmp	r3, #0
 8009826:	da0b      	bge.n	8009840 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800982e:	68f9      	ldr	r1, [r7, #12]
 8009830:	4613      	mov	r3, r2
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	333e      	adds	r3, #62	; 0x3e
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	e00b      	b.n	8009858 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009846:	68f9      	ldr	r1, [r7, #12]
 8009848:	4613      	mov	r3, r2
 800984a:	00db      	lsls	r3, r3, #3
 800984c:	4413      	add	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	440b      	add	r3, r1
 8009852:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009856:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009858:	4618      	mov	r0, r3
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800987e:	78fa      	ldrb	r2, [r7, #3]
 8009880:	4611      	mov	r1, r2
 8009882:	4618      	mov	r0, r3
 8009884:	f7f9 f8b4 	bl	80029f0 <HAL_PCD_SetAddress>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800988c:	7bfb      	ldrb	r3, [r7, #15]
 800988e:	4618      	mov	r0, r3
 8009890:	f000 f874 	bl	800997c <USBD_Get_USB_Status>
 8009894:	4603      	mov	r3, r0
 8009896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009898:	7bbb      	ldrb	r3, [r7, #14]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b086      	sub	sp, #24
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	607a      	str	r2, [r7, #4]
 80098ac:	603b      	str	r3, [r7, #0]
 80098ae:	460b      	mov	r3, r1
 80098b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098c0:	7af9      	ldrb	r1, [r7, #11]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	f7f9 f9cd 	bl	8002c64 <HAL_PCD_EP_Transmit>
 80098ca:	4603      	mov	r3, r0
 80098cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 f853 	bl	800997c <USBD_Get_USB_Status>
 80098d6:	4603      	mov	r3, r0
 80098d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098da:	7dbb      	ldrb	r3, [r7, #22]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3718      	adds	r7, #24
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	607a      	str	r2, [r7, #4]
 80098ee:	603b      	str	r3, [r7, #0]
 80098f0:	460b      	mov	r3, r1
 80098f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009902:	7af9      	ldrb	r1, [r7, #11]
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	f7f9 f949 	bl	8002b9e <HAL_PCD_EP_Receive>
 800990c:	4603      	mov	r3, r0
 800990e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009910:	7dfb      	ldrb	r3, [r7, #23]
 8009912:	4618      	mov	r0, r3
 8009914:	f000 f832 	bl	800997c <USBD_Get_USB_Status>
 8009918:	4603      	mov	r3, r0
 800991a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800991c:	7dbb      	ldrb	r3, [r7, #22]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	460b      	mov	r3, r1
 8009930:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009938:	78fa      	ldrb	r2, [r7, #3]
 800993a:	4611      	mov	r1, r2
 800993c:	4618      	mov	r0, r3
 800993e:	f7f9 f979 	bl	8002c34 <HAL_PCD_EP_GetRxCount>
 8009942:	4603      	mov	r3, r0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009954:	4b03      	ldr	r3, [pc, #12]	; (8009964 <USBD_static_malloc+0x18>)
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	20001edc 	.word	0x20001edc

08009968 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]

}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	2b03      	cmp	r3, #3
 800998e:	d817      	bhi.n	80099c0 <USBD_Get_USB_Status+0x44>
 8009990:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <USBD_Get_USB_Status+0x1c>)
 8009992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009996:	bf00      	nop
 8009998:	080099a9 	.word	0x080099a9
 800999c:	080099af 	.word	0x080099af
 80099a0:	080099b5 	.word	0x080099b5
 80099a4:	080099bb 	.word	0x080099bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73fb      	strb	r3, [r7, #15]
    break;
 80099ac:	e00b      	b.n	80099c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80099ae:	2303      	movs	r3, #3
 80099b0:	73fb      	strb	r3, [r7, #15]
    break;
 80099b2:	e008      	b.n	80099c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099b4:	2301      	movs	r3, #1
 80099b6:	73fb      	strb	r3, [r7, #15]
    break;
 80099b8:	e005      	b.n	80099c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099ba:	2303      	movs	r3, #3
 80099bc:	73fb      	strb	r3, [r7, #15]
    break;
 80099be:	e002      	b.n	80099c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099c0:	2303      	movs	r3, #3
 80099c2:	73fb      	strb	r3, [r7, #15]
    break;
 80099c4:	bf00      	nop
  }
  return usb_status;
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <rybg211_bleModuleInit>:

/* PRIVATE FUNCTIONS DECLARATION ---------------------------------------------*/

/* FUNCTION PROTOTYPES -------------------------------------------------------*/
void rybg211_bleModuleInit(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
	memset(&hBleModule, 0, sizeof(hBleModule_t));
 80099d8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80099dc:	2100      	movs	r1, #0
 80099de:	4805      	ldr	r0, [pc, #20]	; (80099f4 <rybg211_bleModuleInit+0x20>)
 80099e0:	f000 f988 	bl	8009cf4 <memset>

	HAL_GPIO_WritePin(BLE_MODULE_RESET_GPIO_PORT, BLE_MODULE_RESET_PIN, ENABLE);
 80099e4:	2201      	movs	r2, #1
 80099e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80099ea:	4803      	ldr	r0, [pc, #12]	; (80099f8 <rybg211_bleModuleInit+0x24>)
 80099ec:	f7f8 f9de 	bl	8001dac <HAL_GPIO_WritePin>
}
 80099f0:	bf00      	nop
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	200020fc 	.word	0x200020fc
 80099f8:	40020400 	.word	0x40020400

080099fc <rybg211_setDeviceName>:
 * @param 	moduleBuffer	:	This is the buffer that will carry the prepared AT command.
 *
 * @param 	nameString		:	Name string that the BLE module will broadcast.
 */
void rybg211_setDeviceName(char* moduleBuffer, char* nameString)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af04      	add	r7, sp, #16
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
	uint8_t nameStringSize = strlen(nameString);
 8009a06:	6838      	ldr	r0, [r7, #0]
 8009a08:	f7f6 fbea 	bl	80001e0 <strlen>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]

	memcpy(moduleBuffer ,BLE_NAME_SET, sizeof(BLE_NAME_SET));
 8009a10:	2209      	movs	r2, #9
 8009a12:	4910      	ldr	r1, [pc, #64]	; (8009a54 <rybg211_setDeviceName+0x58>)
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f95f 	bl	8009cd8 <memcpy>

	sprintf((char*)moduleBuffer, "%s%d%s%s%s",BLE_NAME_SET,
 8009a1a:	7bfa      	ldrb	r2, [r7, #15]
 8009a1c:	4b0e      	ldr	r3, [pc, #56]	; (8009a58 <rybg211_setDeviceName+0x5c>)
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	9301      	str	r3, [sp, #4]
 8009a24:	4b0d      	ldr	r3, [pc, #52]	; (8009a5c <rybg211_setDeviceName+0x60>)
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	4a0a      	ldr	r2, [pc, #40]	; (8009a54 <rybg211_setDeviceName+0x58>)
 8009a2c:	490c      	ldr	r1, [pc, #48]	; (8009a60 <rybg211_setDeviceName+0x64>)
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f968 	bl	8009d04 <siprintf>
										BLE_NEW_FIELD,
										nameString,
										BLE_CMD_TERM);


	hBleModule.txPacketSize = strlen((char*)moduleBuffer);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7f6 fbd3 	bl	80001e0 <strlen>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <rybg211_setDeviceName+0x68>)
 8009a40:	805a      	strh	r2, [r3, #2]

	hBleModule.controlFlags.flag.packetToTransmit = ENABLE;
 8009a42:	4a08      	ldr	r2, [pc, #32]	; (8009a64 <rybg211_setDeviceName+0x68>)
 8009a44:	7813      	ldrb	r3, [r2, #0]
 8009a46:	f043 0302 	orr.w	r3, r3, #2
 8009a4a:	7013      	strb	r3, [r2, #0]
}
 8009a4c:	bf00      	nop
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	0800a638 	.word	0x0800a638
 8009a58:	0800a650 	.word	0x0800a650
 8009a5c:	0800a654 	.word	0x0800a654
 8009a60:	0800a644 	.word	0x0800a644
 8009a64:	200020fc 	.word	0x200020fc

08009a68 <rybg211_rxPacketParser>:
 * @param 	packetSize		:	Received packet size.
 *
 * @return	returns 1 if there is a received message should be carried to the bridge handler.
 */
uint8_t rybg211_rxPacketParser(char* moduleBuffer, uint8_t packetSize)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
	uint8_t packetToRead = false;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]

	if(0 == memcmp(moduleBuffer, BLE_DATA_RX, BLE_PARSER_CHAR_COUNT))
 8009a78:	2204      	movs	r2, #4
 8009a7a:	4919      	ldr	r1, [pc, #100]	; (8009ae0 <rybg211_rxPacketParser+0x78>)
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f91b 	bl	8009cb8 <memcmp>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d102      	bne.n	8009a8e <rybg211_rxPacketParser+0x26>
	{
		//Activation to read the data part of the received packet.
		packetToRead = true;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	73fb      	strb	r3, [r7, #15]
 8009a8c:	e023      	b.n	8009ad6 <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_CONNECTION,BLE_PARSER_CHAR_COUNT))
 8009a8e:	2204      	movs	r2, #4
 8009a90:	4914      	ldr	r1, [pc, #80]	; (8009ae4 <rybg211_rxPacketParser+0x7c>)
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f910 	bl	8009cb8 <memcmp>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10a      	bne.n	8009ab4 <rybg211_rxPacketParser+0x4c>
	{
		hBleModule.ConnectedDevice = moduleBuffer[6];
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	799a      	ldrb	r2, [r3, #6]
 8009aa2:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <rybg211_rxPacketParser+0x80>)
 8009aa4:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 8009aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009aaa:	2100      	movs	r1, #0
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f921 	bl	8009cf4 <memset>
 8009ab2:	e010      	b.n	8009ad6 <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_DISCONNECTION, BLE_PARSER_CHAR_COUNT))
 8009ab4:	2204      	movs	r2, #4
 8009ab6:	490d      	ldr	r1, [pc, #52]	; (8009aec <rybg211_rxPacketParser+0x84>)
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f8fd 	bl	8009cb8 <memcmp>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d108      	bne.n	8009ad6 <rybg211_rxPacketParser+0x6e>
	{
		hBleModule.ConnectedDevice = 0;
 8009ac4:	4b08      	ldr	r3, [pc, #32]	; (8009ae8 <rybg211_rxPacketParser+0x80>)
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 8009aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ace:	2100      	movs	r1, #0
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f90f 	bl	8009cf4 <memset>
	}

	return packetToRead;
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	0800a658 	.word	0x0800a658
 8009ae4:	0800a660 	.word	0x0800a660
 8009ae8:	200020fc 	.word	0x200020fc
 8009aec:	0800a668 	.word	0x0800a668

08009af0 <asciiToValue>:
 * 						  stored in targetValue. the value stored in String won't be changed.
 *
 * @return	This function will return the number of found digits in the passed String.
 */
uint8_t asciiToValue(uint32_t* targetValue, uint8_t* String)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
	uint8_t 	digitCount  = 0;
 8009afa:	2300      	movs	r3, #0
 8009afc:	75fb      	strb	r3, [r7, #23]
	uint32_t 	tempValue 	= 0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	613b      	str	r3, [r7, #16]
	uint16_t 	tens 		= 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	81fb      	strh	r3, [r7, #14]
	//Count the number of digits in the string
	while(isdigit(String[digitCount]))
 8009b06:	e002      	b.n	8009b0e <asciiToValue+0x1e>
	{
		++digitCount;
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
	while(isdigit(String[digitCount]))
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	4413      	add	r3, r2
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	3301      	adds	r3, #1
 8009b18:	4a26      	ldr	r2, [pc, #152]	; (8009bb4 <asciiToValue+0xc4>)
 8009b1a:	4413      	add	r3, r2
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	f003 0304 	and.w	r3, r3, #4
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1f0      	bne.n	8009b08 <asciiToValue+0x18>
	}
	//This check is done to prevent this function from execution if non alphanumeric string is passed to this function.
	if(0 != digitCount)
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d03c      	beq.n	8009ba6 <asciiToValue+0xb6>
	{
		//Operation fix
		digitCount -= 1;
 8009b2c:	7dfb      	ldrb	r3, [r7, #23]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	75fb      	strb	r3, [r7, #23]
		//determines the multiplications of tens
		tens = digitCount == ONE_DIGIT   ? 1   : tens;
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <asciiToValue+0x4c>
 8009b38:	89fb      	ldrh	r3, [r7, #14]
 8009b3a:	e000      	b.n	8009b3e <asciiToValue+0x4e>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == TWO_DIGIT   ? 10  : tens;
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d001      	beq.n	8009b4a <asciiToValue+0x5a>
 8009b46:	89fb      	ldrh	r3, [r7, #14]
 8009b48:	e000      	b.n	8009b4c <asciiToValue+0x5c>
 8009b4a:	230a      	movs	r3, #10
 8009b4c:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == THREE_DIGIT ? 100 : tens;
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d001      	beq.n	8009b58 <asciiToValue+0x68>
 8009b54:	89fb      	ldrh	r3, [r7, #14]
 8009b56:	e000      	b.n	8009b5a <asciiToValue+0x6a>
 8009b58:	2364      	movs	r3, #100	; 0x64
 8009b5a:	81fb      	strh	r3, [r7, #14]
		//Start calculating the integer value out of the passed digits
		for(int8_t i = 0; i <= digitCount; ++i)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	737b      	strb	r3, [r7, #13]
 8009b60:	e016      	b.n	8009b90 <asciiToValue+0xa0>
		{
			tempValue = tempValue + ((String[i] - ASCII_STARTING_VALUE) * tens);
 8009b62:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	4413      	add	r3, r2
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	3b30      	subs	r3, #48	; 0x30
 8009b6e:	89fa      	ldrh	r2, [r7, #14]
 8009b70:	fb02 f303 	mul.w	r3, r2, r3
 8009b74:	461a      	mov	r2, r3
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	4413      	add	r3, r2
 8009b7a:	613b      	str	r3, [r7, #16]
			tens = tens / 10;
 8009b7c:	89fb      	ldrh	r3, [r7, #14]
 8009b7e:	4a0e      	ldr	r2, [pc, #56]	; (8009bb8 <asciiToValue+0xc8>)
 8009b80:	fba2 2303 	umull	r2, r3, r2, r3
 8009b84:	08db      	lsrs	r3, r3, #3
 8009b86:	81fb      	strh	r3, [r7, #14]
		for(int8_t i = 0; i <= digitCount; ++i)
 8009b88:	7b7b      	ldrb	r3, [r7, #13]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	737b      	strb	r3, [r7, #13]
 8009b90:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	dde3      	ble.n	8009b62 <asciiToValue+0x72>
		}
		//Pass the obtained integer value to targetValue that will be returned
		*targetValue = tempValue;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	601a      	str	r2, [r3, #0]
		//digitCount will carry the number of found digits in the String
		++digitCount;
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	75fb      	strb	r3, [r7, #23]
	}
	return digitCount;
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	371c      	adds	r7, #28
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	0800a6ac 	.word	0x0800a6ac
 8009bb8:	cccccccd 	.word	0xcccccccd

08009bbc <rybg211_rxDataRead>:
 * @param moduleBuffer
 * @param targertBuffer
 * @return
 */
uint32_t rybg211_rxDataRead(char* moduleBuffer, char* targertBuffer)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
	//+1 is used to ignore the ',' from the received packet and jump directly to the data field.
	uint8_t dataPositionOffset = BLE_RX_SIZE_BYTE_POSITION + 1;
 8009bc6:	2308      	movs	r3, #8
 8009bc8:	73fb      	strb	r3, [r7, #15]

	uint32_t length = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60bb      	str	r3, [r7, #8]
	//Convert the size from ASCII to integer format and obtain the number of digits to adjust the correct data positio.
	dataPositionOffset += asciiToValue(&length, (uint8_t*)moduleBuffer + BLE_RX_SIZE_BYTE_POSITION);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	1dda      	adds	r2, r3, #7
 8009bd2:	f107 0308 	add.w	r3, r7, #8
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff ff89 	bl	8009af0 <asciiToValue>
 8009bde:	4603      	mov	r3, r0
 8009be0:	461a      	mov	r2, r3
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	4413      	add	r3, r2
 8009be6:	73fb      	strb	r3, [r7, #15]

	memcpy(targertBuffer, moduleBuffer + dataPositionOffset, length);
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	4413      	add	r3, r2
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6838      	ldr	r0, [r7, #0]
 8009bf4:	f000 f870 	bl	8009cd8 <memcpy>

	return length;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <rybg211_txDataSend>:

void  rybg211_txDataSend			(char* sourceBuffer, uint16_t packetSize)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b088      	sub	sp, #32
 8009c08:	af06      	add	r7, sp, #24
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	807b      	strh	r3, [r7, #2]

	sprintf((char*)hBleModule.txBuffer, "%s%c%s%d%s%s%s",BLE_DATA_SEND,
													hBleModule.ConnectedDevice,
 8009c10:	4b0e      	ldr	r3, [pc, #56]	; (8009c4c <rybg211_txDataSend+0x48>)
 8009c12:	7d1b      	ldrb	r3, [r3, #20]
	sprintf((char*)hBleModule.txBuffer, "%s%c%s%d%s%s%s",BLE_DATA_SEND,
 8009c14:	4619      	mov	r1, r3
 8009c16:	887b      	ldrh	r3, [r7, #2]
 8009c18:	4a0d      	ldr	r2, [pc, #52]	; (8009c50 <rybg211_txDataSend+0x4c>)
 8009c1a:	9204      	str	r2, [sp, #16]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	9203      	str	r2, [sp, #12]
 8009c20:	4a0c      	ldr	r2, [pc, #48]	; (8009c54 <rybg211_txDataSend+0x50>)
 8009c22:	9202      	str	r2, [sp, #8]
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	4b0b      	ldr	r3, [pc, #44]	; (8009c54 <rybg211_txDataSend+0x50>)
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4a0a      	ldr	r2, [pc, #40]	; (8009c58 <rybg211_txDataSend+0x54>)
 8009c2e:	490b      	ldr	r1, [pc, #44]	; (8009c5c <rybg211_txDataSend+0x58>)
 8009c30:	480b      	ldr	r0, [pc, #44]	; (8009c60 <rybg211_txDataSend+0x5c>)
 8009c32:	f000 f867 	bl	8009d04 <siprintf>
													packetSize,
													BLE_NEW_FIELD,
													sourceBuffer,
													BLE_CMD_TERM);

	hBleModule.txPacketSize = strlen(hBleModule.txBuffer);
 8009c36:	480a      	ldr	r0, [pc, #40]	; (8009c60 <rybg211_txDataSend+0x5c>)
 8009c38:	f7f6 fad2 	bl	80001e0 <strlen>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	4b02      	ldr	r3, [pc, #8]	; (8009c4c <rybg211_txDataSend+0x48>)
 8009c42:	805a      	strh	r2, [r3, #2]
}
 8009c44:	bf00      	nop
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	200020fc 	.word	0x200020fc
 8009c50:	0800a650 	.word	0x0800a650
 8009c54:	0800a654 	.word	0x0800a654
 8009c58:	0800a670 	.word	0x0800a670
 8009c5c:	0800a67c 	.word	0x0800a67c
 8009c60:	20002111 	.word	0x20002111

08009c64 <__errno>:
 8009c64:	4b01      	ldr	r3, [pc, #4]	; (8009c6c <__errno+0x8>)
 8009c66:	6818      	ldr	r0, [r3, #0]
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	200000fc 	.word	0x200000fc

08009c70 <__libc_init_array>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	4d0d      	ldr	r5, [pc, #52]	; (8009ca8 <__libc_init_array+0x38>)
 8009c74:	4c0d      	ldr	r4, [pc, #52]	; (8009cac <__libc_init_array+0x3c>)
 8009c76:	1b64      	subs	r4, r4, r5
 8009c78:	10a4      	asrs	r4, r4, #2
 8009c7a:	2600      	movs	r6, #0
 8009c7c:	42a6      	cmp	r6, r4
 8009c7e:	d109      	bne.n	8009c94 <__libc_init_array+0x24>
 8009c80:	4d0b      	ldr	r5, [pc, #44]	; (8009cb0 <__libc_init_array+0x40>)
 8009c82:	4c0c      	ldr	r4, [pc, #48]	; (8009cb4 <__libc_init_array+0x44>)
 8009c84:	f000 fc9e 	bl	800a5c4 <_init>
 8009c88:	1b64      	subs	r4, r4, r5
 8009c8a:	10a4      	asrs	r4, r4, #2
 8009c8c:	2600      	movs	r6, #0
 8009c8e:	42a6      	cmp	r6, r4
 8009c90:	d105      	bne.n	8009c9e <__libc_init_array+0x2e>
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
 8009c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c98:	4798      	blx	r3
 8009c9a:	3601      	adds	r6, #1
 8009c9c:	e7ee      	b.n	8009c7c <__libc_init_array+0xc>
 8009c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca2:	4798      	blx	r3
 8009ca4:	3601      	adds	r6, #1
 8009ca6:	e7f2      	b.n	8009c8e <__libc_init_array+0x1e>
 8009ca8:	0800a7e8 	.word	0x0800a7e8
 8009cac:	0800a7e8 	.word	0x0800a7e8
 8009cb0:	0800a7e8 	.word	0x0800a7e8
 8009cb4:	0800a7ec 	.word	0x0800a7ec

08009cb8 <memcmp>:
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	3901      	subs	r1, #1
 8009cbc:	4402      	add	r2, r0
 8009cbe:	4290      	cmp	r0, r2
 8009cc0:	d101      	bne.n	8009cc6 <memcmp+0xe>
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e005      	b.n	8009cd2 <memcmp+0x1a>
 8009cc6:	7803      	ldrb	r3, [r0, #0]
 8009cc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ccc:	42a3      	cmp	r3, r4
 8009cce:	d001      	beq.n	8009cd4 <memcmp+0x1c>
 8009cd0:	1b18      	subs	r0, r3, r4
 8009cd2:	bd10      	pop	{r4, pc}
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	e7f2      	b.n	8009cbe <memcmp+0x6>

08009cd8 <memcpy>:
 8009cd8:	440a      	add	r2, r1
 8009cda:	4291      	cmp	r1, r2
 8009cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ce0:	d100      	bne.n	8009ce4 <memcpy+0xc>
 8009ce2:	4770      	bx	lr
 8009ce4:	b510      	push	{r4, lr}
 8009ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cee:	4291      	cmp	r1, r2
 8009cf0:	d1f9      	bne.n	8009ce6 <memcpy+0xe>
 8009cf2:	bd10      	pop	{r4, pc}

08009cf4 <memset>:
 8009cf4:	4402      	add	r2, r0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d100      	bne.n	8009cfe <memset+0xa>
 8009cfc:	4770      	bx	lr
 8009cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8009d02:	e7f9      	b.n	8009cf8 <memset+0x4>

08009d04 <siprintf>:
 8009d04:	b40e      	push	{r1, r2, r3}
 8009d06:	b500      	push	{lr}
 8009d08:	b09c      	sub	sp, #112	; 0x70
 8009d0a:	ab1d      	add	r3, sp, #116	; 0x74
 8009d0c:	9002      	str	r0, [sp, #8]
 8009d0e:	9006      	str	r0, [sp, #24]
 8009d10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d14:	4809      	ldr	r0, [pc, #36]	; (8009d3c <siprintf+0x38>)
 8009d16:	9107      	str	r1, [sp, #28]
 8009d18:	9104      	str	r1, [sp, #16]
 8009d1a:	4909      	ldr	r1, [pc, #36]	; (8009d40 <siprintf+0x3c>)
 8009d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d20:	9105      	str	r1, [sp, #20]
 8009d22:	6800      	ldr	r0, [r0, #0]
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	a902      	add	r1, sp, #8
 8009d28:	f000 f868 	bl	8009dfc <_svfiprintf_r>
 8009d2c:	9b02      	ldr	r3, [sp, #8]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	701a      	strb	r2, [r3, #0]
 8009d32:	b01c      	add	sp, #112	; 0x70
 8009d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d38:	b003      	add	sp, #12
 8009d3a:	4770      	bx	lr
 8009d3c:	200000fc 	.word	0x200000fc
 8009d40:	ffff0208 	.word	0xffff0208

08009d44 <__ssputs_r>:
 8009d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d48:	688e      	ldr	r6, [r1, #8]
 8009d4a:	429e      	cmp	r6, r3
 8009d4c:	4682      	mov	sl, r0
 8009d4e:	460c      	mov	r4, r1
 8009d50:	4690      	mov	r8, r2
 8009d52:	461f      	mov	r7, r3
 8009d54:	d838      	bhi.n	8009dc8 <__ssputs_r+0x84>
 8009d56:	898a      	ldrh	r2, [r1, #12]
 8009d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d5c:	d032      	beq.n	8009dc4 <__ssputs_r+0x80>
 8009d5e:	6825      	ldr	r5, [r4, #0]
 8009d60:	6909      	ldr	r1, [r1, #16]
 8009d62:	eba5 0901 	sub.w	r9, r5, r1
 8009d66:	6965      	ldr	r5, [r4, #20]
 8009d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d70:	3301      	adds	r3, #1
 8009d72:	444b      	add	r3, r9
 8009d74:	106d      	asrs	r5, r5, #1
 8009d76:	429d      	cmp	r5, r3
 8009d78:	bf38      	it	cc
 8009d7a:	461d      	movcc	r5, r3
 8009d7c:	0553      	lsls	r3, r2, #21
 8009d7e:	d531      	bpl.n	8009de4 <__ssputs_r+0xa0>
 8009d80:	4629      	mov	r1, r5
 8009d82:	f000 fb55 	bl	800a430 <_malloc_r>
 8009d86:	4606      	mov	r6, r0
 8009d88:	b950      	cbnz	r0, 8009da0 <__ssputs_r+0x5c>
 8009d8a:	230c      	movs	r3, #12
 8009d8c:	f8ca 3000 	str.w	r3, [sl]
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d96:	81a3      	strh	r3, [r4, #12]
 8009d98:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da0:	6921      	ldr	r1, [r4, #16]
 8009da2:	464a      	mov	r2, r9
 8009da4:	f7ff ff98 	bl	8009cd8 <memcpy>
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	6126      	str	r6, [r4, #16]
 8009db6:	6165      	str	r5, [r4, #20]
 8009db8:	444e      	add	r6, r9
 8009dba:	eba5 0509 	sub.w	r5, r5, r9
 8009dbe:	6026      	str	r6, [r4, #0]
 8009dc0:	60a5      	str	r5, [r4, #8]
 8009dc2:	463e      	mov	r6, r7
 8009dc4:	42be      	cmp	r6, r7
 8009dc6:	d900      	bls.n	8009dca <__ssputs_r+0x86>
 8009dc8:	463e      	mov	r6, r7
 8009dca:	6820      	ldr	r0, [r4, #0]
 8009dcc:	4632      	mov	r2, r6
 8009dce:	4641      	mov	r1, r8
 8009dd0:	f000 faa8 	bl	800a324 <memmove>
 8009dd4:	68a3      	ldr	r3, [r4, #8]
 8009dd6:	1b9b      	subs	r3, r3, r6
 8009dd8:	60a3      	str	r3, [r4, #8]
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	4433      	add	r3, r6
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	2000      	movs	r0, #0
 8009de2:	e7db      	b.n	8009d9c <__ssputs_r+0x58>
 8009de4:	462a      	mov	r2, r5
 8009de6:	f000 fb97 	bl	800a518 <_realloc_r>
 8009dea:	4606      	mov	r6, r0
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d1e1      	bne.n	8009db4 <__ssputs_r+0x70>
 8009df0:	6921      	ldr	r1, [r4, #16]
 8009df2:	4650      	mov	r0, sl
 8009df4:	f000 fab0 	bl	800a358 <_free_r>
 8009df8:	e7c7      	b.n	8009d8a <__ssputs_r+0x46>
	...

08009dfc <_svfiprintf_r>:
 8009dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	4698      	mov	r8, r3
 8009e02:	898b      	ldrh	r3, [r1, #12]
 8009e04:	061b      	lsls	r3, r3, #24
 8009e06:	b09d      	sub	sp, #116	; 0x74
 8009e08:	4607      	mov	r7, r0
 8009e0a:	460d      	mov	r5, r1
 8009e0c:	4614      	mov	r4, r2
 8009e0e:	d50e      	bpl.n	8009e2e <_svfiprintf_r+0x32>
 8009e10:	690b      	ldr	r3, [r1, #16]
 8009e12:	b963      	cbnz	r3, 8009e2e <_svfiprintf_r+0x32>
 8009e14:	2140      	movs	r1, #64	; 0x40
 8009e16:	f000 fb0b 	bl	800a430 <_malloc_r>
 8009e1a:	6028      	str	r0, [r5, #0]
 8009e1c:	6128      	str	r0, [r5, #16]
 8009e1e:	b920      	cbnz	r0, 8009e2a <_svfiprintf_r+0x2e>
 8009e20:	230c      	movs	r3, #12
 8009e22:	603b      	str	r3, [r7, #0]
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295
 8009e28:	e0d1      	b.n	8009fce <_svfiprintf_r+0x1d2>
 8009e2a:	2340      	movs	r3, #64	; 0x40
 8009e2c:	616b      	str	r3, [r5, #20]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	9309      	str	r3, [sp, #36]	; 0x24
 8009e32:	2320      	movs	r3, #32
 8009e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e3c:	2330      	movs	r3, #48	; 0x30
 8009e3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009fe8 <_svfiprintf_r+0x1ec>
 8009e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e46:	f04f 0901 	mov.w	r9, #1
 8009e4a:	4623      	mov	r3, r4
 8009e4c:	469a      	mov	sl, r3
 8009e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e52:	b10a      	cbz	r2, 8009e58 <_svfiprintf_r+0x5c>
 8009e54:	2a25      	cmp	r2, #37	; 0x25
 8009e56:	d1f9      	bne.n	8009e4c <_svfiprintf_r+0x50>
 8009e58:	ebba 0b04 	subs.w	fp, sl, r4
 8009e5c:	d00b      	beq.n	8009e76 <_svfiprintf_r+0x7a>
 8009e5e:	465b      	mov	r3, fp
 8009e60:	4622      	mov	r2, r4
 8009e62:	4629      	mov	r1, r5
 8009e64:	4638      	mov	r0, r7
 8009e66:	f7ff ff6d 	bl	8009d44 <__ssputs_r>
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	f000 80aa 	beq.w	8009fc4 <_svfiprintf_r+0x1c8>
 8009e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e72:	445a      	add	r2, fp
 8009e74:	9209      	str	r2, [sp, #36]	; 0x24
 8009e76:	f89a 3000 	ldrb.w	r3, [sl]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 80a2 	beq.w	8009fc4 <_svfiprintf_r+0x1c8>
 8009e80:	2300      	movs	r3, #0
 8009e82:	f04f 32ff 	mov.w	r2, #4294967295
 8009e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e8a:	f10a 0a01 	add.w	sl, sl, #1
 8009e8e:	9304      	str	r3, [sp, #16]
 8009e90:	9307      	str	r3, [sp, #28]
 8009e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e96:	931a      	str	r3, [sp, #104]	; 0x68
 8009e98:	4654      	mov	r4, sl
 8009e9a:	2205      	movs	r2, #5
 8009e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea0:	4851      	ldr	r0, [pc, #324]	; (8009fe8 <_svfiprintf_r+0x1ec>)
 8009ea2:	f7f6 f9a5 	bl	80001f0 <memchr>
 8009ea6:	9a04      	ldr	r2, [sp, #16]
 8009ea8:	b9d8      	cbnz	r0, 8009ee2 <_svfiprintf_r+0xe6>
 8009eaa:	06d0      	lsls	r0, r2, #27
 8009eac:	bf44      	itt	mi
 8009eae:	2320      	movmi	r3, #32
 8009eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eb4:	0711      	lsls	r1, r2, #28
 8009eb6:	bf44      	itt	mi
 8009eb8:	232b      	movmi	r3, #43	; 0x2b
 8009eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ec4:	d015      	beq.n	8009ef2 <_svfiprintf_r+0xf6>
 8009ec6:	9a07      	ldr	r2, [sp, #28]
 8009ec8:	4654      	mov	r4, sl
 8009eca:	2000      	movs	r0, #0
 8009ecc:	f04f 0c0a 	mov.w	ip, #10
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ed6:	3b30      	subs	r3, #48	; 0x30
 8009ed8:	2b09      	cmp	r3, #9
 8009eda:	d94e      	bls.n	8009f7a <_svfiprintf_r+0x17e>
 8009edc:	b1b0      	cbz	r0, 8009f0c <_svfiprintf_r+0x110>
 8009ede:	9207      	str	r2, [sp, #28]
 8009ee0:	e014      	b.n	8009f0c <_svfiprintf_r+0x110>
 8009ee2:	eba0 0308 	sub.w	r3, r0, r8
 8009ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8009eea:	4313      	orrs	r3, r2
 8009eec:	9304      	str	r3, [sp, #16]
 8009eee:	46a2      	mov	sl, r4
 8009ef0:	e7d2      	b.n	8009e98 <_svfiprintf_r+0x9c>
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	1d19      	adds	r1, r3, #4
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	9103      	str	r1, [sp, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	bfbb      	ittet	lt
 8009efe:	425b      	neglt	r3, r3
 8009f00:	f042 0202 	orrlt.w	r2, r2, #2
 8009f04:	9307      	strge	r3, [sp, #28]
 8009f06:	9307      	strlt	r3, [sp, #28]
 8009f08:	bfb8      	it	lt
 8009f0a:	9204      	strlt	r2, [sp, #16]
 8009f0c:	7823      	ldrb	r3, [r4, #0]
 8009f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f10:	d10c      	bne.n	8009f2c <_svfiprintf_r+0x130>
 8009f12:	7863      	ldrb	r3, [r4, #1]
 8009f14:	2b2a      	cmp	r3, #42	; 0x2a
 8009f16:	d135      	bne.n	8009f84 <_svfiprintf_r+0x188>
 8009f18:	9b03      	ldr	r3, [sp, #12]
 8009f1a:	1d1a      	adds	r2, r3, #4
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	9203      	str	r2, [sp, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	bfb8      	it	lt
 8009f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f28:	3402      	adds	r4, #2
 8009f2a:	9305      	str	r3, [sp, #20]
 8009f2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ff8 <_svfiprintf_r+0x1fc>
 8009f30:	7821      	ldrb	r1, [r4, #0]
 8009f32:	2203      	movs	r2, #3
 8009f34:	4650      	mov	r0, sl
 8009f36:	f7f6 f95b 	bl	80001f0 <memchr>
 8009f3a:	b140      	cbz	r0, 8009f4e <_svfiprintf_r+0x152>
 8009f3c:	2340      	movs	r3, #64	; 0x40
 8009f3e:	eba0 000a 	sub.w	r0, r0, sl
 8009f42:	fa03 f000 	lsl.w	r0, r3, r0
 8009f46:	9b04      	ldr	r3, [sp, #16]
 8009f48:	4303      	orrs	r3, r0
 8009f4a:	3401      	adds	r4, #1
 8009f4c:	9304      	str	r3, [sp, #16]
 8009f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f52:	4826      	ldr	r0, [pc, #152]	; (8009fec <_svfiprintf_r+0x1f0>)
 8009f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f58:	2206      	movs	r2, #6
 8009f5a:	f7f6 f949 	bl	80001f0 <memchr>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d038      	beq.n	8009fd4 <_svfiprintf_r+0x1d8>
 8009f62:	4b23      	ldr	r3, [pc, #140]	; (8009ff0 <_svfiprintf_r+0x1f4>)
 8009f64:	bb1b      	cbnz	r3, 8009fae <_svfiprintf_r+0x1b2>
 8009f66:	9b03      	ldr	r3, [sp, #12]
 8009f68:	3307      	adds	r3, #7
 8009f6a:	f023 0307 	bic.w	r3, r3, #7
 8009f6e:	3308      	adds	r3, #8
 8009f70:	9303      	str	r3, [sp, #12]
 8009f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f74:	4433      	add	r3, r6
 8009f76:	9309      	str	r3, [sp, #36]	; 0x24
 8009f78:	e767      	b.n	8009e4a <_svfiprintf_r+0x4e>
 8009f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f7e:	460c      	mov	r4, r1
 8009f80:	2001      	movs	r0, #1
 8009f82:	e7a5      	b.n	8009ed0 <_svfiprintf_r+0xd4>
 8009f84:	2300      	movs	r3, #0
 8009f86:	3401      	adds	r4, #1
 8009f88:	9305      	str	r3, [sp, #20]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	f04f 0c0a 	mov.w	ip, #10
 8009f90:	4620      	mov	r0, r4
 8009f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f96:	3a30      	subs	r2, #48	; 0x30
 8009f98:	2a09      	cmp	r2, #9
 8009f9a:	d903      	bls.n	8009fa4 <_svfiprintf_r+0x1a8>
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0c5      	beq.n	8009f2c <_svfiprintf_r+0x130>
 8009fa0:	9105      	str	r1, [sp, #20]
 8009fa2:	e7c3      	b.n	8009f2c <_svfiprintf_r+0x130>
 8009fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fa8:	4604      	mov	r4, r0
 8009faa:	2301      	movs	r3, #1
 8009fac:	e7f0      	b.n	8009f90 <_svfiprintf_r+0x194>
 8009fae:	ab03      	add	r3, sp, #12
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	4b0f      	ldr	r3, [pc, #60]	; (8009ff4 <_svfiprintf_r+0x1f8>)
 8009fb6:	a904      	add	r1, sp, #16
 8009fb8:	4638      	mov	r0, r7
 8009fba:	f3af 8000 	nop.w
 8009fbe:	1c42      	adds	r2, r0, #1
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	d1d6      	bne.n	8009f72 <_svfiprintf_r+0x176>
 8009fc4:	89ab      	ldrh	r3, [r5, #12]
 8009fc6:	065b      	lsls	r3, r3, #25
 8009fc8:	f53f af2c 	bmi.w	8009e24 <_svfiprintf_r+0x28>
 8009fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fce:	b01d      	add	sp, #116	; 0x74
 8009fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd4:	ab03      	add	r3, sp, #12
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	462a      	mov	r2, r5
 8009fda:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <_svfiprintf_r+0x1f8>)
 8009fdc:	a904      	add	r1, sp, #16
 8009fde:	4638      	mov	r0, r7
 8009fe0:	f000 f87a 	bl	800a0d8 <_printf_i>
 8009fe4:	e7eb      	b.n	8009fbe <_svfiprintf_r+0x1c2>
 8009fe6:	bf00      	nop
 8009fe8:	0800a7ad 	.word	0x0800a7ad
 8009fec:	0800a7b7 	.word	0x0800a7b7
 8009ff0:	00000000 	.word	0x00000000
 8009ff4:	08009d45 	.word	0x08009d45
 8009ff8:	0800a7b3 	.word	0x0800a7b3

08009ffc <_printf_common>:
 8009ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a000:	4616      	mov	r6, r2
 800a002:	4699      	mov	r9, r3
 800a004:	688a      	ldr	r2, [r1, #8]
 800a006:	690b      	ldr	r3, [r1, #16]
 800a008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a00c:	4293      	cmp	r3, r2
 800a00e:	bfb8      	it	lt
 800a010:	4613      	movlt	r3, r2
 800a012:	6033      	str	r3, [r6, #0]
 800a014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a018:	4607      	mov	r7, r0
 800a01a:	460c      	mov	r4, r1
 800a01c:	b10a      	cbz	r2, 800a022 <_printf_common+0x26>
 800a01e:	3301      	adds	r3, #1
 800a020:	6033      	str	r3, [r6, #0]
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	0699      	lsls	r1, r3, #26
 800a026:	bf42      	ittt	mi
 800a028:	6833      	ldrmi	r3, [r6, #0]
 800a02a:	3302      	addmi	r3, #2
 800a02c:	6033      	strmi	r3, [r6, #0]
 800a02e:	6825      	ldr	r5, [r4, #0]
 800a030:	f015 0506 	ands.w	r5, r5, #6
 800a034:	d106      	bne.n	800a044 <_printf_common+0x48>
 800a036:	f104 0a19 	add.w	sl, r4, #25
 800a03a:	68e3      	ldr	r3, [r4, #12]
 800a03c:	6832      	ldr	r2, [r6, #0]
 800a03e:	1a9b      	subs	r3, r3, r2
 800a040:	42ab      	cmp	r3, r5
 800a042:	dc26      	bgt.n	800a092 <_printf_common+0x96>
 800a044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a048:	1e13      	subs	r3, r2, #0
 800a04a:	6822      	ldr	r2, [r4, #0]
 800a04c:	bf18      	it	ne
 800a04e:	2301      	movne	r3, #1
 800a050:	0692      	lsls	r2, r2, #26
 800a052:	d42b      	bmi.n	800a0ac <_printf_common+0xb0>
 800a054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a058:	4649      	mov	r1, r9
 800a05a:	4638      	mov	r0, r7
 800a05c:	47c0      	blx	r8
 800a05e:	3001      	adds	r0, #1
 800a060:	d01e      	beq.n	800a0a0 <_printf_common+0xa4>
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	68e5      	ldr	r5, [r4, #12]
 800a066:	6832      	ldr	r2, [r6, #0]
 800a068:	f003 0306 	and.w	r3, r3, #6
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	bf08      	it	eq
 800a070:	1aad      	subeq	r5, r5, r2
 800a072:	68a3      	ldr	r3, [r4, #8]
 800a074:	6922      	ldr	r2, [r4, #16]
 800a076:	bf0c      	ite	eq
 800a078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a07c:	2500      	movne	r5, #0
 800a07e:	4293      	cmp	r3, r2
 800a080:	bfc4      	itt	gt
 800a082:	1a9b      	subgt	r3, r3, r2
 800a084:	18ed      	addgt	r5, r5, r3
 800a086:	2600      	movs	r6, #0
 800a088:	341a      	adds	r4, #26
 800a08a:	42b5      	cmp	r5, r6
 800a08c:	d11a      	bne.n	800a0c4 <_printf_common+0xc8>
 800a08e:	2000      	movs	r0, #0
 800a090:	e008      	b.n	800a0a4 <_printf_common+0xa8>
 800a092:	2301      	movs	r3, #1
 800a094:	4652      	mov	r2, sl
 800a096:	4649      	mov	r1, r9
 800a098:	4638      	mov	r0, r7
 800a09a:	47c0      	blx	r8
 800a09c:	3001      	adds	r0, #1
 800a09e:	d103      	bne.n	800a0a8 <_printf_common+0xac>
 800a0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a8:	3501      	adds	r5, #1
 800a0aa:	e7c6      	b.n	800a03a <_printf_common+0x3e>
 800a0ac:	18e1      	adds	r1, r4, r3
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	2030      	movs	r0, #48	; 0x30
 800a0b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0b6:	4422      	add	r2, r4
 800a0b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0c0:	3302      	adds	r3, #2
 800a0c2:	e7c7      	b.n	800a054 <_printf_common+0x58>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	4622      	mov	r2, r4
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	47c0      	blx	r8
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	d0e6      	beq.n	800a0a0 <_printf_common+0xa4>
 800a0d2:	3601      	adds	r6, #1
 800a0d4:	e7d9      	b.n	800a08a <_printf_common+0x8e>
	...

0800a0d8 <_printf_i>:
 800a0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0dc:	7e0f      	ldrb	r7, [r1, #24]
 800a0de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0e0:	2f78      	cmp	r7, #120	; 0x78
 800a0e2:	4691      	mov	r9, r2
 800a0e4:	4680      	mov	r8, r0
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	469a      	mov	sl, r3
 800a0ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0ee:	d807      	bhi.n	800a100 <_printf_i+0x28>
 800a0f0:	2f62      	cmp	r7, #98	; 0x62
 800a0f2:	d80a      	bhi.n	800a10a <_printf_i+0x32>
 800a0f4:	2f00      	cmp	r7, #0
 800a0f6:	f000 80d8 	beq.w	800a2aa <_printf_i+0x1d2>
 800a0fa:	2f58      	cmp	r7, #88	; 0x58
 800a0fc:	f000 80a3 	beq.w	800a246 <_printf_i+0x16e>
 800a100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a108:	e03a      	b.n	800a180 <_printf_i+0xa8>
 800a10a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a10e:	2b15      	cmp	r3, #21
 800a110:	d8f6      	bhi.n	800a100 <_printf_i+0x28>
 800a112:	a101      	add	r1, pc, #4	; (adr r1, 800a118 <_printf_i+0x40>)
 800a114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a118:	0800a171 	.word	0x0800a171
 800a11c:	0800a185 	.word	0x0800a185
 800a120:	0800a101 	.word	0x0800a101
 800a124:	0800a101 	.word	0x0800a101
 800a128:	0800a101 	.word	0x0800a101
 800a12c:	0800a101 	.word	0x0800a101
 800a130:	0800a185 	.word	0x0800a185
 800a134:	0800a101 	.word	0x0800a101
 800a138:	0800a101 	.word	0x0800a101
 800a13c:	0800a101 	.word	0x0800a101
 800a140:	0800a101 	.word	0x0800a101
 800a144:	0800a291 	.word	0x0800a291
 800a148:	0800a1b5 	.word	0x0800a1b5
 800a14c:	0800a273 	.word	0x0800a273
 800a150:	0800a101 	.word	0x0800a101
 800a154:	0800a101 	.word	0x0800a101
 800a158:	0800a2b3 	.word	0x0800a2b3
 800a15c:	0800a101 	.word	0x0800a101
 800a160:	0800a1b5 	.word	0x0800a1b5
 800a164:	0800a101 	.word	0x0800a101
 800a168:	0800a101 	.word	0x0800a101
 800a16c:	0800a27b 	.word	0x0800a27b
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	1d1a      	adds	r2, r3, #4
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	602a      	str	r2, [r5, #0]
 800a178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a17c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a180:	2301      	movs	r3, #1
 800a182:	e0a3      	b.n	800a2cc <_printf_i+0x1f4>
 800a184:	6820      	ldr	r0, [r4, #0]
 800a186:	6829      	ldr	r1, [r5, #0]
 800a188:	0606      	lsls	r6, r0, #24
 800a18a:	f101 0304 	add.w	r3, r1, #4
 800a18e:	d50a      	bpl.n	800a1a6 <_printf_i+0xce>
 800a190:	680e      	ldr	r6, [r1, #0]
 800a192:	602b      	str	r3, [r5, #0]
 800a194:	2e00      	cmp	r6, #0
 800a196:	da03      	bge.n	800a1a0 <_printf_i+0xc8>
 800a198:	232d      	movs	r3, #45	; 0x2d
 800a19a:	4276      	negs	r6, r6
 800a19c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a0:	485e      	ldr	r0, [pc, #376]	; (800a31c <_printf_i+0x244>)
 800a1a2:	230a      	movs	r3, #10
 800a1a4:	e019      	b.n	800a1da <_printf_i+0x102>
 800a1a6:	680e      	ldr	r6, [r1, #0]
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1ae:	bf18      	it	ne
 800a1b0:	b236      	sxthne	r6, r6
 800a1b2:	e7ef      	b.n	800a194 <_printf_i+0xbc>
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	6820      	ldr	r0, [r4, #0]
 800a1b8:	1d19      	adds	r1, r3, #4
 800a1ba:	6029      	str	r1, [r5, #0]
 800a1bc:	0601      	lsls	r1, r0, #24
 800a1be:	d501      	bpl.n	800a1c4 <_printf_i+0xec>
 800a1c0:	681e      	ldr	r6, [r3, #0]
 800a1c2:	e002      	b.n	800a1ca <_printf_i+0xf2>
 800a1c4:	0646      	lsls	r6, r0, #25
 800a1c6:	d5fb      	bpl.n	800a1c0 <_printf_i+0xe8>
 800a1c8:	881e      	ldrh	r6, [r3, #0]
 800a1ca:	4854      	ldr	r0, [pc, #336]	; (800a31c <_printf_i+0x244>)
 800a1cc:	2f6f      	cmp	r7, #111	; 0x6f
 800a1ce:	bf0c      	ite	eq
 800a1d0:	2308      	moveq	r3, #8
 800a1d2:	230a      	movne	r3, #10
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1da:	6865      	ldr	r5, [r4, #4]
 800a1dc:	60a5      	str	r5, [r4, #8]
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	bfa2      	ittt	ge
 800a1e2:	6821      	ldrge	r1, [r4, #0]
 800a1e4:	f021 0104 	bicge.w	r1, r1, #4
 800a1e8:	6021      	strge	r1, [r4, #0]
 800a1ea:	b90e      	cbnz	r6, 800a1f0 <_printf_i+0x118>
 800a1ec:	2d00      	cmp	r5, #0
 800a1ee:	d04d      	beq.n	800a28c <_printf_i+0x1b4>
 800a1f0:	4615      	mov	r5, r2
 800a1f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1f6:	fb03 6711 	mls	r7, r3, r1, r6
 800a1fa:	5dc7      	ldrb	r7, [r0, r7]
 800a1fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a200:	4637      	mov	r7, r6
 800a202:	42bb      	cmp	r3, r7
 800a204:	460e      	mov	r6, r1
 800a206:	d9f4      	bls.n	800a1f2 <_printf_i+0x11a>
 800a208:	2b08      	cmp	r3, #8
 800a20a:	d10b      	bne.n	800a224 <_printf_i+0x14c>
 800a20c:	6823      	ldr	r3, [r4, #0]
 800a20e:	07de      	lsls	r6, r3, #31
 800a210:	d508      	bpl.n	800a224 <_printf_i+0x14c>
 800a212:	6923      	ldr	r3, [r4, #16]
 800a214:	6861      	ldr	r1, [r4, #4]
 800a216:	4299      	cmp	r1, r3
 800a218:	bfde      	ittt	le
 800a21a:	2330      	movle	r3, #48	; 0x30
 800a21c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a220:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a224:	1b52      	subs	r2, r2, r5
 800a226:	6122      	str	r2, [r4, #16]
 800a228:	f8cd a000 	str.w	sl, [sp]
 800a22c:	464b      	mov	r3, r9
 800a22e:	aa03      	add	r2, sp, #12
 800a230:	4621      	mov	r1, r4
 800a232:	4640      	mov	r0, r8
 800a234:	f7ff fee2 	bl	8009ffc <_printf_common>
 800a238:	3001      	adds	r0, #1
 800a23a:	d14c      	bne.n	800a2d6 <_printf_i+0x1fe>
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	b004      	add	sp, #16
 800a242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a246:	4835      	ldr	r0, [pc, #212]	; (800a31c <_printf_i+0x244>)
 800a248:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a24c:	6829      	ldr	r1, [r5, #0]
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	f851 6b04 	ldr.w	r6, [r1], #4
 800a254:	6029      	str	r1, [r5, #0]
 800a256:	061d      	lsls	r5, r3, #24
 800a258:	d514      	bpl.n	800a284 <_printf_i+0x1ac>
 800a25a:	07df      	lsls	r7, r3, #31
 800a25c:	bf44      	itt	mi
 800a25e:	f043 0320 	orrmi.w	r3, r3, #32
 800a262:	6023      	strmi	r3, [r4, #0]
 800a264:	b91e      	cbnz	r6, 800a26e <_printf_i+0x196>
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	f023 0320 	bic.w	r3, r3, #32
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	2310      	movs	r3, #16
 800a270:	e7b0      	b.n	800a1d4 <_printf_i+0xfc>
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	f043 0320 	orr.w	r3, r3, #32
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	2378      	movs	r3, #120	; 0x78
 800a27c:	4828      	ldr	r0, [pc, #160]	; (800a320 <_printf_i+0x248>)
 800a27e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a282:	e7e3      	b.n	800a24c <_printf_i+0x174>
 800a284:	0659      	lsls	r1, r3, #25
 800a286:	bf48      	it	mi
 800a288:	b2b6      	uxthmi	r6, r6
 800a28a:	e7e6      	b.n	800a25a <_printf_i+0x182>
 800a28c:	4615      	mov	r5, r2
 800a28e:	e7bb      	b.n	800a208 <_printf_i+0x130>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	6826      	ldr	r6, [r4, #0]
 800a294:	6961      	ldr	r1, [r4, #20]
 800a296:	1d18      	adds	r0, r3, #4
 800a298:	6028      	str	r0, [r5, #0]
 800a29a:	0635      	lsls	r5, r6, #24
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	d501      	bpl.n	800a2a4 <_printf_i+0x1cc>
 800a2a0:	6019      	str	r1, [r3, #0]
 800a2a2:	e002      	b.n	800a2aa <_printf_i+0x1d2>
 800a2a4:	0670      	lsls	r0, r6, #25
 800a2a6:	d5fb      	bpl.n	800a2a0 <_printf_i+0x1c8>
 800a2a8:	8019      	strh	r1, [r3, #0]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	6123      	str	r3, [r4, #16]
 800a2ae:	4615      	mov	r5, r2
 800a2b0:	e7ba      	b.n	800a228 <_printf_i+0x150>
 800a2b2:	682b      	ldr	r3, [r5, #0]
 800a2b4:	1d1a      	adds	r2, r3, #4
 800a2b6:	602a      	str	r2, [r5, #0]
 800a2b8:	681d      	ldr	r5, [r3, #0]
 800a2ba:	6862      	ldr	r2, [r4, #4]
 800a2bc:	2100      	movs	r1, #0
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f7f5 ff96 	bl	80001f0 <memchr>
 800a2c4:	b108      	cbz	r0, 800a2ca <_printf_i+0x1f2>
 800a2c6:	1b40      	subs	r0, r0, r5
 800a2c8:	6060      	str	r0, [r4, #4]
 800a2ca:	6863      	ldr	r3, [r4, #4]
 800a2cc:	6123      	str	r3, [r4, #16]
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2d4:	e7a8      	b.n	800a228 <_printf_i+0x150>
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	462a      	mov	r2, r5
 800a2da:	4649      	mov	r1, r9
 800a2dc:	4640      	mov	r0, r8
 800a2de:	47d0      	blx	sl
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	d0ab      	beq.n	800a23c <_printf_i+0x164>
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	079b      	lsls	r3, r3, #30
 800a2e8:	d413      	bmi.n	800a312 <_printf_i+0x23a>
 800a2ea:	68e0      	ldr	r0, [r4, #12]
 800a2ec:	9b03      	ldr	r3, [sp, #12]
 800a2ee:	4298      	cmp	r0, r3
 800a2f0:	bfb8      	it	lt
 800a2f2:	4618      	movlt	r0, r3
 800a2f4:	e7a4      	b.n	800a240 <_printf_i+0x168>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	4632      	mov	r2, r6
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	47d0      	blx	sl
 800a300:	3001      	adds	r0, #1
 800a302:	d09b      	beq.n	800a23c <_printf_i+0x164>
 800a304:	3501      	adds	r5, #1
 800a306:	68e3      	ldr	r3, [r4, #12]
 800a308:	9903      	ldr	r1, [sp, #12]
 800a30a:	1a5b      	subs	r3, r3, r1
 800a30c:	42ab      	cmp	r3, r5
 800a30e:	dcf2      	bgt.n	800a2f6 <_printf_i+0x21e>
 800a310:	e7eb      	b.n	800a2ea <_printf_i+0x212>
 800a312:	2500      	movs	r5, #0
 800a314:	f104 0619 	add.w	r6, r4, #25
 800a318:	e7f5      	b.n	800a306 <_printf_i+0x22e>
 800a31a:	bf00      	nop
 800a31c:	0800a7be 	.word	0x0800a7be
 800a320:	0800a7cf 	.word	0x0800a7cf

0800a324 <memmove>:
 800a324:	4288      	cmp	r0, r1
 800a326:	b510      	push	{r4, lr}
 800a328:	eb01 0402 	add.w	r4, r1, r2
 800a32c:	d902      	bls.n	800a334 <memmove+0x10>
 800a32e:	4284      	cmp	r4, r0
 800a330:	4623      	mov	r3, r4
 800a332:	d807      	bhi.n	800a344 <memmove+0x20>
 800a334:	1e43      	subs	r3, r0, #1
 800a336:	42a1      	cmp	r1, r4
 800a338:	d008      	beq.n	800a34c <memmove+0x28>
 800a33a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a33e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a342:	e7f8      	b.n	800a336 <memmove+0x12>
 800a344:	4402      	add	r2, r0
 800a346:	4601      	mov	r1, r0
 800a348:	428a      	cmp	r2, r1
 800a34a:	d100      	bne.n	800a34e <memmove+0x2a>
 800a34c:	bd10      	pop	{r4, pc}
 800a34e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a356:	e7f7      	b.n	800a348 <memmove+0x24>

0800a358 <_free_r>:
 800a358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a35a:	2900      	cmp	r1, #0
 800a35c:	d044      	beq.n	800a3e8 <_free_r+0x90>
 800a35e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a362:	9001      	str	r0, [sp, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	f1a1 0404 	sub.w	r4, r1, #4
 800a36a:	bfb8      	it	lt
 800a36c:	18e4      	addlt	r4, r4, r3
 800a36e:	f000 f913 	bl	800a598 <__malloc_lock>
 800a372:	4a1e      	ldr	r2, [pc, #120]	; (800a3ec <_free_r+0x94>)
 800a374:	9801      	ldr	r0, [sp, #4]
 800a376:	6813      	ldr	r3, [r2, #0]
 800a378:	b933      	cbnz	r3, 800a388 <_free_r+0x30>
 800a37a:	6063      	str	r3, [r4, #4]
 800a37c:	6014      	str	r4, [r2, #0]
 800a37e:	b003      	add	sp, #12
 800a380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a384:	f000 b90e 	b.w	800a5a4 <__malloc_unlock>
 800a388:	42a3      	cmp	r3, r4
 800a38a:	d908      	bls.n	800a39e <_free_r+0x46>
 800a38c:	6825      	ldr	r5, [r4, #0]
 800a38e:	1961      	adds	r1, r4, r5
 800a390:	428b      	cmp	r3, r1
 800a392:	bf01      	itttt	eq
 800a394:	6819      	ldreq	r1, [r3, #0]
 800a396:	685b      	ldreq	r3, [r3, #4]
 800a398:	1949      	addeq	r1, r1, r5
 800a39a:	6021      	streq	r1, [r4, #0]
 800a39c:	e7ed      	b.n	800a37a <_free_r+0x22>
 800a39e:	461a      	mov	r2, r3
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	b10b      	cbz	r3, 800a3a8 <_free_r+0x50>
 800a3a4:	42a3      	cmp	r3, r4
 800a3a6:	d9fa      	bls.n	800a39e <_free_r+0x46>
 800a3a8:	6811      	ldr	r1, [r2, #0]
 800a3aa:	1855      	adds	r5, r2, r1
 800a3ac:	42a5      	cmp	r5, r4
 800a3ae:	d10b      	bne.n	800a3c8 <_free_r+0x70>
 800a3b0:	6824      	ldr	r4, [r4, #0]
 800a3b2:	4421      	add	r1, r4
 800a3b4:	1854      	adds	r4, r2, r1
 800a3b6:	42a3      	cmp	r3, r4
 800a3b8:	6011      	str	r1, [r2, #0]
 800a3ba:	d1e0      	bne.n	800a37e <_free_r+0x26>
 800a3bc:	681c      	ldr	r4, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	6053      	str	r3, [r2, #4]
 800a3c2:	4421      	add	r1, r4
 800a3c4:	6011      	str	r1, [r2, #0]
 800a3c6:	e7da      	b.n	800a37e <_free_r+0x26>
 800a3c8:	d902      	bls.n	800a3d0 <_free_r+0x78>
 800a3ca:	230c      	movs	r3, #12
 800a3cc:	6003      	str	r3, [r0, #0]
 800a3ce:	e7d6      	b.n	800a37e <_free_r+0x26>
 800a3d0:	6825      	ldr	r5, [r4, #0]
 800a3d2:	1961      	adds	r1, r4, r5
 800a3d4:	428b      	cmp	r3, r1
 800a3d6:	bf04      	itt	eq
 800a3d8:	6819      	ldreq	r1, [r3, #0]
 800a3da:	685b      	ldreq	r3, [r3, #4]
 800a3dc:	6063      	str	r3, [r4, #4]
 800a3de:	bf04      	itt	eq
 800a3e0:	1949      	addeq	r1, r1, r5
 800a3e2:	6021      	streq	r1, [r4, #0]
 800a3e4:	6054      	str	r4, [r2, #4]
 800a3e6:	e7ca      	b.n	800a37e <_free_r+0x26>
 800a3e8:	b003      	add	sp, #12
 800a3ea:	bd30      	pop	{r4, r5, pc}
 800a3ec:	20002314 	.word	0x20002314

0800a3f0 <sbrk_aligned>:
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	4e0e      	ldr	r6, [pc, #56]	; (800a42c <sbrk_aligned+0x3c>)
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	6831      	ldr	r1, [r6, #0]
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	b911      	cbnz	r1, 800a402 <sbrk_aligned+0x12>
 800a3fc:	f000 f8bc 	bl	800a578 <_sbrk_r>
 800a400:	6030      	str	r0, [r6, #0]
 800a402:	4621      	mov	r1, r4
 800a404:	4628      	mov	r0, r5
 800a406:	f000 f8b7 	bl	800a578 <_sbrk_r>
 800a40a:	1c43      	adds	r3, r0, #1
 800a40c:	d00a      	beq.n	800a424 <sbrk_aligned+0x34>
 800a40e:	1cc4      	adds	r4, r0, #3
 800a410:	f024 0403 	bic.w	r4, r4, #3
 800a414:	42a0      	cmp	r0, r4
 800a416:	d007      	beq.n	800a428 <sbrk_aligned+0x38>
 800a418:	1a21      	subs	r1, r4, r0
 800a41a:	4628      	mov	r0, r5
 800a41c:	f000 f8ac 	bl	800a578 <_sbrk_r>
 800a420:	3001      	adds	r0, #1
 800a422:	d101      	bne.n	800a428 <sbrk_aligned+0x38>
 800a424:	f04f 34ff 	mov.w	r4, #4294967295
 800a428:	4620      	mov	r0, r4
 800a42a:	bd70      	pop	{r4, r5, r6, pc}
 800a42c:	20002318 	.word	0x20002318

0800a430 <_malloc_r>:
 800a430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a434:	1ccd      	adds	r5, r1, #3
 800a436:	f025 0503 	bic.w	r5, r5, #3
 800a43a:	3508      	adds	r5, #8
 800a43c:	2d0c      	cmp	r5, #12
 800a43e:	bf38      	it	cc
 800a440:	250c      	movcc	r5, #12
 800a442:	2d00      	cmp	r5, #0
 800a444:	4607      	mov	r7, r0
 800a446:	db01      	blt.n	800a44c <_malloc_r+0x1c>
 800a448:	42a9      	cmp	r1, r5
 800a44a:	d905      	bls.n	800a458 <_malloc_r+0x28>
 800a44c:	230c      	movs	r3, #12
 800a44e:	603b      	str	r3, [r7, #0]
 800a450:	2600      	movs	r6, #0
 800a452:	4630      	mov	r0, r6
 800a454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a458:	4e2e      	ldr	r6, [pc, #184]	; (800a514 <_malloc_r+0xe4>)
 800a45a:	f000 f89d 	bl	800a598 <__malloc_lock>
 800a45e:	6833      	ldr	r3, [r6, #0]
 800a460:	461c      	mov	r4, r3
 800a462:	bb34      	cbnz	r4, 800a4b2 <_malloc_r+0x82>
 800a464:	4629      	mov	r1, r5
 800a466:	4638      	mov	r0, r7
 800a468:	f7ff ffc2 	bl	800a3f0 <sbrk_aligned>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	4604      	mov	r4, r0
 800a470:	d14d      	bne.n	800a50e <_malloc_r+0xde>
 800a472:	6834      	ldr	r4, [r6, #0]
 800a474:	4626      	mov	r6, r4
 800a476:	2e00      	cmp	r6, #0
 800a478:	d140      	bne.n	800a4fc <_malloc_r+0xcc>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	4631      	mov	r1, r6
 800a47e:	4638      	mov	r0, r7
 800a480:	eb04 0803 	add.w	r8, r4, r3
 800a484:	f000 f878 	bl	800a578 <_sbrk_r>
 800a488:	4580      	cmp	r8, r0
 800a48a:	d13a      	bne.n	800a502 <_malloc_r+0xd2>
 800a48c:	6821      	ldr	r1, [r4, #0]
 800a48e:	3503      	adds	r5, #3
 800a490:	1a6d      	subs	r5, r5, r1
 800a492:	f025 0503 	bic.w	r5, r5, #3
 800a496:	3508      	adds	r5, #8
 800a498:	2d0c      	cmp	r5, #12
 800a49a:	bf38      	it	cc
 800a49c:	250c      	movcc	r5, #12
 800a49e:	4629      	mov	r1, r5
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f7ff ffa5 	bl	800a3f0 <sbrk_aligned>
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	d02b      	beq.n	800a502 <_malloc_r+0xd2>
 800a4aa:	6823      	ldr	r3, [r4, #0]
 800a4ac:	442b      	add	r3, r5
 800a4ae:	6023      	str	r3, [r4, #0]
 800a4b0:	e00e      	b.n	800a4d0 <_malloc_r+0xa0>
 800a4b2:	6822      	ldr	r2, [r4, #0]
 800a4b4:	1b52      	subs	r2, r2, r5
 800a4b6:	d41e      	bmi.n	800a4f6 <_malloc_r+0xc6>
 800a4b8:	2a0b      	cmp	r2, #11
 800a4ba:	d916      	bls.n	800a4ea <_malloc_r+0xba>
 800a4bc:	1961      	adds	r1, r4, r5
 800a4be:	42a3      	cmp	r3, r4
 800a4c0:	6025      	str	r5, [r4, #0]
 800a4c2:	bf18      	it	ne
 800a4c4:	6059      	strne	r1, [r3, #4]
 800a4c6:	6863      	ldr	r3, [r4, #4]
 800a4c8:	bf08      	it	eq
 800a4ca:	6031      	streq	r1, [r6, #0]
 800a4cc:	5162      	str	r2, [r4, r5]
 800a4ce:	604b      	str	r3, [r1, #4]
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	f104 060b 	add.w	r6, r4, #11
 800a4d6:	f000 f865 	bl	800a5a4 <__malloc_unlock>
 800a4da:	f026 0607 	bic.w	r6, r6, #7
 800a4de:	1d23      	adds	r3, r4, #4
 800a4e0:	1af2      	subs	r2, r6, r3
 800a4e2:	d0b6      	beq.n	800a452 <_malloc_r+0x22>
 800a4e4:	1b9b      	subs	r3, r3, r6
 800a4e6:	50a3      	str	r3, [r4, r2]
 800a4e8:	e7b3      	b.n	800a452 <_malloc_r+0x22>
 800a4ea:	6862      	ldr	r2, [r4, #4]
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	bf0c      	ite	eq
 800a4f0:	6032      	streq	r2, [r6, #0]
 800a4f2:	605a      	strne	r2, [r3, #4]
 800a4f4:	e7ec      	b.n	800a4d0 <_malloc_r+0xa0>
 800a4f6:	4623      	mov	r3, r4
 800a4f8:	6864      	ldr	r4, [r4, #4]
 800a4fa:	e7b2      	b.n	800a462 <_malloc_r+0x32>
 800a4fc:	4634      	mov	r4, r6
 800a4fe:	6876      	ldr	r6, [r6, #4]
 800a500:	e7b9      	b.n	800a476 <_malloc_r+0x46>
 800a502:	230c      	movs	r3, #12
 800a504:	603b      	str	r3, [r7, #0]
 800a506:	4638      	mov	r0, r7
 800a508:	f000 f84c 	bl	800a5a4 <__malloc_unlock>
 800a50c:	e7a1      	b.n	800a452 <_malloc_r+0x22>
 800a50e:	6025      	str	r5, [r4, #0]
 800a510:	e7de      	b.n	800a4d0 <_malloc_r+0xa0>
 800a512:	bf00      	nop
 800a514:	20002314 	.word	0x20002314

0800a518 <_realloc_r>:
 800a518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51c:	4680      	mov	r8, r0
 800a51e:	4614      	mov	r4, r2
 800a520:	460e      	mov	r6, r1
 800a522:	b921      	cbnz	r1, 800a52e <_realloc_r+0x16>
 800a524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a528:	4611      	mov	r1, r2
 800a52a:	f7ff bf81 	b.w	800a430 <_malloc_r>
 800a52e:	b92a      	cbnz	r2, 800a53c <_realloc_r+0x24>
 800a530:	f7ff ff12 	bl	800a358 <_free_r>
 800a534:	4625      	mov	r5, r4
 800a536:	4628      	mov	r0, r5
 800a538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a53c:	f000 f838 	bl	800a5b0 <_malloc_usable_size_r>
 800a540:	4284      	cmp	r4, r0
 800a542:	4607      	mov	r7, r0
 800a544:	d802      	bhi.n	800a54c <_realloc_r+0x34>
 800a546:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a54a:	d812      	bhi.n	800a572 <_realloc_r+0x5a>
 800a54c:	4621      	mov	r1, r4
 800a54e:	4640      	mov	r0, r8
 800a550:	f7ff ff6e 	bl	800a430 <_malloc_r>
 800a554:	4605      	mov	r5, r0
 800a556:	2800      	cmp	r0, #0
 800a558:	d0ed      	beq.n	800a536 <_realloc_r+0x1e>
 800a55a:	42bc      	cmp	r4, r7
 800a55c:	4622      	mov	r2, r4
 800a55e:	4631      	mov	r1, r6
 800a560:	bf28      	it	cs
 800a562:	463a      	movcs	r2, r7
 800a564:	f7ff fbb8 	bl	8009cd8 <memcpy>
 800a568:	4631      	mov	r1, r6
 800a56a:	4640      	mov	r0, r8
 800a56c:	f7ff fef4 	bl	800a358 <_free_r>
 800a570:	e7e1      	b.n	800a536 <_realloc_r+0x1e>
 800a572:	4635      	mov	r5, r6
 800a574:	e7df      	b.n	800a536 <_realloc_r+0x1e>
	...

0800a578 <_sbrk_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	4d06      	ldr	r5, [pc, #24]	; (800a594 <_sbrk_r+0x1c>)
 800a57c:	2300      	movs	r3, #0
 800a57e:	4604      	mov	r4, r0
 800a580:	4608      	mov	r0, r1
 800a582:	602b      	str	r3, [r5, #0]
 800a584:	f7f6 fc72 	bl	8000e6c <_sbrk>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_sbrk_r+0x1a>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_sbrk_r+0x1a>
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	2000231c 	.word	0x2000231c

0800a598 <__malloc_lock>:
 800a598:	4801      	ldr	r0, [pc, #4]	; (800a5a0 <__malloc_lock+0x8>)
 800a59a:	f000 b811 	b.w	800a5c0 <__retarget_lock_acquire_recursive>
 800a59e:	bf00      	nop
 800a5a0:	20002320 	.word	0x20002320

0800a5a4 <__malloc_unlock>:
 800a5a4:	4801      	ldr	r0, [pc, #4]	; (800a5ac <__malloc_unlock+0x8>)
 800a5a6:	f000 b80c 	b.w	800a5c2 <__retarget_lock_release_recursive>
 800a5aa:	bf00      	nop
 800a5ac:	20002320 	.word	0x20002320

0800a5b0 <_malloc_usable_size_r>:
 800a5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5b4:	1f18      	subs	r0, r3, #4
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bfbc      	itt	lt
 800a5ba:	580b      	ldrlt	r3, [r1, r0]
 800a5bc:	18c0      	addlt	r0, r0, r3
 800a5be:	4770      	bx	lr

0800a5c0 <__retarget_lock_acquire_recursive>:
 800a5c0:	4770      	bx	lr

0800a5c2 <__retarget_lock_release_recursive>:
 800a5c2:	4770      	bx	lr

0800a5c4 <_init>:
 800a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c6:	bf00      	nop
 800a5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ca:	bc08      	pop	{r3}
 800a5cc:	469e      	mov	lr, r3
 800a5ce:	4770      	bx	lr

0800a5d0 <_fini>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	bf00      	nop
 800a5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d6:	bc08      	pop	{r3}
 800a5d8:	469e      	mov	lr, r3
 800a5da:	4770      	bx	lr
