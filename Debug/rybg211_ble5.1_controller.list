
rybg211_ble5.1_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009c50  08009c50  00019c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e40  08009e40  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009e40  08009e40  00019e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e48  08009e48  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e48  08009e48  00019e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002178  20000160  08009fb0  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022d8  08009fb0  000222d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139e1  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c2  00000000  00000000  00033b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00036f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00037de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019380  00000000  00000000  00038b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139f2  00000000  00000000  00051ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad1b  00000000  00000000  000658b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f05cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f18  00000000  00000000  000f0620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c38 	.word	0x08009c38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08009c38 	.word	0x08009c38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fbd0 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f832 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8ea 	bl	8000778 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8c0 	bl	8000728 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f894 	bl	80006d4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005ac:	f008 f812 	bl	80085d4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  CDC_Handler_Init_FS	(main_UsbRxTask);
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <main+0x58>)
 80005b2:	f008 f913 	bl	80087dc <CDC_Handler_Init_FS>

  rybg211_bleModuleInit();
 80005b6:	f008 fd47 	bl	8009048 <rybg211_bleModuleInit>

  rybg211_setDeviceName(hBleModule.txBuffer, "BLE Bridge");
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <main+0x5c>)
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <main+0x60>)
 80005be:	f008 fd57 	bl	8009070 <rybg211_setDeviceName>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80005c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c6:	490c      	ldr	r1, [pc, #48]	; (80005f8 <main+0x64>)
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <main+0x68>)
 80005ca:	f003 fa9f 	bl	8003b0c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <main+0x6c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x6c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f022 0208 	bic.w	r2, r2, #8
 80005dc:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  main_UartTxTask();
 80005de:	f000 f945 	bl	800086c <main_UartTxTask>

	  main_UartRxTask();
 80005e2:	f000 f96f 	bl	80008c4 <main_UartRxTask>

	  main_bridgeDataTransfare();
 80005e6:	f000 f9b9 	bl	800095c <main_bridgeDataTransfare>
	  main_UartTxTask();
 80005ea:	e7f8      	b.n	80005de <main+0x4a>
 80005ec:	08000925 	.word	0x08000925
 80005f0:	08009c50 	.word	0x08009c50
 80005f4:	200020c5 	.word	0x200020c5
 80005f8:	200021c5 	.word	0x200021c5
 80005fc:	2000017c 	.word	0x2000017c
 8000600:	200001c0 	.word	0x200001c0

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f008 fea8 	bl	8009368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <SystemClock_Config+0xc8>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xcc>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000674:	230f      	movs	r3, #15
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000678:	2390      	movs	r3, #144	; 0x90
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067c:	2304      	movs	r3, #4
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000680:	2305      	movs	r3, #5
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fd1b 	bl	80030c4 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 f9aa 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2101      	movs	r1, #1
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 ff7d 	bl	80035b4 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c0:	f000 f994 	bl	80009ec <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART1_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 800070c:	f003 f932 	bl	8003974 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f969 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000017c 	.word	0x2000017c
 8000724:	40011000 	.word	0x40011000

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_DMA_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <MX_DMA_Init+0x4c>)
 8000738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_DMA_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	203a      	movs	r0, #58	; 0x3a
 8000750:	f000 fc65 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000754:	203a      	movs	r0, #58	; 0x3a
 8000756:	f000 fc7e 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2046      	movs	r0, #70	; 0x46
 8000760:	f000 fc5d 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000764:	2046      	movs	r0, #70	; 0x46
 8000766:	f000 fc76 	bl	8001056 <HAL_NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f244 01e0 	movw	r1, #16608	; 0x40e0
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007ea:	f001 f9d5 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODULE_RESET_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80007ee:	f244 03e0 	movw	r3, #16608	; 0x40e0
 80007f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0xa0>)
 8000808:	f001 f842 	bl	8001890 <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400

0800081c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	807b      	strh	r3, [r7, #2]
	hBleModule.controlFlags.flag.packetReceived = ENABLE;
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <HAL_UARTEx_RxEventCallback+0x40>)
 800082a:	7813      	ldrb	r3, [r2, #0]
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	7013      	strb	r3, [r2, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 8000832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000836:	490a      	ldr	r1, [pc, #40]	; (8000860 <HAL_UARTEx_RxEventCallback+0x44>)
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <HAL_UARTEx_RxEventCallback+0x48>)
 800083a:	f003 f967 	bl	8003b0c <HAL_UARTEx_ReceiveToIdle_DMA>

	hBleModule.rxPacketSize = Size;
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_UARTEx_RxEventCallback+0x40>)
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	8093      	strh	r3, [r2, #4]

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_UARTEx_RxEventCallback+0x4c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f022 0208 	bic.w	r2, r2, #8
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200020b0 	.word	0x200020b0
 8000860:	200021c5 	.word	0x200021c5
 8000864:	2000017c 	.word	0x2000017c
 8000868:	200001c0 	.word	0x200001c0

0800086c <main_UartTxTask>:


static void main_UartTxTask()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hBleModule.txTimer > 1000))
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <main_UartTxTask+0x4c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d019      	beq.n	80008b2 <main_UartTxTask+0x46>
 800087e:	f000 fac3 	bl	8000e08 <HAL_GetTick>
 8000882:	4602      	mov	r2, r0
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <main_UartTxTask+0x4c>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800088e:	d910      	bls.n	80008b2 <main_UartTxTask+0x46>
	{
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <main_UartTxTask+0x4c>)
 8000892:	885b      	ldrh	r3, [r3, #2]
 8000894:	461a      	mov	r2, r3
 8000896:	4909      	ldr	r1, [pc, #36]	; (80008bc <main_UartTxTask+0x50>)
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <main_UartTxTask+0x54>)
 800089a:	f003 f8b9 	bl	8003a10 <HAL_UART_Transmit_DMA>

		hBleModule.controlFlags.flag.packetToTransmit = DISABLE;
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <main_UartTxTask+0x4c>)
 80008a0:	7813      	ldrb	r3, [r2, #0]
 80008a2:	f36f 0341 	bfc	r3, #1, #1
 80008a6:	7013      	strb	r3, [r2, #0]

		hBleModule.txTimer = HAL_GetTick();
 80008a8:	f000 faae 	bl	8000e08 <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a02      	ldr	r2, [pc, #8]	; (80008b8 <main_UartTxTask+0x4c>)
 80008b0:	60d3      	str	r3, [r2, #12]
	}
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200020b0 	.word	0x200020b0
 80008bc:	200020c5 	.word	0x200020c5
 80008c0:	2000017c 	.word	0x2000017c

080008c4 <main_UartRxTask>:

static void main_UartRxTask()
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetReceived)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <main_UartRxTask+0x50>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d01b      	beq.n	800090e <main_UartRxTask+0x4a>
	{
		if(rybg211_rxPacketParser(hBleModule.rxBuffer, hBleModule.rxPacketSize))
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <main_UartRxTask+0x50>)
 80008d8:	889b      	ldrh	r3, [r3, #4]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <main_UartRxTask+0x54>)
 80008e0:	f008 fbfc 	bl	80090dc <rybg211_rxPacketParser>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00c      	beq.n	8000904 <main_UartRxTask+0x40>
		{
			hBridge.blePacketSize = (uint16_t)rybg211_rxDataRead(hBleModule.rxBuffer, hBridge.bleBuffer);
 80008ea:	490c      	ldr	r1, [pc, #48]	; (800091c <main_UartRxTask+0x58>)
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <main_UartRxTask+0x54>)
 80008ee:	f008 fc9f 	bl	8009230 <rybg211_rxDataRead>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <main_UartRxTask+0x5c>)
 80008f8:	805a      	strh	r2, [r3, #2]

			hBridge.controlFlags.flag.bleToUsb = ENABLE;
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <main_UartRxTask+0x5c>)
 80008fc:	7813      	ldrb	r3, [r2, #0]
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	7013      	strb	r3, [r2, #0]
		}
		hBleModule.controlFlags.flag.packetReceived = DISABLE;
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <main_UartRxTask+0x50>)
 8000906:	7813      	ldrb	r3, [r2, #0]
 8000908:	f36f 0300 	bfc	r3, #0, #1
 800090c:	7013      	strb	r3, [r2, #0]

	}
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200020b0 	.word	0x200020b0
 8000918:	200021c5 	.word	0x200021c5
 800091c:	2000028c 	.word	0x2000028c
 8000920:	20000280 	.word	0x20000280

08000924 <main_UsbRxTask>:
 * @param 	cdcRxBuffer	:	Buffer will carry the data received over USB.
 *
 * @param 	packetSize	:	The size of the received packet.
 */
static void main_UsbRxTask(char* cdcRxBuffer, uint16_t packetSize)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	807b      	strh	r3, [r7, #2]

	memcpy(hBridge.usbBuffer, cdcRxBuffer, packetSize);
 8000930:	887b      	ldrh	r3, [r7, #2]
 8000932:	461a      	mov	r2, r3
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <main_UsbRxTask+0x30>)
 8000938:	f008 fd08 	bl	800934c <memcpy>

	hBridge.usbPacketSize = packetSize;
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <main_UsbRxTask+0x34>)
 800093e:	887b      	ldrh	r3, [r7, #2]
 8000940:	8093      	strh	r3, [r2, #4]

	hBridge.controlFlags.flag.usbToBle = ENABLE;
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <main_UsbRxTask+0x34>)
 8000944:	7813      	ldrb	r3, [r2, #0]
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	7013      	strb	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000038c 	.word	0x2000038c
 8000958:	20000280 	.word	0x20000280

0800095c <main_bridgeDataTransfare>:

static void main_bridgeDataTransfare()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	if(hBridge.controlFlags.flag.bleToUsb)
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <main_bridgeDataTransfare+0x78>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d016      	beq.n	800099c <main_bridgeDataTransfare+0x40>
	{
		hBridge.controlFlags.flag.bleToUsb = DISABLE;
 800096e:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <main_bridgeDataTransfare+0x78>)
 8000970:	7813      	ldrb	r3, [r2, #0]
 8000972:	f36f 0300 	bfc	r3, #0, #1
 8000976:	7013      	strb	r3, [r2, #0]

		//Place feedline character at the end of the packet and increment the size by 1.
		hBridge.bleBuffer[hBridge.blePacketSize++] = '\n';
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <main_bridgeDataTransfare+0x78>)
 800097a:	885b      	ldrh	r3, [r3, #2]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	b291      	uxth	r1, r2
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <main_bridgeDataTransfare+0x78>)
 8000982:	8051      	strh	r1, [r2, #2]
 8000984:	461a      	mov	r2, r3
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <main_bridgeDataTransfare+0x78>)
 8000988:	4413      	add	r3, r2
 800098a:	220a      	movs	r2, #10
 800098c:	731a      	strb	r2, [r3, #12]

		CDC_Transmit_FS((uint8_t*) hBridge.bleBuffer, (uint16_t)hBridge.blePacketSize);
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <main_bridgeDataTransfare+0x78>)
 8000990:	885b      	ldrh	r3, [r3, #2]
 8000992:	4619      	mov	r1, r3
 8000994:	4810      	ldr	r0, [pc, #64]	; (80009d8 <main_bridgeDataTransfare+0x7c>)
 8000996:	f007 fee9 	bl	800876c <CDC_Transmit_FS>

		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);

		hBridge.controlFlags.flag.usbToBle = DISABLE;
	}
}
 800099a:	e018      	b.n	80009ce <main_bridgeDataTransfare+0x72>
	else if(hBridge.controlFlags.flag.usbToBle)
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <main_bridgeDataTransfare+0x78>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d011      	beq.n	80009ce <main_bridgeDataTransfare+0x72>
		rybg211_txDataSend(hBridge.usbBuffer, hBridge.usbPacketSize);
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <main_bridgeDataTransfare+0x78>)
 80009ac:	889b      	ldrh	r3, [r3, #4]
 80009ae:	4619      	mov	r1, r3
 80009b0:	480a      	ldr	r0, [pc, #40]	; (80009dc <main_bridgeDataTransfare+0x80>)
 80009b2:	f008 fc61 	bl	8009278 <rybg211_txDataSend>
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main_bridgeDataTransfare+0x84>)
 80009b8:	885b      	ldrh	r3, [r3, #2]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4909      	ldr	r1, [pc, #36]	; (80009e4 <main_bridgeDataTransfare+0x88>)
 80009be:	480a      	ldr	r0, [pc, #40]	; (80009e8 <main_bridgeDataTransfare+0x8c>)
 80009c0:	f003 f826 	bl	8003a10 <HAL_UART_Transmit_DMA>
		hBridge.controlFlags.flag.usbToBle = DISABLE;
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <main_bridgeDataTransfare+0x78>)
 80009c6:	7813      	ldrb	r3, [r2, #0]
 80009c8:	f36f 0341 	bfc	r3, #1, #1
 80009cc:	7013      	strb	r3, [r2, #0]
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000280 	.word	0x20000280
 80009d8:	2000028c 	.word	0x2000028c
 80009dc:	2000038c 	.word	0x2000038c
 80009e0:	200020b0 	.word	0x200020b0
 80009e4:	200020c5 	.word	0x200020c5
 80009e8:	2000017c 	.word	0x2000017c

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a4c      	ldr	r2, [pc, #304]	; (8000b98 <HAL_UART_MspInit+0x150>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	f040 8091 	bne.w	8000b8e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	4b4a      	ldr	r3, [pc, #296]	; (8000b9c <HAL_UART_MspInit+0x154>)
 8000a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a74:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <HAL_UART_MspInit+0x154>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7c:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <HAL_UART_MspInit+0x154>)
 8000a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4b43      	ldr	r3, [pc, #268]	; (8000b9c <HAL_UART_MspInit+0x154>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	4a42      	ldr	r2, [pc, #264]	; (8000b9c <HAL_UART_MspInit+0x154>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6313      	str	r3, [r2, #48]	; 0x30
 8000a98:	4b40      	ldr	r3, [pc, #256]	; (8000b9c <HAL_UART_MspInit+0x154>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aa4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4837      	ldr	r0, [pc, #220]	; (8000ba0 <HAL_UART_MspInit+0x158>)
 8000ac2:	f000 fee5 	bl	8001890 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000ac8:	4a37      	ldr	r2, [pc, #220]	; (8000ba8 <HAL_UART_MspInit+0x160>)
 8000aca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000acc:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad4:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b06:	4827      	ldr	r0, [pc, #156]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000b08:	f000 fac0 	bl	800108c <HAL_DMA_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000b12:	f7ff ff6b 	bl	80009ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a22      	ldr	r2, [pc, #136]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000b1a:	639a      	str	r2, [r3, #56]	; 0x38
 8000b1c:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <HAL_UART_MspInit+0x15c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b24:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <HAL_UART_MspInit+0x168>)
 8000b26:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b32:	2240      	movs	r2, #64	; 0x40
 8000b34:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b64:	f000 fa92 	bl	800108c <HAL_DMA_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000b6e:	f7ff ff3d 	bl	80009ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
 8000b78:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <HAL_UART_MspInit+0x164>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2025      	movs	r0, #37	; 0x25
 8000b84:	f000 fa4b 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b88:	2025      	movs	r0, #37	; 0x25
 8000b8a:	f000 fa64 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	200001c0 	.word	0x200001c0
 8000ba8:	40026440 	.word	0x40026440
 8000bac:	20000220 	.word	0x20000220
 8000bb0:	400264b8 	.word	0x400264b8

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c00:	f000 f8ee 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <USART1_IRQHandler+0x10>)
 8000c0e:	f002 ffe3 	bl	8003bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000017c 	.word	0x2000017c

08000c1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <DMA2_Stream2_IRQHandler+0x10>)
 8000c22:	f000 fbcb 	bl	80013bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200001c0 	.word	0x200001c0

08000c30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <OTG_FS_IRQHandler+0x10>)
 8000c36:	f001 f918 	bl	8001e6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20001984 	.word	0x20001984

08000c44 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <DMA2_Stream7_IRQHandler+0x10>)
 8000c4a:	f000 fbb7 	bl	80013bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000220 	.word	0x20000220

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f008 fb26 	bl	80092d8 <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20020000 	.word	0x20020000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	2000048c 	.word	0x2000048c
 8000cc0:	200022d8 	.word	0x200022d8

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d04:	4c0b      	ldr	r4, [pc, #44]	; (8000d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d12:	f7ff ffd7 	bl	8000cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f008 fae5 	bl	80092e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fc3b 	bl	8000594 <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000d2c:	08009e50 	.word	0x08009e50
  ldr r2, =_sbss
 8000d30:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000d34:	200022d8 	.word	0x200022d8

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <HAL_Init+0x40>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_Init+0x40>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x40>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f94f 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fe42 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f967 	bl	8001072 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f92f 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000490 	.word	0x20000490

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000490 	.word	0x20000490

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff feb6 	bl	8000e08 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e099      	b.n	80011dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2202      	movs	r2, #2
 80010ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0201 	bic.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c8:	e00f      	b.n	80010ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ca:	f7ff fe9d 	bl	8000e08 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d908      	bls.n	80010ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2220      	movs	r2, #32
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2203      	movs	r2, #3
 80010e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e078      	b.n	80011dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1e8      	bne.n	80010ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <HAL_DMA_Init+0x158>)
 8001104:	4013      	ands	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001116:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001122:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800112e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4313      	orrs	r3, r2
 800113a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	2b04      	cmp	r3, #4
 8001142:	d107      	bne.n	8001154 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	4313      	orrs	r3, r2
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4313      	orrs	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f023 0307 	bic.w	r3, r3, #7
 800116a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	4313      	orrs	r3, r2
 8001174:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	2b04      	cmp	r3, #4
 800117c:	d117      	bne.n	80011ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4313      	orrs	r3, r2
 8001186:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00e      	beq.n	80011ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fb01 	bl	8001798 <DMA_CheckFifoParam>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2240      	movs	r2, #64	; 0x40
 80011a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011aa:	2301      	movs	r3, #1
 80011ac:	e016      	b.n	80011dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fab8 	bl	800172c <DMA_CalcBaseAndBitshift>
 80011bc:	4603      	mov	r3, r0
 80011be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c4:	223f      	movs	r2, #63	; 0x3f
 80011c6:	409a      	lsls	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	f010803f 	.word	0xf010803f

080011e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_DMA_Start_IT+0x26>
 800120a:	2302      	movs	r3, #2
 800120c:	e040      	b.n	8001290 <HAL_DMA_Start_IT+0xa8>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d12f      	bne.n	8001282 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2202      	movs	r2, #2
 8001226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f000 fa4a 	bl	80016d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001240:	223f      	movs	r2, #63	; 0x3f
 8001242:	409a      	lsls	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0216 	orr.w	r2, r2, #22
 8001256:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	d007      	beq.n	8001270 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0208 	orr.w	r2, r2, #8
 800126e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0201 	orr.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e005      	b.n	800128e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800128a:	2302      	movs	r3, #2
 800128c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800128e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012a6:	f7ff fdaf 	bl	8000e08 <HAL_GetTick>
 80012aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d008      	beq.n	80012ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e052      	b.n	8001370 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0216 	bic.w	r2, r2, #22
 80012d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d103      	bne.n	80012fa <HAL_DMA_Abort+0x62>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0208 	bic.w	r2, r2, #8
 8001308:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0201 	bic.w	r2, r2, #1
 8001318:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131a:	e013      	b.n	8001344 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800131c:	f7ff fd74 	bl	8000e08 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b05      	cmp	r3, #5
 8001328:	d90c      	bls.n	8001344 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2220      	movs	r2, #32
 800132e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e015      	b.n	8001370 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1e4      	bne.n	800131c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001356:	223f      	movs	r2, #63	; 0x3f
 8001358:	409a      	lsls	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d004      	beq.n	8001396 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00c      	b.n	80013b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2205      	movs	r2, #5
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0201 	bic.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c8:	4b8e      	ldr	r3, [pc, #568]	; (8001604 <HAL_DMA_IRQHandler+0x248>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a8e      	ldr	r2, [pc, #568]	; (8001608 <HAL_DMA_IRQHandler+0x24c>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0a9b      	lsrs	r3, r3, #10
 80013d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e6:	2208      	movs	r2, #8
 80013e8:	409a      	lsls	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d01a      	beq.n	8001428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0204 	bic.w	r2, r2, #4
 800140e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001414:	2208      	movs	r2, #8
 8001416:	409a      	lsls	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142c:	2201      	movs	r2, #1
 800142e:	409a      	lsls	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d012      	beq.n	800145e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00b      	beq.n	800145e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144a:	2201      	movs	r2, #1
 800144c:	409a      	lsls	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001456:	f043 0202 	orr.w	r2, r3, #2
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001462:	2204      	movs	r2, #4
 8001464:	409a      	lsls	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d012      	beq.n	8001494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001480:	2204      	movs	r2, #4
 8001482:	409a      	lsls	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148c:	f043 0204 	orr.w	r2, r3, #4
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001498:	2210      	movs	r2, #16
 800149a:	409a      	lsls	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d043      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d03c      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b6:	2210      	movs	r2, #16
 80014b8:	409a      	lsls	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d018      	beq.n	80014fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d108      	bne.n	80014ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d024      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	4798      	blx	r3
 80014ea:	e01f      	b.n	800152c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01b      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4798      	blx	r3
 80014fc:	e016      	b.n	800152c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0208 	bic.w	r2, r2, #8
 800151a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	2220      	movs	r2, #32
 8001532:	409a      	lsls	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 808f 	beq.w	800165c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 8087 	beq.w	800165c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	2220      	movs	r2, #32
 8001554:	409a      	lsls	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b05      	cmp	r3, #5
 8001564:	d136      	bne.n	80015d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0216 	bic.w	r2, r2, #22
 8001574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <HAL_DMA_IRQHandler+0x1da>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0208 	bic.w	r2, r2, #8
 80015a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	223f      	movs	r2, #63	; 0x3f
 80015ac:	409a      	lsls	r2, r3
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d07e      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
        }
        return;
 80015d2:	e079      	b.n	80016c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01d      	beq.n	800161e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10d      	bne.n	800160c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d031      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	4798      	blx	r3
 8001600:	e02c      	b.n	800165c <HAL_DMA_IRQHandler+0x2a0>
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000
 8001608:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
 800161c:	e01e      	b.n	800165c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10f      	bne.n	800164c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0210 	bic.w	r2, r2, #16
 800163a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001660:	2b00      	cmp	r3, #0
 8001662:	d032      	beq.n	80016ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d022      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2205      	movs	r2, #5
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3301      	adds	r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	429a      	cmp	r2, r3
 8001692:	d307      	bcc.n	80016a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f2      	bne.n	8001688 <HAL_DMA_IRQHandler+0x2cc>
 80016a2:	e000      	b.n	80016a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	4798      	blx	r3
 80016c6:	e000      	b.n	80016ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80016c8:	bf00      	nop
    }
  }
}
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b40      	cmp	r3, #64	; 0x40
 80016fc:	d108      	bne.n	8001710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800170e:	e007      	b.n	8001720 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	60da      	str	r2, [r3, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	3b10      	subs	r3, #16
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <DMA_CalcBaseAndBitshift+0x64>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001746:	4a13      	ldr	r2, [pc, #76]	; (8001794 <DMA_CalcBaseAndBitshift+0x68>)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d909      	bls.n	800176e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001762:	f023 0303 	bic.w	r3, r3, #3
 8001766:	1d1a      	adds	r2, r3, #4
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	659a      	str	r2, [r3, #88]	; 0x58
 800176c:	e007      	b.n	800177e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001776:	f023 0303 	bic.w	r3, r3, #3
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	aaaaaaab 	.word	0xaaaaaaab
 8001794:	08009d04 	.word	0x08009d04

08001798 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d11f      	bne.n	80017f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d856      	bhi.n	8001866 <DMA_CheckFifoParam+0xce>
 80017b8:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <DMA_CheckFifoParam+0x28>)
 80017ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017be:	bf00      	nop
 80017c0:	080017d1 	.word	0x080017d1
 80017c4:	080017e3 	.word	0x080017e3
 80017c8:	080017d1 	.word	0x080017d1
 80017cc:	08001867 	.word	0x08001867
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d046      	beq.n	800186a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e0:	e043      	b.n	800186a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017ea:	d140      	bne.n	800186e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f0:	e03d      	b.n	800186e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017fa:	d121      	bne.n	8001840 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d837      	bhi.n	8001872 <DMA_CheckFifoParam+0xda>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <DMA_CheckFifoParam+0x70>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001819 	.word	0x08001819
 800180c:	0800181f 	.word	0x0800181f
 8001810:	08001819 	.word	0x08001819
 8001814:	08001831 	.word	0x08001831
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
      break;
 800181c:	e030      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d025      	beq.n	8001876 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800182e:	e022      	b.n	8001876 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001838:	d11f      	bne.n	800187a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800183e:	e01c      	b.n	800187a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d903      	bls.n	800184e <DMA_CheckFifoParam+0xb6>
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d003      	beq.n	8001854 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800184c:	e018      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
      break;
 8001852:	e015      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00e      	beq.n	800187e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
      break;
 8001864:	e00b      	b.n	800187e <DMA_CheckFifoParam+0xe6>
      break;
 8001866:	bf00      	nop
 8001868:	e00a      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;
 800186a:	bf00      	nop
 800186c:	e008      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;
 800186e:	bf00      	nop
 8001870:	e006      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;
 8001872:	bf00      	nop
 8001874:	e004      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;
 8001876:	bf00      	nop
 8001878:	e002      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;   
 800187a:	bf00      	nop
 800187c:	e000      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;
 800187e:	bf00      	nop
    }
  } 
  
  return status; 
 8001880:	7bfb      	ldrb	r3, [r7, #15]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	e159      	b.n	8001b60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 8148 	bne.w	8001b5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d005      	beq.n	80018e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d130      	bne.n	8001944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001918:	2201      	movs	r2, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 0201 	and.w	r2, r3, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b03      	cmp	r3, #3
 800194e:	d017      	beq.n	8001980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d123      	bne.n	80019d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80a2 	beq.w	8001b5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <HAL_GPIO_Init+0x2e8>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a56      	ldr	r2, [pc, #344]	; (8001b78 <HAL_GPIO_Init+0x2e8>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b54      	ldr	r3, [pc, #336]	; (8001b78 <HAL_GPIO_Init+0x2e8>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a32:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x2ec>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d019      	beq.n	8001a92 <HAL_GPIO_Init+0x202>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a48      	ldr	r2, [pc, #288]	; (8001b84 <HAL_GPIO_Init+0x2f4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0x1fe>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a47      	ldr	r2, [pc, #284]	; (8001b88 <HAL_GPIO_Init+0x2f8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_GPIO_Init+0x1fa>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a46      	ldr	r2, [pc, #280]	; (8001b8c <HAL_GPIO_Init+0x2fc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <HAL_GPIO_Init+0x1f6>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a45      	ldr	r2, [pc, #276]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_GPIO_Init+0x1f2>
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a82:	2307      	movs	r3, #7
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a92:	2300      	movs	r3, #0
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa4:	4935      	ldr	r1, [pc, #212]	; (8001b7c <HAL_GPIO_Init+0x2ec>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab2:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad6:	4a2f      	ldr	r2, [pc, #188]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001adc:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b00:	4a24      	ldr	r2, [pc, #144]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b06:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2a:	4a1a      	ldr	r2, [pc, #104]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b54:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f aea2 	bls.w	80018ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40013c00 	.word	0x40013c00

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb4:	e003      	b.n	8001bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	041a      	lsls	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bcc:	b08f      	sub	sp, #60	; 0x3c
 8001bce:	af0a      	add	r7, sp, #40	; 0x28
 8001bd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e10f      	b.n	8001dfc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f006 ff1c 	bl	8008a34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2203      	movs	r2, #3
 8001c00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 f9d9 	bl	8004fd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	687e      	ldr	r6, [r7, #4]
 8001c28:	466d      	mov	r5, sp
 8001c2a:	f106 0410 	add.w	r4, r6, #16
 8001c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c3e:	1d33      	adds	r3, r6, #4
 8001c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c42:	6838      	ldr	r0, [r7, #0]
 8001c44:	f003 f8b0 	bl	8004da8 <USB_CoreInit>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2202      	movs	r2, #2
 8001c52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e0d0      	b.n	8001dfc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 f9c7 	bl	8004ff4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	e04a      	b.n	8001d02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	333d      	adds	r3, #61	; 0x3d
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	333c      	adds	r3, #60	; 0x3c
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	b298      	uxth	r0, r3
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3344      	adds	r3, #68	; 0x44
 8001ca8:	4602      	mov	r2, r0
 8001caa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	3340      	adds	r3, #64	; 0x40
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	3348      	adds	r3, #72	; 0x48
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	334c      	adds	r3, #76	; 0x4c
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3354      	adds	r3, #84	; 0x54
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d3af      	bcc.n	8001c6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e044      	b.n	8001d9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d3b5      	bcc.n	8001d12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	687e      	ldr	r6, [r7, #4]
 8001dae:	466d      	mov	r5, sp
 8001db0:	f106 0410 	add.w	r4, r6, #16
 8001db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dc4:	1d33      	adds	r3, r6, #4
 8001dc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f003 f95f 	bl	800508c <USB_DevInit>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e00d      	b.n	8001dfc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f004 faae 	bl	8006356 <USB_DevDisconnect>

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_PCD_Start+0x1c>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e020      	b.n	8001e62 <HAL_PCD_Start+0x5e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d109      	bne.n	8001e44 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d005      	beq.n	8001e44 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 f8b1 	bl	8004fb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 fa5e 	bl	8006314 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e6a:	b590      	push	{r4, r7, lr}
 8001e6c:	b08d      	sub	sp, #52	; 0x34
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 fb1c 	bl	80064be <USB_GetMode>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f040 848a 	bne.w	80027a2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fa80 	bl	8006398 <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8480 	beq.w	80027a0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fa6d 	bl	8006398 <USB_ReadInterrupts>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d107      	bne.n	8001ed8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f002 0202 	and.w	r2, r2, #2
 8001ed6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f004 fa5b 	bl	8006398 <USB_ReadInterrupts>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d161      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0210 	bic.w	r2, r2, #16
 8001efa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	f003 020f 	and.w	r2, r3, #15
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	3304      	adds	r3, #4
 8001f1a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	0c5b      	lsrs	r3, r3, #17
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d124      	bne.n	8001f72 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d035      	beq.n	8001fa0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	6a38      	ldr	r0, [r7, #32]
 8001f48:	f004 f892 	bl	8006070 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f58:	441a      	add	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	6a1a      	ldr	r2, [r3, #32]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f6a:	441a      	add	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	621a      	str	r2, [r3, #32]
 8001f70:	e016      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	0c5b      	lsrs	r3, r3, #17
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d110      	bne.n	8001fa0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f84:	2208      	movs	r2, #8
 8001f86:	4619      	mov	r1, r3
 8001f88:	6a38      	ldr	r0, [r7, #32]
 8001f8a:	f004 f871 	bl	8006070 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f9a:	441a      	add	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0210 	orr.w	r2, r2, #16
 8001fae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 f9ef 	bl	8006398 <USB_ReadInterrupts>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001fc4:	f040 80a7 	bne.w	8002116 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 f9f4 	bl	80063be <USB_ReadDevAllOutEpInterrupt>
 8001fd6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001fd8:	e099      	b.n	800210e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 808e 	beq.w	8002102 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 fa18 	bl	8006426 <USB_ReadDevOutEPInterrupt>
 8001ff6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200e:	461a      	mov	r2, r3
 8002010:	2301      	movs	r3, #1
 8002012:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fec2 	bl	8002da0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00c      	beq.n	8002040 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	4413      	add	r3, r2
 800202e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002032:	461a      	mov	r2, r3
 8002034:	2308      	movs	r3, #8
 8002036:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 ff98 	bl	8002f70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	d008      	beq.n	800205c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002056:	461a      	mov	r2, r3
 8002058:	2310      	movs	r3, #16
 800205a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d030      	beq.n	80020c8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206e:	2b80      	cmp	r3, #128	; 0x80
 8002070:	d109      	bne.n	8002086 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002084:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	3304      	adds	r3, #4
 800209a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	78db      	ldrb	r3, [r3, #3]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d108      	bne.n	80020b6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2200      	movs	r2, #0
 80020a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f006 fdbb 	bl	8008c2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c2:	461a      	mov	r2, r3
 80020c4:	2302      	movs	r3, #2
 80020c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020de:	461a      	mov	r2, r3
 80020e0:	2320      	movs	r3, #32
 80020e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fa:	461a      	mov	r2, r3
 80020fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002100:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	3301      	adds	r3, #1
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	f47f af62 	bne.w	8001fda <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f004 f93c 	bl	8006398 <USB_ReadInterrupts>
 8002120:	4603      	mov	r3, r0
 8002122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800212a:	f040 80db 	bne.w	80022e4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f004 f95d 	bl	80063f2 <USB_ReadDevAllInEpInterrupt>
 8002138:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800213e:	e0cd      	b.n	80022dc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80c2 	beq.w	80022d0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f004 f983 	bl	8006462 <USB_ReadDevInEPInterrupt>
 800215c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d057      	beq.n	8002218 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	2201      	movs	r2, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800217c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	69f9      	ldr	r1, [r7, #28]
 8002184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002188:	4013      	ands	r3, r2
 800218a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	4413      	add	r3, r2
 8002194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002198:	461a      	mov	r2, r3
 800219a:	2301      	movs	r3, #1
 800219c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d132      	bne.n	800220c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	334c      	adds	r3, #76	; 0x4c
 80021b6:	6819      	ldr	r1, [r3, #0]
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4403      	add	r3, r0
 80021c6:	3348      	adds	r3, #72	; 0x48
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4419      	add	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4403      	add	r3, r0
 80021da:	334c      	adds	r3, #76	; 0x4c
 80021dc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d113      	bne.n	800220c <HAL_PCD_IRQHandler+0x3a2>
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3354      	adds	r3, #84	; 0x54
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002204:	461a      	mov	r2, r3
 8002206:	2101      	movs	r1, #1
 8002208:	f004 f98a 	bl	8006520 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f006 fc8f 	bl	8008b36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800222e:	461a      	mov	r2, r3
 8002230:	2308      	movs	r3, #8
 8002232:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224a:	461a      	mov	r2, r3
 800224c:	2310      	movs	r3, #16
 800224e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002266:	461a      	mov	r2, r3
 8002268:	2340      	movs	r3, #64	; 0x40
 800226a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d023      	beq.n	80022be <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002278:	6a38      	ldr	r0, [r7, #32]
 800227a:	f003 f86b 	bl	8005354 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800227e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	3338      	adds	r3, #56	; 0x38
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	78db      	ldrb	r3, [r3, #3]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d108      	bne.n	80022ac <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2200      	movs	r2, #0
 800229e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f006 fcd2 	bl	8008c50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b8:	461a      	mov	r2, r3
 80022ba:	2302      	movs	r3, #2
 80022bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fcdb 	bl	8002c86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	3301      	adds	r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f47f af2e 	bne.w	8002140 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 f855 	bl	8006398 <USB_ReadInterrupts>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022f8:	d122      	bne.n	8002340 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002320:	2100      	movs	r1, #0
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fec2 	bl	80030ac <HAL_PCDEx_LPM_Callback>
 8002328:	e002      	b.n	8002330 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f006 fc70 	bl	8008c10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800233e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f004 f827 	bl	8006398 <USB_ReadInterrupts>
 800234a:	4603      	mov	r3, r0
 800234c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002354:	d112      	bne.n	800237c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d102      	bne.n	800236c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f006 fc2c 	bl	8008bc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800237a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f004 f809 	bl	8006398 <USB_ReadInterrupts>
 8002386:	4603      	mov	r3, r0
 8002388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002390:	f040 80b7 	bne.w	8002502 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2110      	movs	r1, #16
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 ffd0 	bl	8005354 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b8:	e046      	b.n	8002448 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c6:	461a      	mov	r2, r3
 80023c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023de:	0151      	lsls	r1, r2, #5
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	440a      	add	r2, r1
 80023e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fa:	461a      	mov	r2, r3
 80023fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002400:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002412:	0151      	lsls	r1, r2, #5
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	440a      	add	r2, r1
 8002418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800241c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002420:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	4413      	add	r3, r2
 800242a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002432:	0151      	lsls	r1, r2, #5
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	440a      	add	r2, r1
 8002438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800243c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002440:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002444:	3301      	adds	r3, #1
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244e:	429a      	cmp	r2, r3
 8002450:	d3b3      	bcc.n	80023ba <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002460:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002464:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	2b00      	cmp	r3, #0
 800246c:	d016      	beq.n	800249c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247e:	f043 030b 	orr.w	r3, r3, #11
 8002482:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002494:	f043 030b 	orr.w	r3, r3, #11
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	e015      	b.n	80024c8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c2:	f043 030b 	orr.w	r3, r3, #11
 80024c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024ec:	461a      	mov	r2, r3
 80024ee:	f004 f817 	bl	8006520 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f003 ff46 	bl	8006398 <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002516:	d124      	bne.n	8002562 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f003 ffdc 	bl	80064da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f002 ff91 	bl	800544e <USB_GetDevSpeed>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681c      	ldr	r4, [r3, #0]
 8002538:	f001 f9e8 	bl	800390c <HAL_RCC_GetHCLKFreq>
 800253c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	4620      	mov	r0, r4
 8002548:	f002 fc90 	bl	8004e6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f006 fb1a 	bl	8008b86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002560:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f003 ff16 	bl	8006398 <USB_ReadInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b08      	cmp	r3, #8
 8002574:	d10a      	bne.n	800258c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f006 faf7 	bl	8008b6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f002 0208 	and.w	r2, r2, #8
 800258a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f003 ff01 	bl	8006398 <USB_ReadInterrupts>
 8002596:	4603      	mov	r3, r0
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d122      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025ac:	2301      	movs	r3, #1
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
 80025b0:	e014      	b.n	80025dc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	4619      	mov	r1, r3
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fb27 	bl	8002c24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	3301      	adds	r3, #1
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d3e5      	bcc.n	80025b2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fed4 	bl	8006398 <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025fa:	d13b      	bne.n	8002674 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025fc:	2301      	movs	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	e02b      	b.n	800265a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	4413      	add	r3, r2
 800260a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3340      	adds	r3, #64	; 0x40
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d115      	bne.n	8002654 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002628:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	da12      	bge.n	8002654 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	333f      	adds	r3, #63	; 0x3f
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800264a:	b2db      	uxtb	r3, r3
 800264c:	4619      	mov	r1, r3
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fae8 	bl	8002c24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	3301      	adds	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	429a      	cmp	r2, r3
 8002662:	d3ce      	bcc.n	8002602 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fe8d 	bl	8006398 <USB_ReadInterrupts>
 800267e:	4603      	mov	r3, r0
 8002680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002688:	d155      	bne.n	8002736 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800268a:	2301      	movs	r3, #1
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	e045      	b.n	800271c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	4413      	add	r3, r2
 8002698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d12e      	bne.n	8002716 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	da2b      	bge.n	8002716 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80026ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d121      	bne.n	8002716 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800270e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002712:	6053      	str	r3, [r2, #4]
            break;
 8002714:	e007      	b.n	8002726 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	3301      	adds	r3, #1
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002722:	429a      	cmp	r2, r3
 8002724:	d3b4      	bcc.n	8002690 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002734:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fe2c 	bl	8006398 <USB_ReadInterrupts>
 8002740:	4603      	mov	r3, r0
 8002742:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d10a      	bne.n	8002762 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f006 fa91 	bl	8008c74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fe16 	bl	8006398 <USB_ReadInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b04      	cmp	r3, #4
 8002774:	d115      	bne.n	80027a2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f006 fa81 	bl	8008c90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	e000      	b.n	80027a2 <HAL_PCD_IRQHandler+0x938>
      return;
 80027a0:	bf00      	nop
    }
  }
}
 80027a2:	3734      	adds	r7, #52	; 0x34
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}

080027a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_PCD_SetAddress+0x1a>
 80027be:	2302      	movs	r3, #2
 80027c0:	e013      	b.n	80027ea <HAL_PCD_SetAddress+0x42>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fd74 	bl	80062c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	4608      	mov	r0, r1
 80027fc:	4611      	mov	r1, r2
 80027fe:	461a      	mov	r2, r3
 8002800:	4603      	mov	r3, r0
 8002802:	70fb      	strb	r3, [r7, #3]
 8002804:	460b      	mov	r3, r1
 8002806:	803b      	strh	r3, [r7, #0]
 8002808:	4613      	mov	r3, r2
 800280a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002814:	2b00      	cmp	r3, #0
 8002816:	da0f      	bge.n	8002838 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	f003 020f 	and.w	r2, r3, #15
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	3338      	adds	r3, #56	; 0x38
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	3304      	adds	r3, #4
 800282e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	705a      	strb	r2, [r3, #1]
 8002836:	e00f      	b.n	8002858 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 020f 	and.w	r2, r3, #15
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	3304      	adds	r3, #4
 8002850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	b2da      	uxtb	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002864:	883a      	ldrh	r2, [r7, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	78ba      	ldrb	r2, [r7, #2]
 800286e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	785b      	ldrb	r3, [r3, #1]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002882:	78bb      	ldrb	r3, [r7, #2]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d102      	bne.n	800288e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_PCD_EP_Open+0xaa>
 8002898:	2302      	movs	r3, #2
 800289a:	e00e      	b.n	80028ba <HAL_PCD_EP_Open+0xc8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68f9      	ldr	r1, [r7, #12]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fdf4 	bl	8005498 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80028b8:	7afb      	ldrb	r3, [r7, #11]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	da0f      	bge.n	80028f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f003 020f 	and.w	r2, r3, #15
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	3338      	adds	r3, #56	; 0x38
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	3304      	adds	r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	705a      	strb	r2, [r3, #1]
 80028f4:	e00f      	b.n	8002916 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	3304      	adds	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_PCD_EP_Close+0x6e>
 800292c:	2302      	movs	r3, #2
 800292e:	e00e      	b.n	800294e <HAL_PCD_EP_Close+0x8c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68f9      	ldr	r1, [r7, #12]
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fe32 	bl	80055a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	460b      	mov	r3, r1
 8002964:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	f003 020f 	and.w	r2, r3, #15
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	3304      	adds	r3, #4
 800297e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2200      	movs	r2, #0
 8002996:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002998:	7afb      	ldrb	r3, [r7, #11]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d102      	bne.n	80029b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029b2:	7afb      	ldrb	r3, [r7, #11]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	6979      	ldr	r1, [r7, #20]
 80029ca:	f003 f911 	bl	8005bf0 <USB_EP0StartXfer>
 80029ce:	e008      	b.n	80029e2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	6979      	ldr	r1, [r7, #20]
 80029de:	f002 febf 	bl	8005760 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 020f 	and.w	r2, r3, #15
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2c:	7afb      	ldrb	r3, [r7, #11]
 8002a2e:	f003 020f 	and.w	r2, r3, #15
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	3338      	adds	r3, #56	; 0x38
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	3304      	adds	r3, #4
 8002a42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5c:	7afb      	ldrb	r3, [r7, #11]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d102      	bne.n	8002a76 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6979      	ldr	r1, [r7, #20]
 8002a8e:	f003 f8af 	bl	8005bf0 <USB_EP0StartXfer>
 8002a92:	e008      	b.n	8002aa6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6979      	ldr	r1, [r7, #20]
 8002aa2:	f002 fe5d 	bl	8005760 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	f003 020f 	and.w	r2, r3, #15
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d901      	bls.n	8002ace <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e050      	b.n	8002b70 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	da0f      	bge.n	8002af6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	f003 020f 	and.w	r2, r3, #15
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	3338      	adds	r3, #56	; 0x38
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	3304      	adds	r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	705a      	strb	r2, [r3, #1]
 8002af4:	e00d      	b.n	8002b12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	4413      	add	r3, r2
 8002b08:	3304      	adds	r3, #4
 8002b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_PCD_EP_SetStall+0x82>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e01e      	b.n	8002b70 <HAL_PCD_EP_SetStall+0xc0>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68f9      	ldr	r1, [r7, #12]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f003 faed 	bl	8006120 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	b2d9      	uxtb	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b60:	461a      	mov	r2, r3
 8002b62:	f003 fcdd 	bl	8006520 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	f003 020f 	and.w	r2, r3, #15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d901      	bls.n	8002b96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e042      	b.n	8002c1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	da0f      	bge.n	8002bbe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	f003 020f 	and.w	r2, r3, #15
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	3338      	adds	r3, #56	; 0x38
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	705a      	strb	r2, [r3, #1]
 8002bbc:	e00f      	b.n	8002bde <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	f003 020f 	and.w	r2, r3, #15
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_PCD_EP_ClrStall+0x86>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e00e      	b.n	8002c1c <HAL_PCD_EP_ClrStall+0xa4>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68f9      	ldr	r1, [r7, #12]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 faf5 	bl	80061fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	da0c      	bge.n	8002c52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	f003 020f 	and.w	r2, r3, #15
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	3338      	adds	r3, #56	; 0x38
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e00c      	b.n	8002c6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	3304      	adds	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68f9      	ldr	r1, [r7, #12]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 f914 	bl	8005ea0 <USB_EPStopXfer>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b08a      	sub	sp, #40	; 0x28
 8002c8a:	af02      	add	r7, sp, #8
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	3338      	adds	r3, #56	; 0x38
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	3304      	adds	r3, #4
 8002cac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a1a      	ldr	r2, [r3, #32]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d901      	bls.n	8002cbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e06c      	b.n	8002d98 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d902      	bls.n	8002cda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3303      	adds	r3, #3
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ce2:	e02b      	b.n	8002d3c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d902      	bls.n	8002d00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	3303      	adds	r3, #3
 8002d04:	089b      	lsrs	r3, r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6919      	ldr	r1, [r3, #16]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	6978      	ldr	r0, [r7, #20]
 8002d20:	f003 f968 	bl	8005ff4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	441a      	add	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a1a      	ldr	r2, [r3, #32]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	441a      	add	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d809      	bhi.n	8002d66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a1a      	ldr	r2, [r3, #32]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d203      	bcs.n	8002d66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1be      	bne.n	8002ce4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d811      	bhi.n	8002d96 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	2201      	movs	r2, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	6939      	ldr	r1, [r7, #16]
 8002d8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d92:	4013      	ands	r3, r2
 8002d94:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	333c      	adds	r3, #60	; 0x3c
 8002db8:	3304      	adds	r3, #4
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d17b      	bne.n	8002ece <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d015      	beq.n	8002e0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	4a61      	ldr	r2, [pc, #388]	; (8002f68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	f240 80b9 	bls.w	8002f5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80b3 	beq.w	8002f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e02:	461a      	mov	r2, r3
 8002e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e08:	6093      	str	r3, [r2, #8]
 8002e0a:	e0a7      	b.n	8002f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e22:	461a      	mov	r2, r3
 8002e24:	2320      	movs	r3, #32
 8002e26:	6093      	str	r3, [r2, #8]
 8002e28:	e098      	b.n	8002f5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f040 8093 	bne.w	8002f5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4a4b      	ldr	r2, [pc, #300]	; (8002f68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d90f      	bls.n	8002e5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e54:	461a      	mov	r2, r3
 8002e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5a:	6093      	str	r3, [r2, #8]
 8002e5c:	e07e      	b.n	8002f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	3304      	adds	r3, #4
 8002e72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	0159      	lsls	r1, r3, #5
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	440b      	add	r3, r1
 8002e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8a:	1ad2      	subs	r2, r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d114      	bne.n	8002ec0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2101      	movs	r1, #1
 8002eac:	f003 fb38 	bl	8006520 <USB_EP0_OutStart>
 8002eb0:	e006      	b.n	8002ec0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	441a      	add	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f005 fe1a 	bl	8008b00 <HAL_PCD_DataOutStageCallback>
 8002ecc:	e046      	b.n	8002f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d124      	bne.n	8002f20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eec:	461a      	mov	r2, r3
 8002eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef2:	6093      	str	r3, [r2, #8]
 8002ef4:	e032      	b.n	8002f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2320      	movs	r3, #32
 8002f10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	4619      	mov	r1, r3
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f005 fdf1 	bl	8008b00 <HAL_PCD_DataOutStageCallback>
 8002f1e:	e01d      	b.n	8002f5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d114      	bne.n	8002f50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	f003 fae8 	bl	8006520 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4619      	mov	r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f005 fdd2 	bl	8008b00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	4f54300a 	.word	0x4f54300a
 8002f6c:	4f54310a 	.word	0x4f54310a

08002f70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	333c      	adds	r3, #60	; 0x3c
 8002f88:	3304      	adds	r3, #4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d90e      	bls.n	8002fc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d009      	beq.n	8002fc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f005 fd89 	bl	8008adc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d90c      	bls.n	8002fec <PCD_EP_OutSetupPacket_int+0x7c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d108      	bne.n	8002fec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	f003 fa9a 	bl	8006520 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	4f54300a 	.word	0x4f54300a

08002ffc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	70fb      	strb	r3, [r7, #3]
 8003008:	4613      	mov	r3, r2
 800300a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800301a:	883b      	ldrh	r3, [r7, #0]
 800301c:	0419      	lsls	r1, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	430a      	orrs	r2, r1
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
 8003028:	e028      	b.n	800307c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	0c1b      	lsrs	r3, r3, #16
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	4413      	add	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e00d      	b.n	800305a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	3340      	adds	r3, #64	; 0x40
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	4413      	add	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	3301      	adds	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	3b01      	subs	r3, #1
 8003060:	429a      	cmp	r2, r3
 8003062:	d3ec      	bcc.n	800303e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003064:	883b      	ldrh	r3, [r7, #0]
 8003066:	0418      	lsls	r0, r3, #16
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6819      	ldr	r1, [r3, #0]
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	3b01      	subs	r3, #1
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	4302      	orrs	r2, r0
 8003074:	3340      	adds	r3, #64	; 0x40
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e267      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d075      	beq.n	80031ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030e2:	4b88      	ldr	r3, [pc, #544]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d00c      	beq.n	8003108 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ee:	4b85      	ldr	r3, [pc, #532]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d112      	bne.n	8003120 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4b82      	ldr	r3, [pc, #520]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003106:	d10b      	bne.n	8003120 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	4b7e      	ldr	r3, [pc, #504]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d05b      	beq.n	80031cc <HAL_RCC_OscConfig+0x108>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d157      	bne.n	80031cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e242      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003128:	d106      	bne.n	8003138 <HAL_RCC_OscConfig+0x74>
 800312a:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a75      	ldr	r2, [pc, #468]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e01d      	b.n	8003174 <HAL_RCC_OscConfig+0xb0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x98>
 8003142:	4b70      	ldr	r3, [pc, #448]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6f      	ldr	r2, [pc, #444]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b6d      	ldr	r3, [pc, #436]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6c      	ldr	r2, [pc, #432]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0xb0>
 800315c:	4b69      	ldr	r3, [pc, #420]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a68      	ldr	r2, [pc, #416]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b66      	ldr	r3, [pc, #408]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a65      	ldr	r2, [pc, #404]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 800316e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fd fe44 	bl	8000e08 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003184:	f7fd fe40 	bl	8000e08 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e207      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b5b      	ldr	r3, [pc, #364]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0xc0>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fd fe30 	bl	8000e08 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fd fe2c 	bl	8000e08 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	; 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e1f3      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	4b51      	ldr	r3, [pc, #324]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0xe8>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d063      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031da:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e6:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d11c      	bne.n	800322c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f2:	4b44      	ldr	r3, [pc, #272]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_RCC_OscConfig+0x152>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e1c7      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4937      	ldr	r1, [pc, #220]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	e03a      	b.n	80032a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003234:	4b34      	ldr	r3, [pc, #208]	; (8003308 <HAL_RCC_OscConfig+0x244>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fd fde5 	bl	8000e08 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003242:	f7fd fde1 	bl	8000e08 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e1a8      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003260:	4b28      	ldr	r3, [pc, #160]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4925      	ldr	r1, [pc, #148]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]
 8003274:	e015      	b.n	80032a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <HAL_RCC_OscConfig+0x244>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fd fdc4 	bl	8000e08 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003284:	f7fd fdc0 	bl	8000e08 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e187      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d036      	beq.n	800331c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_RCC_OscConfig+0x248>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fd fda4 	bl	8000e08 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c4:	f7fd fda0 	bl	8000e08 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e167      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_OscConfig+0x240>)
 80032d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x200>
 80032e2:	e01b      	b.n	800331c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_RCC_OscConfig+0x248>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ea:	f7fd fd8d 	bl	8000e08 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	e00e      	b.n	8003310 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f2:	f7fd fd89 	bl	8000e08 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d907      	bls.n	8003310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e150      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
 8003304:	40023800 	.word	0x40023800
 8003308:	42470000 	.word	0x42470000
 800330c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003310:	4b88      	ldr	r3, [pc, #544]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ea      	bne.n	80032f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8097 	beq.w	8003458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332e:	4b81      	ldr	r3, [pc, #516]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	4b7d      	ldr	r3, [pc, #500]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a7c      	ldr	r2, [pc, #496]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b7a      	ldr	r3, [pc, #488]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	4b77      	ldr	r3, [pc, #476]	; (8003538 <HAL_RCC_OscConfig+0x474>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d118      	bne.n	8003398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4b74      	ldr	r3, [pc, #464]	; (8003538 <HAL_RCC_OscConfig+0x474>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a73      	ldr	r2, [pc, #460]	; (8003538 <HAL_RCC_OscConfig+0x474>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fd fd49 	bl	8000e08 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fd fd45 	bl	8000e08 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e10c      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_OscConfig+0x474>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x2ea>
 80033a0:	4b64      	ldr	r3, [pc, #400]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a63      	ldr	r2, [pc, #396]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	e01c      	b.n	80033e8 <HAL_RCC_OscConfig+0x324>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x30c>
 80033b6:	4b5f      	ldr	r3, [pc, #380]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a5e      	ldr	r2, [pc, #376]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
 80033c2:	4b5c      	ldr	r3, [pc, #368]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a5b      	ldr	r2, [pc, #364]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
 80033ce:	e00b      	b.n	80033e8 <HAL_RCC_OscConfig+0x324>
 80033d0:	4b58      	ldr	r3, [pc, #352]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	4a57      	ldr	r2, [pc, #348]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	6713      	str	r3, [r2, #112]	; 0x70
 80033dc:	4b55      	ldr	r3, [pc, #340]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	4a54      	ldr	r2, [pc, #336]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80033e2:	f023 0304 	bic.w	r3, r3, #4
 80033e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d015      	beq.n	800341c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fd fd0a 	bl	8000e08 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fd fd06 	bl	8000e08 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0cb      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	4b49      	ldr	r3, [pc, #292]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ee      	beq.n	80033f8 <HAL_RCC_OscConfig+0x334>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341c:	f7fd fcf4 	bl	8000e08 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003422:	e00a      	b.n	800343a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003424:	f7fd fcf0 	bl	8000e08 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0b5      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343a:	4b3e      	ldr	r3, [pc, #248]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1ee      	bne.n	8003424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003446:	7dfb      	ldrb	r3, [r7, #23]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344c:	4b39      	ldr	r3, [pc, #228]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	4a38      	ldr	r2, [pc, #224]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003456:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80a1 	beq.w	80035a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003462:	4b34      	ldr	r3, [pc, #208]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b08      	cmp	r3, #8
 800346c:	d05c      	beq.n	8003528 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d141      	bne.n	80034fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b31      	ldr	r3, [pc, #196]	; (800353c <HAL_RCC_OscConfig+0x478>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd fcc4 	bl	8000e08 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003484:	f7fd fcc0 	bl	8000e08 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e087      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	3b01      	subs	r3, #1
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	491b      	ldr	r1, [pc, #108]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x478>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fd fc99 	bl	8000e08 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034da:	f7fd fc95 	bl	8000e08 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e05c      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x416>
 80034f8:	e054      	b.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_RCC_OscConfig+0x478>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fd fc82 	bl	8000e08 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003508:	f7fd fc7e 	bl	8000e08 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e045      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_RCC_OscConfig+0x470>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x444>
 8003526:	e03d      	b.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e038      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
 8003534:	40023800 	.word	0x40023800
 8003538:	40007000 	.word	0x40007000
 800353c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x4ec>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d028      	beq.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d121      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d11a      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003578:	4293      	cmp	r3, r2
 800357a:	d111      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	3b01      	subs	r3, #1
 800358a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0cc      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b68      	ldr	r3, [pc, #416]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d90c      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b65      	ldr	r3, [pc, #404]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b63      	ldr	r3, [pc, #396]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0b8      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4b59      	ldr	r3, [pc, #356]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a58      	ldr	r2, [pc, #352]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a52      	ldr	r2, [pc, #328]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800362a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	494d      	ldr	r1, [pc, #308]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d044      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d119      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d003      	beq.n	8003672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366e:	2b03      	cmp	r3, #3
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003672:	4b3f      	ldr	r3, [pc, #252]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e067      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 0203 	bic.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4934      	ldr	r1, [pc, #208]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a4:	f7fd fbb0 	bl	8000e08 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fd fbac 	bl	8000e08 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e04f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 020c 	and.w	r2, r3, #12
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1eb      	bne.n	80036ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d20c      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b22      	ldr	r3, [pc, #136]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e032      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4916      	ldr	r1, [pc, #88]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	490e      	ldr	r1, [pc, #56]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800373a:	f000 f821 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490a      	ldr	r1, [pc, #40]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fb10 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023c00 	.word	0x40023c00
 8003770:	40023800 	.word	0x40023800
 8003774:	08009cec 	.word	0x08009cec
 8003778:	20000000 	.word	0x20000000
 800377c:	20000004 	.word	0x20000004

08003780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003784:	b090      	sub	sp, #64	; 0x40
 8003786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	637b      	str	r3, [r7, #52]	; 0x34
 800378c:	2300      	movs	r3, #0
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003790:	2300      	movs	r3, #0
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003798:	4b59      	ldr	r3, [pc, #356]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d00d      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x40>
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	f200 80a1 	bhi.w	80038ec <HAL_RCC_GetSysClockFreq+0x16c>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x34>
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x3a>
 80037b2:	e09b      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <HAL_RCC_GetSysClockFreq+0x184>)
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037b8:	e09b      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ba:	4b53      	ldr	r3, [pc, #332]	; (8003908 <HAL_RCC_GetSysClockFreq+0x188>)
 80037bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037be:	e098      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c0:	4b4f      	ldr	r3, [pc, #316]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ca:	4b4d      	ldr	r3, [pc, #308]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d028      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d6:	4b4a      	ldr	r3, [pc, #296]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	099b      	lsrs	r3, r3, #6
 80037dc:	2200      	movs	r2, #0
 80037de:	623b      	str	r3, [r7, #32]
 80037e0:	627a      	str	r2, [r7, #36]	; 0x24
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037e8:	2100      	movs	r1, #0
 80037ea:	4b47      	ldr	r3, [pc, #284]	; (8003908 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ec:	fb03 f201 	mul.w	r2, r3, r1
 80037f0:	2300      	movs	r3, #0
 80037f2:	fb00 f303 	mul.w	r3, r0, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	4a43      	ldr	r2, [pc, #268]	; (8003908 <HAL_RCC_GetSysClockFreq+0x188>)
 80037fa:	fba0 1202 	umull	r1, r2, r0, r2
 80037fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003800:	460a      	mov	r2, r1
 8003802:	62ba      	str	r2, [r7, #40]	; 0x28
 8003804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003806:	4413      	add	r3, r2
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380c:	2200      	movs	r2, #0
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	61fa      	str	r2, [r7, #28]
 8003812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800381a:	f7fc fd39 	bl	8000290 <__aeabi_uldivmod>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4613      	mov	r3, r2
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003826:	e053      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003828:	4b35      	ldr	r3, [pc, #212]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	099b      	lsrs	r3, r3, #6
 800382e:	2200      	movs	r2, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	617a      	str	r2, [r7, #20]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800383a:	f04f 0b00 	mov.w	fp, #0
 800383e:	4652      	mov	r2, sl
 8003840:	465b      	mov	r3, fp
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	0159      	lsls	r1, r3, #5
 800384c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003850:	0150      	lsls	r0, r2, #5
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	ebb2 080a 	subs.w	r8, r2, sl
 800385a:	eb63 090b 	sbc.w	r9, r3, fp
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800386a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800386e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003872:	ebb2 0408 	subs.w	r4, r2, r8
 8003876:	eb63 0509 	sbc.w	r5, r3, r9
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	00eb      	lsls	r3, r5, #3
 8003884:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003888:	00e2      	lsls	r2, r4, #3
 800388a:	4614      	mov	r4, r2
 800388c:	461d      	mov	r5, r3
 800388e:	eb14 030a 	adds.w	r3, r4, sl
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	eb45 030b 	adc.w	r3, r5, fp
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038a6:	4629      	mov	r1, r5
 80038a8:	028b      	lsls	r3, r1, #10
 80038aa:	4621      	mov	r1, r4
 80038ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038b0:	4621      	mov	r1, r4
 80038b2:	028a      	lsls	r2, r1, #10
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ba:	2200      	movs	r2, #0
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	60fa      	str	r2, [r7, #12]
 80038c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038c4:	f7fc fce4 	bl	8000290 <__aeabi_uldivmod>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4613      	mov	r3, r2
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	3301      	adds	r3, #1
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_RCC_GetSysClockFreq+0x184>)
 80038ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3740      	adds	r7, #64	; 0x40
 80038f8:	46bd      	mov	sp, r7
 80038fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	00f42400 	.word	0x00f42400
 8003908:	017d7840 	.word	0x017d7840

0800390c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <HAL_RCC_GetHCLKFreq+0x14>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000000 	.word	0x20000000

08003924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003928:	f7ff fff0 	bl	800390c <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	0a9b      	lsrs	r3, r3, #10
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	; (8003948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	08009cfc 	.word	0x08009cfc

0800394c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003950:	f7ff ffdc 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	0b5b      	lsrs	r3, r3, #13
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4903      	ldr	r1, [pc, #12]	; (8003970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	08009cfc 	.word	0x08009cfc

08003974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e03f      	b.n	8003a06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd f854 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	; 0x24
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 ff81 	bl	80048c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08c      	sub	sp, #48	; 0x30
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d165      	bne.n	8003af6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_UART_Transmit_DMA+0x26>
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e05e      	b.n	8003af8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Transmit_DMA+0x38>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e057      	b.n	8003af8 <HAL_UART_Transmit_DMA+0xe8>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2221      	movs	r2, #33	; 0x21
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a74:	4a22      	ldr	r2, [pc, #136]	; (8003b00 <HAL_UART_Transmit_DMA+0xf0>)
 8003a76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	4a21      	ldr	r2, [pc, #132]	; (8003b04 <HAL_UART_Transmit_DMA+0xf4>)
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <HAL_UART_Transmit_DMA+0xf8>)
 8003a86:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003a90:	f107 0308 	add.w	r3, r7, #8
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	6819      	ldr	r1, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	f7fd fb9e 	bl	80011e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ab4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3314      	adds	r3, #20
 8003adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ade:	627a      	str	r2, [r7, #36]	; 0x24
 8003ae0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6a39      	ldr	r1, [r7, #32]
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e5      	bne.n	8003abe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e000      	b.n	8003af8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3730      	adds	r7, #48	; 0x30
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	08004159 	.word	0x08004159
 8003b04:	080041f3 	.word	0x080041f3
 8003b08:	0800436b 	.word	0x0800436b

08003b0c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08c      	sub	sp, #48	; 0x30
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d152      	bne.n	8003bcc <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e04b      	b.n	8003bce <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e044      	b.n	8003bce <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	461a      	mov	r2, r3
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fc51 	bl	8004400 <UART_Start_Receive_DMA>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d12c      	bne.n	8003bc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d125      	bne.n	8003bc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	330c      	adds	r3, #12
 8003b90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	617b      	str	r3, [r7, #20]
   return(result);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f043 0310 	orr.w	r3, r3, #16
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003baa:	627a      	str	r2, [r7, #36]	; 0x24
 8003bac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	6a39      	ldr	r1, [r7, #32]
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e5      	bne.n	8003b8a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003bbe:	e002      	b.n	8003bc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bca:	e000      	b.n	8003bce <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3730      	adds	r7, #48	; 0x30
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b0ba      	sub	sp, #232	; 0xe8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_UART_IRQHandler+0x66>
 8003c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fd87 	bl	800474a <UART_Receive_IT>
      return;
 8003c3c:	e256      	b.n	80040ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80de 	beq.w	8003e04 <HAL_UART_IRQHandler+0x22c>
 8003c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80d1 	beq.w	8003e04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <HAL_UART_IRQHandler+0xae>
 8003c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_UART_IRQHandler+0xd2>
 8003c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f043 0202 	orr.w	r2, r3, #2
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_UART_IRQHandler+0xf6>
 8003cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f043 0204 	orr.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d011      	beq.n	8003cfe <HAL_UART_IRQHandler+0x126>
 8003cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d105      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f043 0208 	orr.w	r2, r3, #8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 81ed 	beq.w	80040e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_UART_IRQHandler+0x14e>
 8003d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fd12 	bl	800474a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <HAL_UART_IRQHandler+0x17a>
 8003d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d04f      	beq.n	8003df2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fc1a 	bl	800458c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d141      	bne.n	8003dea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3314      	adds	r3, #20
 8003d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3314      	adds	r3, #20
 8003d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1d9      	bne.n	8003d66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d013      	beq.n	8003de2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	4a7d      	ldr	r2, [pc, #500]	; (8003fb4 <HAL_UART_IRQHandler+0x3dc>)
 8003dc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd fad6 	bl	8001378 <HAL_DMA_Abort_IT>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	e00e      	b.n	8003e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f9ae 	bl	8004144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	e00a      	b.n	8003e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f9aa 	bl	8004144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	e006      	b.n	8003e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f9a6 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dfe:	e170      	b.n	80040e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	bf00      	nop
    return;
 8003e02:	e16e      	b.n	80040e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f040 814a 	bne.w	80040a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8143 	beq.w	80040a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 813c 	beq.w	80040a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b40      	cmp	r3, #64	; 0x40
 8003e4c:	f040 80b4 	bne.w	8003fb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8140 	beq.w	80040e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	f080 8139 	bcs.w	80040e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e86:	f000 8088 	beq.w	8003f9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003eb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1d9      	bne.n	8003e8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3314      	adds	r3, #20
 8003edc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003efa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003efe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e1      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3314      	adds	r3, #20
 8003f18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3314      	adds	r3, #20
 8003f32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e3      	bne.n	8003f12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6a:	f023 0310 	bic.w	r3, r3, #16
 8003f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e3      	bne.n	8003f58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fd f97f 	bl	8001298 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fc fc36 	bl	800081c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fb0:	e099      	b.n	80040e6 <HAL_UART_IRQHandler+0x50e>
 8003fb2:	bf00      	nop
 8003fb4:	08004653 	.word	0x08004653
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 808b 	beq.w	80040ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8086 	beq.w	80040ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004002:	647a      	str	r2, [r7, #68]	; 0x44
 8004004:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e3      	bne.n	8003fde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	623b      	str	r3, [r7, #32]
   return(result);
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800403a:	633a      	str	r2, [r7, #48]	; 0x30
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e3      	bne.n	8004016 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	60fb      	str	r3, [r7, #12]
   return(result);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0310 	bic.w	r3, r3, #16
 8004072:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	330c      	adds	r3, #12
 800407c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004080:	61fa      	str	r2, [r7, #28]
 8004082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	69b9      	ldr	r1, [r7, #24]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	617b      	str	r3, [r7, #20]
   return(result);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e3      	bne.n	800405c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fc fbbe 	bl	800081c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040a0:	e023      	b.n	80040ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_UART_IRQHandler+0x4ea>
 80040ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fadd 	bl	800467a <UART_Transmit_IT>
    return;
 80040c0:	e014      	b.n	80040ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00e      	beq.n	80040ec <HAL_UART_IRQHandler+0x514>
 80040ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fb1d 	bl	800471a <UART_EndTransmit_IT>
    return;
 80040e0:	e004      	b.n	80040ec <HAL_UART_IRQHandler+0x514>
    return;
 80040e2:	bf00      	nop
 80040e4:	e002      	b.n	80040ec <HAL_UART_IRQHandler+0x514>
      return;
 80040e6:	bf00      	nop
 80040e8:	e000      	b.n	80040ec <HAL_UART_IRQHandler+0x514>
      return;
 80040ea:	bf00      	nop
  }
}
 80040ec:	37e8      	adds	r7, #232	; 0xe8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop

080040f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b090      	sub	sp, #64	; 0x40
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d137      	bne.n	80041e4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004176:	2200      	movs	r2, #0
 8004178:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800417a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	623b      	str	r3, [r7, #32]
   return(result);
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004190:	63bb      	str	r3, [r7, #56]	; 0x38
 8004192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3314      	adds	r3, #20
 8004198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800419a:	633a      	str	r2, [r7, #48]	; 0x30
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e5      	bne.n	800417a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
 80041c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041ce:	61fa      	str	r2, [r7, #28]
 80041d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	69b9      	ldr	r1, [r7, #24]
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	617b      	str	r3, [r7, #20]
   return(result);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e5      	bne.n	80041ae <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041e2:	e002      	b.n	80041ea <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80041e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041e6:	f7ff ff85 	bl	80040f4 <HAL_UART_TxCpltCallback>
}
 80041ea:	bf00      	nop
 80041ec:	3740      	adds	r7, #64	; 0x40
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff ff81 	bl	8004108 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b09c      	sub	sp, #112	; 0x70
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d172      	bne.n	8004310 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800422a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422c:	2200      	movs	r2, #0
 800422e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004246:	66bb      	str	r3, [r7, #104]	; 0x68
 8004248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004250:	65ba      	str	r2, [r7, #88]	; 0x58
 8004252:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004256:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800425e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e5      	bne.n	8004230 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3314      	adds	r3, #20
 800426a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	667b      	str	r3, [r7, #100]	; 0x64
 800427c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3314      	adds	r3, #20
 8004282:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004284:	647a      	str	r2, [r7, #68]	; 0x44
 8004286:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800428a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	623b      	str	r3, [r7, #32]
   return(result);
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ae:	663b      	str	r3, [r7, #96]	; 0x60
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042b8:	633a      	str	r2, [r7, #48]	; 0x30
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e5      	bne.n	8004298 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d119      	bne.n	8004310 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042fc:	61fa      	str	r2, [r7, #28]
 80042fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	617b      	str	r3, [r7, #20]
   return(result);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e5      	bne.n	80042dc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	2b01      	cmp	r3, #1
 8004316:	d106      	bne.n	8004326 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800431c:	4619      	mov	r1, r3
 800431e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004320:	f7fc fa7c 	bl	800081c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004324:	e002      	b.n	800432c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004326:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004328:	f7ff fef8 	bl	800411c <HAL_UART_RxCpltCallback>
}
 800432c:	bf00      	nop
 800432e:	3770      	adds	r7, #112	; 0x70
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	2b01      	cmp	r3, #1
 8004348:	d108      	bne.n	800435c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	b29b      	uxth	r3, r3
 8004352:	4619      	mov	r1, r3
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7fc fa61 	bl	800081c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800435a:	e002      	b.n	8004362 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7ff fee7 	bl	8004130 <HAL_UART_RxHalfCpltCallback>
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b21      	cmp	r3, #33	; 0x21
 800439c:	d108      	bne.n	80043b0 <UART_DMAError+0x46>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80043aa:	68b8      	ldr	r0, [r7, #8]
 80043ac:	f000 f8c6 	bl	800453c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b22      	cmp	r3, #34	; 0x22
 80043d0:	d108      	bne.n	80043e4 <UART_DMAError+0x7a>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2200      	movs	r2, #0
 80043dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80043de:	68b8      	ldr	r0, [r7, #8]
 80043e0:	f000 f8d4 	bl	800458c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	f043 0210 	orr.w	r2, r3, #16
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043f0:	68b8      	ldr	r0, [r7, #8]
 80043f2:	f7ff fea7 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b098      	sub	sp, #96	; 0x60
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2222      	movs	r2, #34	; 0x22
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	4a40      	ldr	r2, [pc, #256]	; (8004530 <UART_Start_Receive_DMA+0x130>)
 800442e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	4a3f      	ldr	r2, [pc, #252]	; (8004534 <UART_Start_Receive_DMA+0x134>)
 8004436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	4a3e      	ldr	r2, [pc, #248]	; (8004538 <UART_Start_Receive_DMA+0x138>)
 800443e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	2200      	movs	r2, #0
 8004446:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004448:	f107 0308 	add.w	r3, r7, #8
 800444c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	f7fc fec2 	bl	80011e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d019      	beq.n	80044be <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800449a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	330c      	adds	r3, #12
 80044a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e5      	bne.n	800448a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3314      	adds	r3, #20
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	657b      	str	r3, [r7, #84]	; 0x54
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3314      	adds	r3, #20
 80044dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044de:	63ba      	str	r2, [r7, #56]	; 0x38
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e5      	bne.n	80044be <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	617b      	str	r3, [r7, #20]
   return(result);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004508:	653b      	str	r3, [r7, #80]	; 0x50
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004512:	627a      	str	r2, [r7, #36]	; 0x24
 8004514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6a39      	ldr	r1, [r7, #32]
 8004518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e5      	bne.n	80044f2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3760      	adds	r7, #96	; 0x60
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	0800420f 	.word	0x0800420f
 8004534:	08004335 	.word	0x08004335
 8004538:	0800436b 	.word	0x0800436b

0800453c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	60bb      	str	r3, [r7, #8]
   return(result);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	61ba      	str	r2, [r7, #24]
 8004566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	613b      	str	r3, [r7, #16]
   return(result);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e5      	bne.n	8004544 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004580:	bf00      	nop
 8004582:	3724      	adds	r7, #36	; 0x24
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800458c:	b480      	push	{r7}
 800458e:	b095      	sub	sp, #84	; 0x54
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b4:	643a      	str	r2, [r7, #64]	; 0x40
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e5      	bne.n	8004594 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3314      	adds	r3, #20
 80045ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e5      	bne.n	80045c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	2b01      	cmp	r3, #1
 8004602:	d119      	bne.n	8004638 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	60bb      	str	r3, [r7, #8]
   return(result);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f023 0310 	bic.w	r3, r3, #16
 800461a:	647b      	str	r3, [r7, #68]	; 0x44
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004624:	61ba      	str	r2, [r7, #24]
 8004626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6979      	ldr	r1, [r7, #20]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	613b      	str	r3, [r7, #16]
   return(result);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e5      	bne.n	8004604 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004646:	bf00      	nop
 8004648:	3754      	adds	r7, #84	; 0x54
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff fd69 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004672:	bf00      	nop
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b21      	cmp	r3, #33	; 0x21
 800468c:	d13e      	bne.n	800470c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004696:	d114      	bne.n	80046c2 <UART_Transmit_IT+0x48>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d110      	bne.n	80046c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	1c9a      	adds	r2, r3, #2
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	621a      	str	r2, [r3, #32]
 80046c0:	e008      	b.n	80046d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6211      	str	r1, [r2, #32]
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29b      	uxth	r3, r3
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4619      	mov	r1, r3
 80046e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10f      	bne.n	8004708 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004706:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004730:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fcda 	bl	80040f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b08c      	sub	sp, #48	; 0x30
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b22      	cmp	r3, #34	; 0x22
 800475c:	f040 80ab 	bne.w	80048b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004768:	d117      	bne.n	800479a <UART_Receive_IT+0x50>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d113      	bne.n	800479a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004772:	2300      	movs	r3, #0
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004788:	b29a      	uxth	r2, r3
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	1c9a      	adds	r2, r3, #2
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	629a      	str	r2, [r3, #40]	; 0x28
 8004798:	e026      	b.n	80047e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d007      	beq.n	80047be <UART_Receive_IT+0x74>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <UART_Receive_IT+0x82>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e008      	b.n	80047de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4619      	mov	r1, r3
 80047f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d15a      	bne.n	80048b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0220 	bic.w	r2, r2, #32
 800480a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800481a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0201 	bic.w	r2, r2, #1
 800482a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	2b01      	cmp	r3, #1
 800483a:	d135      	bne.n	80048a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	613b      	str	r3, [r7, #16]
   return(result);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f023 0310 	bic.w	r3, r3, #16
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	623a      	str	r2, [r7, #32]
 8004864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	69f9      	ldr	r1, [r7, #28]
 8004868:	6a3a      	ldr	r2, [r7, #32]
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b10      	cmp	r3, #16
 8004882:	d10a      	bne.n	800489a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800489e:	4619      	mov	r1, r3
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7fb ffbb 	bl	800081c <HAL_UARTEx_RxEventCallback>
 80048a6:	e002      	b.n	80048ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fc37 	bl	800411c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e002      	b.n	80048b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e000      	b.n	80048b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
  }
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3730      	adds	r7, #48	; 0x30
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c4:	b0c0      	sub	sp, #256	; 0x100
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	68d9      	ldr	r1, [r3, #12]
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	ea40 0301 	orr.w	r3, r0, r1
 80048e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	431a      	orrs	r2, r3
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004918:	f021 010c 	bic.w	r1, r1, #12
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004926:	430b      	orrs	r3, r1
 8004928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	6999      	ldr	r1, [r3, #24]
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	ea40 0301 	orr.w	r3, r0, r1
 8004946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b8f      	ldr	r3, [pc, #572]	; (8004b8c <UART_SetConfig+0x2cc>)
 8004950:	429a      	cmp	r2, r3
 8004952:	d005      	beq.n	8004960 <UART_SetConfig+0xa0>
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b8d      	ldr	r3, [pc, #564]	; (8004b90 <UART_SetConfig+0x2d0>)
 800495c:	429a      	cmp	r2, r3
 800495e:	d104      	bne.n	800496a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004960:	f7fe fff4 	bl	800394c <HAL_RCC_GetPCLK2Freq>
 8004964:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004968:	e003      	b.n	8004972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800496a:	f7fe ffdb 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 800496e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497c:	f040 810c 	bne.w	8004b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004984:	2200      	movs	r2, #0
 8004986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800498a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800498e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004992:	4622      	mov	r2, r4
 8004994:	462b      	mov	r3, r5
 8004996:	1891      	adds	r1, r2, r2
 8004998:	65b9      	str	r1, [r7, #88]	; 0x58
 800499a:	415b      	adcs	r3, r3
 800499c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800499e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049a2:	4621      	mov	r1, r4
 80049a4:	eb12 0801 	adds.w	r8, r2, r1
 80049a8:	4629      	mov	r1, r5
 80049aa:	eb43 0901 	adc.w	r9, r3, r1
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049c2:	4690      	mov	r8, r2
 80049c4:	4699      	mov	r9, r3
 80049c6:	4623      	mov	r3, r4
 80049c8:	eb18 0303 	adds.w	r3, r8, r3
 80049cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049d0:	462b      	mov	r3, r5
 80049d2:	eb49 0303 	adc.w	r3, r9, r3
 80049d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049ee:	460b      	mov	r3, r1
 80049f0:	18db      	adds	r3, r3, r3
 80049f2:	653b      	str	r3, [r7, #80]	; 0x50
 80049f4:	4613      	mov	r3, r2
 80049f6:	eb42 0303 	adc.w	r3, r2, r3
 80049fa:	657b      	str	r3, [r7, #84]	; 0x54
 80049fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a04:	f7fb fc44 	bl	8000290 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4b61      	ldr	r3, [pc, #388]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	011c      	lsls	r4, r3, #4
 8004a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a28:	4642      	mov	r2, r8
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	1891      	adds	r1, r2, r2
 8004a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a30:	415b      	adcs	r3, r3
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a38:	4641      	mov	r1, r8
 8004a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a3e:	4649      	mov	r1, r9
 8004a40:	eb43 0b01 	adc.w	fp, r3, r1
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a58:	4692      	mov	sl, r2
 8004a5a:	469b      	mov	fp, r3
 8004a5c:	4643      	mov	r3, r8
 8004a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a66:	464b      	mov	r3, r9
 8004a68:	eb4b 0303 	adc.w	r3, fp, r3
 8004a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a84:	460b      	mov	r3, r1
 8004a86:	18db      	adds	r3, r3, r3
 8004a88:	643b      	str	r3, [r7, #64]	; 0x40
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	eb42 0303 	adc.w	r3, r2, r3
 8004a90:	647b      	str	r3, [r7, #68]	; 0x44
 8004a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a9a:	f7fb fbf9 	bl	8000290 <__aeabi_uldivmod>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	2264      	movs	r2, #100	; 0x64
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	1acb      	subs	r3, r1, r3
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aba:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004abc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac8:	441c      	add	r4, r3
 8004aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004adc:	4642      	mov	r2, r8
 8004ade:	464b      	mov	r3, r9
 8004ae0:	1891      	adds	r1, r2, r2
 8004ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ae4:	415b      	adcs	r3, r3
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004aec:	4641      	mov	r1, r8
 8004aee:	1851      	adds	r1, r2, r1
 8004af0:	6339      	str	r1, [r7, #48]	; 0x30
 8004af2:	4649      	mov	r1, r9
 8004af4:	414b      	adcs	r3, r1
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b04:	4659      	mov	r1, fp
 8004b06:	00cb      	lsls	r3, r1, #3
 8004b08:	4651      	mov	r1, sl
 8004b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b0e:	4651      	mov	r1, sl
 8004b10:	00ca      	lsls	r2, r1, #3
 8004b12:	4610      	mov	r0, r2
 8004b14:	4619      	mov	r1, r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	4642      	mov	r2, r8
 8004b1a:	189b      	adds	r3, r3, r2
 8004b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b20:	464b      	mov	r3, r9
 8004b22:	460a      	mov	r2, r1
 8004b24:	eb42 0303 	adc.w	r3, r2, r3
 8004b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b40:	460b      	mov	r3, r1
 8004b42:	18db      	adds	r3, r3, r3
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b46:	4613      	mov	r3, r2
 8004b48:	eb42 0303 	adc.w	r3, r2, r3
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b56:	f7fb fb9b 	bl	8000290 <__aeabi_uldivmod>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004b60:	fba3 1302 	umull	r1, r3, r3, r2
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	2164      	movs	r1, #100	; 0x64
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	3332      	adds	r3, #50	; 0x32
 8004b72:	4a08      	ldr	r2, [pc, #32]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	f003 0207 	and.w	r2, r3, #7
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4422      	add	r2, r4
 8004b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b88:	e105      	b.n	8004d96 <UART_SetConfig+0x4d6>
 8004b8a:	bf00      	nop
 8004b8c:	40011000 	.word	0x40011000
 8004b90:	40011400 	.word	0x40011400
 8004b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004baa:	4642      	mov	r2, r8
 8004bac:	464b      	mov	r3, r9
 8004bae:	1891      	adds	r1, r2, r2
 8004bb0:	6239      	str	r1, [r7, #32]
 8004bb2:	415b      	adcs	r3, r3
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bba:	4641      	mov	r1, r8
 8004bbc:	1854      	adds	r4, r2, r1
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	eb43 0501 	adc.w	r5, r3, r1
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	00eb      	lsls	r3, r5, #3
 8004bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bd2:	00e2      	lsls	r2, r4, #3
 8004bd4:	4614      	mov	r4, r2
 8004bd6:	461d      	mov	r5, r3
 8004bd8:	4643      	mov	r3, r8
 8004bda:	18e3      	adds	r3, r4, r3
 8004bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004be0:	464b      	mov	r3, r9
 8004be2:	eb45 0303 	adc.w	r3, r5, r3
 8004be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c06:	4629      	mov	r1, r5
 8004c08:	008b      	lsls	r3, r1, #2
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c10:	4621      	mov	r1, r4
 8004c12:	008a      	lsls	r2, r1, #2
 8004c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c18:	f7fb fb3a 	bl	8000290 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4b60      	ldr	r3, [pc, #384]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004c22:	fba3 2302 	umull	r2, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	011c      	lsls	r4, r3, #4
 8004c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	464b      	mov	r3, r9
 8004c40:	1891      	adds	r1, r2, r2
 8004c42:	61b9      	str	r1, [r7, #24]
 8004c44:	415b      	adcs	r3, r3
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	1851      	adds	r1, r2, r1
 8004c50:	6139      	str	r1, [r7, #16]
 8004c52:	4649      	mov	r1, r9
 8004c54:	414b      	adcs	r3, r1
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c64:	4659      	mov	r1, fp
 8004c66:	00cb      	lsls	r3, r1, #3
 8004c68:	4651      	mov	r1, sl
 8004c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c6e:	4651      	mov	r1, sl
 8004c70:	00ca      	lsls	r2, r1, #3
 8004c72:	4610      	mov	r0, r2
 8004c74:	4619      	mov	r1, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	4642      	mov	r2, r8
 8004c7a:	189b      	adds	r3, r3, r2
 8004c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c80:	464b      	mov	r3, r9
 8004c82:	460a      	mov	r2, r1
 8004c84:	eb42 0303 	adc.w	r3, r2, r3
 8004c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	008b      	lsls	r3, r1, #2
 8004ca8:	4641      	mov	r1, r8
 8004caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cae:	4641      	mov	r1, r8
 8004cb0:	008a      	lsls	r2, r1, #2
 8004cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cb6:	f7fb faeb 	bl	8000290 <__aeabi_uldivmod>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4b39      	ldr	r3, [pc, #228]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	2164      	movs	r1, #100	; 0x64
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	3332      	adds	r3, #50	; 0x32
 8004cd2:	4a34      	ldr	r2, [pc, #208]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cde:	441c      	add	r4, r3
 8004ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce8:	677a      	str	r2, [r7, #116]	; 0x74
 8004cea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cee:	4642      	mov	r2, r8
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	1891      	adds	r1, r2, r2
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	415b      	adcs	r3, r3
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cfe:	4641      	mov	r1, r8
 8004d00:	1851      	adds	r1, r2, r1
 8004d02:	6039      	str	r1, [r7, #0]
 8004d04:	4649      	mov	r1, r9
 8004d06:	414b      	adcs	r3, r1
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d16:	4659      	mov	r1, fp
 8004d18:	00cb      	lsls	r3, r1, #3
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d20:	4651      	mov	r1, sl
 8004d22:	00ca      	lsls	r2, r1, #3
 8004d24:	4610      	mov	r0, r2
 8004d26:	4619      	mov	r1, r3
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4642      	mov	r2, r8
 8004d2c:	189b      	adds	r3, r3, r2
 8004d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d30:	464b      	mov	r3, r9
 8004d32:	460a      	mov	r2, r1
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	663b      	str	r3, [r7, #96]	; 0x60
 8004d44:	667a      	str	r2, [r7, #100]	; 0x64
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d52:	4649      	mov	r1, r9
 8004d54:	008b      	lsls	r3, r1, #2
 8004d56:	4641      	mov	r1, r8
 8004d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	008a      	lsls	r2, r1, #2
 8004d60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d64:	f7fb fa94 	bl	8000290 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2164      	movs	r1, #100	; 0x64
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	3332      	adds	r3, #50	; 0x32
 8004d80:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	f003 020f 	and.w	r2, r3, #15
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4422      	add	r2, r4
 8004d94:	609a      	str	r2, [r3, #8]
}
 8004d96:	bf00      	nop
 8004d98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da2:	bf00      	nop
 8004da4:	51eb851f 	.word	0x51eb851f

08004da8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004da8:	b084      	sub	sp, #16
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	f107 001c 	add.w	r0, r7, #28
 8004db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d122      	bne.n	8004e06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d105      	bne.n	8004dfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f001 fbee 	bl	80065dc <USB_CoreReset>
 8004e00:	4603      	mov	r3, r0
 8004e02:	73fb      	strb	r3, [r7, #15]
 8004e04:	e01a      	b.n	8004e3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f001 fbe2 	bl	80065dc <USB_CoreReset>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e2e:	e005      	b.n	8004e3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10b      	bne.n	8004e5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f043 0206 	orr.w	r2, r3, #6
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f043 0220 	orr.w	r2, r3, #32
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e66:	b004      	add	sp, #16
 8004e68:	4770      	bx	lr
	...

08004e6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d165      	bne.n	8004f4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a41      	ldr	r2, [pc, #260]	; (8004f88 <USB_SetTurnaroundTime+0x11c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d906      	bls.n	8004e96 <USB_SetTurnaroundTime+0x2a>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4a40      	ldr	r2, [pc, #256]	; (8004f8c <USB_SetTurnaroundTime+0x120>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d202      	bcs.n	8004e96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e90:	230f      	movs	r3, #15
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e062      	b.n	8004f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4a3c      	ldr	r2, [pc, #240]	; (8004f8c <USB_SetTurnaroundTime+0x120>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d306      	bcc.n	8004eac <USB_SetTurnaroundTime+0x40>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4a3b      	ldr	r2, [pc, #236]	; (8004f90 <USB_SetTurnaroundTime+0x124>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d202      	bcs.n	8004eac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ea6:	230e      	movs	r3, #14
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e057      	b.n	8004f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4a38      	ldr	r2, [pc, #224]	; (8004f90 <USB_SetTurnaroundTime+0x124>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d306      	bcc.n	8004ec2 <USB_SetTurnaroundTime+0x56>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4a37      	ldr	r2, [pc, #220]	; (8004f94 <USB_SetTurnaroundTime+0x128>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d202      	bcs.n	8004ec2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ebc:	230d      	movs	r3, #13
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e04c      	b.n	8004f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	4a33      	ldr	r2, [pc, #204]	; (8004f94 <USB_SetTurnaroundTime+0x128>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d306      	bcc.n	8004ed8 <USB_SetTurnaroundTime+0x6c>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4a32      	ldr	r2, [pc, #200]	; (8004f98 <USB_SetTurnaroundTime+0x12c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d802      	bhi.n	8004ed8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	e041      	b.n	8004f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a2f      	ldr	r2, [pc, #188]	; (8004f98 <USB_SetTurnaroundTime+0x12c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d906      	bls.n	8004eee <USB_SetTurnaroundTime+0x82>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4a2e      	ldr	r2, [pc, #184]	; (8004f9c <USB_SetTurnaroundTime+0x130>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d802      	bhi.n	8004eee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ee8:	230b      	movs	r3, #11
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e036      	b.n	8004f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a2a      	ldr	r2, [pc, #168]	; (8004f9c <USB_SetTurnaroundTime+0x130>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d906      	bls.n	8004f04 <USB_SetTurnaroundTime+0x98>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4a29      	ldr	r2, [pc, #164]	; (8004fa0 <USB_SetTurnaroundTime+0x134>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d802      	bhi.n	8004f04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004efe:	230a      	movs	r3, #10
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e02b      	b.n	8004f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4a26      	ldr	r2, [pc, #152]	; (8004fa0 <USB_SetTurnaroundTime+0x134>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d906      	bls.n	8004f1a <USB_SetTurnaroundTime+0xae>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4a25      	ldr	r2, [pc, #148]	; (8004fa4 <USB_SetTurnaroundTime+0x138>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d202      	bcs.n	8004f1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f14:	2309      	movs	r3, #9
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	e020      	b.n	8004f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4a21      	ldr	r2, [pc, #132]	; (8004fa4 <USB_SetTurnaroundTime+0x138>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d306      	bcc.n	8004f30 <USB_SetTurnaroundTime+0xc4>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4a20      	ldr	r2, [pc, #128]	; (8004fa8 <USB_SetTurnaroundTime+0x13c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d802      	bhi.n	8004f30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e015      	b.n	8004f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <USB_SetTurnaroundTime+0x13c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d906      	bls.n	8004f46 <USB_SetTurnaroundTime+0xda>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <USB_SetTurnaroundTime+0x140>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d202      	bcs.n	8004f46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f40:	2307      	movs	r3, #7
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e00a      	b.n	8004f5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f46:	2306      	movs	r3, #6
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e007      	b.n	8004f5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f52:	2309      	movs	r3, #9
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e001      	b.n	8004f5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f58:	2309      	movs	r3, #9
 8004f5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	029b      	lsls	r3, r3, #10
 8004f70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f74:	431a      	orrs	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	00d8acbf 	.word	0x00d8acbf
 8004f8c:	00e4e1c0 	.word	0x00e4e1c0
 8004f90:	00f42400 	.word	0x00f42400
 8004f94:	01067380 	.word	0x01067380
 8004f98:	011a499f 	.word	0x011a499f
 8004f9c:	01312cff 	.word	0x01312cff
 8004fa0:	014ca43f 	.word	0x014ca43f
 8004fa4:	016e3600 	.word	0x016e3600
 8004fa8:	01a6ab1f 	.word	0x01a6ab1f
 8004fac:	01e84800 	.word	0x01e84800

08004fb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f043 0201 	orr.w	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d115      	bne.n	8005042 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005022:	2001      	movs	r0, #1
 8005024:	f7fb fefc 	bl	8000e20 <HAL_Delay>
      ms++;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3301      	adds	r3, #1
 800502c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 fa45 	bl	80064be <USB_GetMode>
 8005034:	4603      	mov	r3, r0
 8005036:	2b01      	cmp	r3, #1
 8005038:	d01e      	beq.n	8005078 <USB_SetCurrentMode+0x84>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b31      	cmp	r3, #49	; 0x31
 800503e:	d9f0      	bls.n	8005022 <USB_SetCurrentMode+0x2e>
 8005040:	e01a      	b.n	8005078 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d115      	bne.n	8005074 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005054:	2001      	movs	r0, #1
 8005056:	f7fb fee3 	bl	8000e20 <HAL_Delay>
      ms++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3301      	adds	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 fa2c 	bl	80064be <USB_GetMode>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <USB_SetCurrentMode+0x84>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b31      	cmp	r3, #49	; 0x31
 8005070:	d9f0      	bls.n	8005054 <USB_SetCurrentMode+0x60>
 8005072:	e001      	b.n	8005078 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e005      	b.n	8005084 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b32      	cmp	r3, #50	; 0x32
 800507c:	d101      	bne.n	8005082 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800508c:	b084      	sub	sp, #16
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800509a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	e009      	b.n	80050c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	3340      	adds	r3, #64	; 0x40
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	2200      	movs	r2, #0
 80050b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	3301      	adds	r3, #1
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b0e      	cmp	r3, #14
 80050c4:	d9f2      	bls.n	80050ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d11c      	bne.n	8005106 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050da:	f043 0302 	orr.w	r3, r3, #2
 80050de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	639a      	str	r2, [r3, #56]	; 0x38
 8005104:	e00b      	b.n	800511e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005124:	461a      	mov	r2, r3
 8005126:	2300      	movs	r3, #0
 8005128:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005130:	4619      	mov	r1, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005138:	461a      	mov	r2, r3
 800513a:	680b      	ldr	r3, [r1, #0]
 800513c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	2b01      	cmp	r3, #1
 8005142:	d10c      	bne.n	800515e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d104      	bne.n	8005154 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800514a:	2100      	movs	r1, #0
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f965 	bl	800541c <USB_SetDevSpeed>
 8005152:	e008      	b.n	8005166 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005154:	2101      	movs	r1, #1
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f960 	bl	800541c <USB_SetDevSpeed>
 800515c:	e003      	b.n	8005166 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800515e:	2103      	movs	r1, #3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f95b 	bl	800541c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005166:	2110      	movs	r1, #16
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f8f3 	bl	8005354 <USB_FlushTxFifo>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f91f 	bl	80053bc <USB_FlushRxFifo>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518e:	461a      	mov	r2, r3
 8005190:	2300      	movs	r3, #0
 8005192:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519a:	461a      	mov	r2, r3
 800519c:	2300      	movs	r3, #0
 800519e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a6:	461a      	mov	r2, r3
 80051a8:	2300      	movs	r3, #0
 80051aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ac:	2300      	movs	r3, #0
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	e043      	b.n	800523a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051c8:	d118      	bne.n	80051fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	461a      	mov	r2, r3
 80051de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	e013      	b.n	800520e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	461a      	mov	r2, r3
 80051f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	e008      	b.n	800520e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	461a      	mov	r2, r3
 800520a:	2300      	movs	r3, #0
 800520c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521a:	461a      	mov	r2, r3
 800521c:	2300      	movs	r3, #0
 800521e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	461a      	mov	r2, r3
 800522e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005232:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	3301      	adds	r3, #1
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	429a      	cmp	r2, r3
 8005240:	d3b7      	bcc.n	80051b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	e043      	b.n	80052d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800525a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800525e:	d118      	bne.n	8005292 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	461a      	mov	r2, r3
 8005274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	e013      	b.n	80052a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	461a      	mov	r2, r3
 800528a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	e008      	b.n	80052a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	461a      	mov	r2, r3
 80052a0:	2300      	movs	r3, #0
 80052a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b0:	461a      	mov	r2, r3
 80052b2:	2300      	movs	r3, #0
 80052b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c2:	461a      	mov	r2, r3
 80052c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	3301      	adds	r3, #1
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d3b7      	bcc.n	8005248 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d105      	bne.n	800530c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f043 0210 	orr.w	r2, r3, #16
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699a      	ldr	r2, [r3, #24]
 8005310:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <USB_DevInit+0x2c4>)
 8005312:	4313      	orrs	r3, r2
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f043 0208 	orr.w	r2, r3, #8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800532a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d107      	bne.n	8005340 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005338:	f043 0304 	orr.w	r3, r3, #4
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005340:	7dfb      	ldrb	r3, [r7, #23]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800534c:	b004      	add	sp, #16
 800534e:	4770      	bx	lr
 8005350:	803c3800 	.word	0x803c3800

08005354 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3301      	adds	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4a13      	ldr	r2, [pc, #76]	; (80053b8 <USB_FlushTxFifo+0x64>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e01b      	b.n	80053ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	daf2      	bge.n	8005362 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	019b      	lsls	r3, r3, #6
 8005384:	f043 0220 	orr.w	r2, r3, #32
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3301      	adds	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <USB_FlushTxFifo+0x64>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e006      	b.n	80053ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d0f0      	beq.n	800538c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	00030d40 	.word	0x00030d40

080053bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3301      	adds	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a11      	ldr	r2, [pc, #68]	; (8005418 <USB_FlushRxFifo+0x5c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e018      	b.n	800540c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	daf2      	bge.n	80053c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2210      	movs	r2, #16
 80053ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4a08      	ldr	r2, [pc, #32]	; (8005418 <USB_FlushRxFifo+0x5c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e006      	b.n	800540c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b10      	cmp	r3, #16
 8005408:	d0f0      	beq.n	80053ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	00030d40 	.word	0x00030d40

0800541c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	68f9      	ldr	r1, [r7, #12]
 8005438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800543c:	4313      	orrs	r3, r2
 800543e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800544e:	b480      	push	{r7}
 8005450:	b087      	sub	sp, #28
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 0306 	and.w	r3, r3, #6
 8005466:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d102      	bne.n	8005474 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800546e:	2300      	movs	r3, #0
 8005470:	75fb      	strb	r3, [r7, #23]
 8005472:	e00a      	b.n	800548a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d002      	beq.n	8005480 <USB_GetDevSpeed+0x32>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b06      	cmp	r3, #6
 800547e:	d102      	bne.n	8005486 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005480:	2302      	movs	r3, #2
 8005482:	75fb      	strb	r3, [r7, #23]
 8005484:	e001      	b.n	800548a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005486:	230f      	movs	r3, #15
 8005488:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800548a:	7dfb      	ldrb	r3, [r7, #23]
}
 800548c:	4618      	mov	r0, r3
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d13a      	bne.n	800552a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	2101      	movs	r1, #1
 80054c6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d155      	bne.n	8005598 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	791b      	ldrb	r3, [r3, #4]
 8005506:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005508:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	059b      	lsls	r3, r3, #22
 800550e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005510:	4313      	orrs	r3, r2
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e036      	b.n	8005598 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005530:	69da      	ldr	r2, [r3, #28]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	2101      	movs	r1, #1
 800553c:	fa01 f303 	lsl.w	r3, r1, r3
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005548:	4313      	orrs	r3, r2
 800554a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d11a      	bne.n	8005598 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	791b      	ldrb	r3, [r3, #4]
 800557c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800557e:	430b      	orrs	r3, r1
 8005580:	4313      	orrs	r3, r2
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005596:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d161      	bne.n	8005688 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055da:	d11f      	bne.n	800561c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800561a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	2101      	movs	r1, #1
 800562e:	fa01 f303 	lsl.w	r3, r1, r3
 8005632:	b29b      	uxth	r3, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800563c:	4013      	ands	r3, r2
 800563e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	2101      	movs	r1, #1
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	b29b      	uxth	r3, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	68f9      	ldr	r1, [r7, #12]
 800565c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005660:	4013      	ands	r3, r2
 8005662:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	0159      	lsls	r1, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	440b      	add	r3, r1
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	4619      	mov	r1, r3
 8005680:	4b35      	ldr	r3, [pc, #212]	; (8005758 <USB_DeactivateEndpoint+0x1b0>)
 8005682:	4013      	ands	r3, r2
 8005684:	600b      	str	r3, [r1, #0]
 8005686:	e060      	b.n	800574a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800569a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800569e:	d11f      	bne.n	80056e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	2101      	movs	r1, #1
 80056f2:	fa01 f303 	lsl.w	r3, r1, r3
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	43db      	mvns	r3, r3
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005700:	4013      	ands	r3, r2
 8005702:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	2101      	movs	r1, #1
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	041b      	lsls	r3, r3, #16
 800571c:	43db      	mvns	r3, r3
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005724:	4013      	ands	r3, r2
 8005726:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	0159      	lsls	r1, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	440b      	add	r3, r1
 800573e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005742:	4619      	mov	r1, r3
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <USB_DeactivateEndpoint+0x1b4>)
 8005746:	4013      	ands	r3, r2
 8005748:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	ec337800 	.word	0xec337800
 800575c:	eff37800 	.word	0xeff37800

08005760 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08a      	sub	sp, #40	; 0x28
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	2b01      	cmp	r3, #1
 800577e:	f040 815c 	bne.w	8005a3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d132      	bne.n	80057f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e8:	0cdb      	lsrs	r3, r3, #19
 80057ea:	04db      	lsls	r3, r3, #19
 80057ec:	6113      	str	r3, [r2, #16]
 80057ee:	e074      	b.n	80058da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580a:	0cdb      	lsrs	r3, r3, #19
 800580c:	04db      	lsls	r3, r3, #19
 800580e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	440a      	add	r2, r1
 8005826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800582e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6999      	ldr	r1, [r3, #24]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	440b      	add	r3, r1
 800584c:	1e59      	subs	r1, r3, #1
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	fbb1 f3f3 	udiv	r3, r1, r3
 8005856:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005858:	4b9d      	ldr	r3, [pc, #628]	; (8005ad0 <USB_EPStartXfer+0x370>)
 800585a:	400b      	ands	r3, r1
 800585c:	69b9      	ldr	r1, [r7, #24]
 800585e:	0148      	lsls	r0, r1, #5
 8005860:	69f9      	ldr	r1, [r7, #28]
 8005862:	4401      	add	r1, r0
 8005864:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005868:	4313      	orrs	r3, r2
 800586a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005882:	69b9      	ldr	r1, [r7, #24]
 8005884:	0148      	lsls	r0, r1, #5
 8005886:	69f9      	ldr	r1, [r7, #28]
 8005888:	4401      	add	r1, r0
 800588a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800588e:	4313      	orrs	r3, r2
 8005890:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	791b      	ldrb	r3, [r3, #4]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d11f      	bne.n	80058da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80058b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	0151      	lsls	r1, r2, #5
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	440a      	add	r2, r1
 80058d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d14b      	bne.n	8005978 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d009      	beq.n	80058fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	461a      	mov	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	791b      	ldrb	r3, [r3, #4]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d128      	bne.n	8005956 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d110      	bne.n	8005936 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	440a      	add	r2, r1
 800592a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	e00f      	b.n	8005956 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005954:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005970:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	e133      	b.n	8005be0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	440a      	add	r2, r1
 800598e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005992:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005996:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	791b      	ldrb	r3, [r3, #4]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d015      	beq.n	80059cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 811b 	beq.w	8005be0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	2101      	movs	r1, #1
 80059bc:	fa01 f303 	lsl.w	r3, r1, r3
 80059c0:	69f9      	ldr	r1, [r7, #28]
 80059c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c6:	4313      	orrs	r3, r2
 80059c8:	634b      	str	r3, [r1, #52]	; 0x34
 80059ca:	e109      	b.n	8005be0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d110      	bne.n	80059fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	e00f      	b.n	8005a1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6919      	ldr	r1, [r3, #16]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	781a      	ldrb	r2, [r3, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	b298      	uxth	r0, r3
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	4603      	mov	r3, r0
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 fade 	bl	8005ff4 <USB_WritePacket>
 8005a38:	e0d2      	b.n	8005be0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a54:	0cdb      	lsrs	r3, r3, #19
 8005a56:	04db      	lsls	r3, r3, #19
 8005a58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d126      	bne.n	8005ad4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	0148      	lsls	r0, r1, #5
 8005aa0:	69f9      	ldr	r1, [r7, #28]
 8005aa2:	4401      	add	r1, r0
 8005aa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aca:	6113      	str	r3, [r2, #16]
 8005acc:	e03a      	b.n	8005b44 <USB_EPStartXfer+0x3e4>
 8005ace:	bf00      	nop
 8005ad0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4413      	add	r3, r2
 8005ade:	1e5a      	subs	r2, r3, #1
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	8afa      	ldrh	r2, [r7, #22]
 8005af0:	fb03 f202 	mul.w	r2, r3, r2
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	8afb      	ldrh	r3, [r7, #22]
 8005b08:	04d9      	lsls	r1, r3, #19
 8005b0a:	4b38      	ldr	r3, [pc, #224]	; (8005bec <USB_EPStartXfer+0x48c>)
 8005b0c:	400b      	ands	r3, r1
 8005b0e:	69b9      	ldr	r1, [r7, #24]
 8005b10:	0148      	lsls	r0, r1, #5
 8005b12:	69f9      	ldr	r1, [r7, #28]
 8005b14:	4401      	add	r1, r0
 8005b16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b34:	69b9      	ldr	r1, [r7, #24]
 8005b36:	0148      	lsls	r0, r1, #5
 8005b38:	69f9      	ldr	r1, [r7, #28]
 8005b3a:	4401      	add	r1, r0
 8005b3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b40:	4313      	orrs	r3, r2
 8005b42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b44:	79fb      	ldrb	r3, [r7, #7]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d10d      	bne.n	8005b66 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d009      	beq.n	8005b66 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6919      	ldr	r1, [r3, #16]
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	460a      	mov	r2, r1
 8005b64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	791b      	ldrb	r3, [r3, #4]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d128      	bne.n	8005bc0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d110      	bne.n	8005ba0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e00f      	b.n	8005bc0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3720      	adds	r7, #32
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	1ff80000 	.word	0x1ff80000

08005bf0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	785b      	ldrb	r3, [r3, #1]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	f040 80ce 	bne.w	8005dae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d132      	bne.n	8005c80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c78:	0cdb      	lsrs	r3, r3, #19
 8005c7a:	04db      	lsls	r3, r3, #19
 8005c7c:	6113      	str	r3, [r2, #16]
 8005c7e:	e04e      	b.n	8005d1e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9a:	0cdb      	lsrs	r3, r3, #19
 8005c9c:	04db      	lsls	r3, r3, #19
 8005c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d903      	bls.n	8005cd8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d0e:	6939      	ldr	r1, [r7, #16]
 8005d10:	0148      	lsls	r0, r1, #5
 8005d12:	6979      	ldr	r1, [r7, #20]
 8005d14:	4401      	add	r1, r0
 8005d16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d11e      	bne.n	8005d62 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d009      	beq.n	8005d40 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	461a      	mov	r2, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	e097      	b.n	8005e92 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d80:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8083 	beq.w	8005e92 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005da2:	6979      	ldr	r1, [r7, #20]
 8005da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da8:	4313      	orrs	r3, r2
 8005daa:	634b      	str	r3, [r1, #52]	; 0x34
 8005dac:	e071      	b.n	8005e92 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc8:	0cdb      	lsrs	r3, r3, #19
 8005dca:	04db      	lsls	r3, r3, #19
 8005dcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005df0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e40:	6939      	ldr	r1, [r7, #16]
 8005e42:	0148      	lsls	r0, r1, #5
 8005e44:	6979      	ldr	r1, [r7, #20]
 8005e46:	4401      	add	r1, r0
 8005e48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d10d      	bne.n	8005e72 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d009      	beq.n	8005e72 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	6919      	ldr	r1, [r3, #16]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	460a      	mov	r2, r1
 8005e70:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	785b      	ldrb	r3, [r3, #1]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d14a      	bne.n	8005f54 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ed6:	f040 8086 	bne.w	8005fe6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	0151      	lsls	r1, r2, #5
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	440a      	add	r2, r1
 8005ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005efc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	7812      	ldrb	r2, [r2, #0]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3301      	adds	r3, #1
 8005f26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d902      	bls.n	8005f38 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	75fb      	strb	r3, [r7, #23]
          break;
 8005f36:	e056      	b.n	8005fe6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f50:	d0e7      	beq.n	8005f22 <USB_EPStopXfer+0x82>
 8005f52:	e048      	b.n	8005fe6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f6c:	d13b      	bne.n	8005fe6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	7812      	ldrb	r2, [r2, #0]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f90:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	7812      	ldrb	r2, [r2, #0]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d902      	bls.n	8005fcc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8005fca:	e00c      	b.n	8005fe6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fe4:	d0e7      	beq.n	8005fb6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b089      	sub	sp, #36	; 0x24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	4611      	mov	r1, r2
 8006000:	461a      	mov	r2, r3
 8006002:	460b      	mov	r3, r1
 8006004:	71fb      	strb	r3, [r7, #7]
 8006006:	4613      	mov	r3, r2
 8006008:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006012:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006016:	2b00      	cmp	r3, #0
 8006018:	d123      	bne.n	8006062 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800601a:	88bb      	ldrh	r3, [r7, #4]
 800601c:	3303      	adds	r3, #3
 800601e:	089b      	lsrs	r3, r3, #2
 8006020:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006022:	2300      	movs	r3, #0
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	e018      	b.n	800605a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	031a      	lsls	r2, r3, #12
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	4413      	add	r3, r2
 8006030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006034:	461a      	mov	r2, r3
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	3301      	adds	r3, #1
 8006040:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	3301      	adds	r3, #1
 8006046:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	3301      	adds	r3, #1
 800604c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	3301      	adds	r3, #1
 8006052:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	3301      	adds	r3, #1
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	429a      	cmp	r2, r3
 8006060:	d3e2      	bcc.n	8006028 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3724      	adds	r7, #36	; 0x24
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006070:	b480      	push	{r7}
 8006072:	b08b      	sub	sp, #44	; 0x2c
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	089b      	lsrs	r3, r3, #2
 800608a:	b29b      	uxth	r3, r3
 800608c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006096:	2300      	movs	r3, #0
 8006098:	623b      	str	r3, [r7, #32]
 800609a:	e014      	b.n	80060c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	3301      	adds	r3, #1
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	3301      	adds	r3, #1
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	3301      	adds	r3, #1
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	3301      	adds	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	3301      	adds	r3, #1
 80060c4:	623b      	str	r3, [r7, #32]
 80060c6:	6a3a      	ldr	r2, [r7, #32]
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d3e6      	bcc.n	800609c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060ce:	8bfb      	ldrh	r3, [r7, #30]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01e      	beq.n	8006112 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060de:	461a      	mov	r2, r3
 80060e0:	f107 0310 	add.w	r3, r7, #16
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	701a      	strb	r2, [r3, #0]
      i++;
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	3301      	adds	r3, #1
 80060fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	3301      	adds	r3, #1
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006106:	8bfb      	ldrh	r3, [r7, #30]
 8006108:	3b01      	subs	r3, #1
 800610a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800610c:	8bfb      	ldrh	r3, [r7, #30]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1ea      	bne.n	80060e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006114:	4618      	mov	r0, r3
 8006116:	372c      	adds	r7, #44	; 0x2c
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d12c      	bne.n	8006196 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	db12      	blt.n	8006174 <USB_EPSetStall+0x54>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00f      	beq.n	8006174 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	440a      	add	r2, r1
 800616a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006172:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	440a      	add	r2, r1
 800618a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	e02b      	b.n	80061ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	db12      	blt.n	80061ce <USB_EPSetStall+0xae>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00f      	beq.n	80061ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	785b      	ldrb	r3, [r3, #1]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d128      	bne.n	800626a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006232:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006236:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	791b      	ldrb	r3, [r3, #4]
 800623c:	2b03      	cmp	r3, #3
 800623e:	d003      	beq.n	8006248 <USB_EPClearStall+0x4c>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	791b      	ldrb	r3, [r3, #4]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d138      	bne.n	80062ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	0151      	lsls	r1, r2, #5
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	440a      	add	r2, r1
 800625e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	e027      	b.n	80062ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006284:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006288:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	791b      	ldrb	r3, [r3, #4]
 800628e:	2b03      	cmp	r3, #3
 8006290:	d003      	beq.n	800629a <USB_EPClearStall+0x9e>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	791b      	ldrb	r3, [r3, #4]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d10f      	bne.n	80062ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80062fc:	68f9      	ldr	r1, [r7, #12]
 80062fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006302:	4313      	orrs	r3, r2
 8006304:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006342:	f023 0302 	bic.w	r3, r3, #2
 8006346:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006370:	f023 0303 	bic.w	r3, r3, #3
 8006374:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006384:	f043 0302 	orr.w	r3, r3, #2
 8006388:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4013      	ands	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063b0:	68fb      	ldr	r3, [r7, #12]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063be:	b480      	push	{r7}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	4013      	ands	r3, r2
 80063e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	0c1b      	lsrs	r3, r3, #16
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	4013      	ands	r3, r2
 8006414:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	b29b      	uxth	r3, r3
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006426:	b480      	push	{r7}
 8006428:	b085      	sub	sp, #20
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	4013      	ands	r3, r2
 8006452:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006454:	68bb      	ldr	r3, [r7, #8]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006462:	b480      	push	{r7}
 8006464:	b087      	sub	sp, #28
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006484:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	fa22 f303 	lsr.w	r3, r2, r3
 8006492:	01db      	lsls	r3, r3, #7
 8006494:	b2db      	uxtb	r3, r3
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4013      	ands	r3, r2
 80064ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064b0:	68bb      	ldr	r3, [r7, #8]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f003 0301 	and.w	r3, r3, #1
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064da:	b480      	push	{r7}
 80064dc:	b085      	sub	sp, #20
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064f8:	f023 0307 	bic.w	r3, r3, #7
 80064fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800650c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006510:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	460b      	mov	r3, r1
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	333c      	adds	r3, #60	; 0x3c
 8006536:	3304      	adds	r3, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4a26      	ldr	r2, [pc, #152]	; (80065d8 <USB_EP0_OutStart+0xb8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d90a      	bls.n	800655a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006554:	d101      	bne.n	800655a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e037      	b.n	80065ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	461a      	mov	r2, r3
 8006562:	2300      	movs	r3, #0
 8006564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006588:	f043 0318 	orr.w	r3, r3, #24
 800658c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065a2:	7afb      	ldrb	r3, [r7, #11]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d10f      	bne.n	80065c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ae:	461a      	mov	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	4f54300a 	.word	0x4f54300a

080065dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a13      	ldr	r2, [pc, #76]	; (8006640 <USB_CoreReset+0x64>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d901      	bls.n	80065fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e01b      	b.n	8006632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	daf2      	bge.n	80065e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f043 0201 	orr.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3301      	adds	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4a09      	ldr	r2, [pc, #36]	; (8006640 <USB_CoreReset+0x64>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d901      	bls.n	8006624 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e006      	b.n	8006632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b01      	cmp	r3, #1
 800662e:	d0f0      	beq.n	8006612 <USB_CoreReset+0x36>

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	00030d40 	.word	0x00030d40

08006644 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006650:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006654:	f002 fcb4 	bl	8008fc0 <USBD_static_malloc>
 8006658:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	32b0      	adds	r2, #176	; 0xb0
 800666a:	2100      	movs	r1, #0
 800666c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006670:	2302      	movs	r3, #2
 8006672:	e0d4      	b.n	800681e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006674:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006678:	2100      	movs	r1, #0
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f002 fe74 	bl	8009368 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	32b0      	adds	r2, #176	; 0xb0
 800668a:	68f9      	ldr	r1, [r7, #12]
 800668c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	32b0      	adds	r2, #176	; 0xb0
 800669a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	7c1b      	ldrb	r3, [r3, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d138      	bne.n	800671e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066ac:	4b5e      	ldr	r3, [pc, #376]	; (8006828 <USBD_CDC_Init+0x1e4>)
 80066ae:	7819      	ldrb	r1, [r3, #0]
 80066b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b4:	2202      	movs	r2, #2
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f002 fb5f 	bl	8008d7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066bc:	4b5a      	ldr	r3, [pc, #360]	; (8006828 <USBD_CDC_Init+0x1e4>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	f003 020f 	and.w	r2, r3, #15
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	3324      	adds	r3, #36	; 0x24
 80066d2:	2201      	movs	r2, #1
 80066d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066d6:	4b55      	ldr	r3, [pc, #340]	; (800682c <USBD_CDC_Init+0x1e8>)
 80066d8:	7819      	ldrb	r1, [r3, #0]
 80066da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066de:	2202      	movs	r2, #2
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f002 fb4a 	bl	8008d7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066e6:	4b51      	ldr	r3, [pc, #324]	; (800682c <USBD_CDC_Init+0x1e8>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	f003 020f 	and.w	r2, r3, #15
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066fe:	2201      	movs	r2, #1
 8006700:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006702:	4b4b      	ldr	r3, [pc, #300]	; (8006830 <USBD_CDC_Init+0x1ec>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	f003 020f 	and.w	r2, r3, #15
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	3326      	adds	r3, #38	; 0x26
 8006718:	2210      	movs	r2, #16
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e035      	b.n	800678a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800671e:	4b42      	ldr	r3, [pc, #264]	; (8006828 <USBD_CDC_Init+0x1e4>)
 8006720:	7819      	ldrb	r1, [r3, #0]
 8006722:	2340      	movs	r3, #64	; 0x40
 8006724:	2202      	movs	r2, #2
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f002 fb27 	bl	8008d7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800672c:	4b3e      	ldr	r3, [pc, #248]	; (8006828 <USBD_CDC_Init+0x1e4>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f003 020f 	and.w	r2, r3, #15
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	3324      	adds	r3, #36	; 0x24
 8006742:	2201      	movs	r2, #1
 8006744:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006746:	4b39      	ldr	r3, [pc, #228]	; (800682c <USBD_CDC_Init+0x1e8>)
 8006748:	7819      	ldrb	r1, [r3, #0]
 800674a:	2340      	movs	r3, #64	; 0x40
 800674c:	2202      	movs	r2, #2
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f002 fb13 	bl	8008d7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006754:	4b35      	ldr	r3, [pc, #212]	; (800682c <USBD_CDC_Init+0x1e8>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	f003 020f 	and.w	r2, r3, #15
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	440b      	add	r3, r1
 8006768:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800676c:	2201      	movs	r2, #1
 800676e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006770:	4b2f      	ldr	r3, [pc, #188]	; (8006830 <USBD_CDC_Init+0x1ec>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f003 020f 	and.w	r2, r3, #15
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	3326      	adds	r3, #38	; 0x26
 8006786:	2210      	movs	r2, #16
 8006788:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800678a:	4b29      	ldr	r3, [pc, #164]	; (8006830 <USBD_CDC_Init+0x1ec>)
 800678c:	7819      	ldrb	r1, [r3, #0]
 800678e:	2308      	movs	r3, #8
 8006790:	2203      	movs	r2, #3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f002 faf1 	bl	8008d7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006798:	4b25      	ldr	r3, [pc, #148]	; (8006830 <USBD_CDC_Init+0x1ec>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	f003 020f 	and.w	r2, r3, #15
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	3324      	adds	r3, #36	; 0x24
 80067ae:	2201      	movs	r2, #1
 80067b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	33b0      	adds	r3, #176	; 0xb0
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80067e8:	2302      	movs	r3, #2
 80067ea:	e018      	b.n	800681e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	7c1b      	ldrb	r3, [r3, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067f4:	4b0d      	ldr	r3, [pc, #52]	; (800682c <USBD_CDC_Init+0x1e8>)
 80067f6:	7819      	ldrb	r1, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f002 fba8 	bl	8008f58 <USBD_LL_PrepareReceive>
 8006808:	e008      	b.n	800681c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <USBD_CDC_Init+0x1e8>)
 800680c:	7819      	ldrb	r1, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f002 fb9e 	bl	8008f58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000093 	.word	0x20000093
 800682c:	20000094 	.word	0x20000094
 8006830:	20000095 	.word	0x20000095

08006834 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006840:	4b3a      	ldr	r3, [pc, #232]	; (800692c <USBD_CDC_DeInit+0xf8>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f002 fabd 	bl	8008dc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800684c:	4b37      	ldr	r3, [pc, #220]	; (800692c <USBD_CDC_DeInit+0xf8>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f003 020f 	and.w	r2, r3, #15
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	3324      	adds	r3, #36	; 0x24
 8006862:	2200      	movs	r2, #0
 8006864:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006866:	4b32      	ldr	r3, [pc, #200]	; (8006930 <USBD_CDC_DeInit+0xfc>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f002 faaa 	bl	8008dc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006872:	4b2f      	ldr	r3, [pc, #188]	; (8006930 <USBD_CDC_DeInit+0xfc>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f003 020f 	and.w	r2, r3, #15
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800688a:	2200      	movs	r2, #0
 800688c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800688e:	4b29      	ldr	r3, [pc, #164]	; (8006934 <USBD_CDC_DeInit+0x100>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f002 fa96 	bl	8008dc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800689a:	4b26      	ldr	r3, [pc, #152]	; (8006934 <USBD_CDC_DeInit+0x100>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	f003 020f 	and.w	r2, r3, #15
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	3324      	adds	r3, #36	; 0x24
 80068b0:	2200      	movs	r2, #0
 80068b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80068b4:	4b1f      	ldr	r3, [pc, #124]	; (8006934 <USBD_CDC_DeInit+0x100>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f003 020f 	and.w	r2, r3, #15
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	3326      	adds	r3, #38	; 0x26
 80068ca:	2200      	movs	r2, #0
 80068cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	32b0      	adds	r2, #176	; 0xb0
 80068d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01f      	beq.n	8006920 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	33b0      	adds	r3, #176	; 0xb0
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	32b0      	adds	r2, #176	; 0xb0
 80068fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006902:	4618      	mov	r0, r3
 8006904:	f002 fb6a 	bl	8008fdc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	32b0      	adds	r2, #176	; 0xb0
 8006912:	2100      	movs	r1, #0
 8006914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000093 	.word	0x20000093
 8006930:	20000094 	.word	0x20000094
 8006934:	20000095 	.word	0x20000095

08006938 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	32b0      	adds	r2, #176	; 0xb0
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006964:	2303      	movs	r3, #3
 8006966:	e0bf      	b.n	8006ae8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006970:	2b00      	cmp	r3, #0
 8006972:	d050      	beq.n	8006a16 <USBD_CDC_Setup+0xde>
 8006974:	2b20      	cmp	r3, #32
 8006976:	f040 80af 	bne.w	8006ad8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	88db      	ldrh	r3, [r3, #6]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d03a      	beq.n	80069f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b25b      	sxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	da1b      	bge.n	80069c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	33b0      	adds	r3, #176	; 0xb0
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80069a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	88d2      	ldrh	r2, [r2, #6]
 80069a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	88db      	ldrh	r3, [r3, #6]
 80069ae:	2b07      	cmp	r3, #7
 80069b0:	bf28      	it	cs
 80069b2:	2307      	movcs	r3, #7
 80069b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	89fa      	ldrh	r2, [r7, #14]
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 fd89 	bl	80084d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80069c2:	e090      	b.n	8006ae6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	785a      	ldrb	r2, [r3, #1]
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	88db      	ldrh	r3, [r3, #6]
 80069d2:	2b3f      	cmp	r3, #63	; 0x3f
 80069d4:	d803      	bhi.n	80069de <USBD_CDC_Setup+0xa6>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	88db      	ldrh	r3, [r3, #6]
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	e000      	b.n	80069e0 <USBD_CDC_Setup+0xa8>
 80069de:	2240      	movs	r2, #64	; 0x40
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80069e6:	6939      	ldr	r1, [r7, #16]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80069ee:	461a      	mov	r2, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fd9b 	bl	800852c <USBD_CtlPrepareRx>
      break;
 80069f6:	e076      	b.n	8006ae6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	33b0      	adds	r3, #176	; 0xb0
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	7850      	ldrb	r0, [r2, #1]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	4798      	blx	r3
      break;
 8006a14:	e067      	b.n	8006ae6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	2b0b      	cmp	r3, #11
 8006a1c:	d851      	bhi.n	8006ac2 <USBD_CDC_Setup+0x18a>
 8006a1e:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <USBD_CDC_Setup+0xec>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a55 	.word	0x08006a55
 8006a28:	08006ad1 	.word	0x08006ad1
 8006a2c:	08006ac3 	.word	0x08006ac3
 8006a30:	08006ac3 	.word	0x08006ac3
 8006a34:	08006ac3 	.word	0x08006ac3
 8006a38:	08006ac3 	.word	0x08006ac3
 8006a3c:	08006ac3 	.word	0x08006ac3
 8006a40:	08006ac3 	.word	0x08006ac3
 8006a44:	08006ac3 	.word	0x08006ac3
 8006a48:	08006ac3 	.word	0x08006ac3
 8006a4c:	08006a7f 	.word	0x08006a7f
 8006a50:	08006aa9 	.word	0x08006aa9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d107      	bne.n	8006a70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a60:	f107 030a 	add.w	r3, r7, #10
 8006a64:	2202      	movs	r2, #2
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 fd33 	bl	80084d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a6e:	e032      	b.n	8006ad6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fcbd 	bl	80083f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7c:	e02b      	b.n	8006ad6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d107      	bne.n	8006a9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a8a:	f107 030d 	add.w	r3, r7, #13
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fd1e 	bl	80084d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a98:	e01d      	b.n	8006ad6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fca8 	bl	80083f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8006aa6:	e016      	b.n	8006ad6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d00f      	beq.n	8006ad4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 fc9b 	bl	80083f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006abc:	2303      	movs	r3, #3
 8006abe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ac0:	e008      	b.n	8006ad4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fc94 	bl	80083f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006aca:	2303      	movs	r3, #3
 8006acc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ace:	e002      	b.n	8006ad6 <USBD_CDC_Setup+0x19e>
          break;
 8006ad0:	bf00      	nop
 8006ad2:	e008      	b.n	8006ae6 <USBD_CDC_Setup+0x1ae>
          break;
 8006ad4:	bf00      	nop
      }
      break;
 8006ad6:	e006      	b.n	8006ae6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 fc89 	bl	80083f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	32b0      	adds	r2, #176	; 0xb0
 8006b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e065      	b.n	8006be6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	32b0      	adds	r2, #176	; 0xb0
 8006b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	f003 020f 	and.w	r2, r3, #15
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	3318      	adds	r3, #24
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d02f      	beq.n	8006ba4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	f003 020f 	and.w	r2, r3, #15
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	3318      	adds	r3, #24
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	f003 010f 	and.w	r1, r3, #15
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	460b      	mov	r3, r1
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	440b      	add	r3, r1
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4403      	add	r3, r0
 8006b6c:	3348      	adds	r3, #72	; 0x48
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d112      	bne.n	8006ba4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	f003 020f 	and.w	r2, r3, #15
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	3318      	adds	r3, #24
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b96:	78f9      	ldrb	r1, [r7, #3]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f002 f9ba 	bl	8008f16 <USBD_LL_Transmit>
 8006ba2:	e01f      	b.n	8006be4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	33b0      	adds	r3, #176	; 0xb0
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d010      	beq.n	8006be4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	33b0      	adds	r3, #176	; 0xb0
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006be0:	78fa      	ldrb	r2, [r7, #3]
 8006be2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	32b0      	adds	r2, #176	; 0xb0
 8006c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	32b0      	adds	r2, #176	; 0xb0
 8006c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e01a      	b.n	8006c56 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f002 f9b8 	bl	8008f9a <USBD_LL_GetRxDataSize>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	33b0      	adds	r3, #176	; 0xb0
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c50:	4611      	mov	r1, r2
 8006c52:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	32b0      	adds	r2, #176	; 0xb0
 8006c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e025      	b.n	8006ccc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	33b0      	adds	r3, #176	; 0xb0
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01a      	beq.n	8006cca <USBD_CDC_EP0_RxReady+0x6c>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c9a:	2bff      	cmp	r3, #255	; 0xff
 8006c9c:	d015      	beq.n	8006cca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	33b0      	adds	r3, #176	; 0xb0
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006cb6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cbe:	b292      	uxth	r2, r2
 8006cc0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	22ff      	movs	r2, #255	; 0xff
 8006cc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cdc:	2182      	movs	r1, #130	; 0x82
 8006cde:	4818      	ldr	r0, [pc, #96]	; (8006d40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ce0:	f000 fd4f 	bl	8007782 <USBD_GetEpDesc>
 8006ce4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	4815      	ldr	r0, [pc, #84]	; (8006d40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cea:	f000 fd4a 	bl	8007782 <USBD_GetEpDesc>
 8006cee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cf0:	2181      	movs	r1, #129	; 0x81
 8006cf2:	4813      	ldr	r0, [pc, #76]	; (8006d40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cf4:	f000 fd45 	bl	8007782 <USBD_GetEpDesc>
 8006cf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2210      	movs	r2, #16
 8006d04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d006      	beq.n	8006d1a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d14:	711a      	strb	r2, [r3, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d006      	beq.n	8006d2e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d28:	711a      	strb	r2, [r3, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2243      	movs	r2, #67	; 0x43
 8006d32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d34:	4b02      	ldr	r3, [pc, #8]	; (8006d40 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000050 	.word	0x20000050

08006d44 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d4c:	2182      	movs	r1, #130	; 0x82
 8006d4e:	4818      	ldr	r0, [pc, #96]	; (8006db0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d50:	f000 fd17 	bl	8007782 <USBD_GetEpDesc>
 8006d54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d56:	2101      	movs	r1, #1
 8006d58:	4815      	ldr	r0, [pc, #84]	; (8006db0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d5a:	f000 fd12 	bl	8007782 <USBD_GetEpDesc>
 8006d5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d60:	2181      	movs	r1, #129	; 0x81
 8006d62:	4813      	ldr	r0, [pc, #76]	; (8006db0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d64:	f000 fd0d 	bl	8007782 <USBD_GetEpDesc>
 8006d68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2210      	movs	r2, #16
 8006d74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d006      	beq.n	8006d8a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	711a      	strb	r2, [r3, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f042 0202 	orr.w	r2, r2, #2
 8006d88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d006      	beq.n	8006d9e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	711a      	strb	r2, [r3, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f042 0202 	orr.w	r2, r2, #2
 8006d9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2243      	movs	r2, #67	; 0x43
 8006da2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006da4:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000050 	.word	0x20000050

08006db4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006dbc:	2182      	movs	r1, #130	; 0x82
 8006dbe:	4818      	ldr	r0, [pc, #96]	; (8006e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dc0:	f000 fcdf 	bl	8007782 <USBD_GetEpDesc>
 8006dc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	4815      	ldr	r0, [pc, #84]	; (8006e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dca:	f000 fcda 	bl	8007782 <USBD_GetEpDesc>
 8006dce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006dd0:	2181      	movs	r1, #129	; 0x81
 8006dd2:	4813      	ldr	r0, [pc, #76]	; (8006e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dd4:	f000 fcd5 	bl	8007782 <USBD_GetEpDesc>
 8006dd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2210      	movs	r2, #16
 8006de4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d006      	beq.n	8006dfa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006df4:	711a      	strb	r2, [r3, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d006      	beq.n	8006e0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e08:	711a      	strb	r2, [r3, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2243      	movs	r2, #67	; 0x43
 8006e12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e14:	4b02      	ldr	r3, [pc, #8]	; (8006e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000050 	.word	0x20000050

08006e24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	220a      	movs	r2, #10
 8006e30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e32:	4b03      	ldr	r3, [pc, #12]	; (8006e40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	2000000c 	.word	0x2000000c

08006e44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e009      	b.n	8006e6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	33b0      	adds	r3, #176	; 0xb0
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	32b0      	adds	r2, #176	; 0xb0
 8006e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e92:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e008      	b.n	8006eb0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	32b0      	adds	r2, #176	; 0xb0
 8006ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e004      	b.n	8006eea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
	...

08006ef8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	32b0      	adds	r2, #176	; 0xb0
 8006f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f10:	2301      	movs	r3, #1
 8006f12:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32b0      	adds	r2, #176	; 0xb0
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e025      	b.n	8006f76 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d11f      	bne.n	8006f74 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f3c:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <USBD_CDC_TransmitPacket+0x88>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f003 020f 	and.w	r2, r3, #15
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4403      	add	r3, r0
 8006f56:	3318      	adds	r3, #24
 8006f58:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f5a:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <USBD_CDC_TransmitPacket+0x88>)
 8006f5c:	7819      	ldrb	r1, [r3, #0]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 ffd3 	bl	8008f16 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000093 	.word	0x20000093

08006f84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	32b0      	adds	r2, #176	; 0xb0
 8006f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	32b0      	adds	r2, #176	; 0xb0
 8006fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e018      	b.n	8006fe4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7c1b      	ldrb	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10a      	bne.n	8006fd0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <USBD_CDC_ReceivePacket+0x68>)
 8006fbc:	7819      	ldrb	r1, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 ffc5 	bl	8008f58 <USBD_LL_PrepareReceive>
 8006fce:	e008      	b.n	8006fe2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fd0:	4b06      	ldr	r3, [pc, #24]	; (8006fec <USBD_CDC_ReceivePacket+0x68>)
 8006fd2:	7819      	ldrb	r1, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fda:	2340      	movs	r3, #64	; 0x40
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 ffbb 	bl	8008f58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20000094 	.word	0x20000094

08006ff0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007004:	2303      	movs	r3, #3
 8007006:	e01f      	b.n	8007048 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	79fa      	ldrb	r2, [r7, #7]
 800703a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f001 fe35 	bl	8008cac <USBD_LL_Init>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007064:	2303      	movs	r3, #3
 8007066:	e025      	b.n	80070b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32ae      	adds	r2, #174	; 0xae
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00f      	beq.n	80070a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	32ae      	adds	r2, #174	; 0xae
 800708e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	f107 020e 	add.w	r2, r7, #14
 8007098:	4610      	mov	r0, r2
 800709a:	4798      	blx	r3
 800709c:	4602      	mov	r2, r0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fe3d 	bl	8008d44 <USBD_LL_Start>
 80070ca:	4603      	mov	r3, r0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070de:	4618      	mov	r0, r3
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d009      	beq.n	8007118 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	78fa      	ldrb	r2, [r7, #3]
 800710e:	4611      	mov	r1, r2
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	4798      	blx	r3
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	78fa      	ldrb	r2, [r7, #3]
 800713c:	4611      	mov	r1, r2
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007148:	2303      	movs	r3, #3
 800714a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f001 f908 	bl	800837e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800717c:	461a      	mov	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800718a:	f003 031f 	and.w	r3, r3, #31
 800718e:	2b02      	cmp	r3, #2
 8007190:	d01a      	beq.n	80071c8 <USBD_LL_SetupStage+0x72>
 8007192:	2b02      	cmp	r3, #2
 8007194:	d822      	bhi.n	80071dc <USBD_LL_SetupStage+0x86>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <USBD_LL_SetupStage+0x4a>
 800719a:	2b01      	cmp	r3, #1
 800719c:	d00a      	beq.n	80071b4 <USBD_LL_SetupStage+0x5e>
 800719e:	e01d      	b.n	80071dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fb5f 	bl	800786c <USBD_StdDevReq>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]
      break;
 80071b2:	e020      	b.n	80071f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fbc7 	bl	8007950 <USBD_StdItfReq>
 80071c2:	4603      	mov	r3, r0
 80071c4:	73fb      	strb	r3, [r7, #15]
      break;
 80071c6:	e016      	b.n	80071f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fc29 	bl	8007a28 <USBD_StdEPReq>
 80071d6:	4603      	mov	r3, r0
 80071d8:	73fb      	strb	r3, [r7, #15]
      break;
 80071da:	e00c      	b.n	80071f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fe0a 	bl	8008e04 <USBD_LL_StallEP>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]
      break;
 80071f4:	bf00      	nop
  }

  return ret;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	460b      	mov	r3, r1
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007212:	7afb      	ldrb	r3, [r7, #11]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d16e      	bne.n	80072f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800721e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007226:	2b03      	cmp	r3, #3
 8007228:	f040 8098 	bne.w	800735c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	429a      	cmp	r2, r3
 8007236:	d913      	bls.n	8007260 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	1ad2      	subs	r2, r2, r3
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	4293      	cmp	r3, r2
 8007250:	bf28      	it	cs
 8007252:	4613      	movcs	r3, r2
 8007254:	461a      	mov	r2, r3
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f001 f984 	bl	8008566 <USBD_CtlContinueRx>
 800725e:	e07d      	b.n	800735c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007266:	f003 031f 	and.w	r3, r3, #31
 800726a:	2b02      	cmp	r3, #2
 800726c:	d014      	beq.n	8007298 <USBD_LL_DataOutStage+0x98>
 800726e:	2b02      	cmp	r3, #2
 8007270:	d81d      	bhi.n	80072ae <USBD_LL_DataOutStage+0xae>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <USBD_LL_DataOutStage+0x7c>
 8007276:	2b01      	cmp	r3, #1
 8007278:	d003      	beq.n	8007282 <USBD_LL_DataOutStage+0x82>
 800727a:	e018      	b.n	80072ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	75bb      	strb	r3, [r7, #22]
            break;
 8007280:	e018      	b.n	80072b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007288:	b2db      	uxtb	r3, r3
 800728a:	4619      	mov	r1, r3
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fa5e 	bl	800774e <USBD_CoreFindIF>
 8007292:	4603      	mov	r3, r0
 8007294:	75bb      	strb	r3, [r7, #22]
            break;
 8007296:	e00d      	b.n	80072b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	4619      	mov	r1, r3
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 fa60 	bl	8007768 <USBD_CoreFindEP>
 80072a8:	4603      	mov	r3, r0
 80072aa:	75bb      	strb	r3, [r7, #22]
            break;
 80072ac:	e002      	b.n	80072b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	75bb      	strb	r3, [r7, #22]
            break;
 80072b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80072b4:	7dbb      	ldrb	r3, [r7, #22]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d119      	bne.n	80072ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d113      	bne.n	80072ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072c6:	7dba      	ldrb	r2, [r7, #22]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	32ae      	adds	r2, #174	; 0xae
 80072cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00b      	beq.n	80072ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072d6:	7dba      	ldrb	r2, [r7, #22]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072de:	7dba      	ldrb	r2, [r7, #22]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	32ae      	adds	r2, #174	; 0xae
 80072e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f001 f94a 	bl	8008588 <USBD_CtlSendStatus>
 80072f4:	e032      	b.n	800735c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072f6:	7afb      	ldrb	r3, [r7, #11]
 80072f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	4619      	mov	r1, r3
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fa31 	bl	8007768 <USBD_CoreFindEP>
 8007306:	4603      	mov	r3, r0
 8007308:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800730a:	7dbb      	ldrb	r3, [r7, #22]
 800730c:	2bff      	cmp	r3, #255	; 0xff
 800730e:	d025      	beq.n	800735c <USBD_LL_DataOutStage+0x15c>
 8007310:	7dbb      	ldrb	r3, [r7, #22]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d122      	bne.n	800735c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d117      	bne.n	8007352 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007322:	7dba      	ldrb	r2, [r7, #22]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	32ae      	adds	r2, #174	; 0xae
 8007328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00f      	beq.n	8007352 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007332:	7dba      	ldrb	r2, [r7, #22]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800733a:	7dba      	ldrb	r2, [r7, #22]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	32ae      	adds	r2, #174	; 0xae
 8007340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	7afa      	ldrb	r2, [r7, #11]
 8007348:	4611      	mov	r1, r2
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	4798      	blx	r3
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	e000      	b.n	800735e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b086      	sub	sp, #24
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	460b      	mov	r3, r1
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007374:	7afb      	ldrb	r3, [r7, #11]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d16f      	bne.n	800745a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3314      	adds	r3, #20
 800737e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007386:	2b02      	cmp	r3, #2
 8007388:	d15a      	bne.n	8007440 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	429a      	cmp	r2, r3
 8007394:	d914      	bls.n	80073c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f001 f8ac 	bl	800850a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b2:	2300      	movs	r3, #0
 80073b4:	2200      	movs	r2, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f001 fdcd 	bl	8008f58 <USBD_LL_PrepareReceive>
 80073be:	e03f      	b.n	8007440 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d11c      	bne.n	8007406 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d316      	bcc.n	8007406 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d20f      	bcs.n	8007406 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073e6:	2200      	movs	r2, #0
 80073e8:	2100      	movs	r1, #0
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f001 f88d 	bl	800850a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073f8:	2300      	movs	r3, #0
 80073fa:	2200      	movs	r2, #0
 80073fc:	2100      	movs	r1, #0
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f001 fdaa 	bl	8008f58 <USBD_LL_PrepareReceive>
 8007404:	e01c      	b.n	8007440 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b03      	cmp	r3, #3
 8007410:	d10f      	bne.n	8007432 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007432:	2180      	movs	r1, #128	; 0x80
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f001 fce5 	bl	8008e04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f001 f8b7 	bl	80085ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d03a      	beq.n	80074c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff fe42 	bl	80070d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007458:	e032      	b.n	80074c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800745a:	7afb      	ldrb	r3, [r7, #11]
 800745c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007460:	b2db      	uxtb	r3, r3
 8007462:	4619      	mov	r1, r3
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f97f 	bl	8007768 <USBD_CoreFindEP>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800746e:	7dfb      	ldrb	r3, [r7, #23]
 8007470:	2bff      	cmp	r3, #255	; 0xff
 8007472:	d025      	beq.n	80074c0 <USBD_LL_DataInStage+0x15a>
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d122      	bne.n	80074c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b03      	cmp	r3, #3
 8007484:	d11c      	bne.n	80074c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007486:	7dfa      	ldrb	r2, [r7, #23]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	32ae      	adds	r2, #174	; 0xae
 800748c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d014      	beq.n	80074c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007496:	7dfa      	ldrb	r2, [r7, #23]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800749e:	7dfa      	ldrb	r2, [r7, #23]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	32ae      	adds	r2, #174	; 0xae
 80074a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	7afa      	ldrb	r2, [r7, #11]
 80074ac:	4611      	mov	r1, r2
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	4798      	blx	r3
 80074b2:	4603      	mov	r3, r0
 80074b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80074b6:	7dbb      	ldrb	r3, [r7, #22]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80074bc:	7dbb      	ldrb	r3, [r7, #22]
 80074be:	e000      	b.n	80074c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d014      	beq.n	8007530 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00e      	beq.n	8007530 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6852      	ldr	r2, [r2, #4]
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	4611      	mov	r1, r2
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800752c:	2303      	movs	r3, #3
 800752e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007530:	2340      	movs	r3, #64	; 0x40
 8007532:	2200      	movs	r2, #0
 8007534:	2100      	movs	r1, #0
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fc1f 	bl	8008d7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2240      	movs	r2, #64	; 0x40
 8007548:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800754c:	2340      	movs	r3, #64	; 0x40
 800754e:	2200      	movs	r2, #0
 8007550:	2180      	movs	r1, #128	; 0x80
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 fc11 	bl	8008d7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2240      	movs	r2, #64	; 0x40
 8007562:	621a      	str	r2, [r3, #32]

  return ret;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	78fa      	ldrb	r2, [r7, #3]
 800757e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759c:	b2da      	uxtb	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2204      	movs	r2, #4
 80075a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d106      	bne.n	80075dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d110      	bne.n	8007620 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	32ae      	adds	r2, #174	; 0xae
 8007640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007648:	2303      	movs	r3, #3
 800764a:	e01c      	b.n	8007686 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b03      	cmp	r3, #3
 8007656:	d115      	bne.n	8007684 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32ae      	adds	r2, #174	; 0xae
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	32ae      	adds	r2, #174	; 0xae
 8007676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	4611      	mov	r1, r2
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	460b      	mov	r3, r1
 8007698:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	32ae      	adds	r2, #174	; 0xae
 80076a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e01c      	b.n	80076ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d115      	bne.n	80076e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	32ae      	adds	r2, #174	; 0xae
 80076c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	32ae      	adds	r2, #174	; 0xae
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	4611      	mov	r1, r2
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00e      	beq.n	8007744 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6852      	ldr	r2, [r2, #4]
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	4611      	mov	r1, r2
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007740:	2303      	movs	r3, #3
 8007742:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007744:	7bfb      	ldrb	r3, [r7, #15]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	460b      	mov	r3, r1
 8007758:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800775a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007774:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b086      	sub	sp, #24
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	885b      	ldrh	r3, [r3, #2]
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d920      	bls.n	80077ec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077b2:	e013      	b.n	80077dc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077b4:	f107 030a 	add.w	r3, r7, #10
 80077b8:	4619      	mov	r1, r3
 80077ba:	6978      	ldr	r0, [r7, #20]
 80077bc:	f000 f81b 	bl	80077f6 <USBD_GetNextDesc>
 80077c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d108      	bne.n	80077dc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	789b      	ldrb	r3, [r3, #2]
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d008      	beq.n	80077ea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	885b      	ldrh	r3, [r3, #2]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	897b      	ldrh	r3, [r7, #10]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d8e5      	bhi.n	80077b4 <USBD_GetEpDesc+0x32>
 80077e8:	e000      	b.n	80077ec <USBD_GetEpDesc+0x6a>
          break;
 80077ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077ec:	693b      	ldr	r3, [r7, #16]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	881a      	ldrh	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	4413      	add	r3, r2
 8007810:	b29a      	uxth	r2, r3
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4413      	add	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007822:	68fb      	ldr	r3, [r7, #12]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	3301      	adds	r3, #1
 8007846:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800784e:	8a3b      	ldrh	r3, [r7, #16]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	b21a      	sxth	r2, r3
 8007854:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007858:	4313      	orrs	r3, r2
 800785a:	b21b      	sxth	r3, r3
 800785c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800785e:	89fb      	ldrh	r3, [r7, #14]
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d005      	beq.n	8007892 <USBD_StdDevReq+0x26>
 8007886:	2b40      	cmp	r3, #64	; 0x40
 8007888:	d857      	bhi.n	800793a <USBD_StdDevReq+0xce>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00f      	beq.n	80078ae <USBD_StdDevReq+0x42>
 800788e:	2b20      	cmp	r3, #32
 8007890:	d153      	bne.n	800793a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	32ae      	adds	r2, #174	; 0xae
 800789c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	4798      	blx	r3
 80078a8:	4603      	mov	r3, r0
 80078aa:	73fb      	strb	r3, [r7, #15]
      break;
 80078ac:	e04a      	b.n	8007944 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	785b      	ldrb	r3, [r3, #1]
 80078b2:	2b09      	cmp	r3, #9
 80078b4:	d83b      	bhi.n	800792e <USBD_StdDevReq+0xc2>
 80078b6:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <USBD_StdDevReq+0x50>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	08007911 	.word	0x08007911
 80078c0:	08007925 	.word	0x08007925
 80078c4:	0800792f 	.word	0x0800792f
 80078c8:	0800791b 	.word	0x0800791b
 80078cc:	0800792f 	.word	0x0800792f
 80078d0:	080078ef 	.word	0x080078ef
 80078d4:	080078e5 	.word	0x080078e5
 80078d8:	0800792f 	.word	0x0800792f
 80078dc:	08007907 	.word	0x08007907
 80078e0:	080078f9 	.word	0x080078f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa3c 	bl	8007d64 <USBD_GetDescriptor>
          break;
 80078ec:	e024      	b.n	8007938 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fba1 	bl	8008038 <USBD_SetAddress>
          break;
 80078f6:	e01f      	b.n	8007938 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fbe0 	bl	80080c0 <USBD_SetConfig>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
          break;
 8007904:	e018      	b.n	8007938 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fc83 	bl	8008214 <USBD_GetConfig>
          break;
 800790e:	e013      	b.n	8007938 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fcb4 	bl	8008280 <USBD_GetStatus>
          break;
 8007918:	e00e      	b.n	8007938 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fce3 	bl	80082e8 <USBD_SetFeature>
          break;
 8007922:	e009      	b.n	8007938 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fd07 	bl	800833a <USBD_ClrFeature>
          break;
 800792c:	e004      	b.n	8007938 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fd5e 	bl	80083f2 <USBD_CtlError>
          break;
 8007936:	bf00      	nop
      }
      break;
 8007938:	e004      	b.n	8007944 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fd58 	bl	80083f2 <USBD_CtlError>
      break;
 8007942:	bf00      	nop
  }

  return ret;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop

08007950 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d005      	beq.n	8007976 <USBD_StdItfReq+0x26>
 800796a:	2b40      	cmp	r3, #64	; 0x40
 800796c:	d852      	bhi.n	8007a14 <USBD_StdItfReq+0xc4>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <USBD_StdItfReq+0x26>
 8007972:	2b20      	cmp	r3, #32
 8007974:	d14e      	bne.n	8007a14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797c:	b2db      	uxtb	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	2b02      	cmp	r3, #2
 8007982:	d840      	bhi.n	8007a06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	889b      	ldrh	r3, [r3, #4]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b01      	cmp	r3, #1
 800798c:	d836      	bhi.n	80079fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	889b      	ldrh	r3, [r3, #4]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff fed9 	bl	800774e <USBD_CoreFindIF>
 800799c:	4603      	mov	r3, r0
 800799e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	2bff      	cmp	r3, #255	; 0xff
 80079a4:	d01d      	beq.n	80079e2 <USBD_StdItfReq+0x92>
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d11a      	bne.n	80079e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80079ac:	7bba      	ldrb	r2, [r7, #14]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	32ae      	adds	r2, #174	; 0xae
 80079b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00f      	beq.n	80079dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079bc:	7bba      	ldrb	r2, [r7, #14]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079c4:	7bba      	ldrb	r2, [r7, #14]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	32ae      	adds	r2, #174	; 0xae
 80079ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
 80079d6:	4603      	mov	r3, r0
 80079d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079da:	e004      	b.n	80079e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079dc:	2303      	movs	r3, #3
 80079de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079e0:	e001      	b.n	80079e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079e2:	2303      	movs	r3, #3
 80079e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	88db      	ldrh	r3, [r3, #6]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d110      	bne.n	8007a10 <USBD_StdItfReq+0xc0>
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10d      	bne.n	8007a10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fdc7 	bl	8008588 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079fa:	e009      	b.n	8007a10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fcf7 	bl	80083f2 <USBD_CtlError>
          break;
 8007a04:	e004      	b.n	8007a10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fcf2 	bl	80083f2 <USBD_CtlError>
          break;
 8007a0e:	e000      	b.n	8007a12 <USBD_StdItfReq+0xc2>
          break;
 8007a10:	bf00      	nop
      }
      break;
 8007a12:	e004      	b.n	8007a1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fceb 	bl	80083f2 <USBD_CtlError>
      break;
 8007a1c:	bf00      	nop
  }

  return ret;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	889b      	ldrh	r3, [r3, #4]
 8007a3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d007      	beq.n	8007a58 <USBD_StdEPReq+0x30>
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	f200 817f 	bhi.w	8007d4c <USBD_StdEPReq+0x324>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d02a      	beq.n	8007aa8 <USBD_StdEPReq+0x80>
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	f040 817a 	bne.w	8007d4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7ff fe83 	bl	8007768 <USBD_CoreFindEP>
 8007a62:	4603      	mov	r3, r0
 8007a64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a66:	7b7b      	ldrb	r3, [r7, #13]
 8007a68:	2bff      	cmp	r3, #255	; 0xff
 8007a6a:	f000 8174 	beq.w	8007d56 <USBD_StdEPReq+0x32e>
 8007a6e:	7b7b      	ldrb	r3, [r7, #13]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f040 8170 	bne.w	8007d56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a76:	7b7a      	ldrb	r2, [r7, #13]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a7e:	7b7a      	ldrb	r2, [r7, #13]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	32ae      	adds	r2, #174	; 0xae
 8007a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 8163 	beq.w	8007d56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a90:	7b7a      	ldrb	r2, [r7, #13]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	32ae      	adds	r2, #174	; 0xae
 8007a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007aa6:	e156      	b.n	8007d56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d008      	beq.n	8007ac2 <USBD_StdEPReq+0x9a>
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	f300 8145 	bgt.w	8007d40 <USBD_StdEPReq+0x318>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 809b 	beq.w	8007bf2 <USBD_StdEPReq+0x1ca>
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d03c      	beq.n	8007b3a <USBD_StdEPReq+0x112>
 8007ac0:	e13e      	b.n	8007d40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d002      	beq.n	8007ad4 <USBD_StdEPReq+0xac>
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d016      	beq.n	8007b00 <USBD_StdEPReq+0xd8>
 8007ad2:	e02c      	b.n	8007b2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00d      	beq.n	8007af6 <USBD_StdEPReq+0xce>
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b80      	cmp	r3, #128	; 0x80
 8007ade:	d00a      	beq.n	8007af6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 f98d 	bl	8008e04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aea:	2180      	movs	r1, #128	; 0x80
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 f989 	bl	8008e04 <USBD_LL_StallEP>
 8007af2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007af4:	e020      	b.n	8007b38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fc7a 	bl	80083f2 <USBD_CtlError>
              break;
 8007afe:	e01b      	b.n	8007b38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	885b      	ldrh	r3, [r3, #2]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10e      	bne.n	8007b26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <USBD_StdEPReq+0xfe>
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b80      	cmp	r3, #128	; 0x80
 8007b12:	d008      	beq.n	8007b26 <USBD_StdEPReq+0xfe>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	88db      	ldrh	r3, [r3, #6]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d104      	bne.n	8007b26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f001 f96f 	bl	8008e04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fd2e 	bl	8008588 <USBD_CtlSendStatus>

              break;
 8007b2c:	e004      	b.n	8007b38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fc5e 	bl	80083f2 <USBD_CtlError>
              break;
 8007b36:	bf00      	nop
          }
          break;
 8007b38:	e107      	b.n	8007d4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d002      	beq.n	8007b4c <USBD_StdEPReq+0x124>
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d016      	beq.n	8007b78 <USBD_StdEPReq+0x150>
 8007b4a:	e04b      	b.n	8007be4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00d      	beq.n	8007b6e <USBD_StdEPReq+0x146>
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b80      	cmp	r3, #128	; 0x80
 8007b56:	d00a      	beq.n	8007b6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f951 	bl	8008e04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b62:	2180      	movs	r1, #128	; 0x80
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 f94d 	bl	8008e04 <USBD_LL_StallEP>
 8007b6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b6c:	e040      	b.n	8007bf0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fc3e 	bl	80083f2 <USBD_CtlError>
              break;
 8007b76:	e03b      	b.n	8007bf0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	885b      	ldrh	r3, [r3, #2]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d136      	bne.n	8007bee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d004      	beq.n	8007b94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 f957 	bl	8008e42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fcf7 	bl	8008588 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff fde2 	bl	8007768 <USBD_CoreFindEP>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ba8:	7b7b      	ldrb	r3, [r7, #13]
 8007baa:	2bff      	cmp	r3, #255	; 0xff
 8007bac:	d01f      	beq.n	8007bee <USBD_StdEPReq+0x1c6>
 8007bae:	7b7b      	ldrb	r3, [r7, #13]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d11c      	bne.n	8007bee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007bb4:	7b7a      	ldrb	r2, [r7, #13]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007bbc:	7b7a      	ldrb	r2, [r7, #13]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	32ae      	adds	r2, #174	; 0xae
 8007bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d010      	beq.n	8007bee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bcc:	7b7a      	ldrb	r2, [r7, #13]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	32ae      	adds	r2, #174	; 0xae
 8007bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	4798      	blx	r3
 8007bde:	4603      	mov	r3, r0
 8007be0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007be2:	e004      	b.n	8007bee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fc03 	bl	80083f2 <USBD_CtlError>
              break;
 8007bec:	e000      	b.n	8007bf0 <USBD_StdEPReq+0x1c8>
              break;
 8007bee:	bf00      	nop
          }
          break;
 8007bf0:	e0ab      	b.n	8007d4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d002      	beq.n	8007c04 <USBD_StdEPReq+0x1dc>
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d032      	beq.n	8007c68 <USBD_StdEPReq+0x240>
 8007c02:	e097      	b.n	8007d34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d007      	beq.n	8007c1a <USBD_StdEPReq+0x1f2>
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	2b80      	cmp	r3, #128	; 0x80
 8007c0e:	d004      	beq.n	8007c1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fbed 	bl	80083f2 <USBD_CtlError>
                break;
 8007c18:	e091      	b.n	8007d3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da0b      	bge.n	8007c3a <USBD_StdEPReq+0x212>
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	3310      	adds	r3, #16
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	4413      	add	r3, r2
 8007c36:	3304      	adds	r3, #4
 8007c38:	e00b      	b.n	8007c52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c40:	4613      	mov	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	4413      	add	r3, r2
 8007c50:	3304      	adds	r3, #4
 8007c52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fc37 	bl	80084d4 <USBD_CtlSendData>
              break;
 8007c66:	e06a      	b.n	8007d3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	da11      	bge.n	8007c94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	f003 020f 	and.w	r2, r3, #15
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	440b      	add	r3, r1
 8007c82:	3324      	adds	r3, #36	; 0x24
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d117      	bne.n	8007cba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fbb0 	bl	80083f2 <USBD_CtlError>
                  break;
 8007c92:	e054      	b.n	8007d3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	f003 020f 	and.w	r2, r3, #15
 8007c9a:	6879      	ldr	r1, [r7, #4]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	440b      	add	r3, r1
 8007ca6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d104      	bne.n	8007cba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fb9d 	bl	80083f2 <USBD_CtlError>
                  break;
 8007cb8:	e041      	b.n	8007d3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	da0b      	bge.n	8007cda <USBD_StdEPReq+0x2b2>
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cc8:	4613      	mov	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	3310      	adds	r3, #16
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	e00b      	b.n	8007cf2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
 8007cdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	4413      	add	r3, r2
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <USBD_StdEPReq+0x2d8>
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
 8007cfc:	2b80      	cmp	r3, #128	; 0x80
 8007cfe:	d103      	bne.n	8007d08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	e00e      	b.n	8007d26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f001 f8b7 	bl	8008e80 <USBD_LL_IsStallEP>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	e002      	b.n	8007d26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fbd1 	bl	80084d4 <USBD_CtlSendData>
              break;
 8007d32:	e004      	b.n	8007d3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fb5b 	bl	80083f2 <USBD_CtlError>
              break;
 8007d3c:	bf00      	nop
          }
          break;
 8007d3e:	e004      	b.n	8007d4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fb55 	bl	80083f2 <USBD_CtlError>
          break;
 8007d48:	bf00      	nop
      }
      break;
 8007d4a:	e005      	b.n	8007d58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fb4f 	bl	80083f2 <USBD_CtlError>
      break;
 8007d54:	e000      	b.n	8007d58 <USBD_StdEPReq+0x330>
      break;
 8007d56:	bf00      	nop
  }

  return ret;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	885b      	ldrh	r3, [r3, #2]
 8007d7e:	0a1b      	lsrs	r3, r3, #8
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	2b06      	cmp	r3, #6
 8007d86:	f200 8128 	bhi.w	8007fda <USBD_GetDescriptor+0x276>
 8007d8a:	a201      	add	r2, pc, #4	; (adr r2, 8007d90 <USBD_GetDescriptor+0x2c>)
 8007d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d90:	08007dad 	.word	0x08007dad
 8007d94:	08007dc5 	.word	0x08007dc5
 8007d98:	08007e05 	.word	0x08007e05
 8007d9c:	08007fdb 	.word	0x08007fdb
 8007da0:	08007fdb 	.word	0x08007fdb
 8007da4:	08007f7b 	.word	0x08007f7b
 8007da8:	08007fa7 	.word	0x08007fa7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	7c12      	ldrb	r2, [r2, #16]
 8007db8:	f107 0108 	add.w	r1, r7, #8
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
 8007dc0:	60f8      	str	r0, [r7, #12]
      break;
 8007dc2:	e112      	b.n	8007fea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	7c1b      	ldrb	r3, [r3, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10d      	bne.n	8007de8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	f107 0208 	add.w	r2, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3301      	adds	r3, #1
 8007de2:	2202      	movs	r2, #2
 8007de4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007de6:	e100      	b.n	8007fea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	f107 0208 	add.w	r2, r7, #8
 8007df4:	4610      	mov	r0, r2
 8007df6:	4798      	blx	r3
 8007df8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	2202      	movs	r2, #2
 8007e00:	701a      	strb	r2, [r3, #0]
      break;
 8007e02:	e0f2      	b.n	8007fea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	885b      	ldrh	r3, [r3, #2]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b05      	cmp	r3, #5
 8007e0c:	f200 80ac 	bhi.w	8007f68 <USBD_GetDescriptor+0x204>
 8007e10:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <USBD_GetDescriptor+0xb4>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e31 	.word	0x08007e31
 8007e1c:	08007e65 	.word	0x08007e65
 8007e20:	08007e99 	.word	0x08007e99
 8007e24:	08007ecd 	.word	0x08007ecd
 8007e28:	08007f01 	.word	0x08007f01
 8007e2c:	08007f35 	.word	0x08007f35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	7c12      	ldrb	r2, [r2, #16]
 8007e48:	f107 0108 	add.w	r1, r7, #8
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
 8007e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e52:	e091      	b.n	8007f78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 facb 	bl	80083f2 <USBD_CtlError>
            err++;
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	72fb      	strb	r3, [r7, #11]
          break;
 8007e62:	e089      	b.n	8007f78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	7c12      	ldrb	r2, [r2, #16]
 8007e7c:	f107 0108 	add.w	r1, r7, #8
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
 8007e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e86:	e077      	b.n	8007f78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fab1 	bl	80083f2 <USBD_CtlError>
            err++;
 8007e90:	7afb      	ldrb	r3, [r7, #11]
 8007e92:	3301      	adds	r3, #1
 8007e94:	72fb      	strb	r3, [r7, #11]
          break;
 8007e96:	e06f      	b.n	8007f78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	7c12      	ldrb	r2, [r2, #16]
 8007eb0:	f107 0108 	add.w	r1, r7, #8
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eba:	e05d      	b.n	8007f78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa97 	bl	80083f2 <USBD_CtlError>
            err++;
 8007ec4:	7afb      	ldrb	r3, [r7, #11]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eca:	e055      	b.n	8007f78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00b      	beq.n	8007ef0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	7c12      	ldrb	r2, [r2, #16]
 8007ee4:	f107 0108 	add.w	r1, r7, #8
 8007ee8:	4610      	mov	r0, r2
 8007eea:	4798      	blx	r3
 8007eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eee:	e043      	b.n	8007f78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fa7d 	bl	80083f2 <USBD_CtlError>
            err++;
 8007ef8:	7afb      	ldrb	r3, [r7, #11]
 8007efa:	3301      	adds	r3, #1
 8007efc:	72fb      	strb	r3, [r7, #11]
          break;
 8007efe:	e03b      	b.n	8007f78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00b      	beq.n	8007f24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	7c12      	ldrb	r2, [r2, #16]
 8007f18:	f107 0108 	add.w	r1, r7, #8
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4798      	blx	r3
 8007f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f22:	e029      	b.n	8007f78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa63 	bl	80083f2 <USBD_CtlError>
            err++;
 8007f2c:	7afb      	ldrb	r3, [r7, #11]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	72fb      	strb	r3, [r7, #11]
          break;
 8007f32:	e021      	b.n	8007f78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00b      	beq.n	8007f58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	7c12      	ldrb	r2, [r2, #16]
 8007f4c:	f107 0108 	add.w	r1, r7, #8
 8007f50:	4610      	mov	r0, r2
 8007f52:	4798      	blx	r3
 8007f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f56:	e00f      	b.n	8007f78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fa49 	bl	80083f2 <USBD_CtlError>
            err++;
 8007f60:	7afb      	ldrb	r3, [r7, #11]
 8007f62:	3301      	adds	r3, #1
 8007f64:	72fb      	strb	r3, [r7, #11]
          break;
 8007f66:	e007      	b.n	8007f78 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa41 	bl	80083f2 <USBD_CtlError>
          err++;
 8007f70:	7afb      	ldrb	r3, [r7, #11]
 8007f72:	3301      	adds	r3, #1
 8007f74:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f76:	bf00      	nop
      }
      break;
 8007f78:	e037      	b.n	8007fea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7c1b      	ldrb	r3, [r3, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d109      	bne.n	8007f96 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8a:	f107 0208 	add.w	r2, r7, #8
 8007f8e:	4610      	mov	r0, r2
 8007f90:	4798      	blx	r3
 8007f92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f94:	e029      	b.n	8007fea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa2a 	bl	80083f2 <USBD_CtlError>
        err++;
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	72fb      	strb	r3, [r7, #11]
      break;
 8007fa4:	e021      	b.n	8007fea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	7c1b      	ldrb	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10d      	bne.n	8007fca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb6:	f107 0208 	add.w	r2, r7, #8
 8007fba:	4610      	mov	r0, r2
 8007fbc:	4798      	blx	r3
 8007fbe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	2207      	movs	r2, #7
 8007fc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fc8:	e00f      	b.n	8007fea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fa10 	bl	80083f2 <USBD_CtlError>
        err++;
 8007fd2:	7afb      	ldrb	r3, [r7, #11]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	72fb      	strb	r3, [r7, #11]
      break;
 8007fd8:	e007      	b.n	8007fea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fa08 	bl	80083f2 <USBD_CtlError>
      err++;
 8007fe2:	7afb      	ldrb	r3, [r7, #11]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	72fb      	strb	r3, [r7, #11]
      break;
 8007fe8:	bf00      	nop
  }

  if (err != 0U)
 8007fea:	7afb      	ldrb	r3, [r7, #11]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d11e      	bne.n	800802e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	88db      	ldrh	r3, [r3, #6]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d016      	beq.n	8008026 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ff8:	893b      	ldrh	r3, [r7, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00e      	beq.n	800801c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	88da      	ldrh	r2, [r3, #6]
 8008002:	893b      	ldrh	r3, [r7, #8]
 8008004:	4293      	cmp	r3, r2
 8008006:	bf28      	it	cs
 8008008:	4613      	movcs	r3, r2
 800800a:	b29b      	uxth	r3, r3
 800800c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800800e:	893b      	ldrh	r3, [r7, #8]
 8008010:	461a      	mov	r2, r3
 8008012:	68f9      	ldr	r1, [r7, #12]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fa5d 	bl	80084d4 <USBD_CtlSendData>
 800801a:	e009      	b.n	8008030 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f9e7 	bl	80083f2 <USBD_CtlError>
 8008024:	e004      	b.n	8008030 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 faae 	bl	8008588 <USBD_CtlSendStatus>
 800802c:	e000      	b.n	8008030 <USBD_GetDescriptor+0x2cc>
    return;
 800802e:	bf00      	nop
  }
}
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop

08008038 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	889b      	ldrh	r3, [r3, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d131      	bne.n	80080ae <USBD_SetAddress+0x76>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	88db      	ldrh	r3, [r3, #6]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d12d      	bne.n	80080ae <USBD_SetAddress+0x76>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	885b      	ldrh	r3, [r3, #2]
 8008056:	2b7f      	cmp	r3, #127	; 0x7f
 8008058:	d829      	bhi.n	80080ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	885b      	ldrh	r3, [r3, #2]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008064:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b03      	cmp	r3, #3
 8008070:	d104      	bne.n	800807c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f9bc 	bl	80083f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807a:	e01d      	b.n	80080b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	7bfa      	ldrb	r2, [r7, #15]
 8008080:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 ff25 	bl	8008ed8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa7a 	bl	8008588 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2202      	movs	r2, #2
 800809e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a2:	e009      	b.n	80080b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ac:	e004      	b.n	80080b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f99e 	bl	80083f2 <USBD_CtlError>
  }
}
 80080b6:	bf00      	nop
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	885b      	ldrh	r3, [r3, #2]
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	4b4e      	ldr	r3, [pc, #312]	; (8008210 <USBD_SetConfig+0x150>)
 80080d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080d8:	4b4d      	ldr	r3, [pc, #308]	; (8008210 <USBD_SetConfig+0x150>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d905      	bls.n	80080ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f985 	bl	80083f2 <USBD_CtlError>
    return USBD_FAIL;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e08c      	b.n	8008206 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d002      	beq.n	80080fe <USBD_SetConfig+0x3e>
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d029      	beq.n	8008150 <USBD_SetConfig+0x90>
 80080fc:	e075      	b.n	80081ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80080fe:	4b44      	ldr	r3, [pc, #272]	; (8008210 <USBD_SetConfig+0x150>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d020      	beq.n	8008148 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008106:	4b42      	ldr	r3, [pc, #264]	; (8008210 <USBD_SetConfig+0x150>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008110:	4b3f      	ldr	r3, [pc, #252]	; (8008210 <USBD_SetConfig+0x150>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fe ffe7 	bl	80070ea <USBD_SetClassConfig>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d008      	beq.n	8008138 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f962 	bl	80083f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2202      	movs	r2, #2
 8008132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008136:	e065      	b.n	8008204 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa25 	bl	8008588 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2203      	movs	r2, #3
 8008142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008146:	e05d      	b.n	8008204 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fa1d 	bl	8008588 <USBD_CtlSendStatus>
      break;
 800814e:	e059      	b.n	8008204 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008150:	4b2f      	ldr	r3, [pc, #188]	; (8008210 <USBD_SetConfig+0x150>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d112      	bne.n	800817e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008160:	4b2b      	ldr	r3, [pc, #172]	; (8008210 <USBD_SetConfig+0x150>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800816a:	4b29      	ldr	r3, [pc, #164]	; (8008210 <USBD_SetConfig+0x150>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7fe ffd6 	bl	8007122 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fa06 	bl	8008588 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800817c:	e042      	b.n	8008204 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800817e:	4b24      	ldr	r3, [pc, #144]	; (8008210 <USBD_SetConfig+0x150>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	429a      	cmp	r2, r3
 800818a:	d02a      	beq.n	80081e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7fe ffc4 	bl	8007122 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800819a:	4b1d      	ldr	r3, [pc, #116]	; (8008210 <USBD_SetConfig+0x150>)
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081a4:	4b1a      	ldr	r3, [pc, #104]	; (8008210 <USBD_SetConfig+0x150>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7fe ff9d 	bl	80070ea <USBD_SetClassConfig>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00f      	beq.n	80081da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f918 	bl	80083f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7fe ffa9 	bl	8007122 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081d8:	e014      	b.n	8008204 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f9d4 	bl	8008588 <USBD_CtlSendStatus>
      break;
 80081e0:	e010      	b.n	8008204 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f9d0 	bl	8008588 <USBD_CtlSendStatus>
      break;
 80081e8:	e00c      	b.n	8008204 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f900 	bl	80083f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081f2:	4b07      	ldr	r3, [pc, #28]	; (8008210 <USBD_SetConfig+0x150>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7fe ff92 	bl	8007122 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80081fe:	2303      	movs	r3, #3
 8008200:	73fb      	strb	r3, [r7, #15]
      break;
 8008202:	bf00      	nop
  }

  return ret;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20000494 	.word	0x20000494

08008214 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	88db      	ldrh	r3, [r3, #6]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d004      	beq.n	8008230 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f8e2 	bl	80083f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800822e:	e023      	b.n	8008278 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	dc02      	bgt.n	8008242 <USBD_GetConfig+0x2e>
 800823c:	2b00      	cmp	r3, #0
 800823e:	dc03      	bgt.n	8008248 <USBD_GetConfig+0x34>
 8008240:	e015      	b.n	800826e <USBD_GetConfig+0x5a>
 8008242:	2b03      	cmp	r3, #3
 8008244:	d00b      	beq.n	800825e <USBD_GetConfig+0x4a>
 8008246:	e012      	b.n	800826e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	3308      	adds	r3, #8
 8008252:	2201      	movs	r2, #1
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f93c 	bl	80084d4 <USBD_CtlSendData>
        break;
 800825c:	e00c      	b.n	8008278 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3304      	adds	r3, #4
 8008262:	2201      	movs	r2, #1
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f934 	bl	80084d4 <USBD_CtlSendData>
        break;
 800826c:	e004      	b.n	8008278 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f8be 	bl	80083f2 <USBD_CtlError>
        break;
 8008276:	bf00      	nop
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008290:	b2db      	uxtb	r3, r3
 8008292:	3b01      	subs	r3, #1
 8008294:	2b02      	cmp	r3, #2
 8008296:	d81e      	bhi.n	80082d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	88db      	ldrh	r3, [r3, #6]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d004      	beq.n	80082aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f8a5 	bl	80083f2 <USBD_CtlError>
        break;
 80082a8:	e01a      	b.n	80082e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f043 0202 	orr.w	r2, r3, #2
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	330c      	adds	r3, #12
 80082ca:	2202      	movs	r2, #2
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f900 	bl	80084d4 <USBD_CtlSendData>
      break;
 80082d4:	e004      	b.n	80082e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f88a 	bl	80083f2 <USBD_CtlError>
      break;
 80082de:	bf00      	nop
  }
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	885b      	ldrh	r3, [r3, #2]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d107      	bne.n	800830a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f940 	bl	8008588 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008308:	e013      	b.n	8008332 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	885b      	ldrh	r3, [r3, #2]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d10b      	bne.n	800832a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	889b      	ldrh	r3, [r3, #4]
 8008316:	0a1b      	lsrs	r3, r3, #8
 8008318:	b29b      	uxth	r3, r3
 800831a:	b2da      	uxtb	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f930 	bl	8008588 <USBD_CtlSendStatus>
}
 8008328:	e003      	b.n	8008332 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f860 	bl	80083f2 <USBD_CtlError>
}
 8008332:	bf00      	nop
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834a:	b2db      	uxtb	r3, r3
 800834c:	3b01      	subs	r3, #1
 800834e:	2b02      	cmp	r3, #2
 8008350:	d80b      	bhi.n	800836a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	885b      	ldrh	r3, [r3, #2]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d10c      	bne.n	8008374 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f910 	bl	8008588 <USBD_CtlSendStatus>
      }
      break;
 8008368:	e004      	b.n	8008374 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f840 	bl	80083f2 <USBD_CtlError>
      break;
 8008372:	e000      	b.n	8008376 <USBD_ClrFeature+0x3c>
      break;
 8008374:	bf00      	nop
  }
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	781a      	ldrb	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3301      	adds	r3, #1
 8008398:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	781a      	ldrb	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3301      	adds	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fa41 	bl	8007830 <SWAPBYTE>
 80083ae:	4603      	mov	r3, r0
 80083b0:	461a      	mov	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3301      	adds	r3, #1
 80083ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff fa34 	bl	8007830 <SWAPBYTE>
 80083c8:	4603      	mov	r3, r0
 80083ca:	461a      	mov	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3301      	adds	r3, #1
 80083d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3301      	adds	r3, #1
 80083da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fa27 	bl	8007830 <SWAPBYTE>
 80083e2:	4603      	mov	r3, r0
 80083e4:	461a      	mov	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	80da      	strh	r2, [r3, #6]
}
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083fc:	2180      	movs	r1, #128	; 0x80
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fd00 	bl	8008e04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008404:	2100      	movs	r1, #0
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fcfc 	bl	8008e04 <USBD_LL_StallEP>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d036      	beq.n	8008498 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800842e:	6938      	ldr	r0, [r7, #16]
 8008430:	f000 f836 	bl	80084a0 <USBD_GetLen>
 8008434:	4603      	mov	r3, r0
 8008436:	3301      	adds	r3, #1
 8008438:	b29b      	uxth	r3, r3
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	b29a      	uxth	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008442:	7dfb      	ldrb	r3, [r7, #23]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	4413      	add	r3, r2
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	7812      	ldrb	r2, [r2, #0]
 800844c:	701a      	strb	r2, [r3, #0]
  idx++;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
 8008450:	3301      	adds	r3, #1
 8008452:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	4413      	add	r3, r2
 800845a:	2203      	movs	r2, #3
 800845c:	701a      	strb	r2, [r3, #0]
  idx++;
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	3301      	adds	r3, #1
 8008462:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008464:	e013      	b.n	800848e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	4413      	add	r3, r2
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	7812      	ldrb	r2, [r2, #0]
 8008470:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	3301      	adds	r3, #1
 8008476:	613b      	str	r3, [r7, #16]
    idx++;
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	3301      	adds	r3, #1
 800847c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	4413      	add	r3, r2
 8008484:	2200      	movs	r2, #0
 8008486:	701a      	strb	r2, [r3, #0]
    idx++;
 8008488:	7dfb      	ldrb	r3, [r7, #23]
 800848a:	3301      	adds	r3, #1
 800848c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e7      	bne.n	8008466 <USBD_GetString+0x52>
 8008496:	e000      	b.n	800849a <USBD_GetString+0x86>
    return;
 8008498:	bf00      	nop
  }
}
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084b0:	e005      	b.n	80084be <USBD_GetLen+0x1e>
  {
    len++;
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	3301      	adds	r3, #1
 80084b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	3301      	adds	r3, #1
 80084bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1f5      	bne.n	80084b2 <USBD_GetLen+0x12>
  }

  return len;
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	2100      	movs	r1, #0
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 fd0b 	bl	8008f16 <USBD_LL_Transmit>

  return USBD_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	2100      	movs	r1, #0
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 fcfa 	bl	8008f16 <USBD_LL_Transmit>

  return USBD_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2203      	movs	r2, #3
 800853c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	2100      	movs	r1, #0
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 fcfe 	bl	8008f58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	2100      	movs	r1, #0
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 fced 	bl	8008f58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2204      	movs	r2, #4
 8008594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008598:	2300      	movs	r3, #0
 800859a:	2200      	movs	r2, #0
 800859c:	2100      	movs	r1, #0
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fcb9 	bl	8008f16 <USBD_LL_Transmit>

  return USBD_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b082      	sub	sp, #8
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2205      	movs	r2, #5
 80085ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085be:	2300      	movs	r3, #0
 80085c0:	2200      	movs	r2, #0
 80085c2:	2100      	movs	r1, #0
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fcc7 	bl	8008f58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085d8:	2200      	movs	r2, #0
 80085da:	4912      	ldr	r1, [pc, #72]	; (8008624 <MX_USB_DEVICE_Init+0x50>)
 80085dc:	4812      	ldr	r0, [pc, #72]	; (8008628 <MX_USB_DEVICE_Init+0x54>)
 80085de:	f7fe fd07 	bl	8006ff0 <USBD_Init>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085e8:	f7f8 fa00 	bl	80009ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80085ec:	490f      	ldr	r1, [pc, #60]	; (800862c <MX_USB_DEVICE_Init+0x58>)
 80085ee:	480e      	ldr	r0, [pc, #56]	; (8008628 <MX_USB_DEVICE_Init+0x54>)
 80085f0:	f7fe fd2e 	bl	8007050 <USBD_RegisterClass>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085fa:	f7f8 f9f7 	bl	80009ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085fe:	490c      	ldr	r1, [pc, #48]	; (8008630 <MX_USB_DEVICE_Init+0x5c>)
 8008600:	4809      	ldr	r0, [pc, #36]	; (8008628 <MX_USB_DEVICE_Init+0x54>)
 8008602:	f7fe fc1f 	bl	8006e44 <USBD_CDC_RegisterInterface>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800860c:	f7f8 f9ee 	bl	80009ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008610:	4805      	ldr	r0, [pc, #20]	; (8008628 <MX_USB_DEVICE_Init+0x54>)
 8008612:	f7fe fd53 	bl	80070bc <USBD_Start>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800861c:	f7f8 f9e6 	bl	80009ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008620:	bf00      	nop
 8008622:	bd80      	pop	{r7, pc}
 8008624:	200000ac 	.word	0x200000ac
 8008628:	20000498 	.word	0x20000498
 800862c:	20000018 	.word	0x20000018
 8008630:	20000098 	.word	0x20000098

08008634 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008638:	2200      	movs	r2, #0
 800863a:	4905      	ldr	r1, [pc, #20]	; (8008650 <CDC_Init_FS+0x1c>)
 800863c:	4805      	ldr	r0, [pc, #20]	; (8008654 <CDC_Init_FS+0x20>)
 800863e:	f7fe fc1b 	bl	8006e78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008642:	4905      	ldr	r1, [pc, #20]	; (8008658 <CDC_Init_FS+0x24>)
 8008644:	4803      	ldr	r0, [pc, #12]	; (8008654 <CDC_Init_FS+0x20>)
 8008646:	f7fe fc39 	bl	8006ebc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800864a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800864c:	4618      	mov	r0, r3
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000f74 	.word	0x20000f74
 8008654:	20000498 	.word	0x20000498
 8008658:	20000774 	.word	0x20000774

0800865c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008660:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008662:	4618      	mov	r0, r3
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	6039      	str	r1, [r7, #0]
 8008676:	71fb      	strb	r3, [r7, #7]
 8008678:	4613      	mov	r3, r2
 800867a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800867c:	79fb      	ldrb	r3, [r7, #7]
 800867e:	2b23      	cmp	r3, #35	; 0x23
 8008680:	d84a      	bhi.n	8008718 <CDC_Control_FS+0xac>
 8008682:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <CDC_Control_FS+0x1c>)
 8008684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008688:	08008719 	.word	0x08008719
 800868c:	08008719 	.word	0x08008719
 8008690:	08008719 	.word	0x08008719
 8008694:	08008719 	.word	0x08008719
 8008698:	08008719 	.word	0x08008719
 800869c:	08008719 	.word	0x08008719
 80086a0:	08008719 	.word	0x08008719
 80086a4:	08008719 	.word	0x08008719
 80086a8:	08008719 	.word	0x08008719
 80086ac:	08008719 	.word	0x08008719
 80086b0:	08008719 	.word	0x08008719
 80086b4:	08008719 	.word	0x08008719
 80086b8:	08008719 	.word	0x08008719
 80086bc:	08008719 	.word	0x08008719
 80086c0:	08008719 	.word	0x08008719
 80086c4:	08008719 	.word	0x08008719
 80086c8:	08008719 	.word	0x08008719
 80086cc:	08008719 	.word	0x08008719
 80086d0:	08008719 	.word	0x08008719
 80086d4:	08008719 	.word	0x08008719
 80086d8:	08008719 	.word	0x08008719
 80086dc:	08008719 	.word	0x08008719
 80086e0:	08008719 	.word	0x08008719
 80086e4:	08008719 	.word	0x08008719
 80086e8:	08008719 	.word	0x08008719
 80086ec:	08008719 	.word	0x08008719
 80086f0:	08008719 	.word	0x08008719
 80086f4:	08008719 	.word	0x08008719
 80086f8:	08008719 	.word	0x08008719
 80086fc:	08008719 	.word	0x08008719
 8008700:	08008719 	.word	0x08008719
 8008704:	08008719 	.word	0x08008719
 8008708:	08008719 	.word	0x08008719
 800870c:	08008719 	.word	0x08008719
 8008710:	08008719 	.word	0x08008719
 8008714:	08008719 	.word	0x08008719
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008718:	bf00      	nop
  }

  return (USBD_OK);
 800871a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	480b      	ldr	r0, [pc, #44]	; (8008764 <CDC_Receive_FS+0x3c>)
 8008736:	f7fe fbc1 	bl	8006ebc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800873a:	480a      	ldr	r0, [pc, #40]	; (8008764 <CDC_Receive_FS+0x3c>)
 800873c:	f7fe fc22 	bl	8006f84 <USBD_CDC_ReceivePacket>
	//Set the received packet length
	cdcHandeler.cdcRxPacketSize = *Len;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	b29a      	uxth	r2, r3
 8008746:	4b08      	ldr	r3, [pc, #32]	; (8008768 <CDC_Receive_FS+0x40>)
 8008748:	811a      	strh	r2, [r3, #8]

	cdcHandeler.cbCdcRxPacket((char*)cdcHandeler.pCdcRxBuffer, cdcHandeler.cdcRxPacketSize);
 800874a:	4b07      	ldr	r3, [pc, #28]	; (8008768 <CDC_Receive_FS+0x40>)
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	4a06      	ldr	r2, [pc, #24]	; (8008768 <CDC_Receive_FS+0x40>)
 8008750:	6812      	ldr	r2, [r2, #0]
 8008752:	4905      	ldr	r1, [pc, #20]	; (8008768 <CDC_Receive_FS+0x40>)
 8008754:	8909      	ldrh	r1, [r1, #8]
 8008756:	4610      	mov	r0, r2
 8008758:	4798      	blx	r3

	return (USBD_OK);
 800875a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	20000498 	.word	0x20000498
 8008768:	20001774 	.word	0x20001774

0800876c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800877c:	4b0d      	ldr	r3, [pc, #52]	; (80087b4 <CDC_Transmit_FS+0x48>)
 800877e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008782:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800878e:	2301      	movs	r3, #1
 8008790:	e00b      	b.n	80087aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008792:	887b      	ldrh	r3, [r7, #2]
 8008794:	461a      	mov	r2, r3
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4806      	ldr	r0, [pc, #24]	; (80087b4 <CDC_Transmit_FS+0x48>)
 800879a:	f7fe fb6d 	bl	8006e78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800879e:	4805      	ldr	r0, [pc, #20]	; (80087b4 <CDC_Transmit_FS+0x48>)
 80087a0:	f7fe fbaa 	bl	8006ef8 <USBD_CDC_TransmitPacket>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000498 	.word	0x20000498

080087b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	4613      	mov	r3, r2
 80087c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80087ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	371c      	adds	r7, #28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <CDC_Handler_Init_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Handler_Init_FS	(void* cdcRxCallback)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
	memset(&cdcHandeler, 0, sizeof(hCdcBuffer_t));
 80087e4:	2210      	movs	r2, #16
 80087e6:	2100      	movs	r1, #0
 80087e8:	4807      	ldr	r0, [pc, #28]	; (8008808 <CDC_Handler_Init_FS+0x2c>)
 80087ea:	f000 fdbd 	bl	8009368 <memset>

	cdcHandeler.cbCdcRxPacket = cdcRxCallback;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a05      	ldr	r2, [pc, #20]	; (8008808 <CDC_Handler_Init_FS+0x2c>)
 80087f2:	60d3      	str	r3, [r2, #12]

	cdcHandeler.pCdcRxBuffer = UserRxBufferFS;
 80087f4:	4b04      	ldr	r3, [pc, #16]	; (8008808 <CDC_Handler_Init_FS+0x2c>)
 80087f6:	4a05      	ldr	r2, [pc, #20]	; (800880c <CDC_Handler_Init_FS+0x30>)
 80087f8:	601a      	str	r2, [r3, #0]

	cdcHandeler.pCdcTxBuffer = UserTxBufferFS;
 80087fa:	4b03      	ldr	r3, [pc, #12]	; (8008808 <CDC_Handler_Init_FS+0x2c>)
 80087fc:	4a04      	ldr	r2, [pc, #16]	; (8008810 <CDC_Handler_Init_FS+0x34>)
 80087fe:	605a      	str	r2, [r3, #4]
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20001774 	.word	0x20001774
 800880c:	20000774 	.word	0x20000774
 8008810:	20000f74 	.word	0x20000f74

08008814 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	6039      	str	r1, [r7, #0]
 800881e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2212      	movs	r2, #18
 8008824:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008826:	4b03      	ldr	r3, [pc, #12]	; (8008834 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	200000c8 	.word	0x200000c8

08008838 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	6039      	str	r1, [r7, #0]
 8008842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2204      	movs	r2, #4
 8008848:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800884a:	4b03      	ldr	r3, [pc, #12]	; (8008858 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	200000dc 	.word	0x200000dc

0800885c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	6039      	str	r1, [r7, #0]
 8008866:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008868:	79fb      	ldrb	r3, [r7, #7]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d105      	bne.n	800887a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	4907      	ldr	r1, [pc, #28]	; (8008890 <USBD_FS_ProductStrDescriptor+0x34>)
 8008872:	4808      	ldr	r0, [pc, #32]	; (8008894 <USBD_FS_ProductStrDescriptor+0x38>)
 8008874:	f7ff fdce 	bl	8008414 <USBD_GetString>
 8008878:	e004      	b.n	8008884 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	4904      	ldr	r1, [pc, #16]	; (8008890 <USBD_FS_ProductStrDescriptor+0x34>)
 800887e:	4805      	ldr	r0, [pc, #20]	; (8008894 <USBD_FS_ProductStrDescriptor+0x38>)
 8008880:	f7ff fdc8 	bl	8008414 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008884:	4b02      	ldr	r3, [pc, #8]	; (8008890 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20001784 	.word	0x20001784
 8008894:	08009c5c 	.word	0x08009c5c

08008898 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	6039      	str	r1, [r7, #0]
 80088a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	4904      	ldr	r1, [pc, #16]	; (80088b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80088a8:	4804      	ldr	r0, [pc, #16]	; (80088bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80088aa:	f7ff fdb3 	bl	8008414 <USBD_GetString>
  return USBD_StrDesc;
 80088ae:	4b02      	ldr	r3, [pc, #8]	; (80088b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20001784 	.word	0x20001784
 80088bc:	08009c68 	.word	0x08009c68

080088c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	6039      	str	r1, [r7, #0]
 80088ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	221a      	movs	r2, #26
 80088d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088d2:	f000 f843 	bl	800895c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088d6:	4b02      	ldr	r3, [pc, #8]	; (80088e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	200000e0 	.word	0x200000e0

080088e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	6039      	str	r1, [r7, #0]
 80088ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d105      	bne.n	8008902 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	4907      	ldr	r1, [pc, #28]	; (8008918 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088fa:	4808      	ldr	r0, [pc, #32]	; (800891c <USBD_FS_ConfigStrDescriptor+0x38>)
 80088fc:	f7ff fd8a 	bl	8008414 <USBD_GetString>
 8008900:	e004      	b.n	800890c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	4904      	ldr	r1, [pc, #16]	; (8008918 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008906:	4805      	ldr	r0, [pc, #20]	; (800891c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008908:	f7ff fd84 	bl	8008414 <USBD_GetString>
  }
  return USBD_StrDesc;
 800890c:	4b02      	ldr	r3, [pc, #8]	; (8008918 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20001784 	.word	0x20001784
 800891c:	08009c7c 	.word	0x08009c7c

08008920 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	4603      	mov	r3, r0
 8008928:	6039      	str	r1, [r7, #0]
 800892a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800892c:	79fb      	ldrb	r3, [r7, #7]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d105      	bne.n	800893e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	4907      	ldr	r1, [pc, #28]	; (8008954 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008936:	4808      	ldr	r0, [pc, #32]	; (8008958 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008938:	f7ff fd6c 	bl	8008414 <USBD_GetString>
 800893c:	e004      	b.n	8008948 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	4904      	ldr	r1, [pc, #16]	; (8008954 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008942:	4805      	ldr	r0, [pc, #20]	; (8008958 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008944:	f7ff fd66 	bl	8008414 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008948:	4b02      	ldr	r3, [pc, #8]	; (8008954 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20001784 	.word	0x20001784
 8008958:	08009c88 	.word	0x08009c88

0800895c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008962:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <Get_SerialNum+0x44>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008968:	4b0e      	ldr	r3, [pc, #56]	; (80089a4 <Get_SerialNum+0x48>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800896e:	4b0e      	ldr	r3, [pc, #56]	; (80089a8 <Get_SerialNum+0x4c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4413      	add	r3, r2
 800897a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008982:	2208      	movs	r2, #8
 8008984:	4909      	ldr	r1, [pc, #36]	; (80089ac <Get_SerialNum+0x50>)
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 f814 	bl	80089b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800898c:	2204      	movs	r2, #4
 800898e:	4908      	ldr	r1, [pc, #32]	; (80089b0 <Get_SerialNum+0x54>)
 8008990:	68b8      	ldr	r0, [r7, #8]
 8008992:	f000 f80f 	bl	80089b4 <IntToUnicode>
  }
}
 8008996:	bf00      	nop
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	1fff7a10 	.word	0x1fff7a10
 80089a4:	1fff7a14 	.word	0x1fff7a14
 80089a8:	1fff7a18 	.word	0x1fff7a18
 80089ac:	200000e2 	.word	0x200000e2
 80089b0:	200000f2 	.word	0x200000f2

080089b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4613      	mov	r3, r2
 80089c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80089c2:	2300      	movs	r3, #0
 80089c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089c6:	2300      	movs	r3, #0
 80089c8:	75fb      	strb	r3, [r7, #23]
 80089ca:	e027      	b.n	8008a1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	0f1b      	lsrs	r3, r3, #28
 80089d0:	2b09      	cmp	r3, #9
 80089d2:	d80b      	bhi.n	80089ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	0f1b      	lsrs	r3, r3, #28
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	7dfb      	ldrb	r3, [r7, #23]
 80089dc:	005b      	lsls	r3, r3, #1
 80089de:	4619      	mov	r1, r3
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	440b      	add	r3, r1
 80089e4:	3230      	adds	r2, #48	; 0x30
 80089e6:	b2d2      	uxtb	r2, r2
 80089e8:	701a      	strb	r2, [r3, #0]
 80089ea:	e00a      	b.n	8008a02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	0f1b      	lsrs	r3, r3, #28
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	4619      	mov	r1, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	440b      	add	r3, r1
 80089fc:	3237      	adds	r2, #55	; 0x37
 80089fe:	b2d2      	uxtb	r2, r2
 8008a00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	011b      	lsls	r3, r3, #4
 8008a06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	4413      	add	r3, r2
 8008a12:	2200      	movs	r2, #0
 8008a14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	75fb      	strb	r3, [r7, #23]
 8008a1c:	7dfa      	ldrb	r2, [r7, #23]
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d3d3      	bcc.n	80089cc <IntToUnicode+0x18>
  }
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
	...

08008a34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08a      	sub	sp, #40	; 0x28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a3c:	f107 0314 	add.w	r3, r7, #20
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	605a      	str	r2, [r3, #4]
 8008a46:	609a      	str	r2, [r3, #8]
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a54:	d13a      	bne.n	8008acc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a56:	2300      	movs	r3, #0
 8008a58:	613b      	str	r3, [r7, #16]
 8008a5a:	4b1e      	ldr	r3, [pc, #120]	; (8008ad4 <HAL_PCD_MspInit+0xa0>)
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5e:	4a1d      	ldr	r2, [pc, #116]	; (8008ad4 <HAL_PCD_MspInit+0xa0>)
 8008a60:	f043 0301 	orr.w	r3, r3, #1
 8008a64:	6313      	str	r3, [r2, #48]	; 0x30
 8008a66:	4b1b      	ldr	r3, [pc, #108]	; (8008ad4 <HAL_PCD_MspInit+0xa0>)
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	613b      	str	r3, [r7, #16]
 8008a70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a78:	2302      	movs	r3, #2
 8008a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a80:	2303      	movs	r3, #3
 8008a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a84:	230a      	movs	r3, #10
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a88:	f107 0314 	add.w	r3, r7, #20
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4812      	ldr	r0, [pc, #72]	; (8008ad8 <HAL_PCD_MspInit+0xa4>)
 8008a90:	f7f8 fefe 	bl	8001890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a94:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <HAL_PCD_MspInit+0xa0>)
 8008a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a98:	4a0e      	ldr	r2, [pc, #56]	; (8008ad4 <HAL_PCD_MspInit+0xa0>)
 8008a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9e:	6353      	str	r3, [r2, #52]	; 0x34
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <HAL_PCD_MspInit+0xa0>)
 8008aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa8:	4a0a      	ldr	r2, [pc, #40]	; (8008ad4 <HAL_PCD_MspInit+0xa0>)
 8008aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008aae:	6453      	str	r3, [r2, #68]	; 0x44
 8008ab0:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <HAL_PCD_MspInit+0xa0>)
 8008ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008abc:	2200      	movs	r2, #0
 8008abe:	2100      	movs	r1, #0
 8008ac0:	2043      	movs	r0, #67	; 0x43
 8008ac2:	f7f8 faac 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ac6:	2043      	movs	r0, #67	; 0x43
 8008ac8:	f7f8 fac5 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008acc:	bf00      	nop
 8008ace:	3728      	adds	r7, #40	; 0x28
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40023800 	.word	0x40023800
 8008ad8:	40020000 	.word	0x40020000

08008adc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008af0:	4619      	mov	r1, r3
 8008af2:	4610      	mov	r0, r2
 8008af4:	f7fe fb2f 	bl	8007156 <USBD_LL_SetupStage>
}
 8008af8:	bf00      	nop
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008b12:	78fa      	ldrb	r2, [r7, #3]
 8008b14:	6879      	ldr	r1, [r7, #4]
 8008b16:	4613      	mov	r3, r2
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	440b      	add	r3, r1
 8008b20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f7fe fb69 	bl	8007200 <USBD_LL_DataOutStage>
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008b48:	78fa      	ldrb	r2, [r7, #3]
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	00db      	lsls	r3, r3, #3
 8008b50:	4413      	add	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	440b      	add	r3, r1
 8008b56:	334c      	adds	r3, #76	; 0x4c
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	f7fe fc02 	bl	8007366 <USBD_LL_DataInStage>
}
 8008b62:	bf00      	nop
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe fd36 	bl	80075ea <USBD_LL_SOF>
}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d001      	beq.n	8008b9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b9a:	f7f7 ff27 	bl	80009ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ba4:	7bfa      	ldrb	r2, [r7, #15]
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe fce0 	bl	800756e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fc88 	bl	80074ca <USBD_LL_Reset>
}
 8008bba:	bf00      	nop
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe fcdb 	bl	800758e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	6812      	ldr	r2, [r2, #0]
 8008be6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bea:	f043 0301 	orr.w	r3, r3, #1
 8008bee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <HAL_PCD_SuspendCallback+0x48>)
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	4a03      	ldr	r2, [pc, #12]	; (8008c0c <HAL_PCD_SuspendCallback+0x48>)
 8008bfe:	f043 0306 	orr.w	r3, r3, #6
 8008c02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c04:	bf00      	nop
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	e000ed00 	.word	0xe000ed00

08008c10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fe fccb 	bl	80075ba <USBD_LL_Resume>
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c3e:	78fa      	ldrb	r2, [r7, #3]
 8008c40:	4611      	mov	r1, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe fd23 	bl	800768e <USBD_LL_IsoOUTIncomplete>
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c62:	78fa      	ldrb	r2, [r7, #3]
 8008c64:	4611      	mov	r1, r2
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fe fcdf 	bl	800762a <USBD_LL_IsoINIncomplete>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fd35 	bl	80076f2 <USBD_LL_DevConnected>
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe fd32 	bl	8007708 <USBD_LL_DevDisconnected>
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d13c      	bne.n	8008d36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008cbc:	4a20      	ldr	r2, [pc, #128]	; (8008d40 <USBD_LL_Init+0x94>)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a1e      	ldr	r2, [pc, #120]	; (8008d40 <USBD_LL_Init+0x94>)
 8008cc8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ccc:	4b1c      	ldr	r3, [pc, #112]	; (8008d40 <USBD_LL_Init+0x94>)
 8008cce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008cd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008cd4:	4b1a      	ldr	r3, [pc, #104]	; (8008d40 <USBD_LL_Init+0x94>)
 8008cd6:	2204      	movs	r2, #4
 8008cd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008cda:	4b19      	ldr	r3, [pc, #100]	; (8008d40 <USBD_LL_Init+0x94>)
 8008cdc:	2202      	movs	r2, #2
 8008cde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ce0:	4b17      	ldr	r3, [pc, #92]	; (8008d40 <USBD_LL_Init+0x94>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ce6:	4b16      	ldr	r3, [pc, #88]	; (8008d40 <USBD_LL_Init+0x94>)
 8008ce8:	2202      	movs	r2, #2
 8008cea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cec:	4b14      	ldr	r3, [pc, #80]	; (8008d40 <USBD_LL_Init+0x94>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cf2:	4b13      	ldr	r3, [pc, #76]	; (8008d40 <USBD_LL_Init+0x94>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008cf8:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <USBD_LL_Init+0x94>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008cfe:	4b10      	ldr	r3, [pc, #64]	; (8008d40 <USBD_LL_Init+0x94>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d04:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <USBD_LL_Init+0x94>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d0a:	480d      	ldr	r0, [pc, #52]	; (8008d40 <USBD_LL_Init+0x94>)
 8008d0c:	f7f8 ff5d 	bl	8001bca <HAL_PCD_Init>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d16:	f7f7 fe69 	bl	80009ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d1a:	2180      	movs	r1, #128	; 0x80
 8008d1c:	4808      	ldr	r0, [pc, #32]	; (8008d40 <USBD_LL_Init+0x94>)
 8008d1e:	f7fa f9b4 	bl	800308a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d22:	2240      	movs	r2, #64	; 0x40
 8008d24:	2100      	movs	r1, #0
 8008d26:	4806      	ldr	r0, [pc, #24]	; (8008d40 <USBD_LL_Init+0x94>)
 8008d28:	f7fa f968 	bl	8002ffc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d2c:	2280      	movs	r2, #128	; 0x80
 8008d2e:	2101      	movs	r1, #1
 8008d30:	4803      	ldr	r0, [pc, #12]	; (8008d40 <USBD_LL_Init+0x94>)
 8008d32:	f7fa f963 	bl	8002ffc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20001984 	.word	0x20001984

08008d44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7f9 f852 	bl	8001e04 <HAL_PCD_Start>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 f942 	bl	8008ff0 <USBD_Get_USB_Status>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	461a      	mov	r2, r3
 8008d88:	4603      	mov	r3, r0
 8008d8a:	70fb      	strb	r3, [r7, #3]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70bb      	strb	r3, [r7, #2]
 8008d90:	4613      	mov	r3, r2
 8008d92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008da2:	78bb      	ldrb	r3, [r7, #2]
 8008da4:	883a      	ldrh	r2, [r7, #0]
 8008da6:	78f9      	ldrb	r1, [r7, #3]
 8008da8:	f7f9 fd23 	bl	80027f2 <HAL_PCD_EP_Open>
 8008dac:	4603      	mov	r3, r0
 8008dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f91c 	bl	8008ff0 <USBD_Get_USB_Status>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	4611      	mov	r1, r2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7f9 fd6c 	bl	80028c2 <HAL_PCD_EP_Close>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 f8fd 	bl	8008ff0 <USBD_Get_USB_Status>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e1e:	78fa      	ldrb	r2, [r7, #3]
 8008e20:	4611      	mov	r1, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7f9 fe44 	bl	8002ab0 <HAL_PCD_EP_SetStall>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f8de 	bl	8008ff0 <USBD_Get_USB_Status>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e5c:	78fa      	ldrb	r2, [r7, #3]
 8008e5e:	4611      	mov	r1, r2
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f9 fe89 	bl	8002b78 <HAL_PCD_EP_ClrStall>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 f8bf 	bl	8008ff0 <USBD_Get_USB_Status>
 8008e72:	4603      	mov	r3, r0
 8008e74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	da0b      	bge.n	8008eb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e9c:	78fb      	ldrb	r3, [r7, #3]
 8008e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ea2:	68f9      	ldr	r1, [r7, #12]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	4413      	add	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	440b      	add	r3, r1
 8008eae:	333e      	adds	r3, #62	; 0x3e
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	e00b      	b.n	8008ecc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eba:	68f9      	ldr	r1, [r7, #12]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008eca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ef2:	78fa      	ldrb	r2, [r7, #3]
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7f9 fc56 	bl	80027a8 <HAL_PCD_SetAddress>
 8008efc:	4603      	mov	r3, r0
 8008efe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 f874 	bl	8008ff0 <USBD_Get_USB_Status>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b086      	sub	sp, #24
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	607a      	str	r2, [r7, #4]
 8008f20:	603b      	str	r3, [r7, #0]
 8008f22:	460b      	mov	r3, r1
 8008f24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f34:	7af9      	ldrb	r1, [r7, #11]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	f7f9 fd6f 	bl	8002a1c <HAL_PCD_EP_Transmit>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f853 	bl	8008ff0 <USBD_Get_USB_Status>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	607a      	str	r2, [r7, #4]
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	460b      	mov	r3, r1
 8008f66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f76:	7af9      	ldrb	r1, [r7, #11]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	f7f9 fceb 	bl	8002956 <HAL_PCD_EP_Receive>
 8008f80:	4603      	mov	r3, r0
 8008f82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f832 	bl	8008ff0 <USBD_Get_USB_Status>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f90:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fac:	78fa      	ldrb	r2, [r7, #3]
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7f9 fd1b 	bl	80029ec <HAL_PCD_EP_GetRxCount>
 8008fb6:	4603      	mov	r3, r0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fc8:	4b03      	ldr	r3, [pc, #12]	; (8008fd8 <USBD_static_malloc+0x18>)
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	20001e90 	.word	0x20001e90

08008fdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]

}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	2b03      	cmp	r3, #3
 8009002:	d817      	bhi.n	8009034 <USBD_Get_USB_Status+0x44>
 8009004:	a201      	add	r2, pc, #4	; (adr r2, 800900c <USBD_Get_USB_Status+0x1c>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	0800901d 	.word	0x0800901d
 8009010:	08009023 	.word	0x08009023
 8009014:	08009029 	.word	0x08009029
 8009018:	0800902f 	.word	0x0800902f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]
    break;
 8009020:	e00b      	b.n	800903a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009022:	2303      	movs	r3, #3
 8009024:	73fb      	strb	r3, [r7, #15]
    break;
 8009026:	e008      	b.n	800903a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009028:	2301      	movs	r3, #1
 800902a:	73fb      	strb	r3, [r7, #15]
    break;
 800902c:	e005      	b.n	800903a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800902e:	2303      	movs	r3, #3
 8009030:	73fb      	strb	r3, [r7, #15]
    break;
 8009032:	e002      	b.n	800903a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009034:	2303      	movs	r3, #3
 8009036:	73fb      	strb	r3, [r7, #15]
    break;
 8009038:	bf00      	nop
  }
  return usb_status;
 800903a:	7bfb      	ldrb	r3, [r7, #15]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <rybg211_bleModuleInit>:

/* PRIVATE FUNCTIONS DECLARATION ---------------------------------------------*/

/* FUNCTION PROTOTYPES -------------------------------------------------------*/
void rybg211_bleModuleInit(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
	memset(&hBleModule, 0, sizeof(hBleModule_t));
 800904c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009050:	2100      	movs	r1, #0
 8009052:	4805      	ldr	r0, [pc, #20]	; (8009068 <rybg211_bleModuleInit+0x20>)
 8009054:	f000 f988 	bl	8009368 <memset>

	HAL_GPIO_WritePin(BLE_MODULE_RESET_GPIO_PORT, BLE_MODULE_RESET_PIN, ENABLE);
 8009058:	2201      	movs	r2, #1
 800905a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800905e:	4803      	ldr	r0, [pc, #12]	; (800906c <rybg211_bleModuleInit+0x24>)
 8009060:	f7f8 fd9a 	bl	8001b98 <HAL_GPIO_WritePin>
}
 8009064:	bf00      	nop
 8009066:	bd80      	pop	{r7, pc}
 8009068:	200020b0 	.word	0x200020b0
 800906c:	40020400 	.word	0x40020400

08009070 <rybg211_setDeviceName>:

void rybg211_setDeviceName(char* moduleBuffer, char* nameString)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af04      	add	r7, sp, #16
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
	uint8_t nameStringSize = strlen(nameString);
 800907a:	6838      	ldr	r0, [r7, #0]
 800907c:	f7f7 f8b0 	bl	80001e0 <strlen>
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]

	memcpy(moduleBuffer ,BLE_NAME_SET, sizeof(BLE_NAME_SET));
 8009084:	2209      	movs	r2, #9
 8009086:	4910      	ldr	r1, [pc, #64]	; (80090c8 <rybg211_setDeviceName+0x58>)
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f95f 	bl	800934c <memcpy>

	sprintf((char*)moduleBuffer, "%s%d%s%s%s",BLE_NAME_SET,
 800908e:	7bfa      	ldrb	r2, [r7, #15]
 8009090:	4b0e      	ldr	r3, [pc, #56]	; (80090cc <rybg211_setDeviceName+0x5c>)
 8009092:	9302      	str	r3, [sp, #8]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <rybg211_setDeviceName+0x60>)
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	4613      	mov	r3, r2
 800909e:	4a0a      	ldr	r2, [pc, #40]	; (80090c8 <rybg211_setDeviceName+0x58>)
 80090a0:	490c      	ldr	r1, [pc, #48]	; (80090d4 <rybg211_setDeviceName+0x64>)
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f968 	bl	8009378 <siprintf>
										BLE_NEW_FIELD,
										nameString,
										BLE_CMD_TERM);


	hBleModule.txPacketSize = strlen((char*)moduleBuffer);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7f7 f899 	bl	80001e0 <strlen>
 80090ae:	4603      	mov	r3, r0
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <rybg211_setDeviceName+0x68>)
 80090b4:	805a      	strh	r2, [r3, #2]

	hBleModule.controlFlags.flag.packetToTransmit = ENABLE;
 80090b6:	4a08      	ldr	r2, [pc, #32]	; (80090d8 <rybg211_setDeviceName+0x68>)
 80090b8:	7813      	ldrb	r3, [r2, #0]
 80090ba:	f043 0302 	orr.w	r3, r3, #2
 80090be:	7013      	strb	r3, [r2, #0]
}
 80090c0:	bf00      	nop
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	08009c98 	.word	0x08009c98
 80090cc:	08009cb0 	.word	0x08009cb0
 80090d0:	08009cb4 	.word	0x08009cb4
 80090d4:	08009ca4 	.word	0x08009ca4
 80090d8:	200020b0 	.word	0x200020b0

080090dc <rybg211_rxPacketParser>:

uint8_t rybg211_rxPacketParser(char* moduleBuffer, uint8_t packetSize)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
	uint8_t packetToRead = false;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]

	if(0 == memcmp(moduleBuffer, BLE_DATA_RX, BLE_PARSER_CHAR_COUNT))
 80090ec:	2204      	movs	r2, #4
 80090ee:	4919      	ldr	r1, [pc, #100]	; (8009154 <rybg211_rxPacketParser+0x78>)
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f91b 	bl	800932c <memcmp>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d102      	bne.n	8009102 <rybg211_rxPacketParser+0x26>
	{
		//Activation to read the data part of the received packet.
		packetToRead = true;
 80090fc:	2301      	movs	r3, #1
 80090fe:	73fb      	strb	r3, [r7, #15]
 8009100:	e023      	b.n	800914a <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_CONNECTION,BLE_PARSER_CHAR_COUNT))
 8009102:	2204      	movs	r2, #4
 8009104:	4914      	ldr	r1, [pc, #80]	; (8009158 <rybg211_rxPacketParser+0x7c>)
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f910 	bl	800932c <memcmp>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10a      	bne.n	8009128 <rybg211_rxPacketParser+0x4c>
	{
		hBleModule.ConnectedDevice = moduleBuffer[6];
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	799a      	ldrb	r2, [r3, #6]
 8009116:	4b11      	ldr	r3, [pc, #68]	; (800915c <rybg211_rxPacketParser+0x80>)
 8009118:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 800911a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800911e:	2100      	movs	r1, #0
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f921 	bl	8009368 <memset>
 8009126:	e010      	b.n	800914a <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_DISCONNECTION, BLE_PARSER_CHAR_COUNT))
 8009128:	2204      	movs	r2, #4
 800912a:	490d      	ldr	r1, [pc, #52]	; (8009160 <rybg211_rxPacketParser+0x84>)
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f8fd 	bl	800932c <memcmp>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d108      	bne.n	800914a <rybg211_rxPacketParser+0x6e>
	{
		hBleModule.ConnectedDevice = 0;
 8009138:	4b08      	ldr	r3, [pc, #32]	; (800915c <rybg211_rxPacketParser+0x80>)
 800913a:	2200      	movs	r2, #0
 800913c:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 800913e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009142:	2100      	movs	r1, #0
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f90f 	bl	8009368 <memset>
	}

	return packetToRead;
 800914a:	7bfb      	ldrb	r3, [r7, #15]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	08009cb8 	.word	0x08009cb8
 8009158:	08009cc0 	.word	0x08009cc0
 800915c:	200020b0 	.word	0x200020b0
 8009160:	08009cc8 	.word	0x08009cc8

08009164 <asciiToValue>:
 * 						  stored in targetValue. the value stored in String won't be changed.
 *
 * @return	This function will return the number of found digits in the passed String.
 */
uint8_t asciiToValue(uint32_t* targetValue, uint8_t* String)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
	uint8_t 	digitCount  = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	75fb      	strb	r3, [r7, #23]
	uint32_t 	tempValue 	= 0;
 8009172:	2300      	movs	r3, #0
 8009174:	613b      	str	r3, [r7, #16]
	uint16_t 	tens 		= 0;
 8009176:	2300      	movs	r3, #0
 8009178:	81fb      	strh	r3, [r7, #14]
	//Count the number of digits in the string
	while(isdigit(String[digitCount]))
 800917a:	e002      	b.n	8009182 <asciiToValue+0x1e>
	{
		++digitCount;
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	3301      	adds	r3, #1
 8009180:	75fb      	strb	r3, [r7, #23]
	while(isdigit(String[digitCount]))
 8009182:	7dfb      	ldrb	r3, [r7, #23]
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	4413      	add	r3, r2
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	3301      	adds	r3, #1
 800918c:	4a26      	ldr	r2, [pc, #152]	; (8009228 <asciiToValue+0xc4>)
 800918e:	4413      	add	r3, r2
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	f003 0304 	and.w	r3, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1f0      	bne.n	800917c <asciiToValue+0x18>
	}
	//This check is done to prevent this function from execution if non alphanumeric string is passed to this function.
	if(0 != digitCount)
 800919a:	7dfb      	ldrb	r3, [r7, #23]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d03c      	beq.n	800921a <asciiToValue+0xb6>
	{
		//Operation fix
		digitCount -= 1;
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	75fb      	strb	r3, [r7, #23]
		//determines the multiplications of tens
		tens = digitCount == ONE_DIGIT   ? 1   : tens;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <asciiToValue+0x4c>
 80091ac:	89fb      	ldrh	r3, [r7, #14]
 80091ae:	e000      	b.n	80091b2 <asciiToValue+0x4e>
 80091b0:	2301      	movs	r3, #1
 80091b2:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == TWO_DIGIT   ? 10  : tens;
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d001      	beq.n	80091be <asciiToValue+0x5a>
 80091ba:	89fb      	ldrh	r3, [r7, #14]
 80091bc:	e000      	b.n	80091c0 <asciiToValue+0x5c>
 80091be:	230a      	movs	r3, #10
 80091c0:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == THREE_DIGIT ? 100 : tens;
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d001      	beq.n	80091cc <asciiToValue+0x68>
 80091c8:	89fb      	ldrh	r3, [r7, #14]
 80091ca:	e000      	b.n	80091ce <asciiToValue+0x6a>
 80091cc:	2364      	movs	r3, #100	; 0x64
 80091ce:	81fb      	strh	r3, [r7, #14]
		//Start calculating the integer value out of the passed digits
		for(int8_t i = 0; i <= digitCount; ++i)
 80091d0:	2300      	movs	r3, #0
 80091d2:	737b      	strb	r3, [r7, #13]
 80091d4:	e016      	b.n	8009204 <asciiToValue+0xa0>
		{
			tempValue = tempValue + ((String[i] - ASCII_STARTING_VALUE) * tens);
 80091d6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	4413      	add	r3, r2
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	3b30      	subs	r3, #48	; 0x30
 80091e2:	89fa      	ldrh	r2, [r7, #14]
 80091e4:	fb02 f303 	mul.w	r3, r2, r3
 80091e8:	461a      	mov	r2, r3
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	4413      	add	r3, r2
 80091ee:	613b      	str	r3, [r7, #16]
			tens = tens / 10;
 80091f0:	89fb      	ldrh	r3, [r7, #14]
 80091f2:	4a0e      	ldr	r2, [pc, #56]	; (800922c <asciiToValue+0xc8>)
 80091f4:	fba2 2303 	umull	r2, r3, r2, r3
 80091f8:	08db      	lsrs	r3, r3, #3
 80091fa:	81fb      	strh	r3, [r7, #14]
		for(int8_t i = 0; i <= digitCount; ++i)
 80091fc:	7b7b      	ldrb	r3, [r7, #13]
 80091fe:	3301      	adds	r3, #1
 8009200:	b2db      	uxtb	r3, r3
 8009202:	737b      	strb	r3, [r7, #13]
 8009204:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	429a      	cmp	r2, r3
 800920c:	dde3      	ble.n	80091d6 <asciiToValue+0x72>
		}
		//Pass the obtained integer value to targetValue that will be returned
		*targetValue = tempValue;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	601a      	str	r2, [r3, #0]
		//digitCount will carry the number of found digits in the String
		++digitCount;
 8009214:	7dfb      	ldrb	r3, [r7, #23]
 8009216:	3301      	adds	r3, #1
 8009218:	75fb      	strb	r3, [r7, #23]
	}
	return digitCount;
 800921a:	7dfb      	ldrb	r3, [r7, #23]
}
 800921c:	4618      	mov	r0, r3
 800921e:	371c      	adds	r7, #28
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	08009d0c 	.word	0x08009d0c
 800922c:	cccccccd 	.word	0xcccccccd

08009230 <rybg211_rxDataRead>:
 * @param moduleBuffer
 * @param targertBuffer
 * @return
 */
uint32_t rybg211_rxDataRead(char* moduleBuffer, char* targertBuffer)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
	//+1 is used to ignore the ',' from the received packet and jump directly to the data field.
	uint8_t dataPositionOffset = BLE_RX_SIZE_BYTE_POSITION + 1;
 800923a:	2308      	movs	r3, #8
 800923c:	73fb      	strb	r3, [r7, #15]

	uint32_t length = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	60bb      	str	r3, [r7, #8]
	//Convert the size from ASCII to integer format and obtain the number of digits to adjust the correct data positio.
	dataPositionOffset += asciiToValue(&length, (uint8_t*)moduleBuffer + BLE_RX_SIZE_BYTE_POSITION);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	1dda      	adds	r2, r3, #7
 8009246:	f107 0308 	add.w	r3, r7, #8
 800924a:	4611      	mov	r1, r2
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff ff89 	bl	8009164 <asciiToValue>
 8009252:	4603      	mov	r3, r0
 8009254:	461a      	mov	r2, r3
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	4413      	add	r3, r2
 800925a:	73fb      	strb	r3, [r7, #15]

	memcpy(targertBuffer, moduleBuffer + dataPositionOffset, length);
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	4413      	add	r3, r2
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	4619      	mov	r1, r3
 8009266:	6838      	ldr	r0, [r7, #0]
 8009268:	f000 f870 	bl	800934c <memcpy>

	return length;
 800926c:	68bb      	ldr	r3, [r7, #8]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <rybg211_txDataSend>:

void  rybg211_txDataSend			(char* sourceBuffer, uint16_t packetSize)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af06      	add	r7, sp, #24
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	807b      	strh	r3, [r7, #2]

	sprintf((char*)hBleModule.txBuffer, "%s%c%s%d%s%s%s",BLE_DATA_SEND,
													hBleModule.ConnectedDevice,
 8009284:	4b0e      	ldr	r3, [pc, #56]	; (80092c0 <rybg211_txDataSend+0x48>)
 8009286:	7d1b      	ldrb	r3, [r3, #20]
	sprintf((char*)hBleModule.txBuffer, "%s%c%s%d%s%s%s",BLE_DATA_SEND,
 8009288:	4619      	mov	r1, r3
 800928a:	887b      	ldrh	r3, [r7, #2]
 800928c:	4a0d      	ldr	r2, [pc, #52]	; (80092c4 <rybg211_txDataSend+0x4c>)
 800928e:	9204      	str	r2, [sp, #16]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	9203      	str	r2, [sp, #12]
 8009294:	4a0c      	ldr	r2, [pc, #48]	; (80092c8 <rybg211_txDataSend+0x50>)
 8009296:	9202      	str	r2, [sp, #8]
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	4b0b      	ldr	r3, [pc, #44]	; (80092c8 <rybg211_txDataSend+0x50>)
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	460b      	mov	r3, r1
 80092a0:	4a0a      	ldr	r2, [pc, #40]	; (80092cc <rybg211_txDataSend+0x54>)
 80092a2:	490b      	ldr	r1, [pc, #44]	; (80092d0 <rybg211_txDataSend+0x58>)
 80092a4:	480b      	ldr	r0, [pc, #44]	; (80092d4 <rybg211_txDataSend+0x5c>)
 80092a6:	f000 f867 	bl	8009378 <siprintf>
													packetSize,
													BLE_NEW_FIELD,
													sourceBuffer,
													BLE_CMD_TERM);

	hBleModule.txPacketSize = strlen(hBleModule.txBuffer);
 80092aa:	480a      	ldr	r0, [pc, #40]	; (80092d4 <rybg211_txDataSend+0x5c>)
 80092ac:	f7f6 ff98 	bl	80001e0 <strlen>
 80092b0:	4603      	mov	r3, r0
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	4b02      	ldr	r3, [pc, #8]	; (80092c0 <rybg211_txDataSend+0x48>)
 80092b6:	805a      	strh	r2, [r3, #2]
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	200020b0 	.word	0x200020b0
 80092c4:	08009cb0 	.word	0x08009cb0
 80092c8:	08009cb4 	.word	0x08009cb4
 80092cc:	08009cd0 	.word	0x08009cd0
 80092d0:	08009cdc 	.word	0x08009cdc
 80092d4:	200020c5 	.word	0x200020c5

080092d8 <__errno>:
 80092d8:	4b01      	ldr	r3, [pc, #4]	; (80092e0 <__errno+0x8>)
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	200000fc 	.word	0x200000fc

080092e4 <__libc_init_array>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	4d0d      	ldr	r5, [pc, #52]	; (800931c <__libc_init_array+0x38>)
 80092e8:	4c0d      	ldr	r4, [pc, #52]	; (8009320 <__libc_init_array+0x3c>)
 80092ea:	1b64      	subs	r4, r4, r5
 80092ec:	10a4      	asrs	r4, r4, #2
 80092ee:	2600      	movs	r6, #0
 80092f0:	42a6      	cmp	r6, r4
 80092f2:	d109      	bne.n	8009308 <__libc_init_array+0x24>
 80092f4:	4d0b      	ldr	r5, [pc, #44]	; (8009324 <__libc_init_array+0x40>)
 80092f6:	4c0c      	ldr	r4, [pc, #48]	; (8009328 <__libc_init_array+0x44>)
 80092f8:	f000 fc9e 	bl	8009c38 <_init>
 80092fc:	1b64      	subs	r4, r4, r5
 80092fe:	10a4      	asrs	r4, r4, #2
 8009300:	2600      	movs	r6, #0
 8009302:	42a6      	cmp	r6, r4
 8009304:	d105      	bne.n	8009312 <__libc_init_array+0x2e>
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	f855 3b04 	ldr.w	r3, [r5], #4
 800930c:	4798      	blx	r3
 800930e:	3601      	adds	r6, #1
 8009310:	e7ee      	b.n	80092f0 <__libc_init_array+0xc>
 8009312:	f855 3b04 	ldr.w	r3, [r5], #4
 8009316:	4798      	blx	r3
 8009318:	3601      	adds	r6, #1
 800931a:	e7f2      	b.n	8009302 <__libc_init_array+0x1e>
 800931c:	08009e48 	.word	0x08009e48
 8009320:	08009e48 	.word	0x08009e48
 8009324:	08009e48 	.word	0x08009e48
 8009328:	08009e4c 	.word	0x08009e4c

0800932c <memcmp>:
 800932c:	b510      	push	{r4, lr}
 800932e:	3901      	subs	r1, #1
 8009330:	4402      	add	r2, r0
 8009332:	4290      	cmp	r0, r2
 8009334:	d101      	bne.n	800933a <memcmp+0xe>
 8009336:	2000      	movs	r0, #0
 8009338:	e005      	b.n	8009346 <memcmp+0x1a>
 800933a:	7803      	ldrb	r3, [r0, #0]
 800933c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009340:	42a3      	cmp	r3, r4
 8009342:	d001      	beq.n	8009348 <memcmp+0x1c>
 8009344:	1b18      	subs	r0, r3, r4
 8009346:	bd10      	pop	{r4, pc}
 8009348:	3001      	adds	r0, #1
 800934a:	e7f2      	b.n	8009332 <memcmp+0x6>

0800934c <memcpy>:
 800934c:	440a      	add	r2, r1
 800934e:	4291      	cmp	r1, r2
 8009350:	f100 33ff 	add.w	r3, r0, #4294967295
 8009354:	d100      	bne.n	8009358 <memcpy+0xc>
 8009356:	4770      	bx	lr
 8009358:	b510      	push	{r4, lr}
 800935a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800935e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009362:	4291      	cmp	r1, r2
 8009364:	d1f9      	bne.n	800935a <memcpy+0xe>
 8009366:	bd10      	pop	{r4, pc}

08009368 <memset>:
 8009368:	4402      	add	r2, r0
 800936a:	4603      	mov	r3, r0
 800936c:	4293      	cmp	r3, r2
 800936e:	d100      	bne.n	8009372 <memset+0xa>
 8009370:	4770      	bx	lr
 8009372:	f803 1b01 	strb.w	r1, [r3], #1
 8009376:	e7f9      	b.n	800936c <memset+0x4>

08009378 <siprintf>:
 8009378:	b40e      	push	{r1, r2, r3}
 800937a:	b500      	push	{lr}
 800937c:	b09c      	sub	sp, #112	; 0x70
 800937e:	ab1d      	add	r3, sp, #116	; 0x74
 8009380:	9002      	str	r0, [sp, #8]
 8009382:	9006      	str	r0, [sp, #24]
 8009384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009388:	4809      	ldr	r0, [pc, #36]	; (80093b0 <siprintf+0x38>)
 800938a:	9107      	str	r1, [sp, #28]
 800938c:	9104      	str	r1, [sp, #16]
 800938e:	4909      	ldr	r1, [pc, #36]	; (80093b4 <siprintf+0x3c>)
 8009390:	f853 2b04 	ldr.w	r2, [r3], #4
 8009394:	9105      	str	r1, [sp, #20]
 8009396:	6800      	ldr	r0, [r0, #0]
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	a902      	add	r1, sp, #8
 800939c:	f000 f868 	bl	8009470 <_svfiprintf_r>
 80093a0:	9b02      	ldr	r3, [sp, #8]
 80093a2:	2200      	movs	r2, #0
 80093a4:	701a      	strb	r2, [r3, #0]
 80093a6:	b01c      	add	sp, #112	; 0x70
 80093a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093ac:	b003      	add	sp, #12
 80093ae:	4770      	bx	lr
 80093b0:	200000fc 	.word	0x200000fc
 80093b4:	ffff0208 	.word	0xffff0208

080093b8 <__ssputs_r>:
 80093b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093bc:	688e      	ldr	r6, [r1, #8]
 80093be:	429e      	cmp	r6, r3
 80093c0:	4682      	mov	sl, r0
 80093c2:	460c      	mov	r4, r1
 80093c4:	4690      	mov	r8, r2
 80093c6:	461f      	mov	r7, r3
 80093c8:	d838      	bhi.n	800943c <__ssputs_r+0x84>
 80093ca:	898a      	ldrh	r2, [r1, #12]
 80093cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093d0:	d032      	beq.n	8009438 <__ssputs_r+0x80>
 80093d2:	6825      	ldr	r5, [r4, #0]
 80093d4:	6909      	ldr	r1, [r1, #16]
 80093d6:	eba5 0901 	sub.w	r9, r5, r1
 80093da:	6965      	ldr	r5, [r4, #20]
 80093dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093e4:	3301      	adds	r3, #1
 80093e6:	444b      	add	r3, r9
 80093e8:	106d      	asrs	r5, r5, #1
 80093ea:	429d      	cmp	r5, r3
 80093ec:	bf38      	it	cc
 80093ee:	461d      	movcc	r5, r3
 80093f0:	0553      	lsls	r3, r2, #21
 80093f2:	d531      	bpl.n	8009458 <__ssputs_r+0xa0>
 80093f4:	4629      	mov	r1, r5
 80093f6:	f000 fb55 	bl	8009aa4 <_malloc_r>
 80093fa:	4606      	mov	r6, r0
 80093fc:	b950      	cbnz	r0, 8009414 <__ssputs_r+0x5c>
 80093fe:	230c      	movs	r3, #12
 8009400:	f8ca 3000 	str.w	r3, [sl]
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940a:	81a3      	strh	r3, [r4, #12]
 800940c:	f04f 30ff 	mov.w	r0, #4294967295
 8009410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009414:	6921      	ldr	r1, [r4, #16]
 8009416:	464a      	mov	r2, r9
 8009418:	f7ff ff98 	bl	800934c <memcpy>
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009426:	81a3      	strh	r3, [r4, #12]
 8009428:	6126      	str	r6, [r4, #16]
 800942a:	6165      	str	r5, [r4, #20]
 800942c:	444e      	add	r6, r9
 800942e:	eba5 0509 	sub.w	r5, r5, r9
 8009432:	6026      	str	r6, [r4, #0]
 8009434:	60a5      	str	r5, [r4, #8]
 8009436:	463e      	mov	r6, r7
 8009438:	42be      	cmp	r6, r7
 800943a:	d900      	bls.n	800943e <__ssputs_r+0x86>
 800943c:	463e      	mov	r6, r7
 800943e:	6820      	ldr	r0, [r4, #0]
 8009440:	4632      	mov	r2, r6
 8009442:	4641      	mov	r1, r8
 8009444:	f000 faa8 	bl	8009998 <memmove>
 8009448:	68a3      	ldr	r3, [r4, #8]
 800944a:	1b9b      	subs	r3, r3, r6
 800944c:	60a3      	str	r3, [r4, #8]
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	4433      	add	r3, r6
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	2000      	movs	r0, #0
 8009456:	e7db      	b.n	8009410 <__ssputs_r+0x58>
 8009458:	462a      	mov	r2, r5
 800945a:	f000 fb97 	bl	8009b8c <_realloc_r>
 800945e:	4606      	mov	r6, r0
 8009460:	2800      	cmp	r0, #0
 8009462:	d1e1      	bne.n	8009428 <__ssputs_r+0x70>
 8009464:	6921      	ldr	r1, [r4, #16]
 8009466:	4650      	mov	r0, sl
 8009468:	f000 fab0 	bl	80099cc <_free_r>
 800946c:	e7c7      	b.n	80093fe <__ssputs_r+0x46>
	...

08009470 <_svfiprintf_r>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	4698      	mov	r8, r3
 8009476:	898b      	ldrh	r3, [r1, #12]
 8009478:	061b      	lsls	r3, r3, #24
 800947a:	b09d      	sub	sp, #116	; 0x74
 800947c:	4607      	mov	r7, r0
 800947e:	460d      	mov	r5, r1
 8009480:	4614      	mov	r4, r2
 8009482:	d50e      	bpl.n	80094a2 <_svfiprintf_r+0x32>
 8009484:	690b      	ldr	r3, [r1, #16]
 8009486:	b963      	cbnz	r3, 80094a2 <_svfiprintf_r+0x32>
 8009488:	2140      	movs	r1, #64	; 0x40
 800948a:	f000 fb0b 	bl	8009aa4 <_malloc_r>
 800948e:	6028      	str	r0, [r5, #0]
 8009490:	6128      	str	r0, [r5, #16]
 8009492:	b920      	cbnz	r0, 800949e <_svfiprintf_r+0x2e>
 8009494:	230c      	movs	r3, #12
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	e0d1      	b.n	8009642 <_svfiprintf_r+0x1d2>
 800949e:	2340      	movs	r3, #64	; 0x40
 80094a0:	616b      	str	r3, [r5, #20]
 80094a2:	2300      	movs	r3, #0
 80094a4:	9309      	str	r3, [sp, #36]	; 0x24
 80094a6:	2320      	movs	r3, #32
 80094a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80094b0:	2330      	movs	r3, #48	; 0x30
 80094b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800965c <_svfiprintf_r+0x1ec>
 80094b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094ba:	f04f 0901 	mov.w	r9, #1
 80094be:	4623      	mov	r3, r4
 80094c0:	469a      	mov	sl, r3
 80094c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c6:	b10a      	cbz	r2, 80094cc <_svfiprintf_r+0x5c>
 80094c8:	2a25      	cmp	r2, #37	; 0x25
 80094ca:	d1f9      	bne.n	80094c0 <_svfiprintf_r+0x50>
 80094cc:	ebba 0b04 	subs.w	fp, sl, r4
 80094d0:	d00b      	beq.n	80094ea <_svfiprintf_r+0x7a>
 80094d2:	465b      	mov	r3, fp
 80094d4:	4622      	mov	r2, r4
 80094d6:	4629      	mov	r1, r5
 80094d8:	4638      	mov	r0, r7
 80094da:	f7ff ff6d 	bl	80093b8 <__ssputs_r>
 80094de:	3001      	adds	r0, #1
 80094e0:	f000 80aa 	beq.w	8009638 <_svfiprintf_r+0x1c8>
 80094e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094e6:	445a      	add	r2, fp
 80094e8:	9209      	str	r2, [sp, #36]	; 0x24
 80094ea:	f89a 3000 	ldrb.w	r3, [sl]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 80a2 	beq.w	8009638 <_svfiprintf_r+0x1c8>
 80094f4:	2300      	movs	r3, #0
 80094f6:	f04f 32ff 	mov.w	r2, #4294967295
 80094fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094fe:	f10a 0a01 	add.w	sl, sl, #1
 8009502:	9304      	str	r3, [sp, #16]
 8009504:	9307      	str	r3, [sp, #28]
 8009506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800950a:	931a      	str	r3, [sp, #104]	; 0x68
 800950c:	4654      	mov	r4, sl
 800950e:	2205      	movs	r2, #5
 8009510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009514:	4851      	ldr	r0, [pc, #324]	; (800965c <_svfiprintf_r+0x1ec>)
 8009516:	f7f6 fe6b 	bl	80001f0 <memchr>
 800951a:	9a04      	ldr	r2, [sp, #16]
 800951c:	b9d8      	cbnz	r0, 8009556 <_svfiprintf_r+0xe6>
 800951e:	06d0      	lsls	r0, r2, #27
 8009520:	bf44      	itt	mi
 8009522:	2320      	movmi	r3, #32
 8009524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009528:	0711      	lsls	r1, r2, #28
 800952a:	bf44      	itt	mi
 800952c:	232b      	movmi	r3, #43	; 0x2b
 800952e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009532:	f89a 3000 	ldrb.w	r3, [sl]
 8009536:	2b2a      	cmp	r3, #42	; 0x2a
 8009538:	d015      	beq.n	8009566 <_svfiprintf_r+0xf6>
 800953a:	9a07      	ldr	r2, [sp, #28]
 800953c:	4654      	mov	r4, sl
 800953e:	2000      	movs	r0, #0
 8009540:	f04f 0c0a 	mov.w	ip, #10
 8009544:	4621      	mov	r1, r4
 8009546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800954a:	3b30      	subs	r3, #48	; 0x30
 800954c:	2b09      	cmp	r3, #9
 800954e:	d94e      	bls.n	80095ee <_svfiprintf_r+0x17e>
 8009550:	b1b0      	cbz	r0, 8009580 <_svfiprintf_r+0x110>
 8009552:	9207      	str	r2, [sp, #28]
 8009554:	e014      	b.n	8009580 <_svfiprintf_r+0x110>
 8009556:	eba0 0308 	sub.w	r3, r0, r8
 800955a:	fa09 f303 	lsl.w	r3, r9, r3
 800955e:	4313      	orrs	r3, r2
 8009560:	9304      	str	r3, [sp, #16]
 8009562:	46a2      	mov	sl, r4
 8009564:	e7d2      	b.n	800950c <_svfiprintf_r+0x9c>
 8009566:	9b03      	ldr	r3, [sp, #12]
 8009568:	1d19      	adds	r1, r3, #4
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	9103      	str	r1, [sp, #12]
 800956e:	2b00      	cmp	r3, #0
 8009570:	bfbb      	ittet	lt
 8009572:	425b      	neglt	r3, r3
 8009574:	f042 0202 	orrlt.w	r2, r2, #2
 8009578:	9307      	strge	r3, [sp, #28]
 800957a:	9307      	strlt	r3, [sp, #28]
 800957c:	bfb8      	it	lt
 800957e:	9204      	strlt	r2, [sp, #16]
 8009580:	7823      	ldrb	r3, [r4, #0]
 8009582:	2b2e      	cmp	r3, #46	; 0x2e
 8009584:	d10c      	bne.n	80095a0 <_svfiprintf_r+0x130>
 8009586:	7863      	ldrb	r3, [r4, #1]
 8009588:	2b2a      	cmp	r3, #42	; 0x2a
 800958a:	d135      	bne.n	80095f8 <_svfiprintf_r+0x188>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	1d1a      	adds	r2, r3, #4
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	9203      	str	r2, [sp, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	bfb8      	it	lt
 8009598:	f04f 33ff 	movlt.w	r3, #4294967295
 800959c:	3402      	adds	r4, #2
 800959e:	9305      	str	r3, [sp, #20]
 80095a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800966c <_svfiprintf_r+0x1fc>
 80095a4:	7821      	ldrb	r1, [r4, #0]
 80095a6:	2203      	movs	r2, #3
 80095a8:	4650      	mov	r0, sl
 80095aa:	f7f6 fe21 	bl	80001f0 <memchr>
 80095ae:	b140      	cbz	r0, 80095c2 <_svfiprintf_r+0x152>
 80095b0:	2340      	movs	r3, #64	; 0x40
 80095b2:	eba0 000a 	sub.w	r0, r0, sl
 80095b6:	fa03 f000 	lsl.w	r0, r3, r0
 80095ba:	9b04      	ldr	r3, [sp, #16]
 80095bc:	4303      	orrs	r3, r0
 80095be:	3401      	adds	r4, #1
 80095c0:	9304      	str	r3, [sp, #16]
 80095c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c6:	4826      	ldr	r0, [pc, #152]	; (8009660 <_svfiprintf_r+0x1f0>)
 80095c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095cc:	2206      	movs	r2, #6
 80095ce:	f7f6 fe0f 	bl	80001f0 <memchr>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d038      	beq.n	8009648 <_svfiprintf_r+0x1d8>
 80095d6:	4b23      	ldr	r3, [pc, #140]	; (8009664 <_svfiprintf_r+0x1f4>)
 80095d8:	bb1b      	cbnz	r3, 8009622 <_svfiprintf_r+0x1b2>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	3307      	adds	r3, #7
 80095de:	f023 0307 	bic.w	r3, r3, #7
 80095e2:	3308      	adds	r3, #8
 80095e4:	9303      	str	r3, [sp, #12]
 80095e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e8:	4433      	add	r3, r6
 80095ea:	9309      	str	r3, [sp, #36]	; 0x24
 80095ec:	e767      	b.n	80094be <_svfiprintf_r+0x4e>
 80095ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80095f2:	460c      	mov	r4, r1
 80095f4:	2001      	movs	r0, #1
 80095f6:	e7a5      	b.n	8009544 <_svfiprintf_r+0xd4>
 80095f8:	2300      	movs	r3, #0
 80095fa:	3401      	adds	r4, #1
 80095fc:	9305      	str	r3, [sp, #20]
 80095fe:	4619      	mov	r1, r3
 8009600:	f04f 0c0a 	mov.w	ip, #10
 8009604:	4620      	mov	r0, r4
 8009606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800960a:	3a30      	subs	r2, #48	; 0x30
 800960c:	2a09      	cmp	r2, #9
 800960e:	d903      	bls.n	8009618 <_svfiprintf_r+0x1a8>
 8009610:	2b00      	cmp	r3, #0
 8009612:	d0c5      	beq.n	80095a0 <_svfiprintf_r+0x130>
 8009614:	9105      	str	r1, [sp, #20]
 8009616:	e7c3      	b.n	80095a0 <_svfiprintf_r+0x130>
 8009618:	fb0c 2101 	mla	r1, ip, r1, r2
 800961c:	4604      	mov	r4, r0
 800961e:	2301      	movs	r3, #1
 8009620:	e7f0      	b.n	8009604 <_svfiprintf_r+0x194>
 8009622:	ab03      	add	r3, sp, #12
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	462a      	mov	r2, r5
 8009628:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <_svfiprintf_r+0x1f8>)
 800962a:	a904      	add	r1, sp, #16
 800962c:	4638      	mov	r0, r7
 800962e:	f3af 8000 	nop.w
 8009632:	1c42      	adds	r2, r0, #1
 8009634:	4606      	mov	r6, r0
 8009636:	d1d6      	bne.n	80095e6 <_svfiprintf_r+0x176>
 8009638:	89ab      	ldrh	r3, [r5, #12]
 800963a:	065b      	lsls	r3, r3, #25
 800963c:	f53f af2c 	bmi.w	8009498 <_svfiprintf_r+0x28>
 8009640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009642:	b01d      	add	sp, #116	; 0x74
 8009644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009648:	ab03      	add	r3, sp, #12
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	462a      	mov	r2, r5
 800964e:	4b06      	ldr	r3, [pc, #24]	; (8009668 <_svfiprintf_r+0x1f8>)
 8009650:	a904      	add	r1, sp, #16
 8009652:	4638      	mov	r0, r7
 8009654:	f000 f87a 	bl	800974c <_printf_i>
 8009658:	e7eb      	b.n	8009632 <_svfiprintf_r+0x1c2>
 800965a:	bf00      	nop
 800965c:	08009e0d 	.word	0x08009e0d
 8009660:	08009e17 	.word	0x08009e17
 8009664:	00000000 	.word	0x00000000
 8009668:	080093b9 	.word	0x080093b9
 800966c:	08009e13 	.word	0x08009e13

08009670 <_printf_common>:
 8009670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009674:	4616      	mov	r6, r2
 8009676:	4699      	mov	r9, r3
 8009678:	688a      	ldr	r2, [r1, #8]
 800967a:	690b      	ldr	r3, [r1, #16]
 800967c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009680:	4293      	cmp	r3, r2
 8009682:	bfb8      	it	lt
 8009684:	4613      	movlt	r3, r2
 8009686:	6033      	str	r3, [r6, #0]
 8009688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800968c:	4607      	mov	r7, r0
 800968e:	460c      	mov	r4, r1
 8009690:	b10a      	cbz	r2, 8009696 <_printf_common+0x26>
 8009692:	3301      	adds	r3, #1
 8009694:	6033      	str	r3, [r6, #0]
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	0699      	lsls	r1, r3, #26
 800969a:	bf42      	ittt	mi
 800969c:	6833      	ldrmi	r3, [r6, #0]
 800969e:	3302      	addmi	r3, #2
 80096a0:	6033      	strmi	r3, [r6, #0]
 80096a2:	6825      	ldr	r5, [r4, #0]
 80096a4:	f015 0506 	ands.w	r5, r5, #6
 80096a8:	d106      	bne.n	80096b8 <_printf_common+0x48>
 80096aa:	f104 0a19 	add.w	sl, r4, #25
 80096ae:	68e3      	ldr	r3, [r4, #12]
 80096b0:	6832      	ldr	r2, [r6, #0]
 80096b2:	1a9b      	subs	r3, r3, r2
 80096b4:	42ab      	cmp	r3, r5
 80096b6:	dc26      	bgt.n	8009706 <_printf_common+0x96>
 80096b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096bc:	1e13      	subs	r3, r2, #0
 80096be:	6822      	ldr	r2, [r4, #0]
 80096c0:	bf18      	it	ne
 80096c2:	2301      	movne	r3, #1
 80096c4:	0692      	lsls	r2, r2, #26
 80096c6:	d42b      	bmi.n	8009720 <_printf_common+0xb0>
 80096c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096cc:	4649      	mov	r1, r9
 80096ce:	4638      	mov	r0, r7
 80096d0:	47c0      	blx	r8
 80096d2:	3001      	adds	r0, #1
 80096d4:	d01e      	beq.n	8009714 <_printf_common+0xa4>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	68e5      	ldr	r5, [r4, #12]
 80096da:	6832      	ldr	r2, [r6, #0]
 80096dc:	f003 0306 	and.w	r3, r3, #6
 80096e0:	2b04      	cmp	r3, #4
 80096e2:	bf08      	it	eq
 80096e4:	1aad      	subeq	r5, r5, r2
 80096e6:	68a3      	ldr	r3, [r4, #8]
 80096e8:	6922      	ldr	r2, [r4, #16]
 80096ea:	bf0c      	ite	eq
 80096ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096f0:	2500      	movne	r5, #0
 80096f2:	4293      	cmp	r3, r2
 80096f4:	bfc4      	itt	gt
 80096f6:	1a9b      	subgt	r3, r3, r2
 80096f8:	18ed      	addgt	r5, r5, r3
 80096fa:	2600      	movs	r6, #0
 80096fc:	341a      	adds	r4, #26
 80096fe:	42b5      	cmp	r5, r6
 8009700:	d11a      	bne.n	8009738 <_printf_common+0xc8>
 8009702:	2000      	movs	r0, #0
 8009704:	e008      	b.n	8009718 <_printf_common+0xa8>
 8009706:	2301      	movs	r3, #1
 8009708:	4652      	mov	r2, sl
 800970a:	4649      	mov	r1, r9
 800970c:	4638      	mov	r0, r7
 800970e:	47c0      	blx	r8
 8009710:	3001      	adds	r0, #1
 8009712:	d103      	bne.n	800971c <_printf_common+0xac>
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971c:	3501      	adds	r5, #1
 800971e:	e7c6      	b.n	80096ae <_printf_common+0x3e>
 8009720:	18e1      	adds	r1, r4, r3
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	2030      	movs	r0, #48	; 0x30
 8009726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800972a:	4422      	add	r2, r4
 800972c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009734:	3302      	adds	r3, #2
 8009736:	e7c7      	b.n	80096c8 <_printf_common+0x58>
 8009738:	2301      	movs	r3, #1
 800973a:	4622      	mov	r2, r4
 800973c:	4649      	mov	r1, r9
 800973e:	4638      	mov	r0, r7
 8009740:	47c0      	blx	r8
 8009742:	3001      	adds	r0, #1
 8009744:	d0e6      	beq.n	8009714 <_printf_common+0xa4>
 8009746:	3601      	adds	r6, #1
 8009748:	e7d9      	b.n	80096fe <_printf_common+0x8e>
	...

0800974c <_printf_i>:
 800974c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009750:	7e0f      	ldrb	r7, [r1, #24]
 8009752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009754:	2f78      	cmp	r7, #120	; 0x78
 8009756:	4691      	mov	r9, r2
 8009758:	4680      	mov	r8, r0
 800975a:	460c      	mov	r4, r1
 800975c:	469a      	mov	sl, r3
 800975e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009762:	d807      	bhi.n	8009774 <_printf_i+0x28>
 8009764:	2f62      	cmp	r7, #98	; 0x62
 8009766:	d80a      	bhi.n	800977e <_printf_i+0x32>
 8009768:	2f00      	cmp	r7, #0
 800976a:	f000 80d8 	beq.w	800991e <_printf_i+0x1d2>
 800976e:	2f58      	cmp	r7, #88	; 0x58
 8009770:	f000 80a3 	beq.w	80098ba <_printf_i+0x16e>
 8009774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800977c:	e03a      	b.n	80097f4 <_printf_i+0xa8>
 800977e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009782:	2b15      	cmp	r3, #21
 8009784:	d8f6      	bhi.n	8009774 <_printf_i+0x28>
 8009786:	a101      	add	r1, pc, #4	; (adr r1, 800978c <_printf_i+0x40>)
 8009788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800978c:	080097e5 	.word	0x080097e5
 8009790:	080097f9 	.word	0x080097f9
 8009794:	08009775 	.word	0x08009775
 8009798:	08009775 	.word	0x08009775
 800979c:	08009775 	.word	0x08009775
 80097a0:	08009775 	.word	0x08009775
 80097a4:	080097f9 	.word	0x080097f9
 80097a8:	08009775 	.word	0x08009775
 80097ac:	08009775 	.word	0x08009775
 80097b0:	08009775 	.word	0x08009775
 80097b4:	08009775 	.word	0x08009775
 80097b8:	08009905 	.word	0x08009905
 80097bc:	08009829 	.word	0x08009829
 80097c0:	080098e7 	.word	0x080098e7
 80097c4:	08009775 	.word	0x08009775
 80097c8:	08009775 	.word	0x08009775
 80097cc:	08009927 	.word	0x08009927
 80097d0:	08009775 	.word	0x08009775
 80097d4:	08009829 	.word	0x08009829
 80097d8:	08009775 	.word	0x08009775
 80097dc:	08009775 	.word	0x08009775
 80097e0:	080098ef 	.word	0x080098ef
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	1d1a      	adds	r2, r3, #4
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	602a      	str	r2, [r5, #0]
 80097ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097f4:	2301      	movs	r3, #1
 80097f6:	e0a3      	b.n	8009940 <_printf_i+0x1f4>
 80097f8:	6820      	ldr	r0, [r4, #0]
 80097fa:	6829      	ldr	r1, [r5, #0]
 80097fc:	0606      	lsls	r6, r0, #24
 80097fe:	f101 0304 	add.w	r3, r1, #4
 8009802:	d50a      	bpl.n	800981a <_printf_i+0xce>
 8009804:	680e      	ldr	r6, [r1, #0]
 8009806:	602b      	str	r3, [r5, #0]
 8009808:	2e00      	cmp	r6, #0
 800980a:	da03      	bge.n	8009814 <_printf_i+0xc8>
 800980c:	232d      	movs	r3, #45	; 0x2d
 800980e:	4276      	negs	r6, r6
 8009810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009814:	485e      	ldr	r0, [pc, #376]	; (8009990 <_printf_i+0x244>)
 8009816:	230a      	movs	r3, #10
 8009818:	e019      	b.n	800984e <_printf_i+0x102>
 800981a:	680e      	ldr	r6, [r1, #0]
 800981c:	602b      	str	r3, [r5, #0]
 800981e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009822:	bf18      	it	ne
 8009824:	b236      	sxthne	r6, r6
 8009826:	e7ef      	b.n	8009808 <_printf_i+0xbc>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	6820      	ldr	r0, [r4, #0]
 800982c:	1d19      	adds	r1, r3, #4
 800982e:	6029      	str	r1, [r5, #0]
 8009830:	0601      	lsls	r1, r0, #24
 8009832:	d501      	bpl.n	8009838 <_printf_i+0xec>
 8009834:	681e      	ldr	r6, [r3, #0]
 8009836:	e002      	b.n	800983e <_printf_i+0xf2>
 8009838:	0646      	lsls	r6, r0, #25
 800983a:	d5fb      	bpl.n	8009834 <_printf_i+0xe8>
 800983c:	881e      	ldrh	r6, [r3, #0]
 800983e:	4854      	ldr	r0, [pc, #336]	; (8009990 <_printf_i+0x244>)
 8009840:	2f6f      	cmp	r7, #111	; 0x6f
 8009842:	bf0c      	ite	eq
 8009844:	2308      	moveq	r3, #8
 8009846:	230a      	movne	r3, #10
 8009848:	2100      	movs	r1, #0
 800984a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800984e:	6865      	ldr	r5, [r4, #4]
 8009850:	60a5      	str	r5, [r4, #8]
 8009852:	2d00      	cmp	r5, #0
 8009854:	bfa2      	ittt	ge
 8009856:	6821      	ldrge	r1, [r4, #0]
 8009858:	f021 0104 	bicge.w	r1, r1, #4
 800985c:	6021      	strge	r1, [r4, #0]
 800985e:	b90e      	cbnz	r6, 8009864 <_printf_i+0x118>
 8009860:	2d00      	cmp	r5, #0
 8009862:	d04d      	beq.n	8009900 <_printf_i+0x1b4>
 8009864:	4615      	mov	r5, r2
 8009866:	fbb6 f1f3 	udiv	r1, r6, r3
 800986a:	fb03 6711 	mls	r7, r3, r1, r6
 800986e:	5dc7      	ldrb	r7, [r0, r7]
 8009870:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009874:	4637      	mov	r7, r6
 8009876:	42bb      	cmp	r3, r7
 8009878:	460e      	mov	r6, r1
 800987a:	d9f4      	bls.n	8009866 <_printf_i+0x11a>
 800987c:	2b08      	cmp	r3, #8
 800987e:	d10b      	bne.n	8009898 <_printf_i+0x14c>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	07de      	lsls	r6, r3, #31
 8009884:	d508      	bpl.n	8009898 <_printf_i+0x14c>
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	6861      	ldr	r1, [r4, #4]
 800988a:	4299      	cmp	r1, r3
 800988c:	bfde      	ittt	le
 800988e:	2330      	movle	r3, #48	; 0x30
 8009890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009894:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009898:	1b52      	subs	r2, r2, r5
 800989a:	6122      	str	r2, [r4, #16]
 800989c:	f8cd a000 	str.w	sl, [sp]
 80098a0:	464b      	mov	r3, r9
 80098a2:	aa03      	add	r2, sp, #12
 80098a4:	4621      	mov	r1, r4
 80098a6:	4640      	mov	r0, r8
 80098a8:	f7ff fee2 	bl	8009670 <_printf_common>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d14c      	bne.n	800994a <_printf_i+0x1fe>
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	b004      	add	sp, #16
 80098b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ba:	4835      	ldr	r0, [pc, #212]	; (8009990 <_printf_i+0x244>)
 80098bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098c0:	6829      	ldr	r1, [r5, #0]
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80098c8:	6029      	str	r1, [r5, #0]
 80098ca:	061d      	lsls	r5, r3, #24
 80098cc:	d514      	bpl.n	80098f8 <_printf_i+0x1ac>
 80098ce:	07df      	lsls	r7, r3, #31
 80098d0:	bf44      	itt	mi
 80098d2:	f043 0320 	orrmi.w	r3, r3, #32
 80098d6:	6023      	strmi	r3, [r4, #0]
 80098d8:	b91e      	cbnz	r6, 80098e2 <_printf_i+0x196>
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	f023 0320 	bic.w	r3, r3, #32
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	2310      	movs	r3, #16
 80098e4:	e7b0      	b.n	8009848 <_printf_i+0xfc>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	f043 0320 	orr.w	r3, r3, #32
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	2378      	movs	r3, #120	; 0x78
 80098f0:	4828      	ldr	r0, [pc, #160]	; (8009994 <_printf_i+0x248>)
 80098f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098f6:	e7e3      	b.n	80098c0 <_printf_i+0x174>
 80098f8:	0659      	lsls	r1, r3, #25
 80098fa:	bf48      	it	mi
 80098fc:	b2b6      	uxthmi	r6, r6
 80098fe:	e7e6      	b.n	80098ce <_printf_i+0x182>
 8009900:	4615      	mov	r5, r2
 8009902:	e7bb      	b.n	800987c <_printf_i+0x130>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	6826      	ldr	r6, [r4, #0]
 8009908:	6961      	ldr	r1, [r4, #20]
 800990a:	1d18      	adds	r0, r3, #4
 800990c:	6028      	str	r0, [r5, #0]
 800990e:	0635      	lsls	r5, r6, #24
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	d501      	bpl.n	8009918 <_printf_i+0x1cc>
 8009914:	6019      	str	r1, [r3, #0]
 8009916:	e002      	b.n	800991e <_printf_i+0x1d2>
 8009918:	0670      	lsls	r0, r6, #25
 800991a:	d5fb      	bpl.n	8009914 <_printf_i+0x1c8>
 800991c:	8019      	strh	r1, [r3, #0]
 800991e:	2300      	movs	r3, #0
 8009920:	6123      	str	r3, [r4, #16]
 8009922:	4615      	mov	r5, r2
 8009924:	e7ba      	b.n	800989c <_printf_i+0x150>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	1d1a      	adds	r2, r3, #4
 800992a:	602a      	str	r2, [r5, #0]
 800992c:	681d      	ldr	r5, [r3, #0]
 800992e:	6862      	ldr	r2, [r4, #4]
 8009930:	2100      	movs	r1, #0
 8009932:	4628      	mov	r0, r5
 8009934:	f7f6 fc5c 	bl	80001f0 <memchr>
 8009938:	b108      	cbz	r0, 800993e <_printf_i+0x1f2>
 800993a:	1b40      	subs	r0, r0, r5
 800993c:	6060      	str	r0, [r4, #4]
 800993e:	6863      	ldr	r3, [r4, #4]
 8009940:	6123      	str	r3, [r4, #16]
 8009942:	2300      	movs	r3, #0
 8009944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009948:	e7a8      	b.n	800989c <_printf_i+0x150>
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	462a      	mov	r2, r5
 800994e:	4649      	mov	r1, r9
 8009950:	4640      	mov	r0, r8
 8009952:	47d0      	blx	sl
 8009954:	3001      	adds	r0, #1
 8009956:	d0ab      	beq.n	80098b0 <_printf_i+0x164>
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	079b      	lsls	r3, r3, #30
 800995c:	d413      	bmi.n	8009986 <_printf_i+0x23a>
 800995e:	68e0      	ldr	r0, [r4, #12]
 8009960:	9b03      	ldr	r3, [sp, #12]
 8009962:	4298      	cmp	r0, r3
 8009964:	bfb8      	it	lt
 8009966:	4618      	movlt	r0, r3
 8009968:	e7a4      	b.n	80098b4 <_printf_i+0x168>
 800996a:	2301      	movs	r3, #1
 800996c:	4632      	mov	r2, r6
 800996e:	4649      	mov	r1, r9
 8009970:	4640      	mov	r0, r8
 8009972:	47d0      	blx	sl
 8009974:	3001      	adds	r0, #1
 8009976:	d09b      	beq.n	80098b0 <_printf_i+0x164>
 8009978:	3501      	adds	r5, #1
 800997a:	68e3      	ldr	r3, [r4, #12]
 800997c:	9903      	ldr	r1, [sp, #12]
 800997e:	1a5b      	subs	r3, r3, r1
 8009980:	42ab      	cmp	r3, r5
 8009982:	dcf2      	bgt.n	800996a <_printf_i+0x21e>
 8009984:	e7eb      	b.n	800995e <_printf_i+0x212>
 8009986:	2500      	movs	r5, #0
 8009988:	f104 0619 	add.w	r6, r4, #25
 800998c:	e7f5      	b.n	800997a <_printf_i+0x22e>
 800998e:	bf00      	nop
 8009990:	08009e1e 	.word	0x08009e1e
 8009994:	08009e2f 	.word	0x08009e2f

08009998 <memmove>:
 8009998:	4288      	cmp	r0, r1
 800999a:	b510      	push	{r4, lr}
 800999c:	eb01 0402 	add.w	r4, r1, r2
 80099a0:	d902      	bls.n	80099a8 <memmove+0x10>
 80099a2:	4284      	cmp	r4, r0
 80099a4:	4623      	mov	r3, r4
 80099a6:	d807      	bhi.n	80099b8 <memmove+0x20>
 80099a8:	1e43      	subs	r3, r0, #1
 80099aa:	42a1      	cmp	r1, r4
 80099ac:	d008      	beq.n	80099c0 <memmove+0x28>
 80099ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099b6:	e7f8      	b.n	80099aa <memmove+0x12>
 80099b8:	4402      	add	r2, r0
 80099ba:	4601      	mov	r1, r0
 80099bc:	428a      	cmp	r2, r1
 80099be:	d100      	bne.n	80099c2 <memmove+0x2a>
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099ca:	e7f7      	b.n	80099bc <memmove+0x24>

080099cc <_free_r>:
 80099cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ce:	2900      	cmp	r1, #0
 80099d0:	d044      	beq.n	8009a5c <_free_r+0x90>
 80099d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d6:	9001      	str	r0, [sp, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f1a1 0404 	sub.w	r4, r1, #4
 80099de:	bfb8      	it	lt
 80099e0:	18e4      	addlt	r4, r4, r3
 80099e2:	f000 f913 	bl	8009c0c <__malloc_lock>
 80099e6:	4a1e      	ldr	r2, [pc, #120]	; (8009a60 <_free_r+0x94>)
 80099e8:	9801      	ldr	r0, [sp, #4]
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	b933      	cbnz	r3, 80099fc <_free_r+0x30>
 80099ee:	6063      	str	r3, [r4, #4]
 80099f0:	6014      	str	r4, [r2, #0]
 80099f2:	b003      	add	sp, #12
 80099f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099f8:	f000 b90e 	b.w	8009c18 <__malloc_unlock>
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	d908      	bls.n	8009a12 <_free_r+0x46>
 8009a00:	6825      	ldr	r5, [r4, #0]
 8009a02:	1961      	adds	r1, r4, r5
 8009a04:	428b      	cmp	r3, r1
 8009a06:	bf01      	itttt	eq
 8009a08:	6819      	ldreq	r1, [r3, #0]
 8009a0a:	685b      	ldreq	r3, [r3, #4]
 8009a0c:	1949      	addeq	r1, r1, r5
 8009a0e:	6021      	streq	r1, [r4, #0]
 8009a10:	e7ed      	b.n	80099ee <_free_r+0x22>
 8009a12:	461a      	mov	r2, r3
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	b10b      	cbz	r3, 8009a1c <_free_r+0x50>
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	d9fa      	bls.n	8009a12 <_free_r+0x46>
 8009a1c:	6811      	ldr	r1, [r2, #0]
 8009a1e:	1855      	adds	r5, r2, r1
 8009a20:	42a5      	cmp	r5, r4
 8009a22:	d10b      	bne.n	8009a3c <_free_r+0x70>
 8009a24:	6824      	ldr	r4, [r4, #0]
 8009a26:	4421      	add	r1, r4
 8009a28:	1854      	adds	r4, r2, r1
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	6011      	str	r1, [r2, #0]
 8009a2e:	d1e0      	bne.n	80099f2 <_free_r+0x26>
 8009a30:	681c      	ldr	r4, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	6053      	str	r3, [r2, #4]
 8009a36:	4421      	add	r1, r4
 8009a38:	6011      	str	r1, [r2, #0]
 8009a3a:	e7da      	b.n	80099f2 <_free_r+0x26>
 8009a3c:	d902      	bls.n	8009a44 <_free_r+0x78>
 8009a3e:	230c      	movs	r3, #12
 8009a40:	6003      	str	r3, [r0, #0]
 8009a42:	e7d6      	b.n	80099f2 <_free_r+0x26>
 8009a44:	6825      	ldr	r5, [r4, #0]
 8009a46:	1961      	adds	r1, r4, r5
 8009a48:	428b      	cmp	r3, r1
 8009a4a:	bf04      	itt	eq
 8009a4c:	6819      	ldreq	r1, [r3, #0]
 8009a4e:	685b      	ldreq	r3, [r3, #4]
 8009a50:	6063      	str	r3, [r4, #4]
 8009a52:	bf04      	itt	eq
 8009a54:	1949      	addeq	r1, r1, r5
 8009a56:	6021      	streq	r1, [r4, #0]
 8009a58:	6054      	str	r4, [r2, #4]
 8009a5a:	e7ca      	b.n	80099f2 <_free_r+0x26>
 8009a5c:	b003      	add	sp, #12
 8009a5e:	bd30      	pop	{r4, r5, pc}
 8009a60:	200022c8 	.word	0x200022c8

08009a64 <sbrk_aligned>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4e0e      	ldr	r6, [pc, #56]	; (8009aa0 <sbrk_aligned+0x3c>)
 8009a68:	460c      	mov	r4, r1
 8009a6a:	6831      	ldr	r1, [r6, #0]
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	b911      	cbnz	r1, 8009a76 <sbrk_aligned+0x12>
 8009a70:	f000 f8bc 	bl	8009bec <_sbrk_r>
 8009a74:	6030      	str	r0, [r6, #0]
 8009a76:	4621      	mov	r1, r4
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f000 f8b7 	bl	8009bec <_sbrk_r>
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	d00a      	beq.n	8009a98 <sbrk_aligned+0x34>
 8009a82:	1cc4      	adds	r4, r0, #3
 8009a84:	f024 0403 	bic.w	r4, r4, #3
 8009a88:	42a0      	cmp	r0, r4
 8009a8a:	d007      	beq.n	8009a9c <sbrk_aligned+0x38>
 8009a8c:	1a21      	subs	r1, r4, r0
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f000 f8ac 	bl	8009bec <_sbrk_r>
 8009a94:	3001      	adds	r0, #1
 8009a96:	d101      	bne.n	8009a9c <sbrk_aligned+0x38>
 8009a98:	f04f 34ff 	mov.w	r4, #4294967295
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}
 8009aa0:	200022cc 	.word	0x200022cc

08009aa4 <_malloc_r>:
 8009aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa8:	1ccd      	adds	r5, r1, #3
 8009aaa:	f025 0503 	bic.w	r5, r5, #3
 8009aae:	3508      	adds	r5, #8
 8009ab0:	2d0c      	cmp	r5, #12
 8009ab2:	bf38      	it	cc
 8009ab4:	250c      	movcc	r5, #12
 8009ab6:	2d00      	cmp	r5, #0
 8009ab8:	4607      	mov	r7, r0
 8009aba:	db01      	blt.n	8009ac0 <_malloc_r+0x1c>
 8009abc:	42a9      	cmp	r1, r5
 8009abe:	d905      	bls.n	8009acc <_malloc_r+0x28>
 8009ac0:	230c      	movs	r3, #12
 8009ac2:	603b      	str	r3, [r7, #0]
 8009ac4:	2600      	movs	r6, #0
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009acc:	4e2e      	ldr	r6, [pc, #184]	; (8009b88 <_malloc_r+0xe4>)
 8009ace:	f000 f89d 	bl	8009c0c <__malloc_lock>
 8009ad2:	6833      	ldr	r3, [r6, #0]
 8009ad4:	461c      	mov	r4, r3
 8009ad6:	bb34      	cbnz	r4, 8009b26 <_malloc_r+0x82>
 8009ad8:	4629      	mov	r1, r5
 8009ada:	4638      	mov	r0, r7
 8009adc:	f7ff ffc2 	bl	8009a64 <sbrk_aligned>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	d14d      	bne.n	8009b82 <_malloc_r+0xde>
 8009ae6:	6834      	ldr	r4, [r6, #0]
 8009ae8:	4626      	mov	r6, r4
 8009aea:	2e00      	cmp	r6, #0
 8009aec:	d140      	bne.n	8009b70 <_malloc_r+0xcc>
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	4631      	mov	r1, r6
 8009af2:	4638      	mov	r0, r7
 8009af4:	eb04 0803 	add.w	r8, r4, r3
 8009af8:	f000 f878 	bl	8009bec <_sbrk_r>
 8009afc:	4580      	cmp	r8, r0
 8009afe:	d13a      	bne.n	8009b76 <_malloc_r+0xd2>
 8009b00:	6821      	ldr	r1, [r4, #0]
 8009b02:	3503      	adds	r5, #3
 8009b04:	1a6d      	subs	r5, r5, r1
 8009b06:	f025 0503 	bic.w	r5, r5, #3
 8009b0a:	3508      	adds	r5, #8
 8009b0c:	2d0c      	cmp	r5, #12
 8009b0e:	bf38      	it	cc
 8009b10:	250c      	movcc	r5, #12
 8009b12:	4629      	mov	r1, r5
 8009b14:	4638      	mov	r0, r7
 8009b16:	f7ff ffa5 	bl	8009a64 <sbrk_aligned>
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	d02b      	beq.n	8009b76 <_malloc_r+0xd2>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	442b      	add	r3, r5
 8009b22:	6023      	str	r3, [r4, #0]
 8009b24:	e00e      	b.n	8009b44 <_malloc_r+0xa0>
 8009b26:	6822      	ldr	r2, [r4, #0]
 8009b28:	1b52      	subs	r2, r2, r5
 8009b2a:	d41e      	bmi.n	8009b6a <_malloc_r+0xc6>
 8009b2c:	2a0b      	cmp	r2, #11
 8009b2e:	d916      	bls.n	8009b5e <_malloc_r+0xba>
 8009b30:	1961      	adds	r1, r4, r5
 8009b32:	42a3      	cmp	r3, r4
 8009b34:	6025      	str	r5, [r4, #0]
 8009b36:	bf18      	it	ne
 8009b38:	6059      	strne	r1, [r3, #4]
 8009b3a:	6863      	ldr	r3, [r4, #4]
 8009b3c:	bf08      	it	eq
 8009b3e:	6031      	streq	r1, [r6, #0]
 8009b40:	5162      	str	r2, [r4, r5]
 8009b42:	604b      	str	r3, [r1, #4]
 8009b44:	4638      	mov	r0, r7
 8009b46:	f104 060b 	add.w	r6, r4, #11
 8009b4a:	f000 f865 	bl	8009c18 <__malloc_unlock>
 8009b4e:	f026 0607 	bic.w	r6, r6, #7
 8009b52:	1d23      	adds	r3, r4, #4
 8009b54:	1af2      	subs	r2, r6, r3
 8009b56:	d0b6      	beq.n	8009ac6 <_malloc_r+0x22>
 8009b58:	1b9b      	subs	r3, r3, r6
 8009b5a:	50a3      	str	r3, [r4, r2]
 8009b5c:	e7b3      	b.n	8009ac6 <_malloc_r+0x22>
 8009b5e:	6862      	ldr	r2, [r4, #4]
 8009b60:	42a3      	cmp	r3, r4
 8009b62:	bf0c      	ite	eq
 8009b64:	6032      	streq	r2, [r6, #0]
 8009b66:	605a      	strne	r2, [r3, #4]
 8009b68:	e7ec      	b.n	8009b44 <_malloc_r+0xa0>
 8009b6a:	4623      	mov	r3, r4
 8009b6c:	6864      	ldr	r4, [r4, #4]
 8009b6e:	e7b2      	b.n	8009ad6 <_malloc_r+0x32>
 8009b70:	4634      	mov	r4, r6
 8009b72:	6876      	ldr	r6, [r6, #4]
 8009b74:	e7b9      	b.n	8009aea <_malloc_r+0x46>
 8009b76:	230c      	movs	r3, #12
 8009b78:	603b      	str	r3, [r7, #0]
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	f000 f84c 	bl	8009c18 <__malloc_unlock>
 8009b80:	e7a1      	b.n	8009ac6 <_malloc_r+0x22>
 8009b82:	6025      	str	r5, [r4, #0]
 8009b84:	e7de      	b.n	8009b44 <_malloc_r+0xa0>
 8009b86:	bf00      	nop
 8009b88:	200022c8 	.word	0x200022c8

08009b8c <_realloc_r>:
 8009b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b90:	4680      	mov	r8, r0
 8009b92:	4614      	mov	r4, r2
 8009b94:	460e      	mov	r6, r1
 8009b96:	b921      	cbnz	r1, 8009ba2 <_realloc_r+0x16>
 8009b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	f7ff bf81 	b.w	8009aa4 <_malloc_r>
 8009ba2:	b92a      	cbnz	r2, 8009bb0 <_realloc_r+0x24>
 8009ba4:	f7ff ff12 	bl	80099cc <_free_r>
 8009ba8:	4625      	mov	r5, r4
 8009baa:	4628      	mov	r0, r5
 8009bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb0:	f000 f838 	bl	8009c24 <_malloc_usable_size_r>
 8009bb4:	4284      	cmp	r4, r0
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	d802      	bhi.n	8009bc0 <_realloc_r+0x34>
 8009bba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bbe:	d812      	bhi.n	8009be6 <_realloc_r+0x5a>
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	f7ff ff6e 	bl	8009aa4 <_malloc_r>
 8009bc8:	4605      	mov	r5, r0
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d0ed      	beq.n	8009baa <_realloc_r+0x1e>
 8009bce:	42bc      	cmp	r4, r7
 8009bd0:	4622      	mov	r2, r4
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	bf28      	it	cs
 8009bd6:	463a      	movcs	r2, r7
 8009bd8:	f7ff fbb8 	bl	800934c <memcpy>
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4640      	mov	r0, r8
 8009be0:	f7ff fef4 	bl	80099cc <_free_r>
 8009be4:	e7e1      	b.n	8009baa <_realloc_r+0x1e>
 8009be6:	4635      	mov	r5, r6
 8009be8:	e7df      	b.n	8009baa <_realloc_r+0x1e>
	...

08009bec <_sbrk_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4d06      	ldr	r5, [pc, #24]	; (8009c08 <_sbrk_r+0x1c>)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	602b      	str	r3, [r5, #0]
 8009bf8:	f7f7 f82e 	bl	8000c58 <_sbrk>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d102      	bne.n	8009c06 <_sbrk_r+0x1a>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	b103      	cbz	r3, 8009c06 <_sbrk_r+0x1a>
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	200022d0 	.word	0x200022d0

08009c0c <__malloc_lock>:
 8009c0c:	4801      	ldr	r0, [pc, #4]	; (8009c14 <__malloc_lock+0x8>)
 8009c0e:	f000 b811 	b.w	8009c34 <__retarget_lock_acquire_recursive>
 8009c12:	bf00      	nop
 8009c14:	200022d4 	.word	0x200022d4

08009c18 <__malloc_unlock>:
 8009c18:	4801      	ldr	r0, [pc, #4]	; (8009c20 <__malloc_unlock+0x8>)
 8009c1a:	f000 b80c 	b.w	8009c36 <__retarget_lock_release_recursive>
 8009c1e:	bf00      	nop
 8009c20:	200022d4 	.word	0x200022d4

08009c24 <_malloc_usable_size_r>:
 8009c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c28:	1f18      	subs	r0, r3, #4
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	bfbc      	itt	lt
 8009c2e:	580b      	ldrlt	r3, [r1, r0]
 8009c30:	18c0      	addlt	r0, r0, r3
 8009c32:	4770      	bx	lr

08009c34 <__retarget_lock_acquire_recursive>:
 8009c34:	4770      	bx	lr

08009c36 <__retarget_lock_release_recursive>:
 8009c36:	4770      	bx	lr

08009c38 <_init>:
 8009c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3a:	bf00      	nop
 8009c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c3e:	bc08      	pop	{r3}
 8009c40:	469e      	mov	lr, r3
 8009c42:	4770      	bx	lr

08009c44 <_fini>:
 8009c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c46:	bf00      	nop
 8009c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4a:	bc08      	pop	{r3}
 8009c4c:	469e      	mov	lr, r3
 8009c4e:	4770      	bx	lr
