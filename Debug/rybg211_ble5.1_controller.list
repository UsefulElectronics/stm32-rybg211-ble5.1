
rybg211_ble5.1_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08009bc4  08009bc4  00019bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d98  08009d98  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009d98  08009d98  00019d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009da0  08009da0  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009da0  08009da0  00019da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009da4  08009da4  00019da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002178  20000160  08009f08  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022d8  08009f08  000222d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013995  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c2  00000000  00000000  00033b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00036ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00037d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019380  00000000  00000000  00038ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139ca  00000000  00000000  00051e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008acfb  00000000  00000000  0006582a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef4  00000000  00000000  000f0578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009bac 	.word	0x08009bac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08009bac 	.word	0x08009bac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fbba 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f832 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8ea 	bl	8000778 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8c0 	bl	8000728 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f894 	bl	80006d4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005ac:	f007 fffc 	bl	80085a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  CDC_Handler_Init_FS	(main_UsbRxTask);
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <main+0x58>)
 80005b2:	f008 f8fd 	bl	80087b0 <CDC_Handler_Init_FS>

  rybg211_bleModuleInit();
 80005b6:	f008 fd31 	bl	800901c <rybg211_bleModuleInit>

  rybg211_setDeviceName(hBleModule.txBuffer, "BLE Bridge");
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <main+0x5c>)
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <main+0x60>)
 80005be:	f008 fd41 	bl	8009044 <rybg211_setDeviceName>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80005c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c6:	490c      	ldr	r1, [pc, #48]	; (80005f8 <main+0x64>)
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <main+0x68>)
 80005ca:	f003 fa89 	bl	8003ae0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <main+0x6c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x6c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f022 0208 	bic.w	r2, r2, #8
 80005dc:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  main_UartTxTask();
 80005de:	f000 f945 	bl	800086c <main_UartTxTask>

	  main_UartRxTask();
 80005e2:	f000 f96f 	bl	80008c4 <main_UartRxTask>

	  main_bridgeDataTransfare();
 80005e6:	f000 f9b9 	bl	800095c <main_bridgeDataTransfare>
	  main_UartTxTask();
 80005ea:	e7f8      	b.n	80005de <main+0x4a>
 80005ec:	08000925 	.word	0x08000925
 80005f0:	08009bc4 	.word	0x08009bc4
 80005f4:	200020c5 	.word	0x200020c5
 80005f8:	200021c5 	.word	0x200021c5
 80005fc:	2000017c 	.word	0x2000017c
 8000600:	200001c0 	.word	0x200001c0

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f008 fe62 	bl	80092dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <SystemClock_Config+0xc8>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xcc>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000674:	230f      	movs	r3, #15
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000678:	2390      	movs	r3, #144	; 0x90
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067c:	2304      	movs	r3, #4
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000680:	2305      	movs	r3, #5
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fd05 	bl	8003098 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 f994 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2101      	movs	r1, #1
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 ff67 	bl	8003588 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c0:	f000 f97e 	bl	80009c0 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART1_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 800070c:	f003 f91c 	bl	8003948 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f953 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000017c 	.word	0x2000017c
 8000724:	40011000 	.word	0x40011000

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_DMA_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <MX_DMA_Init+0x4c>)
 8000738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_DMA_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	203a      	movs	r0, #58	; 0x3a
 8000750:	f000 fc4f 	bl	8000ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000754:	203a      	movs	r0, #58	; 0x3a
 8000756:	f000 fc68 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2046      	movs	r0, #70	; 0x46
 8000760:	f000 fc47 	bl	8000ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000764:	2046      	movs	r0, #70	; 0x46
 8000766:	f000 fc60 	bl	800102a <HAL_NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f244 01e0 	movw	r1, #16608	; 0x40e0
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007ea:	f001 f9bf 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODULE_RESET_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80007ee:	f244 03e0 	movw	r3, #16608	; 0x40e0
 80007f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0xa0>)
 8000808:	f001 f82c 	bl	8001864 <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400

0800081c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	807b      	strh	r3, [r7, #2]
	hBleModule.controlFlags.flag.packetReceived = ENABLE;
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <HAL_UARTEx_RxEventCallback+0x40>)
 800082a:	7813      	ldrb	r3, [r2, #0]
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	7013      	strb	r3, [r2, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 8000832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000836:	490a      	ldr	r1, [pc, #40]	; (8000860 <HAL_UARTEx_RxEventCallback+0x44>)
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <HAL_UARTEx_RxEventCallback+0x48>)
 800083a:	f003 f951 	bl	8003ae0 <HAL_UARTEx_ReceiveToIdle_DMA>

	hBleModule.rxPacketSize = Size;
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_UARTEx_RxEventCallback+0x40>)
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	8093      	strh	r3, [r2, #4]

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_UARTEx_RxEventCallback+0x4c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f022 0208 	bic.w	r2, r2, #8
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200020b0 	.word	0x200020b0
 8000860:	200021c5 	.word	0x200021c5
 8000864:	2000017c 	.word	0x2000017c
 8000868:	200001c0 	.word	0x200001c0

0800086c <main_UartTxTask>:


static void main_UartTxTask()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hBleModule.txTimer > 1000))
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <main_UartTxTask+0x4c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d019      	beq.n	80008b2 <main_UartTxTask+0x46>
 800087e:	f000 faad 	bl	8000ddc <HAL_GetTick>
 8000882:	4602      	mov	r2, r0
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <main_UartTxTask+0x4c>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800088e:	d910      	bls.n	80008b2 <main_UartTxTask+0x46>
	{
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <main_UartTxTask+0x4c>)
 8000892:	885b      	ldrh	r3, [r3, #2]
 8000894:	461a      	mov	r2, r3
 8000896:	4909      	ldr	r1, [pc, #36]	; (80008bc <main_UartTxTask+0x50>)
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <main_UartTxTask+0x54>)
 800089a:	f003 f8a3 	bl	80039e4 <HAL_UART_Transmit_DMA>

		hBleModule.controlFlags.flag.packetToTransmit = DISABLE;
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <main_UartTxTask+0x4c>)
 80008a0:	7813      	ldrb	r3, [r2, #0]
 80008a2:	f36f 0341 	bfc	r3, #1, #1
 80008a6:	7013      	strb	r3, [r2, #0]

		hBleModule.txTimer = HAL_GetTick();
 80008a8:	f000 fa98 	bl	8000ddc <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a02      	ldr	r2, [pc, #8]	; (80008b8 <main_UartTxTask+0x4c>)
 80008b0:	60d3      	str	r3, [r2, #12]
	}
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200020b0 	.word	0x200020b0
 80008bc:	200020c5 	.word	0x200020c5
 80008c0:	2000017c 	.word	0x2000017c

080008c4 <main_UartRxTask>:

static void main_UartRxTask()
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetReceived)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <main_UartRxTask+0x50>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d01b      	beq.n	800090e <main_UartRxTask+0x4a>
	{
		if(rybg211_rxPacketParser(hBleModule.rxBuffer, hBleModule.rxPacketSize))
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <main_UartRxTask+0x50>)
 80008d8:	889b      	ldrh	r3, [r3, #4]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <main_UartRxTask+0x54>)
 80008e0:	f008 fbe6 	bl	80090b0 <rybg211_rxPacketParser>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00c      	beq.n	8000904 <main_UartRxTask+0x40>
		{
			hBridge.blePacketSize = (uint16_t)rybg211_rxDataRead(hBleModule.rxBuffer, hBridge.bleBuffer);
 80008ea:	490c      	ldr	r1, [pc, #48]	; (800091c <main_UartRxTask+0x58>)
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <main_UartRxTask+0x54>)
 80008ee:	f008 fc89 	bl	8009204 <rybg211_rxDataRead>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <main_UartRxTask+0x5c>)
 80008f8:	805a      	strh	r2, [r3, #2]

			hBridge.controlFlags.flag.bleToUsb = ENABLE;
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <main_UartRxTask+0x5c>)
 80008fc:	7813      	ldrb	r3, [r2, #0]
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	7013      	strb	r3, [r2, #0]
		}
		hBleModule.controlFlags.flag.packetReceived = DISABLE;
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <main_UartRxTask+0x50>)
 8000906:	7813      	ldrb	r3, [r2, #0]
 8000908:	f36f 0300 	bfc	r3, #0, #1
 800090c:	7013      	strb	r3, [r2, #0]

	}
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200020b0 	.word	0x200020b0
 8000918:	200021c5 	.word	0x200021c5
 800091c:	2000028c 	.word	0x2000028c
 8000920:	20000280 	.word	0x20000280

08000924 <main_UsbRxTask>:
 * @param 	cdcRxBuffer	:	Buffer will carry the data received over USB.
 *
 * @param 	packetSize	:	The size of the received packet.
 */
static void main_UsbRxTask(char* cdcRxBuffer, uint16_t packetSize)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	807b      	strh	r3, [r7, #2]

	memcpy(hBridge.usbBuffer, cdcRxBuffer, packetSize);
 8000930:	887b      	ldrh	r3, [r7, #2]
 8000932:	461a      	mov	r2, r3
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <main_UsbRxTask+0x30>)
 8000938:	f008 fcc2 	bl	80092c0 <memcpy>

	hBridge.usbPacketSize = packetSize;
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <main_UsbRxTask+0x34>)
 800093e:	887b      	ldrh	r3, [r7, #2]
 8000940:	8093      	strh	r3, [r2, #4]

	hBridge.controlFlags.flag.usbToBle = ENABLE;
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <main_UsbRxTask+0x34>)
 8000944:	7813      	ldrb	r3, [r2, #0]
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	7013      	strb	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000038c 	.word	0x2000038c
 8000958:	20000280 	.word	0x20000280

0800095c <main_bridgeDataTransfare>:

static void main_bridgeDataTransfare()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	if(hBridge.controlFlags.flag.bleToUsb)
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <main_bridgeDataTransfare+0x5c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d016      	beq.n	800099c <main_bridgeDataTransfare+0x40>
	{
		hBridge.controlFlags.flag.bleToUsb = DISABLE;
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <main_bridgeDataTransfare+0x5c>)
 8000970:	7813      	ldrb	r3, [r2, #0]
 8000972:	f36f 0300 	bfc	r3, #0, #1
 8000976:	7013      	strb	r3, [r2, #0]

		//Place feedline character at the end of the packet and increment the size by 1.
		hBridge.bleBuffer[hBridge.blePacketSize++] = '\n';
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <main_bridgeDataTransfare+0x5c>)
 800097a:	885b      	ldrh	r3, [r3, #2]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	b291      	uxth	r1, r2
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <main_bridgeDataTransfare+0x5c>)
 8000982:	8051      	strh	r1, [r2, #2]
 8000984:	461a      	mov	r2, r3
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <main_bridgeDataTransfare+0x5c>)
 8000988:	4413      	add	r3, r2
 800098a:	220a      	movs	r2, #10
 800098c:	731a      	strb	r2, [r3, #12]

		CDC_Transmit_FS((uint8_t*) hBridge.bleBuffer, (uint16_t)hBridge.blePacketSize);
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <main_bridgeDataTransfare+0x5c>)
 8000990:	885b      	ldrh	r3, [r3, #2]
 8000992:	4619      	mov	r1, r3
 8000994:	4809      	ldr	r0, [pc, #36]	; (80009bc <main_bridgeDataTransfare+0x60>)
 8000996:	f007 fed3 	bl	8008740 <CDC_Transmit_FS>
	{


		hBridge.controlFlags.flag.usbToBle = DISABLE;
	}
}
 800099a:	e00b      	b.n	80009b4 <main_bridgeDataTransfare+0x58>
	else if(hBridge.controlFlags.flag.usbToBle)
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <main_bridgeDataTransfare+0x5c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d004      	beq.n	80009b4 <main_bridgeDataTransfare+0x58>
		hBridge.controlFlags.flag.usbToBle = DISABLE;
 80009aa:	4a03      	ldr	r2, [pc, #12]	; (80009b8 <main_bridgeDataTransfare+0x5c>)
 80009ac:	7813      	ldrb	r3, [r2, #0]
 80009ae:	f36f 0341 	bfc	r3, #1, #1
 80009b2:	7013      	strb	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000280 	.word	0x20000280
 80009bc:	2000028c 	.word	0x2000028c

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <Error_Handler+0x8>
	...

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <HAL_MspInit+0x4c>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <HAL_MspInit+0x4c>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a4c      	ldr	r2, [pc, #304]	; (8000b6c <HAL_UART_MspInit+0x150>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	f040 8091 	bne.w	8000b62 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	4b4a      	ldr	r3, [pc, #296]	; (8000b70 <HAL_UART_MspInit+0x154>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a48:	4a49      	ldr	r2, [pc, #292]	; (8000b70 <HAL_UART_MspInit+0x154>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a50:	4b47      	ldr	r3, [pc, #284]	; (8000b70 <HAL_UART_MspInit+0x154>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b43      	ldr	r3, [pc, #268]	; (8000b70 <HAL_UART_MspInit+0x154>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a42      	ldr	r2, [pc, #264]	; (8000b70 <HAL_UART_MspInit+0x154>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6c:	4b40      	ldr	r3, [pc, #256]	; (8000b70 <HAL_UART_MspInit+0x154>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4837      	ldr	r0, [pc, #220]	; (8000b74 <HAL_UART_MspInit+0x158>)
 8000a96:	f000 fee5 	bl	8001864 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000a9a:	4b37      	ldr	r3, [pc, #220]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000a9c:	4a37      	ldr	r2, [pc, #220]	; (8000b7c <HAL_UART_MspInit+0x160>)
 8000a9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000aa0:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aa8:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aae:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab4:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ada:	4827      	ldr	r0, [pc, #156]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000adc:	f000 fac0 	bl	8001060 <HAL_DMA_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000ae6:	f7ff ff6b 	bl	80009c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000aee:	639a      	str	r2, [r3, #56]	; 0x38
 8000af0:	4a21      	ldr	r2, [pc, #132]	; (8000b78 <HAL_UART_MspInit+0x15c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000af6:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000af8:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000afa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b02:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000b06:	2240      	movs	r2, #64	; 0x40
 8000b08:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b16:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b36:	4812      	ldr	r0, [pc, #72]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000b38:	f000 fa92 	bl	8001060 <HAL_DMA_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000b42:	f7ff ff3d 	bl	80009c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000b4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2025      	movs	r0, #37	; 0x25
 8000b58:	f000 fa4b 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b5c:	2025      	movs	r0, #37	; 0x25
 8000b5e:	f000 fa64 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	200001c0 	.word	0x200001c0
 8000b7c:	40026440 	.word	0x40026440
 8000b80:	20000220 	.word	0x20000220
 8000b84:	400264b8 	.word	0x400264b8

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f8ee 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <USART1_IRQHandler+0x10>)
 8000be2:	f002 ffe3 	bl	8003bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000017c 	.word	0x2000017c

08000bf0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <DMA2_Stream2_IRQHandler+0x10>)
 8000bf6:	f000 fbcb 	bl	8001390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200001c0 	.word	0x200001c0

08000c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <OTG_FS_IRQHandler+0x10>)
 8000c0a:	f001 f918 	bl	8001e3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20001984 	.word	0x20001984

08000c18 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <DMA2_Stream7_IRQHandler+0x10>)
 8000c1e:	f000 fbb7 	bl	8001390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000220 	.word	0x20000220

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f008 faf6 	bl	800924c <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20020000 	.word	0x20020000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	2000048c 	.word	0x2000048c
 8000c94:	200022d8 	.word	0x200022d8

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd8:	4c0b      	ldr	r4, [pc, #44]	; (8000d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce6:	f7ff ffd7 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f008 fab5 	bl	8009258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fc51 	bl	8000594 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000d00:	08009da8 	.word	0x08009da8
  ldr r2, =_sbss
 8000d04:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000d08:	200022d8 	.word	0x200022d8

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <HAL_Init+0x40>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_Init+0x40>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_Init+0x40>)
 8000d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f94f 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f000 f808 	bl	8000d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fe42 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x54>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x58>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f967 	bl	8001046 <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00e      	b.n	8000da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d80a      	bhi.n	8000d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f92f 	bl	8000ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_InitTick+0x5c>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000490 	.word	0x20000490

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000490 	.word	0x20000490

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_Delay+0x44>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffde 	bl	8000ddc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4907      	ldr	r1, [pc, #28]	; (8000ed8 <__NVIC_EnableIRQ+0x38>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ff8e 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff29 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff3e 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff8e 	bl	8000f30 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff31 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffa2 	bl	8000f98 <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff feb6 	bl	8000ddc <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e099      	b.n	80011b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2202      	movs	r2, #2
 8001080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800109c:	e00f      	b.n	80010be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800109e:	f7ff fe9d 	bl	8000ddc <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	d908      	bls.n	80010be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2220      	movs	r2, #32
 80010b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2203      	movs	r2, #3
 80010b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e078      	b.n	80011b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e8      	bne.n	800109e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <HAL_DMA_Init+0x158>)
 80010d8:	4013      	ands	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4313      	orrs	r3, r2
 800110e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	2b04      	cmp	r3, #4
 8001116:	d107      	bne.n	8001128 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4313      	orrs	r3, r2
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4313      	orrs	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f023 0307 	bic.w	r3, r3, #7
 800113e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	4313      	orrs	r3, r2
 8001148:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	2b04      	cmp	r3, #4
 8001150:	d117      	bne.n	8001182 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00e      	beq.n	8001182 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 fb01 	bl	800176c <DMA_CheckFifoParam>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d008      	beq.n	8001182 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2240      	movs	r2, #64	; 0x40
 8001174:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800117e:	2301      	movs	r3, #1
 8001180:	e016      	b.n	80011b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fab8 	bl	8001700 <DMA_CalcBaseAndBitshift>
 8001190:	4603      	mov	r3, r0
 8001192:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001198:	223f      	movs	r2, #63	; 0x3f
 800119a:	409a      	lsls	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	f010803f 	.word	0xf010803f

080011bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_DMA_Start_IT+0x26>
 80011de:	2302      	movs	r3, #2
 80011e0:	e040      	b.n	8001264 <HAL_DMA_Start_IT+0xa8>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d12f      	bne.n	8001256 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2202      	movs	r2, #2
 80011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 fa4a 	bl	80016a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	223f      	movs	r2, #63	; 0x3f
 8001216:	409a      	lsls	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0216 	orr.w	r2, r2, #22
 800122a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0208 	orr.w	r2, r2, #8
 8001242:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	e005      	b.n	8001262 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800125e:	2302      	movs	r3, #2
 8001260:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001262:	7dfb      	ldrb	r3, [r7, #23]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800127a:	f7ff fdaf 	bl	8000ddc <HAL_GetTick>
 800127e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d008      	beq.n	800129e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e052      	b.n	8001344 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0216 	bic.w	r2, r2, #22
 80012ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d103      	bne.n	80012ce <HAL_DMA_Abort+0x62>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0208 	bic.w	r2, r2, #8
 80012dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ee:	e013      	b.n	8001318 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f0:	f7ff fd74 	bl	8000ddc <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b05      	cmp	r3, #5
 80012fc:	d90c      	bls.n	8001318 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2220      	movs	r2, #32
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2203      	movs	r2, #3
 8001308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e015      	b.n	8001344 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1e4      	bne.n	80012f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132a:	223f      	movs	r2, #63	; 0x3f
 800132c:	409a      	lsls	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d004      	beq.n	800136a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00c      	b.n	8001384 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2205      	movs	r2, #5
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800139c:	4b8e      	ldr	r3, [pc, #568]	; (80015d8 <HAL_DMA_IRQHandler+0x248>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a8e      	ldr	r2, [pc, #568]	; (80015dc <HAL_DMA_IRQHandler+0x24c>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0a9b      	lsrs	r3, r3, #10
 80013a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	2208      	movs	r2, #8
 80013bc:	409a      	lsls	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01a      	beq.n	80013fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0204 	bic.w	r2, r2, #4
 80013e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	2208      	movs	r2, #8
 80013ea:	409a      	lsls	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f4:	f043 0201 	orr.w	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001400:	2201      	movs	r2, #1
 8001402:	409a      	lsls	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d012      	beq.n	8001432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	2201      	movs	r2, #1
 8001420:	409a      	lsls	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	f043 0202 	orr.w	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001436:	2204      	movs	r2, #4
 8001438:	409a      	lsls	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d012      	beq.n	8001468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00b      	beq.n	8001468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	2204      	movs	r2, #4
 8001456:	409a      	lsls	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	f043 0204 	orr.w	r2, r3, #4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146c:	2210      	movs	r2, #16
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d043      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d03c      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2210      	movs	r2, #16
 800148c:	409a      	lsls	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d018      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d108      	bne.n	80014c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d024      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	4798      	blx	r3
 80014be:	e01f      	b.n	8001500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01b      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
 80014d0:	e016      	b.n	8001500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0208 	bic.w	r2, r2, #8
 80014ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	2220      	movs	r2, #32
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 808f 	beq.w	8001630 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8087 	beq.w	8001630 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	2220      	movs	r2, #32
 8001528:	409a      	lsls	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b05      	cmp	r3, #5
 8001538:	d136      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0216 	bic.w	r2, r2, #22
 8001548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d103      	bne.n	800156a <HAL_DMA_IRQHandler+0x1da>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0208 	bic.w	r2, r2, #8
 8001578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	223f      	movs	r2, #63	; 0x3f
 8001580:	409a      	lsls	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159a:	2b00      	cmp	r3, #0
 800159c:	d07e      	beq.n	800169c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
        }
        return;
 80015a6:	e079      	b.n	800169c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01d      	beq.n	80015f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10d      	bne.n	80015e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d031      	beq.n	8001630 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
 80015d4:	e02c      	b.n	8001630 <HAL_DMA_IRQHandler+0x2a0>
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000
 80015dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d023      	beq.n	8001630 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4798      	blx	r3
 80015f0:	e01e      	b.n	8001630 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10f      	bne.n	8001620 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0210 	bic.w	r2, r2, #16
 800160e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	2b00      	cmp	r3, #0
 8001636:	d032      	beq.n	800169e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d022      	beq.n	800168a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2205      	movs	r2, #5
 8001648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	3301      	adds	r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	429a      	cmp	r2, r3
 8001666:	d307      	bcc.n	8001678 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f2      	bne.n	800165c <HAL_DMA_IRQHandler+0x2cc>
 8001676:	e000      	b.n	800167a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001678:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
 800169a:	e000      	b.n	800169e <HAL_DMA_IRQHandler+0x30e>
        return;
 800169c:	bf00      	nop
    }
  }
}
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b40      	cmp	r3, #64	; 0x40
 80016d0:	d108      	bne.n	80016e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016e2:	e007      	b.n	80016f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	60da      	str	r2, [r3, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3b10      	subs	r3, #16
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <DMA_CalcBaseAndBitshift+0x64>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <DMA_CalcBaseAndBitshift+0x68>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d909      	bls.n	8001742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	1d1a      	adds	r2, r3, #4
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	659a      	str	r2, [r3, #88]	; 0x58
 8001740:	e007      	b.n	8001752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	aaaaaaab 	.word	0xaaaaaaab
 8001768:	08009c5c 	.word	0x08009c5c

0800176c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d11f      	bne.n	80017c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d856      	bhi.n	800183a <DMA_CheckFifoParam+0xce>
 800178c:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <DMA_CheckFifoParam+0x28>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017b7 	.word	0x080017b7
 800179c:	080017a5 	.word	0x080017a5
 80017a0:	0800183b 	.word	0x0800183b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d046      	beq.n	800183e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b4:	e043      	b.n	800183e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017be:	d140      	bne.n	8001842 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c4:	e03d      	b.n	8001842 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ce:	d121      	bne.n	8001814 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d837      	bhi.n	8001846 <DMA_CheckFifoParam+0xda>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <DMA_CheckFifoParam+0x70>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f3 	.word	0x080017f3
 80017e4:	080017ed 	.word	0x080017ed
 80017e8:	08001805 	.word	0x08001805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
      break;
 80017f0:	e030      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d025      	beq.n	800184a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001802:	e022      	b.n	800184a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800180c:	d11f      	bne.n	800184e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001812:	e01c      	b.n	800184e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d903      	bls.n	8001822 <DMA_CheckFifoParam+0xb6>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d003      	beq.n	8001828 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001820:	e018      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
      break;
 8001826:	e015      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00e      	beq.n	8001852 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
      break;
 8001838:	e00b      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 800183a:	bf00      	nop
 800183c:	e00a      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 800183e:	bf00      	nop
 8001840:	e008      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 8001842:	bf00      	nop
 8001844:	e006      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 8001846:	bf00      	nop
 8001848:	e004      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 800184a:	bf00      	nop
 800184c:	e002      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;   
 800184e:	bf00      	nop
 8001850:	e000      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 8001852:	bf00      	nop
    }
  } 
  
  return status; 
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e159      	b.n	8001b34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 8148 	bne.w	8001b2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d005      	beq.n	80018b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d130      	bne.n	8001918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b03      	cmp	r3, #3
 8001922:	d017      	beq.n	8001954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d123      	bne.n	80019a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	69b9      	ldr	r1, [r7, #24]
 80019a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80a2 	beq.w	8001b2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b57      	ldr	r3, [pc, #348]	; (8001b4c <HAL_GPIO_Init+0x2e8>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a56      	ldr	r2, [pc, #344]	; (8001b4c <HAL_GPIO_Init+0x2e8>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b54      	ldr	r3, [pc, #336]	; (8001b4c <HAL_GPIO_Init+0x2e8>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a06:	4a52      	ldr	r2, [pc, #328]	; (8001b50 <HAL_GPIO_Init+0x2ec>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a49      	ldr	r2, [pc, #292]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d019      	beq.n	8001a66 <HAL_GPIO_Init+0x202>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a48      	ldr	r2, [pc, #288]	; (8001b58 <HAL_GPIO_Init+0x2f4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_GPIO_Init+0x1fe>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a47      	ldr	r2, [pc, #284]	; (8001b5c <HAL_GPIO_Init+0x2f8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00d      	beq.n	8001a5e <HAL_GPIO_Init+0x1fa>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a46      	ldr	r2, [pc, #280]	; (8001b60 <HAL_GPIO_Init+0x2fc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d007      	beq.n	8001a5a <HAL_GPIO_Init+0x1f6>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a45      	ldr	r2, [pc, #276]	; (8001b64 <HAL_GPIO_Init+0x300>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_GPIO_Init+0x1f2>
 8001a52:	2304      	movs	r3, #4
 8001a54:	e008      	b.n	8001a68 <HAL_GPIO_Init+0x204>
 8001a56:	2307      	movs	r3, #7
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x204>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e004      	b.n	8001a68 <HAL_GPIO_Init+0x204>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_Init+0x204>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_GPIO_Init+0x204>
 8001a66:	2300      	movs	r3, #0
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	f002 0203 	and.w	r2, r2, #3
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	4093      	lsls	r3, r2
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a78:	4935      	ldr	r1, [pc, #212]	; (8001b50 <HAL_GPIO_Init+0x2ec>)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aaa:	4a2f      	ldr	r2, [pc, #188]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad4:	4a24      	ldr	r2, [pc, #144]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001afe:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b28:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	2b0f      	cmp	r3, #15
 8001b38:	f67f aea2 	bls.w	8001880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40013800 	.word	0x40013800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40013c00 	.word	0x40013c00

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b88:	e003      	b.n	8001b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	619a      	str	r2, [r3, #24]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba0:	b08f      	sub	sp, #60	; 0x3c
 8001ba2:	af0a      	add	r7, sp, #40	; 0x28
 8001ba4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e10f      	b.n	8001dd0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f006 ff1c 	bl	8008a08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 f9d9 	bl	8004fa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	687e      	ldr	r6, [r7, #4]
 8001bfc:	466d      	mov	r5, sp
 8001bfe:	f106 0410 	add.w	r4, r6, #16
 8001c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c12:	1d33      	adds	r3, r6, #4
 8001c14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c16:	6838      	ldr	r0, [r7, #0]
 8001c18:	f003 f8b0 	bl	8004d7c <USB_CoreInit>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2202      	movs	r2, #2
 8001c26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0d0      	b.n	8001dd0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f003 f9c7 	bl	8004fc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	e04a      	b.n	8001cd6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	333d      	adds	r3, #61	; 0x3d
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	333c      	adds	r3, #60	; 0x3c
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	b298      	uxth	r0, r3
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	3344      	adds	r3, #68	; 0x44
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3340      	adds	r3, #64	; 0x40
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3348      	adds	r3, #72	; 0x48
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	334c      	adds	r3, #76	; 0x4c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	3354      	adds	r3, #84	; 0x54
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d3af      	bcc.n	8001c40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	e044      	b.n	8001d70 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ce6:	7bfa      	ldrb	r2, [r7, #15]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3b5      	bcc.n	8001ce6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	687e      	ldr	r6, [r7, #4]
 8001d82:	466d      	mov	r5, sp
 8001d84:	f106 0410 	add.w	r4, r6, #16
 8001d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d94:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d98:	1d33      	adds	r3, r6, #4
 8001d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d9c:	6838      	ldr	r0, [r7, #0]
 8001d9e:	f003 f95f 	bl	8005060 <USB_DevInit>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e00d      	b.n	8001dd0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 faae 	bl	800632a <USB_DevDisconnect>

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_PCD_Start+0x1c>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e020      	b.n	8001e36 <HAL_PCD_Start+0x5e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d109      	bne.n	8001e18 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d005      	beq.n	8001e18 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 f8b1 	bl	8004f84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 fa5e 	bl	80062e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e3e:	b590      	push	{r4, r7, lr}
 8001e40:	b08d      	sub	sp, #52	; 0x34
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f004 fb1c 	bl	8006492 <USB_GetMode>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f040 848a 	bne.w	8002776 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f004 fa80 	bl	800636c <USB_ReadInterrupts>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8480 	beq.w	8002774 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 fa6d 	bl	800636c <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d107      	bne.n	8001eac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f002 0202 	and.w	r2, r2, #2
 8001eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 fa5b 	bl	800636c <USB_ReadInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d161      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0210 	bic.w	r2, r2, #16
 8001ece:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	0c5b      	lsrs	r3, r3, #17
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d124      	bne.n	8001f46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d035      	beq.n	8001f74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6a38      	ldr	r0, [r7, #32]
 8001f1c:	f004 f892 	bl	8006044 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f2c:	441a      	add	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	6a1a      	ldr	r2, [r3, #32]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f3e:	441a      	add	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	621a      	str	r2, [r3, #32]
 8001f44:	e016      	b.n	8001f74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	0c5b      	lsrs	r3, r3, #17
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d110      	bne.n	8001f74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f58:	2208      	movs	r2, #8
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6a38      	ldr	r0, [r7, #32]
 8001f5e:	f004 f871 	bl	8006044 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	6a1a      	ldr	r2, [r3, #32]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f6e:	441a      	add	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0210 	orr.w	r2, r2, #16
 8001f82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 f9ef 	bl	800636c <USB_ReadInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f98:	f040 80a7 	bne.w	80020ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 f9f4 	bl	8006392 <USB_ReadDevAllOutEpInterrupt>
 8001faa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001fac:	e099      	b.n	80020e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 808e 	beq.w	80020d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f004 fa18 	bl	80063fa <USB_ReadDevOutEPInterrupt>
 8001fca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fec2 	bl	8002d74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002006:	461a      	mov	r2, r3
 8002008:	2308      	movs	r3, #8
 800200a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800200c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 ff98 	bl	8002f44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202a:	461a      	mov	r2, r3
 800202c:	2310      	movs	r3, #16
 800202e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d030      	beq.n	800209c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b80      	cmp	r3, #128	; 0x80
 8002044:	d109      	bne.n	800205a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002054:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002058:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800205a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	3304      	adds	r3, #4
 800206e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	78db      	ldrb	r3, [r3, #3]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d108      	bne.n	800208a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2200      	movs	r2, #0
 800207c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4619      	mov	r1, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f006 fdbb 	bl	8008c00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	4413      	add	r3, r2
 8002092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002096:	461a      	mov	r2, r3
 8002098:	2302      	movs	r3, #2
 800209a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b2:	461a      	mov	r2, r3
 80020b4:	2320      	movs	r3, #32
 80020b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ce:	461a      	mov	r2, r3
 80020d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	3301      	adds	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	085b      	lsrs	r3, r3, #1
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f47f af62 	bne.w	8001fae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f004 f93c 	bl	800636c <USB_ReadInterrupts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020fe:	f040 80db 	bne.w	80022b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f004 f95d 	bl	80063c6 <USB_ReadDevAllInEpInterrupt>
 800210c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002112:	e0cd      	b.n	80022b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80c2 	beq.w	80022a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f004 f983 	bl	8006436 <USB_ReadDevInEPInterrupt>
 8002130:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d057      	beq.n	80021ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	2201      	movs	r2, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	69f9      	ldr	r1, [r7, #28]
 8002158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800215c:	4013      	ands	r3, r2
 800215e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	4413      	add	r3, r2
 8002168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800216c:	461a      	mov	r2, r3
 800216e:	2301      	movs	r3, #1
 8002170:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d132      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	334c      	adds	r3, #76	; 0x4c
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4403      	add	r3, r0
 800219a:	3348      	adds	r3, #72	; 0x48
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4419      	add	r1, r3
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4403      	add	r3, r0
 80021ae:	334c      	adds	r3, #76	; 0x4c
 80021b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d113      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x3a2>
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3354      	adds	r3, #84	; 0x54
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d108      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021d8:	461a      	mov	r2, r3
 80021da:	2101      	movs	r1, #1
 80021dc:	f004 f98a 	bl	80064f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f006 fc8f 	bl	8008b0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d008      	beq.n	8002208 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002202:	461a      	mov	r2, r3
 8002204:	2308      	movs	r3, #8
 8002206:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221e:	461a      	mov	r2, r3
 8002220:	2310      	movs	r3, #16
 8002222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800223a:	461a      	mov	r2, r3
 800223c:	2340      	movs	r3, #64	; 0x40
 800223e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d023      	beq.n	8002292 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800224a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224c:	6a38      	ldr	r0, [r7, #32]
 800224e:	f003 f86b 	bl	8005328 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	3338      	adds	r3, #56	; 0x38
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	3304      	adds	r3, #4
 8002264:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	78db      	ldrb	r3, [r3, #3]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d108      	bne.n	8002280 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2200      	movs	r2, #0
 8002272:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	b2db      	uxtb	r3, r3
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f006 fcd2 	bl	8008c24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228c:	461a      	mov	r2, r3
 800228e:	2302      	movs	r3, #2
 8002290:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800229c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fcdb 	bl	8002c5a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	3301      	adds	r3, #1
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f47f af2e 	bne.w	8002114 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 f855 	bl	800636c <USB_ReadInterrupts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022cc:	d122      	bne.n	8002314 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d108      	bne.n	80022fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022f4:	2100      	movs	r1, #0
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fec2 	bl	8003080 <HAL_PCDEx_LPM_Callback>
 80022fc:	e002      	b.n	8002304 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f006 fc70 	bl	8008be4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f004 f827 	bl	800636c <USB_ReadInterrupts>
 800231e:	4603      	mov	r3, r0
 8002320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002328:	d112      	bne.n	8002350 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d102      	bne.n	8002340 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f006 fc2c 	bl	8008b98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800234e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f004 f809 	bl	800636c <USB_ReadInterrupts>
 800235a:	4603      	mov	r3, r0
 800235c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002364:	f040 80b7 	bne.w	80024d6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2110      	movs	r1, #16
 8002382:	4618      	mov	r0, r3
 8002384:	f002 ffd0 	bl	8005328 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238c:	e046      	b.n	800241c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	4413      	add	r3, r2
 8002396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239a:	461a      	mov	r2, r3
 800239c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b2:	0151      	lsls	r1, r2, #5
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	440a      	add	r2, r1
 80023b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ce:	461a      	mov	r2, r3
 80023d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e6:	0151      	lsls	r1, r2, #5
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	440a      	add	r2, r1
 80023ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002406:	0151      	lsls	r1, r2, #5
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	440a      	add	r2, r1
 800240c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002410:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002414:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002418:	3301      	adds	r3, #1
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002422:	429a      	cmp	r2, r3
 8002424:	d3b3      	bcc.n	800238e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002434:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002438:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	2b00      	cmp	r3, #0
 8002440:	d016      	beq.n	8002470 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002452:	f043 030b 	orr.w	r3, r3, #11
 8002456:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002468:	f043 030b 	orr.w	r3, r3, #11
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	e015      	b.n	800249c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002482:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002486:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002496:	f043 030b 	orr.w	r3, r3, #11
 800249a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024c0:	461a      	mov	r2, r3
 80024c2:	f004 f817 	bl	80064f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 ff46 	bl	800636c <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ea:	d124      	bne.n	8002536 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f003 ffdc 	bl	80064ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 ff91 	bl	8005422 <USB_GetDevSpeed>
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681c      	ldr	r4, [r3, #0]
 800250c:	f001 f9e8 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8002510:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4620      	mov	r0, r4
 800251c:	f002 fc90 	bl	8004e40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f006 fb1a 	bl	8008b5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002534:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 ff16 	bl	800636c <USB_ReadInterrupts>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b08      	cmp	r3, #8
 8002548:	d10a      	bne.n	8002560 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f006 faf7 	bl	8008b3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f002 0208 	and.w	r2, r2, #8
 800255e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f003 ff01 	bl	800636c <USB_ReadInterrupts>
 800256a:	4603      	mov	r3, r0
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d122      	bne.n	80025ba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002580:	2301      	movs	r3, #1
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	e014      	b.n	80025b0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d105      	bne.n	80025aa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fb27 	bl	8002bf8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	3301      	adds	r3, #1
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3e5      	bcc.n	8002586 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fed4 	bl	800636c <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ce:	d13b      	bne.n	8002648 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d0:	2301      	movs	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	e02b      	b.n	800262e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	3340      	adds	r3, #64	; 0x40
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d115      	bne.n	8002628 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80025fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da12      	bge.n	8002628 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	333f      	adds	r3, #63	; 0x3f
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fae8 	bl	8002bf8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	3301      	adds	r3, #1
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002634:	429a      	cmp	r2, r3
 8002636:	d3ce      	bcc.n	80025d6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f003 fe8d 	bl	800636c <USB_ReadInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002658:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800265c:	d155      	bne.n	800270a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800265e:	2301      	movs	r3, #1
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	e045      	b.n	80026f0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d12e      	bne.n	80026ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800268c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800268e:	2b00      	cmp	r3, #0
 8002690:	da2b      	bge.n	80026ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800269e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d121      	bne.n	80026ea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e6:	6053      	str	r3, [r2, #4]
            break;
 80026e8:	e007      	b.n	80026fa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	3301      	adds	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d3b4      	bcc.n	8002664 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f003 fe2c 	bl	800636c <USB_ReadInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271e:	d10a      	bne.n	8002736 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f006 fa91 	bl	8008c48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002734:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fe16 	bl	800636c <USB_ReadInterrupts>
 8002740:	4603      	mov	r3, r0
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b04      	cmp	r3, #4
 8002748:	d115      	bne.n	8002776 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f006 fa81 	bl	8008c64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	e000      	b.n	8002776 <HAL_PCD_IRQHandler+0x938>
      return;
 8002774:	bf00      	nop
    }
  }
}
 8002776:	3734      	adds	r7, #52	; 0x34
 8002778:	46bd      	mov	sp, r7
 800277a:	bd90      	pop	{r4, r7, pc}

0800277c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_PCD_SetAddress+0x1a>
 8002792:	2302      	movs	r3, #2
 8002794:	e013      	b.n	80027be <HAL_PCD_SetAddress+0x42>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fd74 	bl	800629c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	4608      	mov	r0, r1
 80027d0:	4611      	mov	r1, r2
 80027d2:	461a      	mov	r2, r3
 80027d4:	4603      	mov	r3, r0
 80027d6:	70fb      	strb	r3, [r7, #3]
 80027d8:	460b      	mov	r3, r1
 80027da:	803b      	strh	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da0f      	bge.n	800280c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 020f 	and.w	r2, r3, #15
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	3338      	adds	r3, #56	; 0x38
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	3304      	adds	r3, #4
 8002802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	705a      	strb	r2, [r3, #1]
 800280a:	e00f      	b.n	800282c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 020f 	and.w	r2, r3, #15
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	3304      	adds	r3, #4
 8002824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	b2da      	uxtb	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002838:	883a      	ldrh	r2, [r7, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	78ba      	ldrb	r2, [r7, #2]
 8002842:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	785b      	ldrb	r3, [r3, #1]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002856:	78bb      	ldrb	r3, [r7, #2]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d102      	bne.n	8002862 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_PCD_EP_Open+0xaa>
 800286c:	2302      	movs	r3, #2
 800286e:	e00e      	b.n	800288e <HAL_PCD_EP_Open+0xc8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68f9      	ldr	r1, [r7, #12]
 800287e:	4618      	mov	r0, r3
 8002880:	f002 fdf4 	bl	800546c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800288c:	7afb      	ldrb	r3, [r7, #11]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	da0f      	bge.n	80028ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	f003 020f 	and.w	r2, r3, #15
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	3338      	adds	r3, #56	; 0x38
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	3304      	adds	r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	705a      	strb	r2, [r3, #1]
 80028c8:	e00f      	b.n	80028ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	f003 020f 	and.w	r2, r3, #15
 80028d0:	4613      	mov	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	4413      	add	r3, r2
 80028e0:	3304      	adds	r3, #4
 80028e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_PCD_EP_Close+0x6e>
 8002900:	2302      	movs	r3, #2
 8002902:	e00e      	b.n	8002922 <HAL_PCD_EP_Close+0x8c>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68f9      	ldr	r1, [r7, #12]
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fe32 	bl	800557c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	460b      	mov	r3, r1
 8002938:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	f003 020f 	and.w	r2, r3, #15
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	3304      	adds	r3, #4
 8002952:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2200      	movs	r2, #0
 8002964:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2200      	movs	r2, #0
 800296a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800296c:	7afb      	ldrb	r3, [r7, #11]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	b2da      	uxtb	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d102      	bne.n	8002986 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	6979      	ldr	r1, [r7, #20]
 800299e:	f003 f911 	bl	8005bc4 <USB_EP0StartXfer>
 80029a2:	e008      	b.n	80029b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	6979      	ldr	r1, [r7, #20]
 80029b2:	f002 febf 	bl	8005734 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	f003 020f 	and.w	r2, r3, #15
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	460b      	mov	r3, r1
 80029fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a00:	7afb      	ldrb	r3, [r7, #11]
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	3338      	adds	r3, #56	; 0x38
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	3304      	adds	r3, #4
 8002a16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a30:	7afb      	ldrb	r3, [r7, #11]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	6979      	ldr	r1, [r7, #20]
 8002a62:	f003 f8af 	bl	8005bc4 <USB_EP0StartXfer>
 8002a66:	e008      	b.n	8002a7a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	6979      	ldr	r1, [r7, #20]
 8002a76:	f002 fe5d 	bl	8005734 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 020f 	and.w	r2, r3, #15
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d901      	bls.n	8002aa2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e050      	b.n	8002b44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	da0f      	bge.n	8002aca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	f003 020f 	and.w	r2, r3, #15
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	3338      	adds	r3, #56	; 0x38
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	3304      	adds	r3, #4
 8002ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	705a      	strb	r2, [r3, #1]
 8002ac8:	e00d      	b.n	8002ae6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	4413      	add	r3, r2
 8002adc:	3304      	adds	r3, #4
 8002ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_PCD_EP_SetStall+0x82>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e01e      	b.n	8002b44 <HAL_PCD_EP_SetStall+0xc0>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68f9      	ldr	r1, [r7, #12]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 faed 	bl	80060f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	b2d9      	uxtb	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b34:	461a      	mov	r2, r3
 8002b36:	f003 fcdd 	bl	80064f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	f003 020f 	and.w	r2, r3, #15
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d901      	bls.n	8002b6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e042      	b.n	8002bf0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	da0f      	bge.n	8002b92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	f003 020f 	and.w	r2, r3, #15
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	3338      	adds	r3, #56	; 0x38
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	705a      	strb	r2, [r3, #1]
 8002b90:	e00f      	b.n	8002bb2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	f003 020f 	and.w	r2, r3, #15
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_PCD_EP_ClrStall+0x86>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e00e      	b.n	8002bf0 <HAL_PCD_EP_ClrStall+0xa4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68f9      	ldr	r1, [r7, #12]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 faf5 	bl	80061d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	da0c      	bge.n	8002c26 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 020f 	and.w	r2, r3, #15
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	3338      	adds	r3, #56	; 0x38
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	3304      	adds	r3, #4
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e00c      	b.n	8002c40 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 020f 	and.w	r2, r3, #15
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68f9      	ldr	r1, [r7, #12]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 f914 	bl	8005e74 <USB_EPStopXfer>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c50:	7afb      	ldrb	r3, [r7, #11]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b08a      	sub	sp, #40	; 0x28
 8002c5e:	af02      	add	r7, sp, #8
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	3338      	adds	r3, #56	; 0x38
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3304      	adds	r3, #4
 8002c80:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d901      	bls.n	8002c92 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06c      	b.n	8002d6c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d902      	bls.n	8002cae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3303      	adds	r3, #3
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cb6:	e02b      	b.n	8002d10 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	699a      	ldr	r2, [r3, #24]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d902      	bls.n	8002cd4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	3303      	adds	r3, #3
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6919      	ldr	r1, [r3, #16]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f003 f968 	bl	8005fc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	441a      	add	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a1a      	ldr	r2, [r3, #32]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	441a      	add	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d809      	bhi.n	8002d3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a1a      	ldr	r2, [r3, #32]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d203      	bcs.n	8002d3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1be      	bne.n	8002cb8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d811      	bhi.n	8002d6a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	6939      	ldr	r1, [r7, #16]
 8002d62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d66:	4013      	ands	r3, r2
 8002d68:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	333c      	adds	r3, #60	; 0x3c
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d17b      	bne.n	8002ea2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d015      	beq.n	8002de0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	4a61      	ldr	r2, [pc, #388]	; (8002f3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	f240 80b9 	bls.w	8002f30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80b3 	beq.w	8002f30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ddc:	6093      	str	r3, [r2, #8]
 8002dde:	e0a7      	b.n	8002f30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df6:	461a      	mov	r2, r3
 8002df8:	2320      	movs	r3, #32
 8002dfa:	6093      	str	r3, [r2, #8]
 8002dfc:	e098      	b.n	8002f30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f040 8093 	bne.w	8002f30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	4a4b      	ldr	r2, [pc, #300]	; (8002f3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d90f      	bls.n	8002e32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e2e:	6093      	str	r3, [r2, #8]
 8002e30:	e07e      	b.n	8002f30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	3304      	adds	r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	0159      	lsls	r1, r3, #5
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	440b      	add	r3, r1
 8002e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5e:	1ad2      	subs	r2, r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d114      	bne.n	8002e94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2101      	movs	r1, #1
 8002e80:	f003 fb38 	bl	80064f4 <USB_EP0_OutStart>
 8002e84:	e006      	b.n	8002e94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	441a      	add	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f005 fe1a 	bl	8008ad4 <HAL_PCD_DataOutStageCallback>
 8002ea0:	e046      	b.n	8002f30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d124      	bne.n	8002ef4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec6:	6093      	str	r3, [r2, #8]
 8002ec8:	e032      	b.n	8002f30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f005 fdf1 	bl	8008ad4 <HAL_PCD_DataOutStageCallback>
 8002ef2:	e01d      	b.n	8002f30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d114      	bne.n	8002f24 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d108      	bne.n	8002f24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2100      	movs	r1, #0
 8002f20:	f003 fae8 	bl	80064f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	4619      	mov	r1, r3
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f005 fdd2 	bl	8008ad4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	4f54300a 	.word	0x4f54300a
 8002f40:	4f54310a 	.word	0x4f54310a

08002f44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	333c      	adds	r3, #60	; 0x3c
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <PCD_EP_OutSetupPacket_int+0x88>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d90e      	bls.n	8002f98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d009      	beq.n	8002f98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f90:	461a      	mov	r2, r3
 8002f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f005 fd89 	bl	8008ab0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <PCD_EP_OutSetupPacket_int+0x88>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d90c      	bls.n	8002fc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d108      	bne.n	8002fc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2101      	movs	r1, #1
 8002fbc:	f003 fa9a 	bl	80064f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	4f54300a 	.word	0x4f54300a

08002fd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d107      	bne.n	8002ffe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fee:	883b      	ldrh	r3, [r7, #0]
 8002ff0:	0419      	lsls	r1, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
 8002ffc:	e028      	b.n	8003050 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4413      	add	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]
 8003010:	e00d      	b.n	800302e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	3340      	adds	r3, #64	; 0x40
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4413      	add	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	3301      	adds	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	3b01      	subs	r3, #1
 8003034:	429a      	cmp	r2, r3
 8003036:	d3ec      	bcc.n	8003012 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003038:	883b      	ldrh	r3, [r7, #0]
 800303a:	0418      	lsls	r0, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	3b01      	subs	r3, #1
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	4302      	orrs	r2, r0
 8003048:	3340      	adds	r3, #64	; 0x40
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	887a      	ldrh	r2, [r7, #2]
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e267      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d075      	beq.n	80031a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030b6:	4b88      	ldr	r3, [pc, #544]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d00c      	beq.n	80030dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c2:	4b85      	ldr	r3, [pc, #532]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d112      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b82      	ldr	r3, [pc, #520]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030da:	d10b      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	4b7e      	ldr	r3, [pc, #504]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05b      	beq.n	80031a0 <HAL_RCC_OscConfig+0x108>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d157      	bne.n	80031a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e242      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x74>
 80030fe:	4b76      	ldr	r3, [pc, #472]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a75      	ldr	r2, [pc, #468]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x98>
 8003116:	4b70      	ldr	r3, [pc, #448]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6f      	ldr	r2, [pc, #444]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b6d      	ldr	r3, [pc, #436]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6c      	ldr	r2, [pc, #432]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 8003130:	4b69      	ldr	r3, [pc, #420]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a68      	ldr	r2, [pc, #416]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a65      	ldr	r2, [pc, #404]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fd fe44 	bl	8000ddc <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003158:	f7fd fe40 	bl	8000ddc <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e207      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b5b      	ldr	r3, [pc, #364]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xc0>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fd fe30 	bl	8000ddc <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003180:	f7fd fe2c 	bl	8000ddc <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1f3      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	4b51      	ldr	r3, [pc, #324]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0xe8>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d063      	beq.n	8003276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d11c      	bne.n	8003200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b44      	ldr	r3, [pc, #272]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x152>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1c7      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4937      	ldr	r1, [pc, #220]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	e03a      	b.n	8003276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_OscConfig+0x244>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fd fde5 	bl	8000ddc <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003216:	f7fd fde1 	bl	8000ddc <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1a8      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4925      	ldr	r1, [pc, #148]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCC_OscConfig+0x244>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fd fdc4 	bl	8000ddc <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003258:	f7fd fdc0 	bl	8000ddc <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e187      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d036      	beq.n	80032f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_RCC_OscConfig+0x248>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fd fda4 	bl	8000ddc <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003298:	f7fd fda0 	bl	8000ddc <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e167      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x200>
 80032b6:	e01b      	b.n	80032f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_OscConfig+0x248>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032be:	f7fd fd8d 	bl	8000ddc <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	e00e      	b.n	80032e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c6:	f7fd fd89 	bl	8000ddc <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d907      	bls.n	80032e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e150      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
 80032d8:	40023800 	.word	0x40023800
 80032dc:	42470000 	.word	0x42470000
 80032e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	4b88      	ldr	r3, [pc, #544]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80032e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ea      	bne.n	80032c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8097 	beq.w	800342c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b81      	ldr	r3, [pc, #516]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	4b7d      	ldr	r3, [pc, #500]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a7c      	ldr	r2, [pc, #496]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b7a      	ldr	r3, [pc, #488]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b77      	ldr	r3, [pc, #476]	; (800350c <HAL_RCC_OscConfig+0x474>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d118      	bne.n	800336c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333a:	4b74      	ldr	r3, [pc, #464]	; (800350c <HAL_RCC_OscConfig+0x474>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a73      	ldr	r2, [pc, #460]	; (800350c <HAL_RCC_OscConfig+0x474>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003346:	f7fd fd49 	bl	8000ddc <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334e:	f7fd fd45 	bl	8000ddc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e10c      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	4b6a      	ldr	r3, [pc, #424]	; (800350c <HAL_RCC_OscConfig+0x474>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x2ea>
 8003374:	4b64      	ldr	r3, [pc, #400]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4a63      	ldr	r2, [pc, #396]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
 8003380:	e01c      	b.n	80033bc <HAL_RCC_OscConfig+0x324>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b05      	cmp	r3, #5
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x30c>
 800338a:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a5e      	ldr	r2, [pc, #376]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
 8003396:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a5b      	ldr	r2, [pc, #364]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0x324>
 80033a4:	4b58      	ldr	r3, [pc, #352]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
 80033b0:	4b55      	ldr	r3, [pc, #340]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a54      	ldr	r2, [pc, #336]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0304 	bic.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d015      	beq.n	80033f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fd fd0a 	bl	8000ddc <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fd fd06 	bl	8000ddc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0cb      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	4b49      	ldr	r3, [pc, #292]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ee      	beq.n	80033cc <HAL_RCC_OscConfig+0x334>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f0:	f7fd fcf4 	bl	8000ddc <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fd fcf0 	bl	8000ddc <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0b5      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340e:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ee      	bne.n	80033f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003420:	4b39      	ldr	r3, [pc, #228]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	4a38      	ldr	r2, [pc, #224]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80a1 	beq.w	8003578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003436:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b08      	cmp	r3, #8
 8003440:	d05c      	beq.n	80034fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d141      	bne.n	80034ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b31      	ldr	r3, [pc, #196]	; (8003510 <HAL_RCC_OscConfig+0x478>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fd fcc4 	bl	8000ddc <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003458:	f7fd fcc0 	bl	8000ddc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e087      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	4b27      	ldr	r3, [pc, #156]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	3b01      	subs	r3, #1
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	491b      	ldr	r1, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x478>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fd fc99 	bl	8000ddc <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fd fc95 	bl	8000ddc <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e05c      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x416>
 80034cc:	e054      	b.n	8003578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_RCC_OscConfig+0x478>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fd fc82 	bl	8000ddc <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fd fc7e 	bl	8000ddc <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e045      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x444>
 80034fa:	e03d      	b.n	8003578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e038      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
 8003508:	40023800 	.word	0x40023800
 800350c:	40007000 	.word	0x40007000
 8003510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x4ec>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d028      	beq.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d121      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d11a      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800354a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	3b01      	subs	r3, #1
 800355e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d107      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800

08003588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0cc      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b68      	ldr	r3, [pc, #416]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d90c      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b65      	ldr	r3, [pc, #404]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b63      	ldr	r3, [pc, #396]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0b8      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035dc:	4b59      	ldr	r3, [pc, #356]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a58      	ldr	r2, [pc, #352]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a52      	ldr	r2, [pc, #328]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b50      	ldr	r3, [pc, #320]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	494d      	ldr	r1, [pc, #308]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d044      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d119      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e07f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d003      	beq.n	8003646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	2b03      	cmp	r3, #3
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	4b3f      	ldr	r3, [pc, #252]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e067      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f023 0203 	bic.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4934      	ldr	r1, [pc, #208]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003678:	f7fd fbb0 	bl	8000ddc <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	e00a      	b.n	8003696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f7fd fbac 	bl	8000ddc <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e04f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 020c 	and.w	r2, r3, #12
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1eb      	bne.n	8003680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d20c      	bcs.n	80036d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e032      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4916      	ldr	r1, [pc, #88]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	490e      	ldr	r1, [pc, #56]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800370e:	f000 f821 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 8003712:	4602      	mov	r2, r0
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	490a      	ldr	r1, [pc, #40]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	5ccb      	ldrb	r3, [r1, r3]
 8003722:	fa22 f303 	lsr.w	r3, r2, r3
 8003726:	4a09      	ldr	r2, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd fb10 	bl	8000d54 <HAL_InitTick>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023c00 	.word	0x40023c00
 8003744:	40023800 	.word	0x40023800
 8003748:	08009c44 	.word	0x08009c44
 800374c:	20000000 	.word	0x20000000
 8003750:	20000004 	.word	0x20000004

08003754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003758:	b090      	sub	sp, #64	; 0x40
 800375a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
 8003760:	2300      	movs	r3, #0
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003764:	2300      	movs	r3, #0
 8003766:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376c:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d00d      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x40>
 8003778:	2b08      	cmp	r3, #8
 800377a:	f200 80a1 	bhi.w	80038c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x34>
 8003782:	2b04      	cmp	r3, #4
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x3a>
 8003786:	e09b      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800378a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800378c:	e09b      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378e:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_GetSysClockFreq+0x188>)
 8003790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003792:	e098      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003794:	4b4f      	ldr	r3, [pc, #316]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800379c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379e:	4b4d      	ldr	r3, [pc, #308]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d028      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037aa:	4b4a      	ldr	r3, [pc, #296]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	2200      	movs	r2, #0
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	627a      	str	r2, [r7, #36]	; 0x24
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037bc:	2100      	movs	r1, #0
 80037be:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCC_GetSysClockFreq+0x188>)
 80037c0:	fb03 f201 	mul.w	r2, r3, r1
 80037c4:	2300      	movs	r3, #0
 80037c6:	fb00 f303 	mul.w	r3, r0, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	4a43      	ldr	r2, [pc, #268]	; (80038dc <HAL_RCC_GetSysClockFreq+0x188>)
 80037ce:	fba0 1202 	umull	r1, r2, r0, r2
 80037d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d4:	460a      	mov	r2, r1
 80037d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80037d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037da:	4413      	add	r3, r2
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e0:	2200      	movs	r2, #0
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	61fa      	str	r2, [r7, #28]
 80037e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037ee:	f7fc fd4f 	bl	8000290 <__aeabi_uldivmod>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4613      	mov	r3, r2
 80037f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037fa:	e053      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fc:	4b35      	ldr	r3, [pc, #212]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	2200      	movs	r2, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	617a      	str	r2, [r7, #20]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800380e:	f04f 0b00 	mov.w	fp, #0
 8003812:	4652      	mov	r2, sl
 8003814:	465b      	mov	r3, fp
 8003816:	f04f 0000 	mov.w	r0, #0
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	0159      	lsls	r1, r3, #5
 8003820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003824:	0150      	lsls	r0, r2, #5
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	ebb2 080a 	subs.w	r8, r2, sl
 800382e:	eb63 090b 	sbc.w	r9, r3, fp
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800383e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003842:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003846:	ebb2 0408 	subs.w	r4, r2, r8
 800384a:	eb63 0509 	sbc.w	r5, r3, r9
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	00eb      	lsls	r3, r5, #3
 8003858:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385c:	00e2      	lsls	r2, r4, #3
 800385e:	4614      	mov	r4, r2
 8003860:	461d      	mov	r5, r3
 8003862:	eb14 030a 	adds.w	r3, r4, sl
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	eb45 030b 	adc.w	r3, r5, fp
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800387a:	4629      	mov	r1, r5
 800387c:	028b      	lsls	r3, r1, #10
 800387e:	4621      	mov	r1, r4
 8003880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003884:	4621      	mov	r1, r4
 8003886:	028a      	lsls	r2, r1, #10
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388e:	2200      	movs	r2, #0
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	60fa      	str	r2, [r7, #12]
 8003894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003898:	f7fc fcfa 	bl	8000290 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4613      	mov	r3, r2
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	3301      	adds	r3, #1
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038be:	e002      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80038c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3740      	adds	r7, #64	; 0x40
 80038cc:	46bd      	mov	sp, r7
 80038ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	017d7840 	.word	0x017d7840

080038e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000

080038f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038fc:	f7ff fff0 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0a9b      	lsrs	r3, r3, #10
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	; (800391c <HAL_RCC_GetPCLK1Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	08009c54 	.word	0x08009c54

08003920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003924:	f7ff ffdc 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	0b5b      	lsrs	r3, r3, #13
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4903      	ldr	r1, [pc, #12]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	08009c54 	.word	0x08009c54

08003948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e03f      	b.n	80039da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd f854 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2224      	movs	r2, #36	; 0x24
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800398a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 ff81 	bl	8004894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695a      	ldr	r2, [r3, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08c      	sub	sp, #48	; 0x30
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d165      	bne.n	8003aca <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_UART_Transmit_DMA+0x26>
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e05e      	b.n	8003acc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_UART_Transmit_DMA+0x38>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e057      	b.n	8003acc <HAL_UART_Transmit_DMA+0xe8>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	88fa      	ldrh	r2, [r7, #6]
 8003a2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2221      	movs	r2, #33	; 0x21
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <HAL_UART_Transmit_DMA+0xf0>)
 8003a4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_UART_Transmit_DMA+0xf4>)
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <HAL_UART_Transmit_DMA+0xf8>)
 8003a5a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	2200      	movs	r2, #0
 8003a62:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003a64:	f107 0308 	add.w	r3, r7, #8
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3304      	adds	r3, #4
 8003a78:	461a      	mov	r2, r3
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	f7fd fb9e 	bl	80011bc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a88:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3314      	adds	r3, #20
 8003ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ab4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6a39      	ldr	r1, [r7, #32]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e5      	bne.n	8003a92 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e000      	b.n	8003acc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003aca:	2302      	movs	r3, #2
  }
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3730      	adds	r7, #48	; 0x30
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	0800412d 	.word	0x0800412d
 8003ad8:	080041c7 	.word	0x080041c7
 8003adc:	0800433f 	.word	0x0800433f

08003ae0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	; 0x30
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d152      	bne.n	8003ba0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e04b      	b.n	8003ba2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e044      	b.n	8003ba2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fc51 	bl	80043d4 <UART_Start_Receive_DMA>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d12c      	bne.n	8003b9a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d125      	bne.n	8003b94 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f043 0310 	orr.w	r3, r3, #16
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7e:	627a      	str	r2, [r7, #36]	; 0x24
 8003b80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6a39      	ldr	r1, [r7, #32]
 8003b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e5      	bne.n	8003b5e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003b92:	e002      	b.n	8003b9a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b9e:	e000      	b.n	8003ba2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3730      	adds	r7, #48	; 0x30
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b0ba      	sub	sp, #232	; 0xe8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_UART_IRQHandler+0x66>
 8003bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fd87 	bl	800471e <UART_Receive_IT>
      return;
 8003c10:	e256      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80de 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x22c>
 8003c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80d1 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <HAL_UART_IRQHandler+0xae>
 8003c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_UART_IRQHandler+0xd2>
 8003c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f043 0202 	orr.w	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xf6>
 8003c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f043 0204 	orr.w	r2, r3, #4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d011      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x126>
 8003cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f043 0208 	orr.w	r2, r3, #8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 81ed 	beq.w	80040b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_UART_IRQHandler+0x14e>
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fd12 	bl	800471e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <HAL_UART_IRQHandler+0x17a>
 8003d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d04f      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fc1a 	bl	8004560 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d141      	bne.n	8003dbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3314      	adds	r3, #20
 8003d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1d9      	bne.n	8003d3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d013      	beq.n	8003db6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	4a7d      	ldr	r2, [pc, #500]	; (8003f88 <HAL_UART_IRQHandler+0x3dc>)
 8003d94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd fad6 	bl	800134c <HAL_DMA_Abort_IT>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003db0:	4610      	mov	r0, r2
 8003db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e00e      	b.n	8003dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9ae 	bl	8004118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	e00a      	b.n	8003dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9aa 	bl	8004118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	e006      	b.n	8003dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9a6 	bl	8004118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dd2:	e170      	b.n	80040b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	bf00      	nop
    return;
 8003dd6:	e16e      	b.n	80040b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	f040 814a 	bne.w	8004076 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8143 	beq.w	8004076 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 813c 	beq.w	8004076 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	f040 80b4 	bne.w	8003f8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8140 	beq.w	80040ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e42:	429a      	cmp	r2, r3
 8003e44:	f080 8139 	bcs.w	80040ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5a:	f000 8088 	beq.w	8003f6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1d9      	bne.n	8003e5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3314      	adds	r3, #20
 8003eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e1      	bne.n	8003eaa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3314      	adds	r3, #20
 8003f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e3      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3e:	f023 0310 	bic.w	r3, r3, #16
 8003f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f50:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e3      	bne.n	8003f2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fd f97f 	bl	800126c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fc fc4c 	bl	800081c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f84:	e099      	b.n	80040ba <HAL_UART_IRQHandler+0x50e>
 8003f86:	bf00      	nop
 8003f88:	08004627 	.word	0x08004627
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 808b 	beq.w	80040be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8086 	beq.w	80040be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fd6:	647a      	str	r2, [r7, #68]	; 0x44
 8003fd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e3      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3314      	adds	r3, #20
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800400e:	633a      	str	r2, [r7, #48]	; 0x30
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e3      	bne.n	8003fea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004054:	61fa      	str	r2, [r7, #28]
 8004056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	69b9      	ldr	r1, [r7, #24]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	617b      	str	r3, [r7, #20]
   return(result);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e3      	bne.n	8004030 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc fbd4 	bl	800081c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004074:	e023      	b.n	80040be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_UART_IRQHandler+0x4ea>
 8004082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fadd 	bl	800464e <UART_Transmit_IT>
    return;
 8004094:	e014      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00e      	beq.n	80040c0 <HAL_UART_IRQHandler+0x514>
 80040a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fb1d 	bl	80046ee <UART_EndTransmit_IT>
    return;
 80040b4:	e004      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
    return;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
      return;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
      return;
 80040be:	bf00      	nop
  }
}
 80040c0:	37e8      	adds	r7, #232	; 0xe8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop

080040c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b090      	sub	sp, #64	; 0x40
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d137      	bne.n	80041b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414a:	2200      	movs	r2, #0
 800414c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800414e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	623b      	str	r3, [r7, #32]
   return(result);
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800416e:	633a      	str	r2, [r7, #48]	; 0x30
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e5      	bne.n	800414e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	60fb      	str	r3, [r7, #12]
   return(result);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
 800419a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041a2:	61fa      	str	r2, [r7, #28]
 80041a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	69b9      	ldr	r1, [r7, #24]
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	617b      	str	r3, [r7, #20]
   return(result);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e5      	bne.n	8004182 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041b6:	e002      	b.n	80041be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80041b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041ba:	f7ff ff85 	bl	80040c8 <HAL_UART_TxCpltCallback>
}
 80041be:	bf00      	nop
 80041c0:	3740      	adds	r7, #64	; 0x40
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff ff81 	bl	80040dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b09c      	sub	sp, #112	; 0x70
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d172      	bne.n	80042e4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80041fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004200:	2200      	movs	r2, #0
 8004202:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800421a:	66bb      	str	r3, [r7, #104]	; 0x68
 800421c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004224:	65ba      	str	r2, [r7, #88]	; 0x58
 8004226:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800422a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3314      	adds	r3, #20
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	667b      	str	r3, [r7, #100]	; 0x64
 8004250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3314      	adds	r3, #20
 8004256:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004258:	647a      	str	r2, [r7, #68]	; 0x44
 800425a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800425e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e5      	bne.n	8004238 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800426c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3314      	adds	r3, #20
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	623b      	str	r3, [r7, #32]
   return(result);
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004282:	663b      	str	r3, [r7, #96]	; 0x60
 8004284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3314      	adds	r3, #20
 800428a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800428c:	633a      	str	r2, [r7, #48]	; 0x30
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d119      	bne.n	80042e4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0310 	bic.w	r3, r3, #16
 80042c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042d0:	61fa      	str	r2, [r7, #28]
 80042d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	69b9      	ldr	r1, [r7, #24]
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	617b      	str	r3, [r7, #20]
   return(result);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e5      	bne.n	80042b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d106      	bne.n	80042fa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042f0:	4619      	mov	r1, r3
 80042f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80042f4:	f7fc fa92 	bl	800081c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042f8:	e002      	b.n	8004300 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80042fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80042fc:	f7ff fef8 	bl	80040f0 <HAL_UART_RxCpltCallback>
}
 8004300:	bf00      	nop
 8004302:	3770      	adds	r7, #112	; 0x70
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	2b01      	cmp	r3, #1
 800431c:	d108      	bne.n	8004330 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	b29b      	uxth	r3, r3
 8004326:	4619      	mov	r1, r3
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7fc fa77 	bl	800081c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800432e:	e002      	b.n	8004336 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff fee7 	bl	8004104 <HAL_UART_RxHalfCpltCallback>
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b80      	cmp	r3, #128	; 0x80
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b21      	cmp	r3, #33	; 0x21
 8004370:	d108      	bne.n	8004384 <UART_DMAError+0x46>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2200      	movs	r2, #0
 800437c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800437e:	68b8      	ldr	r0, [r7, #8]
 8004380:	f000 f8c6 	bl	8004510 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	bf0c      	ite	eq
 8004392:	2301      	moveq	r3, #1
 8004394:	2300      	movne	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b22      	cmp	r3, #34	; 0x22
 80043a4:	d108      	bne.n	80043b8 <UART_DMAError+0x7a>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2200      	movs	r2, #0
 80043b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80043b2:	68b8      	ldr	r0, [r7, #8]
 80043b4:	f000 f8d4 	bl	8004560 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	f043 0210 	orr.w	r2, r3, #16
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043c4:	68b8      	ldr	r0, [r7, #8]
 80043c6:	f7ff fea7 	bl	8004118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b098      	sub	sp, #96	; 0x60
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	88fa      	ldrh	r2, [r7, #6]
 80043ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2222      	movs	r2, #34	; 0x22
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	4a40      	ldr	r2, [pc, #256]	; (8004504 <UART_Start_Receive_DMA+0x130>)
 8004402:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	4a3f      	ldr	r2, [pc, #252]	; (8004508 <UART_Start_Receive_DMA+0x134>)
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	4a3e      	ldr	r2, [pc, #248]	; (800450c <UART_Start_Receive_DMA+0x138>)
 8004412:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	2200      	movs	r2, #0
 800441a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800441c:	f107 0308 	add.w	r3, r7, #8
 8004420:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3304      	adds	r3, #4
 800442c:	4619      	mov	r1, r3
 800442e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	f7fc fec2 	bl	80011bc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d019      	beq.n	8004492 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800446e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004474:	65bb      	str	r3, [r7, #88]	; 0x58
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800447e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004480:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800448c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e5      	bne.n	800445e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3314      	adds	r3, #20
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	657b      	str	r3, [r7, #84]	; 0x54
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3314      	adds	r3, #20
 80044b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e5      	bne.n	8004492 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	617b      	str	r3, [r7, #20]
   return(result);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044dc:	653b      	str	r3, [r7, #80]	; 0x50
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3314      	adds	r3, #20
 80044e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044e6:	627a      	str	r2, [r7, #36]	; 0x24
 80044e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6a39      	ldr	r1, [r7, #32]
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e5      	bne.n	80044c6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3760      	adds	r7, #96	; 0x60
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	080041e3 	.word	0x080041e3
 8004508:	08004309 	.word	0x08004309
 800450c:	0800433f 	.word	0x0800433f

08004510 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	; 0x24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	60bb      	str	r3, [r7, #8]
   return(result);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	61ba      	str	r2, [r7, #24]
 800453a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6979      	ldr	r1, [r7, #20]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	613b      	str	r3, [r7, #16]
   return(result);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004554:	bf00      	nop
 8004556:	3724      	adds	r7, #36	; 0x24
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b095      	sub	sp, #84	; 0x54
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004572:	e853 3f00 	ldrex	r3, [r3]
 8004576:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800457e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004588:	643a      	str	r2, [r7, #64]	; 0x40
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800458e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e5      	bne.n	8004568 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3314      	adds	r3, #20
 80045a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3314      	adds	r3, #20
 80045ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e5      	bne.n	800459c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d119      	bne.n	800460c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f023 0310 	bic.w	r3, r3, #16
 80045ee:	647b      	str	r3, [r7, #68]	; 0x44
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f8:	61ba      	str	r2, [r7, #24]
 80045fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	613b      	str	r3, [r7, #16]
   return(result);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e5      	bne.n	80045d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
}
 800461a:	bf00      	nop
 800461c:	3754      	adds	r7, #84	; 0x54
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7ff fd69 	bl	8004118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800464e:	b480      	push	{r7}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b21      	cmp	r3, #33	; 0x21
 8004660:	d13e      	bne.n	80046e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466a:	d114      	bne.n	8004696 <UART_Transmit_IT+0x48>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d110      	bne.n	8004696 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004688:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	1c9a      	adds	r2, r3, #2
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	621a      	str	r2, [r3, #32]
 8004694:	e008      	b.n	80046a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	1c59      	adds	r1, r3, #1
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6211      	str	r1, [r2, #32]
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4619      	mov	r1, r3
 80046b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10f      	bne.n	80046dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	e000      	b.n	80046e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046e0:	2302      	movs	r3, #2
  }
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004704:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff fcda 	bl	80040c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b08c      	sub	sp, #48	; 0x30
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b22      	cmp	r3, #34	; 0x22
 8004730:	f040 80ab 	bne.w	800488a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473c:	d117      	bne.n	800476e <UART_Receive_IT+0x50>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d113      	bne.n	800476e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004746:	2300      	movs	r3, #0
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475c:	b29a      	uxth	r2, r3
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	1c9a      	adds	r2, r3, #2
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	629a      	str	r2, [r3, #40]	; 0x28
 800476c:	e026      	b.n	80047bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004774:	2300      	movs	r3, #0
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004780:	d007      	beq.n	8004792 <UART_Receive_IT+0x74>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <UART_Receive_IT+0x82>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e008      	b.n	80047b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	4619      	mov	r1, r3
 80047ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d15a      	bne.n	8004886 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0220 	bic.w	r2, r2, #32
 80047de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	2b01      	cmp	r3, #1
 800480e:	d135      	bne.n	800487c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	330c      	adds	r3, #12
 800481c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	613b      	str	r3, [r7, #16]
   return(result);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f023 0310 	bic.w	r3, r3, #16
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004836:	623a      	str	r2, [r7, #32]
 8004838:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	69f9      	ldr	r1, [r7, #28]
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	61bb      	str	r3, [r7, #24]
   return(result);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e5      	bne.n	8004816 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b10      	cmp	r3, #16
 8004856:	d10a      	bne.n	800486e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004872:	4619      	mov	r1, r3
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7fb ffd1 	bl	800081c <HAL_UARTEx_RxEventCallback>
 800487a:	e002      	b.n	8004882 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff fc37 	bl	80040f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e002      	b.n	800488c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	e000      	b.n	800488c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800488a:	2302      	movs	r3, #2
  }
}
 800488c:	4618      	mov	r0, r3
 800488e:	3730      	adds	r7, #48	; 0x30
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004898:	b0c0      	sub	sp, #256	; 0x100
 800489a:	af00      	add	r7, sp, #0
 800489c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b0:	68d9      	ldr	r1, [r3, #12]
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	ea40 0301 	orr.w	r3, r0, r1
 80048bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048ec:	f021 010c 	bic.w	r1, r1, #12
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048fa:	430b      	orrs	r3, r1
 80048fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490e:	6999      	ldr	r1, [r3, #24]
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	ea40 0301 	orr.w	r3, r0, r1
 800491a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b8f      	ldr	r3, [pc, #572]	; (8004b60 <UART_SetConfig+0x2cc>)
 8004924:	429a      	cmp	r2, r3
 8004926:	d005      	beq.n	8004934 <UART_SetConfig+0xa0>
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4b8d      	ldr	r3, [pc, #564]	; (8004b64 <UART_SetConfig+0x2d0>)
 8004930:	429a      	cmp	r2, r3
 8004932:	d104      	bne.n	800493e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004934:	f7fe fff4 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8004938:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800493c:	e003      	b.n	8004946 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800493e:	f7fe ffdb 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 8004942:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004950:	f040 810c 	bne.w	8004b6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004958:	2200      	movs	r2, #0
 800495a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800495e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004962:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004966:	4622      	mov	r2, r4
 8004968:	462b      	mov	r3, r5
 800496a:	1891      	adds	r1, r2, r2
 800496c:	65b9      	str	r1, [r7, #88]	; 0x58
 800496e:	415b      	adcs	r3, r3
 8004970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004972:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004976:	4621      	mov	r1, r4
 8004978:	eb12 0801 	adds.w	r8, r2, r1
 800497c:	4629      	mov	r1, r5
 800497e:	eb43 0901 	adc.w	r9, r3, r1
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800498e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004996:	4690      	mov	r8, r2
 8004998:	4699      	mov	r9, r3
 800499a:	4623      	mov	r3, r4
 800499c:	eb18 0303 	adds.w	r3, r8, r3
 80049a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049a4:	462b      	mov	r3, r5
 80049a6:	eb49 0303 	adc.w	r3, r9, r3
 80049aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049c2:	460b      	mov	r3, r1
 80049c4:	18db      	adds	r3, r3, r3
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
 80049c8:	4613      	mov	r3, r2
 80049ca:	eb42 0303 	adc.w	r3, r2, r3
 80049ce:	657b      	str	r3, [r7, #84]	; 0x54
 80049d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049d8:	f7fb fc5a 	bl	8000290 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4b61      	ldr	r3, [pc, #388]	; (8004b68 <UART_SetConfig+0x2d4>)
 80049e2:	fba3 2302 	umull	r2, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	011c      	lsls	r4, r3, #4
 80049ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	1891      	adds	r1, r2, r2
 8004a02:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a04:	415b      	adcs	r3, r3
 8004a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a12:	4649      	mov	r1, r9
 8004a14:	eb43 0b01 	adc.w	fp, r3, r1
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a2c:	4692      	mov	sl, r2
 8004a2e:	469b      	mov	fp, r3
 8004a30:	4643      	mov	r3, r8
 8004a32:	eb1a 0303 	adds.w	r3, sl, r3
 8004a36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	18db      	adds	r3, r3, r3
 8004a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a5e:	4613      	mov	r3, r2
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
 8004a66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a6e:	f7fb fc0f 	bl	8000290 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4611      	mov	r1, r2
 8004a78:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <UART_SetConfig+0x2d4>)
 8004a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	2264      	movs	r2, #100	; 0x64
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
 8004a86:	1acb      	subs	r3, r1, r3
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a8e:	4b36      	ldr	r3, [pc, #216]	; (8004b68 <UART_SetConfig+0x2d4>)
 8004a90:	fba3 2302 	umull	r2, r3, r3, r2
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a9c:	441c      	add	r4, r3
 8004a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004aa8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004aac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	1891      	adds	r1, r2, r2
 8004ab6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ab8:	415b      	adcs	r3, r3
 8004aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004abc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	1851      	adds	r1, r2, r1
 8004ac4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	414b      	adcs	r3, r1
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ad8:	4659      	mov	r1, fp
 8004ada:	00cb      	lsls	r3, r1, #3
 8004adc:	4651      	mov	r1, sl
 8004ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	00ca      	lsls	r2, r1, #3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	4642      	mov	r2, r8
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004af4:	464b      	mov	r3, r9
 8004af6:	460a      	mov	r2, r1
 8004af8:	eb42 0303 	adc.w	r3, r2, r3
 8004afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b14:	460b      	mov	r3, r1
 8004b16:	18db      	adds	r3, r3, r3
 8004b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	eb42 0303 	adc.w	r3, r2, r3
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b2a:	f7fb fbb1 	bl	8000290 <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <UART_SetConfig+0x2d4>)
 8004b34:	fba3 1302 	umull	r1, r3, r3, r2
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	2164      	movs	r1, #100	; 0x64
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	3332      	adds	r3, #50	; 0x32
 8004b46:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <UART_SetConfig+0x2d4>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	f003 0207 	and.w	r2, r3, #7
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4422      	add	r2, r4
 8004b5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b5c:	e105      	b.n	8004d6a <UART_SetConfig+0x4d6>
 8004b5e:	bf00      	nop
 8004b60:	40011000 	.word	0x40011000
 8004b64:	40011400 	.word	0x40011400
 8004b68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b7e:	4642      	mov	r2, r8
 8004b80:	464b      	mov	r3, r9
 8004b82:	1891      	adds	r1, r2, r2
 8004b84:	6239      	str	r1, [r7, #32]
 8004b86:	415b      	adcs	r3, r3
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b8e:	4641      	mov	r1, r8
 8004b90:	1854      	adds	r4, r2, r1
 8004b92:	4649      	mov	r1, r9
 8004b94:	eb43 0501 	adc.w	r5, r3, r1
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	00eb      	lsls	r3, r5, #3
 8004ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba6:	00e2      	lsls	r2, r4, #3
 8004ba8:	4614      	mov	r4, r2
 8004baa:	461d      	mov	r5, r3
 8004bac:	4643      	mov	r3, r8
 8004bae:	18e3      	adds	r3, r4, r3
 8004bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	eb45 0303 	adc.w	r3, r5, r3
 8004bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bda:	4629      	mov	r1, r5
 8004bdc:	008b      	lsls	r3, r1, #2
 8004bde:	4621      	mov	r1, r4
 8004be0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be4:	4621      	mov	r1, r4
 8004be6:	008a      	lsls	r2, r1, #2
 8004be8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bec:	f7fb fb50 	bl	8000290 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4b60      	ldr	r3, [pc, #384]	; (8004d78 <UART_SetConfig+0x4e4>)
 8004bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	011c      	lsls	r4, r3, #4
 8004bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c10:	4642      	mov	r2, r8
 8004c12:	464b      	mov	r3, r9
 8004c14:	1891      	adds	r1, r2, r2
 8004c16:	61b9      	str	r1, [r7, #24]
 8004c18:	415b      	adcs	r3, r3
 8004c1a:	61fb      	str	r3, [r7, #28]
 8004c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c20:	4641      	mov	r1, r8
 8004c22:	1851      	adds	r1, r2, r1
 8004c24:	6139      	str	r1, [r7, #16]
 8004c26:	4649      	mov	r1, r9
 8004c28:	414b      	adcs	r3, r1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c38:	4659      	mov	r1, fp
 8004c3a:	00cb      	lsls	r3, r1, #3
 8004c3c:	4651      	mov	r1, sl
 8004c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c42:	4651      	mov	r1, sl
 8004c44:	00ca      	lsls	r2, r1, #3
 8004c46:	4610      	mov	r0, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	189b      	adds	r3, r3, r2
 8004c50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c54:	464b      	mov	r3, r9
 8004c56:	460a      	mov	r2, r1
 8004c58:	eb42 0303 	adc.w	r3, r2, r3
 8004c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c78:	4649      	mov	r1, r9
 8004c7a:	008b      	lsls	r3, r1, #2
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c82:	4641      	mov	r1, r8
 8004c84:	008a      	lsls	r2, r1, #2
 8004c86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c8a:	f7fb fb01 	bl	8000290 <__aeabi_uldivmod>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4b39      	ldr	r3, [pc, #228]	; (8004d78 <UART_SetConfig+0x4e4>)
 8004c94:	fba3 1302 	umull	r1, r3, r3, r2
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	2164      	movs	r1, #100	; 0x64
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	3332      	adds	r3, #50	; 0x32
 8004ca6:	4a34      	ldr	r2, [pc, #208]	; (8004d78 <UART_SetConfig+0x4e4>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb2:	441c      	add	r4, r3
 8004cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb8:	2200      	movs	r2, #0
 8004cba:	673b      	str	r3, [r7, #112]	; 0x70
 8004cbc:	677a      	str	r2, [r7, #116]	; 0x74
 8004cbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cc2:	4642      	mov	r2, r8
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	1891      	adds	r1, r2, r2
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cd2:	4641      	mov	r1, r8
 8004cd4:	1851      	adds	r1, r2, r1
 8004cd6:	6039      	str	r1, [r7, #0]
 8004cd8:	4649      	mov	r1, r9
 8004cda:	414b      	adcs	r3, r1
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cea:	4659      	mov	r1, fp
 8004cec:	00cb      	lsls	r3, r1, #3
 8004cee:	4651      	mov	r1, sl
 8004cf0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cf4:	4651      	mov	r1, sl
 8004cf6:	00ca      	lsls	r2, r1, #3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4642      	mov	r2, r8
 8004d00:	189b      	adds	r3, r3, r2
 8004d02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d04:	464b      	mov	r3, r9
 8004d06:	460a      	mov	r2, r1
 8004d08:	eb42 0303 	adc.w	r3, r2, r3
 8004d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	663b      	str	r3, [r7, #96]	; 0x60
 8004d18:	667a      	str	r2, [r7, #100]	; 0x64
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d26:	4649      	mov	r1, r9
 8004d28:	008b      	lsls	r3, r1, #2
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d30:	4641      	mov	r1, r8
 8004d32:	008a      	lsls	r2, r1, #2
 8004d34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d38:	f7fb faaa 	bl	8000290 <__aeabi_uldivmod>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <UART_SetConfig+0x4e4>)
 8004d42:	fba3 1302 	umull	r1, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2164      	movs	r1, #100	; 0x64
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	3332      	adds	r3, #50	; 0x32
 8004d54:	4a08      	ldr	r2, [pc, #32]	; (8004d78 <UART_SetConfig+0x4e4>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	f003 020f 	and.w	r2, r3, #15
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4422      	add	r2, r4
 8004d68:	609a      	str	r2, [r3, #8]
}
 8004d6a:	bf00      	nop
 8004d6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d76:	bf00      	nop
 8004d78:	51eb851f 	.word	0x51eb851f

08004d7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	f107 001c 	add.w	r0, r7, #28
 8004d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d122      	bne.n	8004dda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d105      	bne.n	8004dce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f001 fbee 	bl	80065b0 <USB_CoreReset>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	73fb      	strb	r3, [r7, #15]
 8004dd8:	e01a      	b.n	8004e10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f001 fbe2 	bl	80065b0 <USB_CoreReset>
 8004dec:	4603      	mov	r3, r0
 8004dee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
 8004e02:	e005      	b.n	8004e10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d10b      	bne.n	8004e2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f043 0206 	orr.w	r2, r3, #6
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e3a:	b004      	add	sp, #16
 8004e3c:	4770      	bx	lr
	...

08004e40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d165      	bne.n	8004f20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a41      	ldr	r2, [pc, #260]	; (8004f5c <USB_SetTurnaroundTime+0x11c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d906      	bls.n	8004e6a <USB_SetTurnaroundTime+0x2a>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4a40      	ldr	r2, [pc, #256]	; (8004f60 <USB_SetTurnaroundTime+0x120>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d202      	bcs.n	8004e6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e64:	230f      	movs	r3, #15
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	e062      	b.n	8004f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4a3c      	ldr	r2, [pc, #240]	; (8004f60 <USB_SetTurnaroundTime+0x120>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d306      	bcc.n	8004e80 <USB_SetTurnaroundTime+0x40>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4a3b      	ldr	r2, [pc, #236]	; (8004f64 <USB_SetTurnaroundTime+0x124>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d202      	bcs.n	8004e80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e7a:	230e      	movs	r3, #14
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	e057      	b.n	8004f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a38      	ldr	r2, [pc, #224]	; (8004f64 <USB_SetTurnaroundTime+0x124>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d306      	bcc.n	8004e96 <USB_SetTurnaroundTime+0x56>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4a37      	ldr	r2, [pc, #220]	; (8004f68 <USB_SetTurnaroundTime+0x128>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d202      	bcs.n	8004e96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e90:	230d      	movs	r3, #13
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e04c      	b.n	8004f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4a33      	ldr	r2, [pc, #204]	; (8004f68 <USB_SetTurnaroundTime+0x128>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d306      	bcc.n	8004eac <USB_SetTurnaroundTime+0x6c>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4a32      	ldr	r2, [pc, #200]	; (8004f6c <USB_SetTurnaroundTime+0x12c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d802      	bhi.n	8004eac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e041      	b.n	8004f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4a2f      	ldr	r2, [pc, #188]	; (8004f6c <USB_SetTurnaroundTime+0x12c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d906      	bls.n	8004ec2 <USB_SetTurnaroundTime+0x82>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4a2e      	ldr	r2, [pc, #184]	; (8004f70 <USB_SetTurnaroundTime+0x130>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d802      	bhi.n	8004ec2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ebc:	230b      	movs	r3, #11
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e036      	b.n	8004f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <USB_SetTurnaroundTime+0x130>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d906      	bls.n	8004ed8 <USB_SetTurnaroundTime+0x98>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4a29      	ldr	r2, [pc, #164]	; (8004f74 <USB_SetTurnaroundTime+0x134>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d802      	bhi.n	8004ed8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ed2:	230a      	movs	r3, #10
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	e02b      	b.n	8004f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a26      	ldr	r2, [pc, #152]	; (8004f74 <USB_SetTurnaroundTime+0x134>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d906      	bls.n	8004eee <USB_SetTurnaroundTime+0xae>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4a25      	ldr	r2, [pc, #148]	; (8004f78 <USB_SetTurnaroundTime+0x138>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d202      	bcs.n	8004eee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ee8:	2309      	movs	r3, #9
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e020      	b.n	8004f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a21      	ldr	r2, [pc, #132]	; (8004f78 <USB_SetTurnaroundTime+0x138>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d306      	bcc.n	8004f04 <USB_SetTurnaroundTime+0xc4>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4a20      	ldr	r2, [pc, #128]	; (8004f7c <USB_SetTurnaroundTime+0x13c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d802      	bhi.n	8004f04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004efe:	2308      	movs	r3, #8
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e015      	b.n	8004f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <USB_SetTurnaroundTime+0x13c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d906      	bls.n	8004f1a <USB_SetTurnaroundTime+0xda>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <USB_SetTurnaroundTime+0x140>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d202      	bcs.n	8004f1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f14:	2307      	movs	r3, #7
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	e00a      	b.n	8004f30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f1a:	2306      	movs	r3, #6
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e007      	b.n	8004f30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f26:	2309      	movs	r3, #9
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	e001      	b.n	8004f30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f2c:	2309      	movs	r3, #9
 8004f2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	029b      	lsls	r3, r3, #10
 8004f44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	00d8acbf 	.word	0x00d8acbf
 8004f60:	00e4e1c0 	.word	0x00e4e1c0
 8004f64:	00f42400 	.word	0x00f42400
 8004f68:	01067380 	.word	0x01067380
 8004f6c:	011a499f 	.word	0x011a499f
 8004f70:	01312cff 	.word	0x01312cff
 8004f74:	014ca43f 	.word	0x014ca43f
 8004f78:	016e3600 	.word	0x016e3600
 8004f7c:	01a6ab1f 	.word	0x01a6ab1f
 8004f80:	01e84800 	.word	0x01e84800

08004f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f043 0201 	orr.w	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f023 0201 	bic.w	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d115      	bne.n	8005016 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	f7fb fefc 	bl	8000df4 <HAL_Delay>
      ms++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f001 fa45 	bl	8006492 <USB_GetMode>
 8005008:	4603      	mov	r3, r0
 800500a:	2b01      	cmp	r3, #1
 800500c:	d01e      	beq.n	800504c <USB_SetCurrentMode+0x84>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b31      	cmp	r3, #49	; 0x31
 8005012:	d9f0      	bls.n	8004ff6 <USB_SetCurrentMode+0x2e>
 8005014:	e01a      	b.n	800504c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d115      	bne.n	8005048 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005028:	2001      	movs	r0, #1
 800502a:	f7fb fee3 	bl	8000df4 <HAL_Delay>
      ms++;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 fa2c 	bl	8006492 <USB_GetMode>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <USB_SetCurrentMode+0x84>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b31      	cmp	r3, #49	; 0x31
 8005044:	d9f0      	bls.n	8005028 <USB_SetCurrentMode+0x60>
 8005046:	e001      	b.n	800504c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e005      	b.n	8005058 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b32      	cmp	r3, #50	; 0x32
 8005050:	d101      	bne.n	8005056 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005060:	b084      	sub	sp, #16
 8005062:	b580      	push	{r7, lr}
 8005064:	b086      	sub	sp, #24
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800506e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	e009      	b.n	8005094 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	3340      	adds	r3, #64	; 0x40
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	2200      	movs	r2, #0
 800508c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	3301      	adds	r3, #1
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b0e      	cmp	r3, #14
 8005098:	d9f2      	bls.n	8005080 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800509a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d11c      	bne.n	80050da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ae:	f043 0302 	orr.w	r3, r3, #2
 80050b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
 80050d8:	e00b      	b.n	80050f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050f8:	461a      	mov	r2, r3
 80050fa:	2300      	movs	r3, #0
 80050fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005104:	4619      	mov	r1, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510c:	461a      	mov	r2, r3
 800510e:	680b      	ldr	r3, [r1, #0]
 8005110:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10c      	bne.n	8005132 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800511e:	2100      	movs	r1, #0
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f965 	bl	80053f0 <USB_SetDevSpeed>
 8005126:	e008      	b.n	800513a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005128:	2101      	movs	r1, #1
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f960 	bl	80053f0 <USB_SetDevSpeed>
 8005130:	e003      	b.n	800513a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005132:	2103      	movs	r1, #3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f95b 	bl	80053f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800513a:	2110      	movs	r1, #16
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f8f3 	bl	8005328 <USB_FlushTxFifo>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f91f 	bl	8005390 <USB_FlushRxFifo>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005162:	461a      	mov	r2, r3
 8005164:	2300      	movs	r3, #0
 8005166:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516e:	461a      	mov	r2, r3
 8005170:	2300      	movs	r3, #0
 8005172:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	461a      	mov	r2, r3
 800517c:	2300      	movs	r3, #0
 800517e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005180:	2300      	movs	r3, #0
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	e043      	b.n	800520e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800519c:	d118      	bne.n	80051d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b0:	461a      	mov	r2, r3
 80051b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	e013      	b.n	80051e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	461a      	mov	r2, r3
 80051c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	e008      	b.n	80051e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	461a      	mov	r2, r3
 80051de:	2300      	movs	r3, #0
 80051e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	461a      	mov	r2, r3
 80051f0:	2300      	movs	r3, #0
 80051f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	461a      	mov	r2, r3
 8005202:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005206:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	3301      	adds	r3, #1
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	429a      	cmp	r2, r3
 8005214:	d3b7      	bcc.n	8005186 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	e043      	b.n	80052a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800522e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005232:	d118      	bne.n	8005266 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	461a      	mov	r2, r3
 8005248:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e013      	b.n	8005278 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	461a      	mov	r2, r3
 800525e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	e008      	b.n	8005278 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	461a      	mov	r2, r3
 8005274:	2300      	movs	r3, #0
 8005276:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	461a      	mov	r2, r3
 8005286:	2300      	movs	r3, #0
 8005288:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	461a      	mov	r2, r3
 8005298:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800529c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3301      	adds	r3, #1
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d3b7      	bcc.n	800521c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d105      	bne.n	80052e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f043 0210 	orr.w	r2, r3, #16
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699a      	ldr	r2, [r3, #24]
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <USB_DevInit+0x2c4>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f043 0208 	orr.w	r2, r3, #8
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d107      	bne.n	8005314 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800530c:	f043 0304 	orr.w	r3, r3, #4
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005314:	7dfb      	ldrb	r3, [r7, #23]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005320:	b004      	add	sp, #16
 8005322:	4770      	bx	lr
 8005324:	803c3800 	.word	0x803c3800

08005328 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4a13      	ldr	r2, [pc, #76]	; (800538c <USB_FlushTxFifo+0x64>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e01b      	b.n	8005380 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	daf2      	bge.n	8005336 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	019b      	lsls	r3, r3, #6
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a08      	ldr	r2, [pc, #32]	; (800538c <USB_FlushTxFifo+0x64>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e006      	b.n	8005380 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b20      	cmp	r3, #32
 800537c:	d0f0      	beq.n	8005360 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	00030d40 	.word	0x00030d40

08005390 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a11      	ldr	r2, [pc, #68]	; (80053ec <USB_FlushRxFifo+0x5c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e018      	b.n	80053e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	daf2      	bge.n	800539c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2210      	movs	r2, #16
 80053be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3301      	adds	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a08      	ldr	r2, [pc, #32]	; (80053ec <USB_FlushRxFifo+0x5c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e006      	b.n	80053e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d0f0      	beq.n	80053c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	00030d40 	.word	0x00030d40

080053f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005410:	4313      	orrs	r3, r2
 8005412:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005422:	b480      	push	{r7}
 8005424:	b087      	sub	sp, #28
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0306 	and.w	r3, r3, #6
 800543a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]
 8005446:	e00a      	b.n	800545e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d002      	beq.n	8005454 <USB_GetDevSpeed+0x32>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b06      	cmp	r3, #6
 8005452:	d102      	bne.n	800545a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005454:	2302      	movs	r3, #2
 8005456:	75fb      	strb	r3, [r7, #23]
 8005458:	e001      	b.n	800545e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800545a:	230f      	movs	r3, #15
 800545c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800545e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005460:	4618      	mov	r0, r3
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d13a      	bne.n	80054fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	2101      	movs	r1, #1
 800549a:	fa01 f303 	lsl.w	r3, r1, r3
 800549e:	b29b      	uxth	r3, r3
 80054a0:	68f9      	ldr	r1, [r7, #12]
 80054a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a6:	4313      	orrs	r3, r2
 80054a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d155      	bne.n	800556c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	791b      	ldrb	r3, [r3, #4]
 80054da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	059b      	lsls	r3, r3, #22
 80054e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054e4:	4313      	orrs	r3, r2
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	0151      	lsls	r1, r2, #5
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	440a      	add	r2, r1
 80054ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	e036      	b.n	800556c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005504:	69da      	ldr	r2, [r3, #28]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	2101      	movs	r1, #1
 8005510:	fa01 f303 	lsl.w	r3, r1, r3
 8005514:	041b      	lsls	r3, r3, #16
 8005516:	68f9      	ldr	r1, [r7, #12]
 8005518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800551c:	4313      	orrs	r3, r2
 800551e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d11a      	bne.n	800556c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	791b      	ldrb	r3, [r3, #4]
 8005550:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005552:	430b      	orrs	r3, r1
 8005554:	4313      	orrs	r3, r2
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d161      	bne.n	800565c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ae:	d11f      	bne.n	80055f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005610:	4013      	ands	r3, r2
 8005612:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	2101      	movs	r1, #1
 8005626:	fa01 f303 	lsl.w	r3, r1, r3
 800562a:	b29b      	uxth	r3, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	68f9      	ldr	r1, [r7, #12]
 8005630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005634:	4013      	ands	r3, r2
 8005636:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	0159      	lsls	r1, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	440b      	add	r3, r1
 800564e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005652:	4619      	mov	r1, r3
 8005654:	4b35      	ldr	r3, [pc, #212]	; (800572c <USB_DeactivateEndpoint+0x1b0>)
 8005656:	4013      	ands	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
 800565a:	e060      	b.n	800571e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005672:	d11f      	bne.n	80056b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005692:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	0151      	lsls	r1, r2, #5
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	440a      	add	r2, r1
 80056aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	2101      	movs	r1, #1
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	43db      	mvns	r3, r3
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d4:	4013      	ands	r3, r2
 80056d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	2101      	movs	r1, #1
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	43db      	mvns	r3, r3
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f8:	4013      	ands	r3, r2
 80056fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	0159      	lsls	r1, r3, #5
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	440b      	add	r3, r1
 8005712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005716:	4619      	mov	r1, r3
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <USB_DeactivateEndpoint+0x1b4>)
 800571a:	4013      	ands	r3, r2
 800571c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	ec337800 	.word	0xec337800
 8005730:	eff37800 	.word	0xeff37800

08005734 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	4613      	mov	r3, r2
 8005740:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	785b      	ldrb	r3, [r3, #1]
 8005750:	2b01      	cmp	r3, #1
 8005752:	f040 815c 	bne.w	8005a0e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d132      	bne.n	80057c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005778:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800577c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005780:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057bc:	0cdb      	lsrs	r3, r3, #19
 80057be:	04db      	lsls	r3, r3, #19
 80057c0:	6113      	str	r3, [r2, #16]
 80057c2:	e074      	b.n	80058ae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057de:	0cdb      	lsrs	r3, r3, #19
 80057e0:	04db      	lsls	r3, r3, #19
 80057e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005802:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6999      	ldr	r1, [r3, #24]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	440b      	add	r3, r1
 8005820:	1e59      	subs	r1, r3, #1
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	fbb1 f3f3 	udiv	r3, r1, r3
 800582a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800582c:	4b9d      	ldr	r3, [pc, #628]	; (8005aa4 <USB_EPStartXfer+0x370>)
 800582e:	400b      	ands	r3, r1
 8005830:	69b9      	ldr	r1, [r7, #24]
 8005832:	0148      	lsls	r0, r1, #5
 8005834:	69f9      	ldr	r1, [r7, #28]
 8005836:	4401      	add	r1, r0
 8005838:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800583c:	4313      	orrs	r3, r2
 800583e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005856:	69b9      	ldr	r1, [r7, #24]
 8005858:	0148      	lsls	r0, r1, #5
 800585a:	69f9      	ldr	r1, [r7, #28]
 800585c:	4401      	add	r1, r0
 800585e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	791b      	ldrb	r3, [r3, #4]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d11f      	bne.n	80058ae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005888:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800588c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d14b      	bne.n	800594c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d009      	beq.n	80058d0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c8:	461a      	mov	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	791b      	ldrb	r3, [r3, #4]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d128      	bne.n	800592a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d110      	bne.n	800590a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	0151      	lsls	r1, r2, #5
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	440a      	add	r2, r1
 80058fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005902:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	e00f      	b.n	800592a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	440a      	add	r2, r1
 8005920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005928:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	440a      	add	r2, r1
 8005940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005944:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e133      	b.n	8005bb4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005966:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800596a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	791b      	ldrb	r3, [r3, #4]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d015      	beq.n	80059a0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 811b 	beq.w	8005bb4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	2101      	movs	r1, #1
 8005990:	fa01 f303 	lsl.w	r3, r1, r3
 8005994:	69f9      	ldr	r1, [r7, #28]
 8005996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800599a:	4313      	orrs	r3, r2
 800599c:	634b      	str	r3, [r1, #52]	; 0x34
 800599e:	e109      	b.n	8005bb4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d110      	bne.n	80059d2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	e00f      	b.n	80059f2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6919      	ldr	r1, [r3, #16]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	781a      	ldrb	r2, [r3, #0]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	b298      	uxth	r0, r3
 8005a00:	79fb      	ldrb	r3, [r7, #7]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	4603      	mov	r3, r0
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fade 	bl	8005fc8 <USB_WritePacket>
 8005a0c:	e0d2      	b.n	8005bb4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a28:	0cdb      	lsrs	r3, r3, #19
 8005a2a:	04db      	lsls	r3, r3, #19
 8005a2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d126      	bne.n	8005aa8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a70:	69b9      	ldr	r1, [r7, #24]
 8005a72:	0148      	lsls	r0, r1, #5
 8005a74:	69f9      	ldr	r1, [r7, #28]
 8005a76:	4401      	add	r1, r0
 8005a78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a9e:	6113      	str	r3, [r2, #16]
 8005aa0:	e03a      	b.n	8005b18 <USB_EPStartXfer+0x3e4>
 8005aa2:	bf00      	nop
 8005aa4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	699a      	ldr	r2, [r3, #24]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	1e5a      	subs	r2, r3, #1
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	8afa      	ldrh	r2, [r7, #22]
 8005ac4:	fb03 f202 	mul.w	r2, r3, r2
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	8afb      	ldrh	r3, [r7, #22]
 8005adc:	04d9      	lsls	r1, r3, #19
 8005ade:	4b38      	ldr	r3, [pc, #224]	; (8005bc0 <USB_EPStartXfer+0x48c>)
 8005ae0:	400b      	ands	r3, r1
 8005ae2:	69b9      	ldr	r1, [r7, #24]
 8005ae4:	0148      	lsls	r0, r1, #5
 8005ae6:	69f9      	ldr	r1, [r7, #28]
 8005ae8:	4401      	add	r1, r0
 8005aea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aee:	4313      	orrs	r3, r2
 8005af0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b08:	69b9      	ldr	r1, [r7, #24]
 8005b0a:	0148      	lsls	r0, r1, #5
 8005b0c:	69f9      	ldr	r1, [r7, #28]
 8005b0e:	4401      	add	r1, r0
 8005b10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b14:	4313      	orrs	r3, r2
 8005b16:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d10d      	bne.n	8005b3a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6919      	ldr	r1, [r3, #16]
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b36:	460a      	mov	r2, r1
 8005b38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	791b      	ldrb	r3, [r3, #4]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d128      	bne.n	8005b94 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d110      	bne.n	8005b74 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	e00f      	b.n	8005b94 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3720      	adds	r7, #32
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	1ff80000 	.word	0x1ff80000

08005bc4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	f040 80ce 	bne.w	8005d82 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d132      	bne.n	8005c54 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4c:	0cdb      	lsrs	r3, r3, #19
 8005c4e:	04db      	lsls	r3, r3, #19
 8005c50:	6113      	str	r3, [r2, #16]
 8005c52:	e04e      	b.n	8005cf2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6e:	0cdb      	lsrs	r3, r3, #19
 8005c70:	04db      	lsls	r3, r3, #19
 8005c72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	699a      	ldr	r2, [r3, #24]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d903      	bls.n	8005cac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	691a      	ldr	r2, [r3, #16]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce2:	6939      	ldr	r1, [r7, #16]
 8005ce4:	0148      	lsls	r0, r1, #5
 8005ce6:	6979      	ldr	r1, [r7, #20]
 8005ce8:	4401      	add	r1, r0
 8005cea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d11e      	bne.n	8005d36 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d009      	beq.n	8005d14 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	e097      	b.n	8005e66 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d54:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 8083 	beq.w	8005e66 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	2101      	movs	r1, #1
 8005d72:	fa01 f303 	lsl.w	r3, r1, r3
 8005d76:	6979      	ldr	r1, [r7, #20]
 8005d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	634b      	str	r3, [r1, #52]	; 0x34
 8005d80:	e071      	b.n	8005e66 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9c:	0cdb      	lsrs	r3, r3, #19
 8005d9e:	04db      	lsls	r3, r3, #19
 8005da0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dc4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e14:	6939      	ldr	r1, [r7, #16]
 8005e16:	0148      	lsls	r0, r1, #5
 8005e18:	6979      	ldr	r1, [r7, #20]
 8005e1a:	4401      	add	r1, r0
 8005e1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e20:	4313      	orrs	r3, r2
 8005e22:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d10d      	bne.n	8005e46 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6919      	ldr	r1, [r3, #16]
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	460a      	mov	r2, r1
 8005e44:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d14a      	bne.n	8005f28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eaa:	f040 8086 	bne.w	8005fba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	7812      	ldrb	r2, [r2, #0]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ecc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ed0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	7812      	ldrb	r2, [r2, #0]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ef4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d902      	bls.n	8005f0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	75fb      	strb	r3, [r7, #23]
          break;
 8005f0a:	e056      	b.n	8005fba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f24:	d0e7      	beq.n	8005ef6 <USB_EPStopXfer+0x82>
 8005f26:	e048      	b.n	8005fba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f40:	d13b      	bne.n	8005fba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	7812      	ldrb	r2, [r2, #0]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	7812      	ldrb	r2, [r2, #0]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d902      	bls.n	8005fa0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f9e:	e00c      	b.n	8005fba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb8:	d0e7      	beq.n	8005f8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b089      	sub	sp, #36	; 0x24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	71fb      	strb	r3, [r7, #7]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fe6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d123      	bne.n	8006036 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fee:	88bb      	ldrh	r3, [r7, #4]
 8005ff0:	3303      	adds	r3, #3
 8005ff2:	089b      	lsrs	r3, r3, #2
 8005ff4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	e018      	b.n	800602e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	031a      	lsls	r2, r3, #12
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4413      	add	r3, r2
 8006004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006008:	461a      	mov	r2, r3
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	3301      	adds	r3, #1
 8006014:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	3301      	adds	r3, #1
 800601a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	3301      	adds	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3301      	adds	r3, #1
 8006026:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	3301      	adds	r3, #1
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	429a      	cmp	r2, r3
 8006034:	d3e2      	bcc.n	8005ffc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3724      	adds	r7, #36	; 0x24
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006044:	b480      	push	{r7}
 8006046:	b08b      	sub	sp, #44	; 0x2c
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	4613      	mov	r3, r2
 8006050:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	089b      	lsrs	r3, r3, #2
 800605e:	b29b      	uxth	r3, r3
 8006060:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800606a:	2300      	movs	r3, #0
 800606c:	623b      	str	r3, [r7, #32]
 800606e:	e014      	b.n	800609a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	601a      	str	r2, [r3, #0]
    pDest++;
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	3301      	adds	r3, #1
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	3301      	adds	r3, #1
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	3301      	adds	r3, #1
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	3301      	adds	r3, #1
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	3301      	adds	r3, #1
 8006098:	623b      	str	r3, [r7, #32]
 800609a:	6a3a      	ldr	r2, [r7, #32]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d3e6      	bcc.n	8006070 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060a2:	8bfb      	ldrh	r3, [r7, #30]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01e      	beq.n	80060e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b2:	461a      	mov	r2, r3
 80060b4:	f107 0310 	add.w	r3, r7, #16
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	701a      	strb	r2, [r3, #0]
      i++;
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	3301      	adds	r3, #1
 80060d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	3301      	adds	r3, #1
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060da:	8bfb      	ldrh	r3, [r7, #30]
 80060dc:	3b01      	subs	r3, #1
 80060de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060e0:	8bfb      	ldrh	r3, [r7, #30]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1ea      	bne.n	80060bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	372c      	adds	r7, #44	; 0x2c
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d12c      	bne.n	800616a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	db12      	blt.n	8006148 <USB_EPSetStall+0x54>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00f      	beq.n	8006148 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006142:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006146:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006162:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	e02b      	b.n	80061c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	db12      	blt.n	80061a2 <USB_EPSetStall+0xae>
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00f      	beq.n	80061a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	785b      	ldrb	r3, [r3, #1]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d128      	bne.n	800623e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800620a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	791b      	ldrb	r3, [r3, #4]
 8006210:	2b03      	cmp	r3, #3
 8006212:	d003      	beq.n	800621c <USB_EPClearStall+0x4c>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	791b      	ldrb	r3, [r3, #4]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d138      	bne.n	800628e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	e027      	b.n	800628e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	440a      	add	r2, r1
 8006254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006258:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800625c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	791b      	ldrb	r3, [r3, #4]
 8006262:	2b03      	cmp	r3, #3
 8006264:	d003      	beq.n	800626e <USB_EPClearStall+0x9e>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	791b      	ldrb	r3, [r3, #4]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d10f      	bne.n	800628e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	440a      	add	r2, r1
 8006284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800628c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80062d0:	68f9      	ldr	r1, [r7, #12]
 80062d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062d6:	4313      	orrs	r3, r2
 80062d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006302:	f023 0303 	bic.w	r3, r3, #3
 8006306:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006316:	f023 0302 	bic.w	r3, r3, #2
 800631a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006344:	f023 0303 	bic.w	r3, r3, #3
 8006348:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006358:	f043 0302 	orr.w	r3, r3, #2
 800635c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4013      	ands	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006384:	68fb      	ldr	r3, [r7, #12]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	4013      	ands	r3, r2
 80063b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	0c1b      	lsrs	r3, r3, #16
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	4013      	ands	r3, r2
 80063e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	b29b      	uxth	r3, r3
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	4013      	ands	r3, r2
 8006426:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006428:	68bb      	ldr	r3, [r7, #8]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006436:	b480      	push	{r7}
 8006438:	b087      	sub	sp, #28
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	460b      	mov	r3, r1
 8006440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006458:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800645a:	78fb      	ldrb	r3, [r7, #3]
 800645c:	f003 030f 	and.w	r3, r3, #15
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	fa22 f303 	lsr.w	r3, r2, r3
 8006466:	01db      	lsls	r3, r3, #7
 8006468:	b2db      	uxtb	r3, r3
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4013      	ands	r3, r2
 8006482:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006484:	68bb      	ldr	r3, [r7, #8]
}
 8006486:	4618      	mov	r0, r3
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f003 0301 	and.w	r3, r3, #1
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064cc:	f023 0307 	bic.w	r3, r3, #7
 80064d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	460b      	mov	r3, r1
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	333c      	adds	r3, #60	; 0x3c
 800650a:	3304      	adds	r3, #4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4a26      	ldr	r2, [pc, #152]	; (80065ac <USB_EP0_OutStart+0xb8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d90a      	bls.n	800652e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006528:	d101      	bne.n	800652e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	e037      	b.n	800659e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006534:	461a      	mov	r2, r3
 8006536:	2300      	movs	r3, #0
 8006538:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800654c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655c:	f043 0318 	orr.w	r3, r3, #24
 8006560:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006570:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006574:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006576:	7afb      	ldrb	r3, [r7, #11]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d10f      	bne.n	800659c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006582:	461a      	mov	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006596:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800659a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	4f54300a 	.word	0x4f54300a

080065b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4a13      	ldr	r2, [pc, #76]	; (8006614 <USB_CoreReset+0x64>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d901      	bls.n	80065ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e01b      	b.n	8006606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	daf2      	bge.n	80065bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f043 0201 	orr.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3301      	adds	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4a09      	ldr	r2, [pc, #36]	; (8006614 <USB_CoreReset+0x64>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d901      	bls.n	80065f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e006      	b.n	8006606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b01      	cmp	r3, #1
 8006602:	d0f0      	beq.n	80065e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	00030d40 	.word	0x00030d40

08006618 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006624:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006628:	f002 fcb4 	bl	8008f94 <USBD_static_malloc>
 800662c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d109      	bne.n	8006648 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	32b0      	adds	r2, #176	; 0xb0
 800663e:	2100      	movs	r1, #0
 8006640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006644:	2302      	movs	r3, #2
 8006646:	e0d4      	b.n	80067f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006648:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800664c:	2100      	movs	r1, #0
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f002 fe44 	bl	80092dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	32b0      	adds	r2, #176	; 0xb0
 800665e:	68f9      	ldr	r1, [r7, #12]
 8006660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	32b0      	adds	r2, #176	; 0xb0
 800666e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	7c1b      	ldrb	r3, [r3, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d138      	bne.n	80066f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006680:	4b5e      	ldr	r3, [pc, #376]	; (80067fc <USBD_CDC_Init+0x1e4>)
 8006682:	7819      	ldrb	r1, [r3, #0]
 8006684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006688:	2202      	movs	r2, #2
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f002 fb5f 	bl	8008d4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006690:	4b5a      	ldr	r3, [pc, #360]	; (80067fc <USBD_CDC_Init+0x1e4>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	f003 020f 	and.w	r2, r3, #15
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	3324      	adds	r3, #36	; 0x24
 80066a6:	2201      	movs	r2, #1
 80066a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066aa:	4b55      	ldr	r3, [pc, #340]	; (8006800 <USBD_CDC_Init+0x1e8>)
 80066ac:	7819      	ldrb	r1, [r3, #0]
 80066ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b2:	2202      	movs	r2, #2
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f002 fb4a 	bl	8008d4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066ba:	4b51      	ldr	r3, [pc, #324]	; (8006800 <USBD_CDC_Init+0x1e8>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f003 020f 	and.w	r2, r3, #15
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066d2:	2201      	movs	r2, #1
 80066d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066d6:	4b4b      	ldr	r3, [pc, #300]	; (8006804 <USBD_CDC_Init+0x1ec>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f003 020f 	and.w	r2, r3, #15
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	3326      	adds	r3, #38	; 0x26
 80066ec:	2210      	movs	r2, #16
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	e035      	b.n	800675e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066f2:	4b42      	ldr	r3, [pc, #264]	; (80067fc <USBD_CDC_Init+0x1e4>)
 80066f4:	7819      	ldrb	r1, [r3, #0]
 80066f6:	2340      	movs	r3, #64	; 0x40
 80066f8:	2202      	movs	r2, #2
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f002 fb27 	bl	8008d4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006700:	4b3e      	ldr	r3, [pc, #248]	; (80067fc <USBD_CDC_Init+0x1e4>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f003 020f 	and.w	r2, r3, #15
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	440b      	add	r3, r1
 8006714:	3324      	adds	r3, #36	; 0x24
 8006716:	2201      	movs	r2, #1
 8006718:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800671a:	4b39      	ldr	r3, [pc, #228]	; (8006800 <USBD_CDC_Init+0x1e8>)
 800671c:	7819      	ldrb	r1, [r3, #0]
 800671e:	2340      	movs	r3, #64	; 0x40
 8006720:	2202      	movs	r2, #2
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f002 fb13 	bl	8008d4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006728:	4b35      	ldr	r3, [pc, #212]	; (8006800 <USBD_CDC_Init+0x1e8>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	f003 020f 	and.w	r2, r3, #15
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	440b      	add	r3, r1
 800673c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006740:	2201      	movs	r2, #1
 8006742:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006744:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <USBD_CDC_Init+0x1ec>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	f003 020f 	and.w	r2, r3, #15
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	3326      	adds	r3, #38	; 0x26
 800675a:	2210      	movs	r2, #16
 800675c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800675e:	4b29      	ldr	r3, [pc, #164]	; (8006804 <USBD_CDC_Init+0x1ec>)
 8006760:	7819      	ldrb	r1, [r3, #0]
 8006762:	2308      	movs	r3, #8
 8006764:	2203      	movs	r2, #3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f002 faf1 	bl	8008d4e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800676c:	4b25      	ldr	r3, [pc, #148]	; (8006804 <USBD_CDC_Init+0x1ec>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	f003 020f 	and.w	r2, r3, #15
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	3324      	adds	r3, #36	; 0x24
 8006782:	2201      	movs	r2, #1
 8006784:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	33b0      	adds	r3, #176	; 0xb0
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80067bc:	2302      	movs	r3, #2
 80067be:	e018      	b.n	80067f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	7c1b      	ldrb	r3, [r3, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067c8:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <USBD_CDC_Init+0x1e8>)
 80067ca:	7819      	ldrb	r1, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f002 fba8 	bl	8008f2c <USBD_LL_PrepareReceive>
 80067dc:	e008      	b.n	80067f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067de:	4b08      	ldr	r3, [pc, #32]	; (8006800 <USBD_CDC_Init+0x1e8>)
 80067e0:	7819      	ldrb	r1, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067e8:	2340      	movs	r3, #64	; 0x40
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f002 fb9e 	bl	8008f2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000093 	.word	0x20000093
 8006800:	20000094 	.word	0x20000094
 8006804:	20000095 	.word	0x20000095

08006808 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006814:	4b3a      	ldr	r3, [pc, #232]	; (8006900 <USBD_CDC_DeInit+0xf8>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f002 fabd 	bl	8008d9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006820:	4b37      	ldr	r3, [pc, #220]	; (8006900 <USBD_CDC_DeInit+0xf8>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	f003 020f 	and.w	r2, r3, #15
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	3324      	adds	r3, #36	; 0x24
 8006836:	2200      	movs	r2, #0
 8006838:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800683a:	4b32      	ldr	r3, [pc, #200]	; (8006904 <USBD_CDC_DeInit+0xfc>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f002 faaa 	bl	8008d9a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006846:	4b2f      	ldr	r3, [pc, #188]	; (8006904 <USBD_CDC_DeInit+0xfc>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	f003 020f 	and.w	r2, r3, #15
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800685e:	2200      	movs	r2, #0
 8006860:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006862:	4b29      	ldr	r3, [pc, #164]	; (8006908 <USBD_CDC_DeInit+0x100>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f002 fa96 	bl	8008d9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800686e:	4b26      	ldr	r3, [pc, #152]	; (8006908 <USBD_CDC_DeInit+0x100>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	f003 020f 	and.w	r2, r3, #15
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	3324      	adds	r3, #36	; 0x24
 8006884:	2200      	movs	r2, #0
 8006886:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006888:	4b1f      	ldr	r3, [pc, #124]	; (8006908 <USBD_CDC_DeInit+0x100>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f003 020f 	and.w	r2, r3, #15
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	3326      	adds	r3, #38	; 0x26
 800689e:	2200      	movs	r2, #0
 80068a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	32b0      	adds	r2, #176	; 0xb0
 80068ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01f      	beq.n	80068f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	33b0      	adds	r3, #176	; 0xb0
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32b0      	adds	r2, #176	; 0xb0
 80068d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f002 fb6a 	bl	8008fb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	32b0      	adds	r2, #176	; 0xb0
 80068e6:	2100      	movs	r1, #0
 80068e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000093 	.word	0x20000093
 8006904:	20000094 	.word	0x20000094
 8006908:	20000095 	.word	0x20000095

0800690c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	32b0      	adds	r2, #176	; 0xb0
 8006920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006924:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006938:	2303      	movs	r3, #3
 800693a:	e0bf      	b.n	8006abc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006944:	2b00      	cmp	r3, #0
 8006946:	d050      	beq.n	80069ea <USBD_CDC_Setup+0xde>
 8006948:	2b20      	cmp	r3, #32
 800694a:	f040 80af 	bne.w	8006aac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	88db      	ldrh	r3, [r3, #6]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d03a      	beq.n	80069cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	b25b      	sxtb	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	da1b      	bge.n	8006998 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	33b0      	adds	r3, #176	; 0xb0
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006976:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	88d2      	ldrh	r2, [r2, #6]
 800697c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	88db      	ldrh	r3, [r3, #6]
 8006982:	2b07      	cmp	r3, #7
 8006984:	bf28      	it	cs
 8006986:	2307      	movcs	r3, #7
 8006988:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	89fa      	ldrh	r2, [r7, #14]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 fd89 	bl	80084a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006996:	e090      	b.n	8006aba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	785a      	ldrb	r2, [r3, #1]
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	88db      	ldrh	r3, [r3, #6]
 80069a6:	2b3f      	cmp	r3, #63	; 0x3f
 80069a8:	d803      	bhi.n	80069b2 <USBD_CDC_Setup+0xa6>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	88db      	ldrh	r3, [r3, #6]
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	e000      	b.n	80069b4 <USBD_CDC_Setup+0xa8>
 80069b2:	2240      	movs	r2, #64	; 0x40
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80069ba:	6939      	ldr	r1, [r7, #16]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80069c2:	461a      	mov	r2, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 fd9b 	bl	8008500 <USBD_CtlPrepareRx>
      break;
 80069ca:	e076      	b.n	8006aba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	33b0      	adds	r3, #176	; 0xb0
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	7850      	ldrb	r0, [r2, #1]
 80069e2:	2200      	movs	r2, #0
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	4798      	blx	r3
      break;
 80069e8:	e067      	b.n	8006aba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	2b0b      	cmp	r3, #11
 80069f0:	d851      	bhi.n	8006a96 <USBD_CDC_Setup+0x18a>
 80069f2:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <USBD_CDC_Setup+0xec>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a29 	.word	0x08006a29
 80069fc:	08006aa5 	.word	0x08006aa5
 8006a00:	08006a97 	.word	0x08006a97
 8006a04:	08006a97 	.word	0x08006a97
 8006a08:	08006a97 	.word	0x08006a97
 8006a0c:	08006a97 	.word	0x08006a97
 8006a10:	08006a97 	.word	0x08006a97
 8006a14:	08006a97 	.word	0x08006a97
 8006a18:	08006a97 	.word	0x08006a97
 8006a1c:	08006a97 	.word	0x08006a97
 8006a20:	08006a53 	.word	0x08006a53
 8006a24:	08006a7d 	.word	0x08006a7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d107      	bne.n	8006a44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a34:	f107 030a 	add.w	r3, r7, #10
 8006a38:	2202      	movs	r2, #2
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fd33 	bl	80084a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a42:	e032      	b.n	8006aaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 fcbd 	bl	80083c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	75fb      	strb	r3, [r7, #23]
          break;
 8006a50:	e02b      	b.n	8006aaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d107      	bne.n	8006a6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a5e:	f107 030d 	add.w	r3, r7, #13
 8006a62:	2201      	movs	r2, #1
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fd1e 	bl	80084a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a6c:	e01d      	b.n	8006aaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fca8 	bl	80083c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a76:	2303      	movs	r3, #3
 8006a78:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7a:	e016      	b.n	8006aaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d00f      	beq.n	8006aa8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fc9b 	bl	80083c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a90:	2303      	movs	r3, #3
 8006a92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a94:	e008      	b.n	8006aa8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fc94 	bl	80083c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8006aa2:	e002      	b.n	8006aaa <USBD_CDC_Setup+0x19e>
          break;
 8006aa4:	bf00      	nop
 8006aa6:	e008      	b.n	8006aba <USBD_CDC_Setup+0x1ae>
          break;
 8006aa8:	bf00      	nop
      }
      break;
 8006aaa:	e006      	b.n	8006aba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 fc89 	bl	80083c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ad6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	32b0      	adds	r2, #176	; 0xb0
 8006ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e065      	b.n	8006bba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	32b0      	adds	r2, #176	; 0xb0
 8006af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006afe:	78fb      	ldrb	r3, [r7, #3]
 8006b00:	f003 020f 	and.w	r2, r3, #15
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	440b      	add	r3, r1
 8006b10:	3318      	adds	r3, #24
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d02f      	beq.n	8006b78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	f003 020f 	and.w	r2, r3, #15
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	440b      	add	r3, r1
 8006b2a:	3318      	adds	r3, #24
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	f003 010f 	and.w	r1, r3, #15
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	460b      	mov	r3, r1
 8006b38:	00db      	lsls	r3, r3, #3
 8006b3a:	440b      	add	r3, r1
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4403      	add	r3, r0
 8006b40:	3348      	adds	r3, #72	; 0x48
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b48:	fb01 f303 	mul.w	r3, r1, r3
 8006b4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d112      	bne.n	8006b78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b52:	78fb      	ldrb	r3, [r7, #3]
 8006b54:	f003 020f 	and.w	r2, r3, #15
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	3318      	adds	r3, #24
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b6a:	78f9      	ldrb	r1, [r7, #3]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	2200      	movs	r2, #0
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f002 f9ba 	bl	8008eea <USBD_LL_Transmit>
 8006b76:	e01f      	b.n	8006bb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	33b0      	adds	r3, #176	; 0xb0
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d010      	beq.n	8006bb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	33b0      	adds	r3, #176	; 0xb0
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006bb4:	78fa      	ldrb	r2, [r7, #3]
 8006bb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	32b0      	adds	r2, #176	; 0xb0
 8006bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	32b0      	adds	r2, #176	; 0xb0
 8006be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e01a      	b.n	8006c2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f002 f9b8 	bl	8008f6e <USBD_LL_GetRxDataSize>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	33b0      	adds	r3, #176	; 0xb0
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c24:	4611      	mov	r1, r2
 8006c26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	32b0      	adds	r2, #176	; 0xb0
 8006c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e025      	b.n	8006ca0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	33b0      	adds	r3, #176	; 0xb0
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01a      	beq.n	8006c9e <USBD_CDC_EP0_RxReady+0x6c>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c6e:	2bff      	cmp	r3, #255	; 0xff
 8006c70:	d015      	beq.n	8006c9e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	33b0      	adds	r3, #176	; 0xb0
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c92:	b292      	uxth	r2, r2
 8006c94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	22ff      	movs	r2, #255	; 0xff
 8006c9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cb0:	2182      	movs	r1, #130	; 0x82
 8006cb2:	4818      	ldr	r0, [pc, #96]	; (8006d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cb4:	f000 fd4f 	bl	8007756 <USBD_GetEpDesc>
 8006cb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cba:	2101      	movs	r1, #1
 8006cbc:	4815      	ldr	r0, [pc, #84]	; (8006d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cbe:	f000 fd4a 	bl	8007756 <USBD_GetEpDesc>
 8006cc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cc4:	2181      	movs	r1, #129	; 0x81
 8006cc6:	4813      	ldr	r0, [pc, #76]	; (8006d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cc8:	f000 fd45 	bl	8007756 <USBD_GetEpDesc>
 8006ccc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2210      	movs	r2, #16
 8006cd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ce8:	711a      	strb	r2, [r3, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d006      	beq.n	8006d02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cfc:	711a      	strb	r2, [r3, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2243      	movs	r2, #67	; 0x43
 8006d06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d08:	4b02      	ldr	r3, [pc, #8]	; (8006d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000050 	.word	0x20000050

08006d18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d20:	2182      	movs	r1, #130	; 0x82
 8006d22:	4818      	ldr	r0, [pc, #96]	; (8006d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d24:	f000 fd17 	bl	8007756 <USBD_GetEpDesc>
 8006d28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	4815      	ldr	r0, [pc, #84]	; (8006d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d2e:	f000 fd12 	bl	8007756 <USBD_GetEpDesc>
 8006d32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d34:	2181      	movs	r1, #129	; 0x81
 8006d36:	4813      	ldr	r0, [pc, #76]	; (8006d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d38:	f000 fd0d 	bl	8007756 <USBD_GetEpDesc>
 8006d3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2210      	movs	r2, #16
 8006d48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d006      	beq.n	8006d5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2200      	movs	r2, #0
 8006d54:	711a      	strb	r2, [r3, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f042 0202 	orr.w	r2, r2, #2
 8006d5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d006      	beq.n	8006d72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	711a      	strb	r2, [r3, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f042 0202 	orr.w	r2, r2, #2
 8006d70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2243      	movs	r2, #67	; 0x43
 8006d76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d78:	4b02      	ldr	r3, [pc, #8]	; (8006d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000050 	.word	0x20000050

08006d88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d90:	2182      	movs	r1, #130	; 0x82
 8006d92:	4818      	ldr	r0, [pc, #96]	; (8006df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d94:	f000 fcdf 	bl	8007756 <USBD_GetEpDesc>
 8006d98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	4815      	ldr	r0, [pc, #84]	; (8006df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d9e:	f000 fcda 	bl	8007756 <USBD_GetEpDesc>
 8006da2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006da4:	2181      	movs	r1, #129	; 0x81
 8006da6:	4813      	ldr	r0, [pc, #76]	; (8006df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006da8:	f000 fcd5 	bl	8007756 <USBD_GetEpDesc>
 8006dac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2210      	movs	r2, #16
 8006db8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d006      	beq.n	8006dce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dc8:	711a      	strb	r2, [r3, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d006      	beq.n	8006de2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ddc:	711a      	strb	r2, [r3, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2243      	movs	r2, #67	; 0x43
 8006de6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006de8:	4b02      	ldr	r3, [pc, #8]	; (8006df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20000050 	.word	0x20000050

08006df8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	220a      	movs	r2, #10
 8006e04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e06:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	2000000c 	.word	0x2000000c

08006e18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e009      	b.n	8006e40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	33b0      	adds	r3, #176	; 0xb0
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	32b0      	adds	r2, #176	; 0xb0
 8006e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e66:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e008      	b.n	8006e84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	32b0      	adds	r2, #176	; 0xb0
 8006ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e004      	b.n	8006ebe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
	...

08006ecc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	32b0      	adds	r2, #176	; 0xb0
 8006ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	32b0      	adds	r2, #176	; 0xb0
 8006ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e025      	b.n	8006f4a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d11f      	bne.n	8006f48 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f10:	4b10      	ldr	r3, [pc, #64]	; (8006f54 <USBD_CDC_TransmitPacket+0x88>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	f003 020f 	and.w	r2, r3, #15
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4403      	add	r3, r0
 8006f2a:	3318      	adds	r3, #24
 8006f2c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f2e:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <USBD_CDC_TransmitPacket+0x88>)
 8006f30:	7819      	ldrb	r1, [r3, #0]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 ffd3 	bl	8008eea <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000093 	.word	0x20000093

08006f58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	32b0      	adds	r2, #176	; 0xb0
 8006f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	32b0      	adds	r2, #176	; 0xb0
 8006f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e018      	b.n	8006fb8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	7c1b      	ldrb	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f8e:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <USBD_CDC_ReceivePacket+0x68>)
 8006f90:	7819      	ldrb	r1, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 ffc5 	bl	8008f2c <USBD_LL_PrepareReceive>
 8006fa2:	e008      	b.n	8006fb6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fa4:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <USBD_CDC_ReceivePacket+0x68>)
 8006fa6:	7819      	ldrb	r1, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fae:	2340      	movs	r3, #64	; 0x40
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 ffbb 	bl	8008f2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20000094 	.word	0x20000094

08006fc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e01f      	b.n	800701c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	79fa      	ldrb	r2, [r7, #7]
 800700e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f001 fe35 	bl	8008c80 <USBD_LL_Init>
 8007016:	4603      	mov	r3, r0
 8007018:	75fb      	strb	r3, [r7, #23]

  return ret;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007038:	2303      	movs	r3, #3
 800703a:	e025      	b.n	8007088 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	32ae      	adds	r2, #174	; 0xae
 800704e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00f      	beq.n	8007078 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	32ae      	adds	r2, #174	; 0xae
 8007062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	f107 020e 	add.w	r2, r7, #14
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
 8007070:	4602      	mov	r2, r0
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 fe3d 	bl	8008d18 <USBD_LL_Start>
 800709e:	4603      	mov	r3, r0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d009      	beq.n	80070ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	78fa      	ldrb	r2, [r7, #3]
 80070e2:	4611      	mov	r1, r2
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
 80070e8:	4603      	mov	r3, r0
 80070ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	78fa      	ldrb	r2, [r7, #3]
 8007110:	4611      	mov	r1, r2
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800711c:	2303      	movs	r3, #3
 800711e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	4618      	mov	r0, r3
 800713e:	f001 f908 	bl	8008352 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007150:	461a      	mov	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800715e:	f003 031f 	and.w	r3, r3, #31
 8007162:	2b02      	cmp	r3, #2
 8007164:	d01a      	beq.n	800719c <USBD_LL_SetupStage+0x72>
 8007166:	2b02      	cmp	r3, #2
 8007168:	d822      	bhi.n	80071b0 <USBD_LL_SetupStage+0x86>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <USBD_LL_SetupStage+0x4a>
 800716e:	2b01      	cmp	r3, #1
 8007170:	d00a      	beq.n	8007188 <USBD_LL_SetupStage+0x5e>
 8007172:	e01d      	b.n	80071b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fb5f 	bl	8007840 <USBD_StdDevReq>
 8007182:	4603      	mov	r3, r0
 8007184:	73fb      	strb	r3, [r7, #15]
      break;
 8007186:	e020      	b.n	80071ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fbc7 	bl	8007924 <USBD_StdItfReq>
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]
      break;
 800719a:	e016      	b.n	80071ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fc29 	bl	80079fc <USBD_StdEPReq>
 80071aa:	4603      	mov	r3, r0
 80071ac:	73fb      	strb	r3, [r7, #15]
      break;
 80071ae:	e00c      	b.n	80071ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fe0a 	bl	8008dd8 <USBD_LL_StallEP>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
      break;
 80071c8:	bf00      	nop
  }

  return ret;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	460b      	mov	r3, r1
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071e6:	7afb      	ldrb	r3, [r7, #11]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d16e      	bne.n	80072ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	f040 8098 	bne.w	8007330 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	429a      	cmp	r2, r3
 800720a:	d913      	bls.n	8007234 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	4293      	cmp	r3, r2
 8007224:	bf28      	it	cs
 8007226:	4613      	movcs	r3, r2
 8007228:	461a      	mov	r2, r3
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f001 f984 	bl	800853a <USBD_CtlContinueRx>
 8007232:	e07d      	b.n	8007330 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800723a:	f003 031f 	and.w	r3, r3, #31
 800723e:	2b02      	cmp	r3, #2
 8007240:	d014      	beq.n	800726c <USBD_LL_DataOutStage+0x98>
 8007242:	2b02      	cmp	r3, #2
 8007244:	d81d      	bhi.n	8007282 <USBD_LL_DataOutStage+0xae>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <USBD_LL_DataOutStage+0x7c>
 800724a:	2b01      	cmp	r3, #1
 800724c:	d003      	beq.n	8007256 <USBD_LL_DataOutStage+0x82>
 800724e:	e018      	b.n	8007282 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	75bb      	strb	r3, [r7, #22]
            break;
 8007254:	e018      	b.n	8007288 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800725c:	b2db      	uxtb	r3, r3
 800725e:	4619      	mov	r1, r3
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fa5e 	bl	8007722 <USBD_CoreFindIF>
 8007266:	4603      	mov	r3, r0
 8007268:	75bb      	strb	r3, [r7, #22]
            break;
 800726a:	e00d      	b.n	8007288 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007272:	b2db      	uxtb	r3, r3
 8007274:	4619      	mov	r1, r3
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fa60 	bl	800773c <USBD_CoreFindEP>
 800727c:	4603      	mov	r3, r0
 800727e:	75bb      	strb	r3, [r7, #22]
            break;
 8007280:	e002      	b.n	8007288 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	75bb      	strb	r3, [r7, #22]
            break;
 8007286:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007288:	7dbb      	ldrb	r3, [r7, #22]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d119      	bne.n	80072c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b03      	cmp	r3, #3
 8007298:	d113      	bne.n	80072c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800729a:	7dba      	ldrb	r2, [r7, #22]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	32ae      	adds	r2, #174	; 0xae
 80072a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00b      	beq.n	80072c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072aa:	7dba      	ldrb	r2, [r7, #22]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072b2:	7dba      	ldrb	r2, [r7, #22]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	32ae      	adds	r2, #174	; 0xae
 80072b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f001 f94a 	bl	800855c <USBD_CtlSendStatus>
 80072c8:	e032      	b.n	8007330 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	4619      	mov	r1, r3
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 fa31 	bl	800773c <USBD_CoreFindEP>
 80072da:	4603      	mov	r3, r0
 80072dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072de:	7dbb      	ldrb	r3, [r7, #22]
 80072e0:	2bff      	cmp	r3, #255	; 0xff
 80072e2:	d025      	beq.n	8007330 <USBD_LL_DataOutStage+0x15c>
 80072e4:	7dbb      	ldrb	r3, [r7, #22]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d122      	bne.n	8007330 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d117      	bne.n	8007326 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80072f6:	7dba      	ldrb	r2, [r7, #22]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	32ae      	adds	r2, #174	; 0xae
 80072fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00f      	beq.n	8007326 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007306:	7dba      	ldrb	r2, [r7, #22]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800730e:	7dba      	ldrb	r2, [r7, #22]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	32ae      	adds	r2, #174	; 0xae
 8007314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	7afa      	ldrb	r2, [r7, #11]
 800731c:	4611      	mov	r1, r2
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	4798      	blx	r3
 8007322:	4603      	mov	r3, r0
 8007324:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800732c:	7dfb      	ldrb	r3, [r7, #23]
 800732e:	e000      	b.n	8007332 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b086      	sub	sp, #24
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	460b      	mov	r3, r1
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007348:	7afb      	ldrb	r3, [r7, #11]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d16f      	bne.n	800742e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3314      	adds	r3, #20
 8007352:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800735a:	2b02      	cmp	r3, #2
 800735c:	d15a      	bne.n	8007414 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	429a      	cmp	r2, r3
 8007368:	d914      	bls.n	8007394 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	1ad2      	subs	r2, r2, r3
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	461a      	mov	r2, r3
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f001 f8ac 	bl	80084de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007386:	2300      	movs	r3, #0
 8007388:	2200      	movs	r2, #0
 800738a:	2100      	movs	r1, #0
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f001 fdcd 	bl	8008f2c <USBD_LL_PrepareReceive>
 8007392:	e03f      	b.n	8007414 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	429a      	cmp	r2, r3
 800739e:	d11c      	bne.n	80073da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d316      	bcc.n	80073da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d20f      	bcs.n	80073da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f001 f88d 	bl	80084de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073cc:	2300      	movs	r3, #0
 80073ce:	2200      	movs	r2, #0
 80073d0:	2100      	movs	r1, #0
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f001 fdaa 	bl	8008f2c <USBD_LL_PrepareReceive>
 80073d8:	e01c      	b.n	8007414 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d10f      	bne.n	8007406 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d009      	beq.n	8007406 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007406:	2180      	movs	r1, #128	; 0x80
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f001 fce5 	bl	8008dd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f001 f8b7 	bl	8008582 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d03a      	beq.n	8007494 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f7ff fe42 	bl	80070a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800742c:	e032      	b.n	8007494 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800742e:	7afb      	ldrb	r3, [r7, #11]
 8007430:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007434:	b2db      	uxtb	r3, r3
 8007436:	4619      	mov	r1, r3
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f97f 	bl	800773c <USBD_CoreFindEP>
 800743e:	4603      	mov	r3, r0
 8007440:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	2bff      	cmp	r3, #255	; 0xff
 8007446:	d025      	beq.n	8007494 <USBD_LL_DataInStage+0x15a>
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d122      	bne.n	8007494 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b03      	cmp	r3, #3
 8007458:	d11c      	bne.n	8007494 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800745a:	7dfa      	ldrb	r2, [r7, #23]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	32ae      	adds	r2, #174	; 0xae
 8007460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d014      	beq.n	8007494 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800746a:	7dfa      	ldrb	r2, [r7, #23]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007472:	7dfa      	ldrb	r2, [r7, #23]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	32ae      	adds	r2, #174	; 0xae
 8007478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	7afa      	ldrb	r2, [r7, #11]
 8007480:	4611      	mov	r1, r2
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	4798      	blx	r3
 8007486:	4603      	mov	r3, r0
 8007488:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800748a:	7dbb      	ldrb	r3, [r7, #22]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007490:	7dbb      	ldrb	r3, [r7, #22]
 8007492:	e000      	b.n	8007496 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d014      	beq.n	8007504 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00e      	beq.n	8007504 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6852      	ldr	r2, [r2, #4]
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	4611      	mov	r1, r2
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007500:	2303      	movs	r3, #3
 8007502:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007504:	2340      	movs	r3, #64	; 0x40
 8007506:	2200      	movs	r2, #0
 8007508:	2100      	movs	r1, #0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fc1f 	bl	8008d4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2240      	movs	r2, #64	; 0x40
 800751c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007520:	2340      	movs	r3, #64	; 0x40
 8007522:	2200      	movs	r2, #0
 8007524:	2180      	movs	r1, #128	; 0x80
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fc11 	bl	8008d4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2240      	movs	r2, #64	; 0x40
 8007536:	621a      	str	r2, [r3, #32]

  return ret;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	78fa      	ldrb	r2, [r7, #3]
 8007552:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007570:	b2da      	uxtb	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2204      	movs	r2, #4
 800757c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d106      	bne.n	80075b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d110      	bne.n	80075f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	32ae      	adds	r2, #174	; 0xae
 8007614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800761c:	2303      	movs	r3, #3
 800761e:	e01c      	b.n	800765a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b03      	cmp	r3, #3
 800762a:	d115      	bne.n	8007658 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	32ae      	adds	r2, #174	; 0xae
 8007636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00b      	beq.n	8007658 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	32ae      	adds	r2, #174	; 0xae
 800764a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	78fa      	ldrb	r2, [r7, #3]
 8007652:	4611      	mov	r1, r2
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	32ae      	adds	r2, #174	; 0xae
 8007678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007680:	2303      	movs	r3, #3
 8007682:	e01c      	b.n	80076be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b03      	cmp	r3, #3
 800768e:	d115      	bne.n	80076bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	32ae      	adds	r2, #174	; 0xae
 800769a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00b      	beq.n	80076bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	32ae      	adds	r2, #174	; 0xae
 80076ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	78fa      	ldrb	r2, [r7, #3]
 80076b6:	4611      	mov	r1, r2
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00e      	beq.n	8007718 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	6852      	ldr	r2, [r2, #4]
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	4611      	mov	r1, r2
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	4798      	blx	r3
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007714:	2303      	movs	r3, #3
 8007716:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007718:	7bfb      	ldrb	r3, [r7, #15]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	460b      	mov	r3, r1
 800772c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800772e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007748:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800774a:	4618      	mov	r0, r3
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b086      	sub	sp, #24
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	460b      	mov	r3, r1
 8007760:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	885b      	ldrh	r3, [r3, #2]
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	b29b      	uxth	r3, r3
 800777a:	429a      	cmp	r2, r3
 800777c:	d920      	bls.n	80077c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007786:	e013      	b.n	80077b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007788:	f107 030a 	add.w	r3, r7, #10
 800778c:	4619      	mov	r1, r3
 800778e:	6978      	ldr	r0, [r7, #20]
 8007790:	f000 f81b 	bl	80077ca <USBD_GetNextDesc>
 8007794:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	785b      	ldrb	r3, [r3, #1]
 800779a:	2b05      	cmp	r3, #5
 800779c:	d108      	bne.n	80077b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	789b      	ldrb	r3, [r3, #2]
 80077a6:	78fa      	ldrb	r2, [r7, #3]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d008      	beq.n	80077be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077ac:	2300      	movs	r3, #0
 80077ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	885b      	ldrh	r3, [r3, #2]
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	897b      	ldrh	r3, [r7, #10]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d8e5      	bhi.n	8007788 <USBD_GetEpDesc+0x32>
 80077bc:	e000      	b.n	80077c0 <USBD_GetEpDesc+0x6a>
          break;
 80077be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077c0:	693b      	ldr	r3, [r7, #16]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	881a      	ldrh	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	4413      	add	r3, r2
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077f6:	68fb      	ldr	r3, [r7, #12]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	3301      	adds	r3, #1
 800781a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007822:	8a3b      	ldrh	r3, [r7, #16]
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	b21a      	sxth	r2, r3
 8007828:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800782c:	4313      	orrs	r3, r2
 800782e:	b21b      	sxth	r3, r3
 8007830:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007832:	89fb      	ldrh	r3, [r7, #14]
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007856:	2b40      	cmp	r3, #64	; 0x40
 8007858:	d005      	beq.n	8007866 <USBD_StdDevReq+0x26>
 800785a:	2b40      	cmp	r3, #64	; 0x40
 800785c:	d857      	bhi.n	800790e <USBD_StdDevReq+0xce>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00f      	beq.n	8007882 <USBD_StdDevReq+0x42>
 8007862:	2b20      	cmp	r3, #32
 8007864:	d153      	bne.n	800790e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	32ae      	adds	r2, #174	; 0xae
 8007870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4798      	blx	r3
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
      break;
 8007880:	e04a      	b.n	8007918 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	2b09      	cmp	r3, #9
 8007888:	d83b      	bhi.n	8007902 <USBD_StdDevReq+0xc2>
 800788a:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <USBD_StdDevReq+0x50>)
 800788c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007890:	080078e5 	.word	0x080078e5
 8007894:	080078f9 	.word	0x080078f9
 8007898:	08007903 	.word	0x08007903
 800789c:	080078ef 	.word	0x080078ef
 80078a0:	08007903 	.word	0x08007903
 80078a4:	080078c3 	.word	0x080078c3
 80078a8:	080078b9 	.word	0x080078b9
 80078ac:	08007903 	.word	0x08007903
 80078b0:	080078db 	.word	0x080078db
 80078b4:	080078cd 	.word	0x080078cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa3c 	bl	8007d38 <USBD_GetDescriptor>
          break;
 80078c0:	e024      	b.n	800790c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fba1 	bl	800800c <USBD_SetAddress>
          break;
 80078ca:	e01f      	b.n	800790c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fbe0 	bl	8008094 <USBD_SetConfig>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]
          break;
 80078d8:	e018      	b.n	800790c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fc83 	bl	80081e8 <USBD_GetConfig>
          break;
 80078e2:	e013      	b.n	800790c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fcb4 	bl	8008254 <USBD_GetStatus>
          break;
 80078ec:	e00e      	b.n	800790c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fce3 	bl	80082bc <USBD_SetFeature>
          break;
 80078f6:	e009      	b.n	800790c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fd07 	bl	800830e <USBD_ClrFeature>
          break;
 8007900:	e004      	b.n	800790c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fd5e 	bl	80083c6 <USBD_CtlError>
          break;
 800790a:	bf00      	nop
      }
      break;
 800790c:	e004      	b.n	8007918 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fd58 	bl	80083c6 <USBD_CtlError>
      break;
 8007916:	bf00      	nop
  }

  return ret;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop

08007924 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800793a:	2b40      	cmp	r3, #64	; 0x40
 800793c:	d005      	beq.n	800794a <USBD_StdItfReq+0x26>
 800793e:	2b40      	cmp	r3, #64	; 0x40
 8007940:	d852      	bhi.n	80079e8 <USBD_StdItfReq+0xc4>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <USBD_StdItfReq+0x26>
 8007946:	2b20      	cmp	r3, #32
 8007948:	d14e      	bne.n	80079e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007950:	b2db      	uxtb	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	2b02      	cmp	r3, #2
 8007956:	d840      	bhi.n	80079da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	889b      	ldrh	r3, [r3, #4]
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b01      	cmp	r3, #1
 8007960:	d836      	bhi.n	80079d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	889b      	ldrh	r3, [r3, #4]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7ff fed9 	bl	8007722 <USBD_CoreFindIF>
 8007970:	4603      	mov	r3, r0
 8007972:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2bff      	cmp	r3, #255	; 0xff
 8007978:	d01d      	beq.n	80079b6 <USBD_StdItfReq+0x92>
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d11a      	bne.n	80079b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007980:	7bba      	ldrb	r2, [r7, #14]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	32ae      	adds	r2, #174	; 0xae
 8007986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00f      	beq.n	80079b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007990:	7bba      	ldrb	r2, [r7, #14]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007998:	7bba      	ldrb	r2, [r7, #14]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	32ae      	adds	r2, #174	; 0xae
 800799e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079ae:	e004      	b.n	80079ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079b0:	2303      	movs	r3, #3
 80079b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079b4:	e001      	b.n	80079ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079b6:	2303      	movs	r3, #3
 80079b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	88db      	ldrh	r3, [r3, #6]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d110      	bne.n	80079e4 <USBD_StdItfReq+0xc0>
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10d      	bne.n	80079e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fdc7 	bl	800855c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079ce:	e009      	b.n	80079e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fcf7 	bl	80083c6 <USBD_CtlError>
          break;
 80079d8:	e004      	b.n	80079e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fcf2 	bl	80083c6 <USBD_CtlError>
          break;
 80079e2:	e000      	b.n	80079e6 <USBD_StdItfReq+0xc2>
          break;
 80079e4:	bf00      	nop
      }
      break;
 80079e6:	e004      	b.n	80079f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fceb 	bl	80083c6 <USBD_CtlError>
      break;
 80079f0:	bf00      	nop
  }

  return ret;
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	889b      	ldrh	r3, [r3, #4]
 8007a0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a18:	2b40      	cmp	r3, #64	; 0x40
 8007a1a:	d007      	beq.n	8007a2c <USBD_StdEPReq+0x30>
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	f200 817f 	bhi.w	8007d20 <USBD_StdEPReq+0x324>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d02a      	beq.n	8007a7c <USBD_StdEPReq+0x80>
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	f040 817a 	bne.w	8007d20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff fe83 	bl	800773c <USBD_CoreFindEP>
 8007a36:	4603      	mov	r3, r0
 8007a38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a3a:	7b7b      	ldrb	r3, [r7, #13]
 8007a3c:	2bff      	cmp	r3, #255	; 0xff
 8007a3e:	f000 8174 	beq.w	8007d2a <USBD_StdEPReq+0x32e>
 8007a42:	7b7b      	ldrb	r3, [r7, #13]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f040 8170 	bne.w	8007d2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a4a:	7b7a      	ldrb	r2, [r7, #13]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a52:	7b7a      	ldrb	r2, [r7, #13]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	32ae      	adds	r2, #174	; 0xae
 8007a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 8163 	beq.w	8007d2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a64:	7b7a      	ldrb	r2, [r7, #13]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	32ae      	adds	r2, #174	; 0xae
 8007a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a7a:	e156      	b.n	8007d2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	d008      	beq.n	8007a96 <USBD_StdEPReq+0x9a>
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	f300 8145 	bgt.w	8007d14 <USBD_StdEPReq+0x318>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 809b 	beq.w	8007bc6 <USBD_StdEPReq+0x1ca>
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d03c      	beq.n	8007b0e <USBD_StdEPReq+0x112>
 8007a94:	e13e      	b.n	8007d14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d002      	beq.n	8007aa8 <USBD_StdEPReq+0xac>
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d016      	beq.n	8007ad4 <USBD_StdEPReq+0xd8>
 8007aa6:	e02c      	b.n	8007b02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00d      	beq.n	8007aca <USBD_StdEPReq+0xce>
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	2b80      	cmp	r3, #128	; 0x80
 8007ab2:	d00a      	beq.n	8007aca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 f98d 	bl	8008dd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007abe:	2180      	movs	r1, #128	; 0x80
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f989 	bl	8008dd8 <USBD_LL_StallEP>
 8007ac6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ac8:	e020      	b.n	8007b0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fc7a 	bl	80083c6 <USBD_CtlError>
              break;
 8007ad2:	e01b      	b.n	8007b0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	885b      	ldrh	r3, [r3, #2]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10e      	bne.n	8007afa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00b      	beq.n	8007afa <USBD_StdEPReq+0xfe>
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	2b80      	cmp	r3, #128	; 0x80
 8007ae6:	d008      	beq.n	8007afa <USBD_StdEPReq+0xfe>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	88db      	ldrh	r3, [r3, #6]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d104      	bne.n	8007afa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 f96f 	bl	8008dd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fd2e 	bl	800855c <USBD_CtlSendStatus>

              break;
 8007b00:	e004      	b.n	8007b0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fc5e 	bl	80083c6 <USBD_CtlError>
              break;
 8007b0a:	bf00      	nop
          }
          break;
 8007b0c:	e107      	b.n	8007d1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d002      	beq.n	8007b20 <USBD_StdEPReq+0x124>
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d016      	beq.n	8007b4c <USBD_StdEPReq+0x150>
 8007b1e:	e04b      	b.n	8007bb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00d      	beq.n	8007b42 <USBD_StdEPReq+0x146>
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	2b80      	cmp	r3, #128	; 0x80
 8007b2a:	d00a      	beq.n	8007b42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 f951 	bl	8008dd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b36:	2180      	movs	r1, #128	; 0x80
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 f94d 	bl	8008dd8 <USBD_LL_StallEP>
 8007b3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b40:	e040      	b.n	8007bc4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc3e 	bl	80083c6 <USBD_CtlError>
              break;
 8007b4a:	e03b      	b.n	8007bc4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	885b      	ldrh	r3, [r3, #2]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d136      	bne.n	8007bc2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 f957 	bl	8008e16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fcf7 	bl	800855c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff fde2 	bl	800773c <USBD_CoreFindEP>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b7c:	7b7b      	ldrb	r3, [r7, #13]
 8007b7e:	2bff      	cmp	r3, #255	; 0xff
 8007b80:	d01f      	beq.n	8007bc2 <USBD_StdEPReq+0x1c6>
 8007b82:	7b7b      	ldrb	r3, [r7, #13]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d11c      	bne.n	8007bc2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b88:	7b7a      	ldrb	r2, [r7, #13]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b90:	7b7a      	ldrb	r2, [r7, #13]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	32ae      	adds	r2, #174	; 0xae
 8007b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d010      	beq.n	8007bc2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ba0:	7b7a      	ldrb	r2, [r7, #13]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	32ae      	adds	r2, #174	; 0xae
 8007ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bb6:	e004      	b.n	8007bc2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fc03 	bl	80083c6 <USBD_CtlError>
              break;
 8007bc0:	e000      	b.n	8007bc4 <USBD_StdEPReq+0x1c8>
              break;
 8007bc2:	bf00      	nop
          }
          break;
 8007bc4:	e0ab      	b.n	8007d1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d002      	beq.n	8007bd8 <USBD_StdEPReq+0x1dc>
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d032      	beq.n	8007c3c <USBD_StdEPReq+0x240>
 8007bd6:	e097      	b.n	8007d08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d007      	beq.n	8007bee <USBD_StdEPReq+0x1f2>
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	2b80      	cmp	r3, #128	; 0x80
 8007be2:	d004      	beq.n	8007bee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fbed 	bl	80083c6 <USBD_CtlError>
                break;
 8007bec:	e091      	b.n	8007d12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da0b      	bge.n	8007c0e <USBD_StdEPReq+0x212>
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	3310      	adds	r3, #16
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	4413      	add	r3, r2
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	e00b      	b.n	8007c26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	4413      	add	r3, r2
 8007c24:	3304      	adds	r3, #4
 8007c26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2202      	movs	r2, #2
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fc37 	bl	80084a8 <USBD_CtlSendData>
              break;
 8007c3a:	e06a      	b.n	8007d12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	da11      	bge.n	8007c68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	f003 020f 	and.w	r2, r3, #15
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	440b      	add	r3, r1
 8007c56:	3324      	adds	r3, #36	; 0x24
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d117      	bne.n	8007c8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fbb0 	bl	80083c6 <USBD_CtlError>
                  break;
 8007c66:	e054      	b.n	8007d12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	f003 020f 	and.w	r2, r3, #15
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	4613      	mov	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	440b      	add	r3, r1
 8007c7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d104      	bne.n	8007c8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fb9d 	bl	80083c6 <USBD_CtlError>
                  break;
 8007c8c:	e041      	b.n	8007d12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	da0b      	bge.n	8007cae <USBD_StdEPReq+0x2b2>
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	3310      	adds	r3, #16
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	4413      	add	r3, r2
 8007caa:	3304      	adds	r3, #4
 8007cac:	e00b      	b.n	8007cc6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <USBD_StdEPReq+0x2d8>
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	2b80      	cmp	r3, #128	; 0x80
 8007cd2:	d103      	bne.n	8007cdc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	e00e      	b.n	8007cfa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 f8b7 	bl	8008e54 <USBD_LL_IsStallEP>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	e002      	b.n	8007cfa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fbd1 	bl	80084a8 <USBD_CtlSendData>
              break;
 8007d06:	e004      	b.n	8007d12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fb5b 	bl	80083c6 <USBD_CtlError>
              break;
 8007d10:	bf00      	nop
          }
          break;
 8007d12:	e004      	b.n	8007d1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fb55 	bl	80083c6 <USBD_CtlError>
          break;
 8007d1c:	bf00      	nop
      }
      break;
 8007d1e:	e005      	b.n	8007d2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fb4f 	bl	80083c6 <USBD_CtlError>
      break;
 8007d28:	e000      	b.n	8007d2c <USBD_StdEPReq+0x330>
      break;
 8007d2a:	bf00      	nop
  }

  return ret;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	885b      	ldrh	r3, [r3, #2]
 8007d52:	0a1b      	lsrs	r3, r3, #8
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	2b06      	cmp	r3, #6
 8007d5a:	f200 8128 	bhi.w	8007fae <USBD_GetDescriptor+0x276>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <USBD_GetDescriptor+0x2c>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	08007d99 	.word	0x08007d99
 8007d6c:	08007dd9 	.word	0x08007dd9
 8007d70:	08007faf 	.word	0x08007faf
 8007d74:	08007faf 	.word	0x08007faf
 8007d78:	08007f4f 	.word	0x08007f4f
 8007d7c:	08007f7b 	.word	0x08007f7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7c12      	ldrb	r2, [r2, #16]
 8007d8c:	f107 0108 	add.w	r1, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
      break;
 8007d96:	e112      	b.n	8007fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	7c1b      	ldrb	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10d      	bne.n	8007dbc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	f107 0208 	add.w	r2, r7, #8
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3301      	adds	r3, #1
 8007db6:	2202      	movs	r2, #2
 8007db8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007dba:	e100      	b.n	8007fbe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	f107 0208 	add.w	r2, r7, #8
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
 8007dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	701a      	strb	r2, [r3, #0]
      break;
 8007dd6:	e0f2      	b.n	8007fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	885b      	ldrh	r3, [r3, #2]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b05      	cmp	r3, #5
 8007de0:	f200 80ac 	bhi.w	8007f3c <USBD_GetDescriptor+0x204>
 8007de4:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <USBD_GetDescriptor+0xb4>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007e05 	.word	0x08007e05
 8007df0:	08007e39 	.word	0x08007e39
 8007df4:	08007e6d 	.word	0x08007e6d
 8007df8:	08007ea1 	.word	0x08007ea1
 8007dfc:	08007ed5 	.word	0x08007ed5
 8007e00:	08007f09 	.word	0x08007f09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	7c12      	ldrb	r2, [r2, #16]
 8007e1c:	f107 0108 	add.w	r1, r7, #8
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
 8007e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e26:	e091      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 facb 	bl	80083c6 <USBD_CtlError>
            err++;
 8007e30:	7afb      	ldrb	r3, [r7, #11]
 8007e32:	3301      	adds	r3, #1
 8007e34:	72fb      	strb	r3, [r7, #11]
          break;
 8007e36:	e089      	b.n	8007f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	7c12      	ldrb	r2, [r2, #16]
 8007e50:	f107 0108 	add.w	r1, r7, #8
 8007e54:	4610      	mov	r0, r2
 8007e56:	4798      	blx	r3
 8007e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e5a:	e077      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fab1 	bl	80083c6 <USBD_CtlError>
            err++;
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	3301      	adds	r3, #1
 8007e68:	72fb      	strb	r3, [r7, #11]
          break;
 8007e6a:	e06f      	b.n	8007f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00b      	beq.n	8007e90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	7c12      	ldrb	r2, [r2, #16]
 8007e84:	f107 0108 	add.w	r1, r7, #8
 8007e88:	4610      	mov	r0, r2
 8007e8a:	4798      	blx	r3
 8007e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e8e:	e05d      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fa97 	bl	80083c6 <USBD_CtlError>
            err++;
 8007e98:	7afb      	ldrb	r3, [r7, #11]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e9e:	e055      	b.n	8007f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00b      	beq.n	8007ec4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	7c12      	ldrb	r2, [r2, #16]
 8007eb8:	f107 0108 	add.w	r1, r7, #8
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4798      	blx	r3
 8007ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ec2:	e043      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fa7d 	bl	80083c6 <USBD_CtlError>
            err++;
 8007ecc:	7afb      	ldrb	r3, [r7, #11]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ed2:	e03b      	b.n	8007f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00b      	beq.n	8007ef8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	7c12      	ldrb	r2, [r2, #16]
 8007eec:	f107 0108 	add.w	r1, r7, #8
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4798      	blx	r3
 8007ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ef6:	e029      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa63 	bl	80083c6 <USBD_CtlError>
            err++;
 8007f00:	7afb      	ldrb	r3, [r7, #11]
 8007f02:	3301      	adds	r3, #1
 8007f04:	72fb      	strb	r3, [r7, #11]
          break;
 8007f06:	e021      	b.n	8007f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00b      	beq.n	8007f2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	7c12      	ldrb	r2, [r2, #16]
 8007f20:	f107 0108 	add.w	r1, r7, #8
 8007f24:	4610      	mov	r0, r2
 8007f26:	4798      	blx	r3
 8007f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f2a:	e00f      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa49 	bl	80083c6 <USBD_CtlError>
            err++;
 8007f34:	7afb      	ldrb	r3, [r7, #11]
 8007f36:	3301      	adds	r3, #1
 8007f38:	72fb      	strb	r3, [r7, #11]
          break;
 8007f3a:	e007      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fa41 	bl	80083c6 <USBD_CtlError>
          err++;
 8007f44:	7afb      	ldrb	r3, [r7, #11]
 8007f46:	3301      	adds	r3, #1
 8007f48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f4a:	bf00      	nop
      }
      break;
 8007f4c:	e037      	b.n	8007fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	7c1b      	ldrb	r3, [r3, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d109      	bne.n	8007f6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5e:	f107 0208 	add.w	r2, r7, #8
 8007f62:	4610      	mov	r0, r2
 8007f64:	4798      	blx	r3
 8007f66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f68:	e029      	b.n	8007fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fa2a 	bl	80083c6 <USBD_CtlError>
        err++;
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	3301      	adds	r3, #1
 8007f76:	72fb      	strb	r3, [r7, #11]
      break;
 8007f78:	e021      	b.n	8007fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7c1b      	ldrb	r3, [r3, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10d      	bne.n	8007f9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8a:	f107 0208 	add.w	r2, r7, #8
 8007f8e:	4610      	mov	r0, r2
 8007f90:	4798      	blx	r3
 8007f92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3301      	adds	r3, #1
 8007f98:	2207      	movs	r2, #7
 8007f9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f9c:	e00f      	b.n	8007fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fa10 	bl	80083c6 <USBD_CtlError>
        err++;
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	72fb      	strb	r3, [r7, #11]
      break;
 8007fac:	e007      	b.n	8007fbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fa08 	bl	80083c6 <USBD_CtlError>
      err++;
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	72fb      	strb	r3, [r7, #11]
      break;
 8007fbc:	bf00      	nop
  }

  if (err != 0U)
 8007fbe:	7afb      	ldrb	r3, [r7, #11]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d11e      	bne.n	8008002 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	88db      	ldrh	r3, [r3, #6]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d016      	beq.n	8007ffa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007fcc:	893b      	ldrh	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00e      	beq.n	8007ff0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	88da      	ldrh	r2, [r3, #6]
 8007fd6:	893b      	ldrh	r3, [r7, #8]
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	bf28      	it	cs
 8007fdc:	4613      	movcs	r3, r2
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fe2:	893b      	ldrh	r3, [r7, #8]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	68f9      	ldr	r1, [r7, #12]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fa5d 	bl	80084a8 <USBD_CtlSendData>
 8007fee:	e009      	b.n	8008004 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f9e7 	bl	80083c6 <USBD_CtlError>
 8007ff8:	e004      	b.n	8008004 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 faae 	bl	800855c <USBD_CtlSendStatus>
 8008000:	e000      	b.n	8008004 <USBD_GetDescriptor+0x2cc>
    return;
 8008002:	bf00      	nop
  }
}
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop

0800800c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	889b      	ldrh	r3, [r3, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d131      	bne.n	8008082 <USBD_SetAddress+0x76>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	88db      	ldrh	r3, [r3, #6]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d12d      	bne.n	8008082 <USBD_SetAddress+0x76>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	885b      	ldrh	r3, [r3, #2]
 800802a:	2b7f      	cmp	r3, #127	; 0x7f
 800802c:	d829      	bhi.n	8008082 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	885b      	ldrh	r3, [r3, #2]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008038:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b03      	cmp	r3, #3
 8008044:	d104      	bne.n	8008050 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f9bc 	bl	80083c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804e:	e01d      	b.n	800808c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7bfa      	ldrb	r2, [r7, #15]
 8008054:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 ff25 	bl	8008eac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa7a 	bl	800855c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d004      	beq.n	8008078 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2202      	movs	r2, #2
 8008072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008076:	e009      	b.n	800808c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008080:	e004      	b.n	800808c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f99e 	bl	80083c6 <USBD_CtlError>
  }
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	885b      	ldrh	r3, [r3, #2]
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	4b4e      	ldr	r3, [pc, #312]	; (80081e4 <USBD_SetConfig+0x150>)
 80080aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080ac:	4b4d      	ldr	r3, [pc, #308]	; (80081e4 <USBD_SetConfig+0x150>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d905      	bls.n	80080c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f985 	bl	80083c6 <USBD_CtlError>
    return USBD_FAIL;
 80080bc:	2303      	movs	r3, #3
 80080be:	e08c      	b.n	80081da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d002      	beq.n	80080d2 <USBD_SetConfig+0x3e>
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d029      	beq.n	8008124 <USBD_SetConfig+0x90>
 80080d0:	e075      	b.n	80081be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80080d2:	4b44      	ldr	r3, [pc, #272]	; (80081e4 <USBD_SetConfig+0x150>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d020      	beq.n	800811c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80080da:	4b42      	ldr	r3, [pc, #264]	; (80081e4 <USBD_SetConfig+0x150>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080e4:	4b3f      	ldr	r3, [pc, #252]	; (80081e4 <USBD_SetConfig+0x150>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fe ffe7 	bl	80070be <USBD_SetClassConfig>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d008      	beq.n	800810c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f962 	bl	80083c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2202      	movs	r2, #2
 8008106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800810a:	e065      	b.n	80081d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fa25 	bl	800855c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2203      	movs	r2, #3
 8008116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800811a:	e05d      	b.n	80081d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fa1d 	bl	800855c <USBD_CtlSendStatus>
      break;
 8008122:	e059      	b.n	80081d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008124:	4b2f      	ldr	r3, [pc, #188]	; (80081e4 <USBD_SetConfig+0x150>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d112      	bne.n	8008152 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008134:	4b2b      	ldr	r3, [pc, #172]	; (80081e4 <USBD_SetConfig+0x150>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	461a      	mov	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800813e:	4b29      	ldr	r3, [pc, #164]	; (80081e4 <USBD_SetConfig+0x150>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7fe ffd6 	bl	80070f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa06 	bl	800855c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008150:	e042      	b.n	80081d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008152:	4b24      	ldr	r3, [pc, #144]	; (80081e4 <USBD_SetConfig+0x150>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	429a      	cmp	r2, r3
 800815e:	d02a      	beq.n	80081b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7fe ffc4 	bl	80070f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800816e:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <USBD_SetConfig+0x150>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008178:	4b1a      	ldr	r3, [pc, #104]	; (80081e4 <USBD_SetConfig+0x150>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7fe ff9d 	bl	80070be <USBD_SetClassConfig>
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00f      	beq.n	80081ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f918 	bl	80083c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7fe ffa9 	bl	80070f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081ac:	e014      	b.n	80081d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f9d4 	bl	800855c <USBD_CtlSendStatus>
      break;
 80081b4:	e010      	b.n	80081d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f9d0 	bl	800855c <USBD_CtlSendStatus>
      break;
 80081bc:	e00c      	b.n	80081d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f900 	bl	80083c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081c6:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <USBD_SetConfig+0x150>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7fe ff92 	bl	80070f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80081d2:	2303      	movs	r3, #3
 80081d4:	73fb      	strb	r3, [r7, #15]
      break;
 80081d6:	bf00      	nop
  }

  return ret;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20000494 	.word	0x20000494

080081e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	88db      	ldrh	r3, [r3, #6]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d004      	beq.n	8008204 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f8e2 	bl	80083c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008202:	e023      	b.n	800824c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b02      	cmp	r3, #2
 800820e:	dc02      	bgt.n	8008216 <USBD_GetConfig+0x2e>
 8008210:	2b00      	cmp	r3, #0
 8008212:	dc03      	bgt.n	800821c <USBD_GetConfig+0x34>
 8008214:	e015      	b.n	8008242 <USBD_GetConfig+0x5a>
 8008216:	2b03      	cmp	r3, #3
 8008218:	d00b      	beq.n	8008232 <USBD_GetConfig+0x4a>
 800821a:	e012      	b.n	8008242 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3308      	adds	r3, #8
 8008226:	2201      	movs	r2, #1
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f93c 	bl	80084a8 <USBD_CtlSendData>
        break;
 8008230:	e00c      	b.n	800824c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3304      	adds	r3, #4
 8008236:	2201      	movs	r2, #1
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f934 	bl	80084a8 <USBD_CtlSendData>
        break;
 8008240:	e004      	b.n	800824c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f8be 	bl	80083c6 <USBD_CtlError>
        break;
 800824a:	bf00      	nop
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008264:	b2db      	uxtb	r3, r3
 8008266:	3b01      	subs	r3, #1
 8008268:	2b02      	cmp	r3, #2
 800826a:	d81e      	bhi.n	80082aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	88db      	ldrh	r3, [r3, #6]
 8008270:	2b02      	cmp	r3, #2
 8008272:	d004      	beq.n	800827e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f8a5 	bl	80083c6 <USBD_CtlError>
        break;
 800827c:	e01a      	b.n	80082b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f043 0202 	orr.w	r2, r3, #2
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	330c      	adds	r3, #12
 800829e:	2202      	movs	r2, #2
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f900 	bl	80084a8 <USBD_CtlSendData>
      break;
 80082a8:	e004      	b.n	80082b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f88a 	bl	80083c6 <USBD_CtlError>
      break;
 80082b2:	bf00      	nop
  }
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	885b      	ldrh	r3, [r3, #2]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d107      	bne.n	80082de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f940 	bl	800855c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082dc:	e013      	b.n	8008306 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	885b      	ldrh	r3, [r3, #2]
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d10b      	bne.n	80082fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	889b      	ldrh	r3, [r3, #4]
 80082ea:	0a1b      	lsrs	r3, r3, #8
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f930 	bl	800855c <USBD_CtlSendStatus>
}
 80082fc:	e003      	b.n	8008306 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f860 	bl	80083c6 <USBD_CtlError>
}
 8008306:	bf00      	nop
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800831e:	b2db      	uxtb	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	2b02      	cmp	r3, #2
 8008324:	d80b      	bhi.n	800833e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	885b      	ldrh	r3, [r3, #2]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d10c      	bne.n	8008348 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f910 	bl	800855c <USBD_CtlSendStatus>
      }
      break;
 800833c:	e004      	b.n	8008348 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f840 	bl	80083c6 <USBD_CtlError>
      break;
 8008346:	e000      	b.n	800834a <USBD_ClrFeature+0x3c>
      break;
 8008348:	bf00      	nop
  }
}
 800834a:	bf00      	nop
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	781a      	ldrb	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	781a      	ldrb	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3301      	adds	r3, #1
 800837a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f7ff fa41 	bl	8007804 <SWAPBYTE>
 8008382:	4603      	mov	r3, r0
 8008384:	461a      	mov	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3301      	adds	r3, #1
 8008394:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f7ff fa34 	bl	8007804 <SWAPBYTE>
 800839c:	4603      	mov	r3, r0
 800839e:	461a      	mov	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3301      	adds	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3301      	adds	r3, #1
 80083ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7ff fa27 	bl	8007804 <SWAPBYTE>
 80083b6:	4603      	mov	r3, r0
 80083b8:	461a      	mov	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	80da      	strh	r2, [r3, #6]
}
 80083be:	bf00      	nop
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083d0:	2180      	movs	r1, #128	; 0x80
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fd00 	bl	8008dd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083d8:	2100      	movs	r1, #0
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fcfc 	bl	8008dd8 <USBD_LL_StallEP>
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d036      	beq.n	800846c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008402:	6938      	ldr	r0, [r7, #16]
 8008404:	f000 f836 	bl	8008474 <USBD_GetLen>
 8008408:	4603      	mov	r3, r0
 800840a:	3301      	adds	r3, #1
 800840c:	b29b      	uxth	r3, r3
 800840e:	005b      	lsls	r3, r3, #1
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	4413      	add	r3, r2
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	7812      	ldrb	r2, [r2, #0]
 8008420:	701a      	strb	r2, [r3, #0]
  idx++;
 8008422:	7dfb      	ldrb	r3, [r7, #23]
 8008424:	3301      	adds	r3, #1
 8008426:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	4413      	add	r3, r2
 800842e:	2203      	movs	r2, #3
 8008430:	701a      	strb	r2, [r3, #0]
  idx++;
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	3301      	adds	r3, #1
 8008436:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008438:	e013      	b.n	8008462 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	4413      	add	r3, r2
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	7812      	ldrb	r2, [r2, #0]
 8008444:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	3301      	adds	r3, #1
 800844a:	613b      	str	r3, [r7, #16]
    idx++;
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	3301      	adds	r3, #1
 8008450:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008452:	7dfb      	ldrb	r3, [r7, #23]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	4413      	add	r3, r2
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]
    idx++;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	3301      	adds	r3, #1
 8008460:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e7      	bne.n	800843a <USBD_GetString+0x52>
 800846a:	e000      	b.n	800846e <USBD_GetString+0x86>
    return;
 800846c:	bf00      	nop
  }
}
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008484:	e005      	b.n	8008492 <USBD_GetLen+0x1e>
  {
    len++;
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	3301      	adds	r3, #1
 800848a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	3301      	adds	r3, #1
 8008490:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f5      	bne.n	8008486 <USBD_GetLen+0x12>
  }

  return len;
 800849a:	7bfb      	ldrb	r3, [r7, #15]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	2100      	movs	r1, #0
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fd0b 	bl	8008eea <USBD_LL_Transmit>

  return USBD_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	2100      	movs	r1, #0
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 fcfa 	bl	8008eea <USBD_LL_Transmit>

  return USBD_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2203      	movs	r2, #3
 8008510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	2100      	movs	r1, #0
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fcfe 	bl	8008f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	2100      	movs	r1, #0
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 fced 	bl	8008f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2204      	movs	r2, #4
 8008568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800856c:	2300      	movs	r3, #0
 800856e:	2200      	movs	r2, #0
 8008570:	2100      	movs	r1, #0
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fcb9 	bl	8008eea <USBD_LL_Transmit>

  return USBD_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2205      	movs	r2, #5
 800858e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008592:	2300      	movs	r3, #0
 8008594:	2200      	movs	r2, #0
 8008596:	2100      	movs	r1, #0
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fcc7 	bl	8008f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085ac:	2200      	movs	r2, #0
 80085ae:	4912      	ldr	r1, [pc, #72]	; (80085f8 <MX_USB_DEVICE_Init+0x50>)
 80085b0:	4812      	ldr	r0, [pc, #72]	; (80085fc <MX_USB_DEVICE_Init+0x54>)
 80085b2:	f7fe fd07 	bl	8006fc4 <USBD_Init>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085bc:	f7f8 fa00 	bl	80009c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80085c0:	490f      	ldr	r1, [pc, #60]	; (8008600 <MX_USB_DEVICE_Init+0x58>)
 80085c2:	480e      	ldr	r0, [pc, #56]	; (80085fc <MX_USB_DEVICE_Init+0x54>)
 80085c4:	f7fe fd2e 	bl	8007024 <USBD_RegisterClass>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085ce:	f7f8 f9f7 	bl	80009c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085d2:	490c      	ldr	r1, [pc, #48]	; (8008604 <MX_USB_DEVICE_Init+0x5c>)
 80085d4:	4809      	ldr	r0, [pc, #36]	; (80085fc <MX_USB_DEVICE_Init+0x54>)
 80085d6:	f7fe fc1f 	bl	8006e18 <USBD_CDC_RegisterInterface>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085e0:	f7f8 f9ee 	bl	80009c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085e4:	4805      	ldr	r0, [pc, #20]	; (80085fc <MX_USB_DEVICE_Init+0x54>)
 80085e6:	f7fe fd53 	bl	8007090 <USBD_Start>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085f0:	f7f8 f9e6 	bl	80009c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085f4:	bf00      	nop
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	200000ac 	.word	0x200000ac
 80085fc:	20000498 	.word	0x20000498
 8008600:	20000018 	.word	0x20000018
 8008604:	20000098 	.word	0x20000098

08008608 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800860c:	2200      	movs	r2, #0
 800860e:	4905      	ldr	r1, [pc, #20]	; (8008624 <CDC_Init_FS+0x1c>)
 8008610:	4805      	ldr	r0, [pc, #20]	; (8008628 <CDC_Init_FS+0x20>)
 8008612:	f7fe fc1b 	bl	8006e4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008616:	4905      	ldr	r1, [pc, #20]	; (800862c <CDC_Init_FS+0x24>)
 8008618:	4803      	ldr	r0, [pc, #12]	; (8008628 <CDC_Init_FS+0x20>)
 800861a:	f7fe fc39 	bl	8006e90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800861e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008620:	4618      	mov	r0, r3
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20000f74 	.word	0x20000f74
 8008628:	20000498 	.word	0x20000498
 800862c:	20000774 	.word	0x20000774

08008630 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008634:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008636:	4618      	mov	r0, r3
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
 800864c:	4613      	mov	r3, r2
 800864e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	2b23      	cmp	r3, #35	; 0x23
 8008654:	d84a      	bhi.n	80086ec <CDC_Control_FS+0xac>
 8008656:	a201      	add	r2, pc, #4	; (adr r2, 800865c <CDC_Control_FS+0x1c>)
 8008658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865c:	080086ed 	.word	0x080086ed
 8008660:	080086ed 	.word	0x080086ed
 8008664:	080086ed 	.word	0x080086ed
 8008668:	080086ed 	.word	0x080086ed
 800866c:	080086ed 	.word	0x080086ed
 8008670:	080086ed 	.word	0x080086ed
 8008674:	080086ed 	.word	0x080086ed
 8008678:	080086ed 	.word	0x080086ed
 800867c:	080086ed 	.word	0x080086ed
 8008680:	080086ed 	.word	0x080086ed
 8008684:	080086ed 	.word	0x080086ed
 8008688:	080086ed 	.word	0x080086ed
 800868c:	080086ed 	.word	0x080086ed
 8008690:	080086ed 	.word	0x080086ed
 8008694:	080086ed 	.word	0x080086ed
 8008698:	080086ed 	.word	0x080086ed
 800869c:	080086ed 	.word	0x080086ed
 80086a0:	080086ed 	.word	0x080086ed
 80086a4:	080086ed 	.word	0x080086ed
 80086a8:	080086ed 	.word	0x080086ed
 80086ac:	080086ed 	.word	0x080086ed
 80086b0:	080086ed 	.word	0x080086ed
 80086b4:	080086ed 	.word	0x080086ed
 80086b8:	080086ed 	.word	0x080086ed
 80086bc:	080086ed 	.word	0x080086ed
 80086c0:	080086ed 	.word	0x080086ed
 80086c4:	080086ed 	.word	0x080086ed
 80086c8:	080086ed 	.word	0x080086ed
 80086cc:	080086ed 	.word	0x080086ed
 80086d0:	080086ed 	.word	0x080086ed
 80086d4:	080086ed 	.word	0x080086ed
 80086d8:	080086ed 	.word	0x080086ed
 80086dc:	080086ed 	.word	0x080086ed
 80086e0:	080086ed 	.word	0x080086ed
 80086e4:	080086ed 	.word	0x080086ed
 80086e8:	080086ed 	.word	0x080086ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086ec:	bf00      	nop
  }

  return (USBD_OK);
 80086ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	480b      	ldr	r0, [pc, #44]	; (8008738 <CDC_Receive_FS+0x3c>)
 800870a:	f7fe fbc1 	bl	8006e90 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800870e:	480a      	ldr	r0, [pc, #40]	; (8008738 <CDC_Receive_FS+0x3c>)
 8008710:	f7fe fc22 	bl	8006f58 <USBD_CDC_ReceivePacket>
	//Set the received packet length
	cdcHandeler.cdcRxPacketSize = *Len;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	b29a      	uxth	r2, r3
 800871a:	4b08      	ldr	r3, [pc, #32]	; (800873c <CDC_Receive_FS+0x40>)
 800871c:	811a      	strh	r2, [r3, #8]

	cdcHandeler.cbCdcRxPacket((char*)cdcHandeler.pCdcRxBuffer, cdcHandeler.cdcRxPacketSize);
 800871e:	4b07      	ldr	r3, [pc, #28]	; (800873c <CDC_Receive_FS+0x40>)
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	4a06      	ldr	r2, [pc, #24]	; (800873c <CDC_Receive_FS+0x40>)
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	4905      	ldr	r1, [pc, #20]	; (800873c <CDC_Receive_FS+0x40>)
 8008728:	8909      	ldrh	r1, [r1, #8]
 800872a:	4610      	mov	r0, r2
 800872c:	4798      	blx	r3

	return (USBD_OK);
 800872e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008730:	4618      	mov	r0, r3
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	20000498 	.word	0x20000498
 800873c:	20001774 	.word	0x20001774

08008740 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008750:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <CDC_Transmit_FS+0x48>)
 8008752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008756:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008762:	2301      	movs	r3, #1
 8008764:	e00b      	b.n	800877e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008766:	887b      	ldrh	r3, [r7, #2]
 8008768:	461a      	mov	r2, r3
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	4806      	ldr	r0, [pc, #24]	; (8008788 <CDC_Transmit_FS+0x48>)
 800876e:	f7fe fb6d 	bl	8006e4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008772:	4805      	ldr	r0, [pc, #20]	; (8008788 <CDC_Transmit_FS+0x48>)
 8008774:	f7fe fbaa 	bl	8006ecc <USBD_CDC_TransmitPacket>
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20000498 	.word	0x20000498

0800878c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800879e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	371c      	adds	r7, #28
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
	...

080087b0 <CDC_Handler_Init_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Handler_Init_FS	(void* cdcRxCallback)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
	memset(&cdcHandeler, 0, sizeof(hCdcBuffer_t));
 80087b8:	2210      	movs	r2, #16
 80087ba:	2100      	movs	r1, #0
 80087bc:	4807      	ldr	r0, [pc, #28]	; (80087dc <CDC_Handler_Init_FS+0x2c>)
 80087be:	f000 fd8d 	bl	80092dc <memset>

	cdcHandeler.cbCdcRxPacket = cdcRxCallback;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a05      	ldr	r2, [pc, #20]	; (80087dc <CDC_Handler_Init_FS+0x2c>)
 80087c6:	60d3      	str	r3, [r2, #12]

	cdcHandeler.pCdcRxBuffer = UserRxBufferFS;
 80087c8:	4b04      	ldr	r3, [pc, #16]	; (80087dc <CDC_Handler_Init_FS+0x2c>)
 80087ca:	4a05      	ldr	r2, [pc, #20]	; (80087e0 <CDC_Handler_Init_FS+0x30>)
 80087cc:	601a      	str	r2, [r3, #0]

	cdcHandeler.pCdcTxBuffer = UserTxBufferFS;
 80087ce:	4b03      	ldr	r3, [pc, #12]	; (80087dc <CDC_Handler_Init_FS+0x2c>)
 80087d0:	4a04      	ldr	r2, [pc, #16]	; (80087e4 <CDC_Handler_Init_FS+0x34>)
 80087d2:	605a      	str	r2, [r3, #4]
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20001774 	.word	0x20001774
 80087e0:	20000774 	.word	0x20000774
 80087e4:	20000f74 	.word	0x20000f74

080087e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	6039      	str	r1, [r7, #0]
 80087f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2212      	movs	r2, #18
 80087f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087fa:	4b03      	ldr	r3, [pc, #12]	; (8008808 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	200000c8 	.word	0x200000c8

0800880c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	6039      	str	r1, [r7, #0]
 8008816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2204      	movs	r2, #4
 800881c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800881e:	4b03      	ldr	r3, [pc, #12]	; (800882c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	200000dc 	.word	0x200000dc

08008830 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	6039      	str	r1, [r7, #0]
 800883a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d105      	bne.n	800884e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	4907      	ldr	r1, [pc, #28]	; (8008864 <USBD_FS_ProductStrDescriptor+0x34>)
 8008846:	4808      	ldr	r0, [pc, #32]	; (8008868 <USBD_FS_ProductStrDescriptor+0x38>)
 8008848:	f7ff fdce 	bl	80083e8 <USBD_GetString>
 800884c:	e004      	b.n	8008858 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	4904      	ldr	r1, [pc, #16]	; (8008864 <USBD_FS_ProductStrDescriptor+0x34>)
 8008852:	4805      	ldr	r0, [pc, #20]	; (8008868 <USBD_FS_ProductStrDescriptor+0x38>)
 8008854:	f7ff fdc8 	bl	80083e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20001784 	.word	0x20001784
 8008868:	08009bd0 	.word	0x08009bd0

0800886c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	6039      	str	r1, [r7, #0]
 8008876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	4904      	ldr	r1, [pc, #16]	; (800888c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800887c:	4804      	ldr	r0, [pc, #16]	; (8008890 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800887e:	f7ff fdb3 	bl	80083e8 <USBD_GetString>
  return USBD_StrDesc;
 8008882:	4b02      	ldr	r3, [pc, #8]	; (800888c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	20001784 	.word	0x20001784
 8008890:	08009bdc 	.word	0x08009bdc

08008894 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	6039      	str	r1, [r7, #0]
 800889e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	221a      	movs	r2, #26
 80088a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088a6:	f000 f843 	bl	8008930 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088aa:	4b02      	ldr	r3, [pc, #8]	; (80088b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	200000e0 	.word	0x200000e0

080088b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	6039      	str	r1, [r7, #0]
 80088c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d105      	bne.n	80088d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	4907      	ldr	r1, [pc, #28]	; (80088ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80088ce:	4808      	ldr	r0, [pc, #32]	; (80088f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088d0:	f7ff fd8a 	bl	80083e8 <USBD_GetString>
 80088d4:	e004      	b.n	80088e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	4904      	ldr	r1, [pc, #16]	; (80088ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80088da:	4805      	ldr	r0, [pc, #20]	; (80088f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088dc:	f7ff fd84 	bl	80083e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088e0:	4b02      	ldr	r3, [pc, #8]	; (80088ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20001784 	.word	0x20001784
 80088f0:	08009bf0 	.word	0x08009bf0

080088f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	6039      	str	r1, [r7, #0]
 80088fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d105      	bne.n	8008912 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	4907      	ldr	r1, [pc, #28]	; (8008928 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800890a:	4808      	ldr	r0, [pc, #32]	; (800892c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800890c:	f7ff fd6c 	bl	80083e8 <USBD_GetString>
 8008910:	e004      	b.n	800891c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	4904      	ldr	r1, [pc, #16]	; (8008928 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008916:	4805      	ldr	r0, [pc, #20]	; (800892c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008918:	f7ff fd66 	bl	80083e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800891c:	4b02      	ldr	r3, [pc, #8]	; (8008928 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800891e:	4618      	mov	r0, r3
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20001784 	.word	0x20001784
 800892c:	08009bfc 	.word	0x08009bfc

08008930 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008936:	4b0f      	ldr	r3, [pc, #60]	; (8008974 <Get_SerialNum+0x44>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800893c:	4b0e      	ldr	r3, [pc, #56]	; (8008978 <Get_SerialNum+0x48>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008942:	4b0e      	ldr	r3, [pc, #56]	; (800897c <Get_SerialNum+0x4c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4413      	add	r3, r2
 800894e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d009      	beq.n	800896a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008956:	2208      	movs	r2, #8
 8008958:	4909      	ldr	r1, [pc, #36]	; (8008980 <Get_SerialNum+0x50>)
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 f814 	bl	8008988 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008960:	2204      	movs	r2, #4
 8008962:	4908      	ldr	r1, [pc, #32]	; (8008984 <Get_SerialNum+0x54>)
 8008964:	68b8      	ldr	r0, [r7, #8]
 8008966:	f000 f80f 	bl	8008988 <IntToUnicode>
  }
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	1fff7a10 	.word	0x1fff7a10
 8008978:	1fff7a14 	.word	0x1fff7a14
 800897c:	1fff7a18 	.word	0x1fff7a18
 8008980:	200000e2 	.word	0x200000e2
 8008984:	200000f2 	.word	0x200000f2

08008988 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008988:	b480      	push	{r7}
 800898a:	b087      	sub	sp, #28
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4613      	mov	r3, r2
 8008994:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800899a:	2300      	movs	r3, #0
 800899c:	75fb      	strb	r3, [r7, #23]
 800899e:	e027      	b.n	80089f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	0f1b      	lsrs	r3, r3, #28
 80089a4:	2b09      	cmp	r3, #9
 80089a6:	d80b      	bhi.n	80089c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	0f1b      	lsrs	r3, r3, #28
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	005b      	lsls	r3, r3, #1
 80089b2:	4619      	mov	r1, r3
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	440b      	add	r3, r1
 80089b8:	3230      	adds	r2, #48	; 0x30
 80089ba:	b2d2      	uxtb	r2, r2
 80089bc:	701a      	strb	r2, [r3, #0]
 80089be:	e00a      	b.n	80089d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	0f1b      	lsrs	r3, r3, #28
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	4619      	mov	r1, r3
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	440b      	add	r3, r1
 80089d0:	3237      	adds	r2, #55	; 0x37
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	3301      	adds	r3, #1
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	4413      	add	r3, r2
 80089e6:	2200      	movs	r2, #0
 80089e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	3301      	adds	r3, #1
 80089ee:	75fb      	strb	r3, [r7, #23]
 80089f0:	7dfa      	ldrb	r2, [r7, #23]
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d3d3      	bcc.n	80089a0 <IntToUnicode+0x18>
  }
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08a      	sub	sp, #40	; 0x28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a10:	f107 0314 	add.w	r3, r7, #20
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	605a      	str	r2, [r3, #4]
 8008a1a:	609a      	str	r2, [r3, #8]
 8008a1c:	60da      	str	r2, [r3, #12]
 8008a1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a28:	d13a      	bne.n	8008aa0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	613b      	str	r3, [r7, #16]
 8008a2e:	4b1e      	ldr	r3, [pc, #120]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a32:	4a1d      	ldr	r2, [pc, #116]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a34:	f043 0301 	orr.w	r3, r3, #1
 8008a38:	6313      	str	r3, [r2, #48]	; 0x30
 8008a3a:	4b1b      	ldr	r3, [pc, #108]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	613b      	str	r3, [r7, #16]
 8008a44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a50:	2300      	movs	r3, #0
 8008a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a54:	2303      	movs	r3, #3
 8008a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a58:	230a      	movs	r3, #10
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a5c:	f107 0314 	add.w	r3, r7, #20
 8008a60:	4619      	mov	r1, r3
 8008a62:	4812      	ldr	r0, [pc, #72]	; (8008aac <HAL_PCD_MspInit+0xa4>)
 8008a64:	f7f8 fefe 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a68:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6c:	4a0e      	ldr	r2, [pc, #56]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a72:	6353      	str	r3, [r2, #52]	; 0x34
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7c:	4a0a      	ldr	r2, [pc, #40]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a82:	6453      	str	r3, [r2, #68]	; 0x44
 8008a84:	4b08      	ldr	r3, [pc, #32]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a90:	2200      	movs	r2, #0
 8008a92:	2100      	movs	r1, #0
 8008a94:	2043      	movs	r0, #67	; 0x43
 8008a96:	f7f8 faac 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a9a:	2043      	movs	r0, #67	; 0x43
 8008a9c:	f7f8 fac5 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008aa0:	bf00      	nop
 8008aa2:	3728      	adds	r7, #40	; 0x28
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	40023800 	.word	0x40023800
 8008aac:	40020000 	.word	0x40020000

08008ab0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f7fe fb2f 	bl	800712a <USBD_LL_SetupStage>
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	6879      	ldr	r1, [r7, #4]
 8008aea:	4613      	mov	r3, r2
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	440b      	add	r3, r1
 8008af4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	4619      	mov	r1, r3
 8008afe:	f7fe fb69 	bl	80071d4 <USBD_LL_DataOutStage>
}
 8008b02:	bf00      	nop
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	334c      	adds	r3, #76	; 0x4c
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	78fb      	ldrb	r3, [r7, #3]
 8008b30:	4619      	mov	r1, r3
 8008b32:	f7fe fc02 	bl	800733a <USBD_LL_DataInStage>
}
 8008b36:	bf00      	nop
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe fd36 	bl	80075be <USBD_LL_SOF>
}
 8008b52:	bf00      	nop
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b62:	2301      	movs	r3, #1
 8008b64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d001      	beq.n	8008b72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b6e:	f7f7 ff27 	bl	80009c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b78:	7bfa      	ldrb	r2, [r7, #15]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe fce0 	bl	8007542 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fe fc88 	bl	800749e <USBD_LL_Reset>
}
 8008b8e:	bf00      	nop
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe fcdb 	bl	8007562 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6812      	ldr	r2, [r2, #0]
 8008bba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bbe:	f043 0301 	orr.w	r3, r3, #1
 8008bc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bcc:	4b04      	ldr	r3, [pc, #16]	; (8008be0 <HAL_PCD_SuspendCallback+0x48>)
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	4a03      	ldr	r2, [pc, #12]	; (8008be0 <HAL_PCD_SuspendCallback+0x48>)
 8008bd2:	f043 0306 	orr.w	r3, r3, #6
 8008bd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	e000ed00 	.word	0xe000ed00

08008be4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fccb 	bl	800758e <USBD_LL_Resume>
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c12:	78fa      	ldrb	r2, [r7, #3]
 8008c14:	4611      	mov	r1, r2
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fe fd23 	bl	8007662 <USBD_LL_IsoOUTIncomplete>
}
 8008c1c:	bf00      	nop
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe fcdf 	bl	80075fe <USBD_LL_IsoINIncomplete>
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe fd35 	bl	80076c6 <USBD_LL_DevConnected>
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fd32 	bl	80076dc <USBD_LL_DevDisconnected>
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d13c      	bne.n	8008d0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c90:	4a20      	ldr	r2, [pc, #128]	; (8008d14 <USBD_LL_Init+0x94>)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a1e      	ldr	r2, [pc, #120]	; (8008d14 <USBD_LL_Init+0x94>)
 8008c9c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ca0:	4b1c      	ldr	r3, [pc, #112]	; (8008d14 <USBD_LL_Init+0x94>)
 8008ca2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ca6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ca8:	4b1a      	ldr	r3, [pc, #104]	; (8008d14 <USBD_LL_Init+0x94>)
 8008caa:	2204      	movs	r2, #4
 8008cac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008cae:	4b19      	ldr	r3, [pc, #100]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008cb4:	4b17      	ldr	r3, [pc, #92]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cba:	4b16      	ldr	r3, [pc, #88]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cc0:	4b14      	ldr	r3, [pc, #80]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cc6:	4b13      	ldr	r3, [pc, #76]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ccc:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008cd2:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008cd8:	4b0e      	ldr	r3, [pc, #56]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cde:	480d      	ldr	r0, [pc, #52]	; (8008d14 <USBD_LL_Init+0x94>)
 8008ce0:	f7f8 ff5d 	bl	8001b9e <HAL_PCD_Init>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008cea:	f7f7 fe69 	bl	80009c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008cee:	2180      	movs	r1, #128	; 0x80
 8008cf0:	4808      	ldr	r0, [pc, #32]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cf2:	f7fa f9b4 	bl	800305e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008cf6:	2240      	movs	r2, #64	; 0x40
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	4806      	ldr	r0, [pc, #24]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cfc:	f7fa f968 	bl	8002fd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d00:	2280      	movs	r2, #128	; 0x80
 8008d02:	2101      	movs	r1, #1
 8008d04:	4803      	ldr	r0, [pc, #12]	; (8008d14 <USBD_LL_Init+0x94>)
 8008d06:	f7fa f963 	bl	8002fd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20001984 	.word	0x20001984

08008d18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7f9 f852 	bl	8001dd8 <HAL_PCD_Start>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f942 	bl	8008fc4 <USBD_Get_USB_Status>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	4608      	mov	r0, r1
 8008d58:	4611      	mov	r1, r2
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	70fb      	strb	r3, [r7, #3]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70bb      	strb	r3, [r7, #2]
 8008d64:	4613      	mov	r3, r2
 8008d66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d76:	78bb      	ldrb	r3, [r7, #2]
 8008d78:	883a      	ldrh	r2, [r7, #0]
 8008d7a:	78f9      	ldrb	r1, [r7, #3]
 8008d7c:	f7f9 fd23 	bl	80027c6 <HAL_PCD_EP_Open>
 8008d80:	4603      	mov	r3, r0
 8008d82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 f91c 	bl	8008fc4 <USBD_Get_USB_Status>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	460b      	mov	r3, r1
 8008da4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008db4:	78fa      	ldrb	r2, [r7, #3]
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7f9 fd6c 	bl	8002896 <HAL_PCD_EP_Close>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 f8fd 	bl	8008fc4 <USBD_Get_USB_Status>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008df2:	78fa      	ldrb	r2, [r7, #3]
 8008df4:	4611      	mov	r1, r2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7f9 fe44 	bl	8002a84 <HAL_PCD_EP_SetStall>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 f8de 	bl	8008fc4 <USBD_Get_USB_Status>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e30:	78fa      	ldrb	r2, [r7, #3]
 8008e32:	4611      	mov	r1, r2
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7f9 fe89 	bl	8002b4c <HAL_PCD_EP_ClrStall>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f8bf 	bl	8008fc4 <USBD_Get_USB_Status>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	da0b      	bge.n	8008e88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e76:	68f9      	ldr	r1, [r7, #12]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	440b      	add	r3, r1
 8008e82:	333e      	adds	r3, #62	; 0x3e
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	e00b      	b.n	8008ea0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	4613      	mov	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7f9 fc56 	bl	800277c <HAL_PCD_SetAddress>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 f874 	bl	8008fc4 <USBD_Get_USB_Status>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b086      	sub	sp, #24
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f08:	7af9      	ldrb	r1, [r7, #11]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	f7f9 fd6f 	bl	80029f0 <HAL_PCD_EP_Transmit>
 8008f12:	4603      	mov	r3, r0
 8008f14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f853 	bl	8008fc4 <USBD_Get_USB_Status>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f22:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	607a      	str	r2, [r7, #4]
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f4a:	7af9      	ldrb	r1, [r7, #11]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	f7f9 fceb 	bl	800292a <HAL_PCD_EP_Receive>
 8008f54:	4603      	mov	r3, r0
 8008f56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 f832 	bl	8008fc4 <USBD_Get_USB_Status>
 8008f60:	4603      	mov	r3, r0
 8008f62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f64:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f80:	78fa      	ldrb	r2, [r7, #3]
 8008f82:	4611      	mov	r1, r2
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7f9 fd1b 	bl	80029c0 <HAL_PCD_EP_GetRxCount>
 8008f8a:	4603      	mov	r3, r0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f9c:	4b03      	ldr	r3, [pc, #12]	; (8008fac <USBD_static_malloc+0x18>)
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	20001e90 	.word	0x20001e90

08008fb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]

}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d817      	bhi.n	8009008 <USBD_Get_USB_Status+0x44>
 8008fd8:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <USBD_Get_USB_Status+0x1c>)
 8008fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fde:	bf00      	nop
 8008fe0:	08008ff1 	.word	0x08008ff1
 8008fe4:	08008ff7 	.word	0x08008ff7
 8008fe8:	08008ffd 	.word	0x08008ffd
 8008fec:	08009003 	.word	0x08009003
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff4:	e00b      	b.n	800900e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8008ffa:	e008      	b.n	800900e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8009000:	e005      	b.n	800900e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009002:	2303      	movs	r3, #3
 8009004:	73fb      	strb	r3, [r7, #15]
    break;
 8009006:	e002      	b.n	800900e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009008:	2303      	movs	r3, #3
 800900a:	73fb      	strb	r3, [r7, #15]
    break;
 800900c:	bf00      	nop
  }
  return usb_status;
 800900e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <rybg211_bleModuleInit>:

/* PRIVATE FUNCTIONS DECLARATION ---------------------------------------------*/

/* FUNCTION PROTOTYPES -------------------------------------------------------*/
void rybg211_bleModuleInit(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
	memset(&hBleModule, 0, sizeof(hBleModule_t));
 8009020:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009024:	2100      	movs	r1, #0
 8009026:	4805      	ldr	r0, [pc, #20]	; (800903c <rybg211_bleModuleInit+0x20>)
 8009028:	f000 f958 	bl	80092dc <memset>

	HAL_GPIO_WritePin(BLE_MODULE_RESET_GPIO_PORT, BLE_MODULE_RESET_PIN, ENABLE);
 800902c:	2201      	movs	r2, #1
 800902e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009032:	4803      	ldr	r0, [pc, #12]	; (8009040 <rybg211_bleModuleInit+0x24>)
 8009034:	f7f8 fd9a 	bl	8001b6c <HAL_GPIO_WritePin>
}
 8009038:	bf00      	nop
 800903a:	bd80      	pop	{r7, pc}
 800903c:	200020b0 	.word	0x200020b0
 8009040:	40020400 	.word	0x40020400

08009044 <rybg211_setDeviceName>:

void rybg211_setDeviceName(char* moduleBuffer, char* nameString)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af04      	add	r7, sp, #16
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
	uint8_t nameStringSize = strlen(nameString);
 800904e:	6838      	ldr	r0, [r7, #0]
 8009050:	f7f7 f8c6 	bl	80001e0 <strlen>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]

	memcpy(moduleBuffer ,BLE_NAME_SET, sizeof(BLE_NAME_SET));
 8009058:	2209      	movs	r2, #9
 800905a:	4910      	ldr	r1, [pc, #64]	; (800909c <rybg211_setDeviceName+0x58>)
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f92f 	bl	80092c0 <memcpy>

	sprintf((char*)moduleBuffer, "%s%d%s%s%s",BLE_NAME_SET,
 8009062:	7bfa      	ldrb	r2, [r7, #15]
 8009064:	4b0e      	ldr	r3, [pc, #56]	; (80090a0 <rybg211_setDeviceName+0x5c>)
 8009066:	9302      	str	r3, [sp, #8]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <rybg211_setDeviceName+0x60>)
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	4613      	mov	r3, r2
 8009072:	4a0a      	ldr	r2, [pc, #40]	; (800909c <rybg211_setDeviceName+0x58>)
 8009074:	490c      	ldr	r1, [pc, #48]	; (80090a8 <rybg211_setDeviceName+0x64>)
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f938 	bl	80092ec <siprintf>
										BLE_NEW_FIELD,
										nameString,
										BLE_CMD_TERM);


	hBleModule.txPacketSize = strlen((char*)moduleBuffer);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7f7 f8af 	bl	80001e0 <strlen>
 8009082:	4603      	mov	r3, r0
 8009084:	b29a      	uxth	r2, r3
 8009086:	4b09      	ldr	r3, [pc, #36]	; (80090ac <rybg211_setDeviceName+0x68>)
 8009088:	805a      	strh	r2, [r3, #2]

	hBleModule.controlFlags.flag.packetToTransmit = ENABLE;
 800908a:	4a08      	ldr	r2, [pc, #32]	; (80090ac <rybg211_setDeviceName+0x68>)
 800908c:	7813      	ldrb	r3, [r2, #0]
 800908e:	f043 0302 	orr.w	r3, r3, #2
 8009092:	7013      	strb	r3, [r2, #0]
}
 8009094:	bf00      	nop
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	08009c0c 	.word	0x08009c0c
 80090a0:	08009c24 	.word	0x08009c24
 80090a4:	08009c28 	.word	0x08009c28
 80090a8:	08009c18 	.word	0x08009c18
 80090ac:	200020b0 	.word	0x200020b0

080090b0 <rybg211_rxPacketParser>:

uint8_t rybg211_rxPacketParser(char* moduleBuffer, uint8_t packetSize)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
	uint8_t packetToRead = false;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]

	if(0 == memcmp(moduleBuffer, BLE_DATA_RX, BLE_PARSER_CHAR_COUNT))
 80090c0:	2204      	movs	r2, #4
 80090c2:	4919      	ldr	r1, [pc, #100]	; (8009128 <rybg211_rxPacketParser+0x78>)
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f8eb 	bl	80092a0 <memcmp>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d102      	bne.n	80090d6 <rybg211_rxPacketParser+0x26>
	{
		//Activation to read the data part of the received packet.
		packetToRead = true;
 80090d0:	2301      	movs	r3, #1
 80090d2:	73fb      	strb	r3, [r7, #15]
 80090d4:	e023      	b.n	800911e <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_CONNECTION,BLE_PARSER_CHAR_COUNT))
 80090d6:	2204      	movs	r2, #4
 80090d8:	4914      	ldr	r1, [pc, #80]	; (800912c <rybg211_rxPacketParser+0x7c>)
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f8e0 	bl	80092a0 <memcmp>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10a      	bne.n	80090fc <rybg211_rxPacketParser+0x4c>
	{
		hBleModule.ConnectedDevice = moduleBuffer[6];
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	799a      	ldrb	r2, [r3, #6]
 80090ea:	4b11      	ldr	r3, [pc, #68]	; (8009130 <rybg211_rxPacketParser+0x80>)
 80090ec:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 80090ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090f2:	2100      	movs	r1, #0
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f8f1 	bl	80092dc <memset>
 80090fa:	e010      	b.n	800911e <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_DISCONNECTION, BLE_PARSER_CHAR_COUNT))
 80090fc:	2204      	movs	r2, #4
 80090fe:	490d      	ldr	r1, [pc, #52]	; (8009134 <rybg211_rxPacketParser+0x84>)
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f8cd 	bl	80092a0 <memcmp>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d108      	bne.n	800911e <rybg211_rxPacketParser+0x6e>
	{
		hBleModule.ConnectedDevice = 0;
 800910c:	4b08      	ldr	r3, [pc, #32]	; (8009130 <rybg211_rxPacketParser+0x80>)
 800910e:	2200      	movs	r2, #0
 8009110:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 8009112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009116:	2100      	movs	r1, #0
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f8df 	bl	80092dc <memset>
	}

	return packetToRead;
 800911e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	08009c2c 	.word	0x08009c2c
 800912c:	08009c34 	.word	0x08009c34
 8009130:	200020b0 	.word	0x200020b0
 8009134:	08009c3c 	.word	0x08009c3c

08009138 <asciiToValue>:
 * 						  stored in targetValue. the value stored in String won't be changed.
 *
 * @return	This function will return the number of found digits in the passed String.
 */
uint8_t asciiToValue(uint32_t* targetValue, uint8_t* String)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
	uint8_t 	digitCount  = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	75fb      	strb	r3, [r7, #23]
	uint32_t 	tempValue 	= 0;
 8009146:	2300      	movs	r3, #0
 8009148:	613b      	str	r3, [r7, #16]
	uint16_t 	tens 		= 0;
 800914a:	2300      	movs	r3, #0
 800914c:	81fb      	strh	r3, [r7, #14]
	//Count the number of digits in the string
	while(isdigit(String[digitCount]))
 800914e:	e002      	b.n	8009156 <asciiToValue+0x1e>
	{
		++digitCount;
 8009150:	7dfb      	ldrb	r3, [r7, #23]
 8009152:	3301      	adds	r3, #1
 8009154:	75fb      	strb	r3, [r7, #23]
	while(isdigit(String[digitCount]))
 8009156:	7dfb      	ldrb	r3, [r7, #23]
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	4413      	add	r3, r2
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	3301      	adds	r3, #1
 8009160:	4a26      	ldr	r2, [pc, #152]	; (80091fc <asciiToValue+0xc4>)
 8009162:	4413      	add	r3, r2
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 0304 	and.w	r3, r3, #4
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1f0      	bne.n	8009150 <asciiToValue+0x18>
	}
	//This check is done to prevent this function from execution if non alphanumeric string is passed to this function.
	if(0 != digitCount)
 800916e:	7dfb      	ldrb	r3, [r7, #23]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d03c      	beq.n	80091ee <asciiToValue+0xb6>
	{
		//Operation fix
		digitCount -= 1;
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	3b01      	subs	r3, #1
 8009178:	75fb      	strb	r3, [r7, #23]
		//determines the multiplications of tens
		tens = digitCount == ONE_DIGIT   ? 1   : tens;
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <asciiToValue+0x4c>
 8009180:	89fb      	ldrh	r3, [r7, #14]
 8009182:	e000      	b.n	8009186 <asciiToValue+0x4e>
 8009184:	2301      	movs	r3, #1
 8009186:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == TWO_DIGIT   ? 10  : tens;
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d001      	beq.n	8009192 <asciiToValue+0x5a>
 800918e:	89fb      	ldrh	r3, [r7, #14]
 8009190:	e000      	b.n	8009194 <asciiToValue+0x5c>
 8009192:	230a      	movs	r3, #10
 8009194:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == THREE_DIGIT ? 100 : tens;
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d001      	beq.n	80091a0 <asciiToValue+0x68>
 800919c:	89fb      	ldrh	r3, [r7, #14]
 800919e:	e000      	b.n	80091a2 <asciiToValue+0x6a>
 80091a0:	2364      	movs	r3, #100	; 0x64
 80091a2:	81fb      	strh	r3, [r7, #14]
		//Start calculating the integer value out of the passed digits
		for(int8_t i = 0; i <= digitCount; ++i)
 80091a4:	2300      	movs	r3, #0
 80091a6:	737b      	strb	r3, [r7, #13]
 80091a8:	e016      	b.n	80091d8 <asciiToValue+0xa0>
		{
			tempValue = tempValue + ((String[i] - ASCII_STARTING_VALUE) * tens);
 80091aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	4413      	add	r3, r2
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	3b30      	subs	r3, #48	; 0x30
 80091b6:	89fa      	ldrh	r2, [r7, #14]
 80091b8:	fb02 f303 	mul.w	r3, r2, r3
 80091bc:	461a      	mov	r2, r3
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	4413      	add	r3, r2
 80091c2:	613b      	str	r3, [r7, #16]
			tens = tens / 10;
 80091c4:	89fb      	ldrh	r3, [r7, #14]
 80091c6:	4a0e      	ldr	r2, [pc, #56]	; (8009200 <asciiToValue+0xc8>)
 80091c8:	fba2 2303 	umull	r2, r3, r2, r3
 80091cc:	08db      	lsrs	r3, r3, #3
 80091ce:	81fb      	strh	r3, [r7, #14]
		for(int8_t i = 0; i <= digitCount; ++i)
 80091d0:	7b7b      	ldrb	r3, [r7, #13]
 80091d2:	3301      	adds	r3, #1
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	737b      	strb	r3, [r7, #13]
 80091d8:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	429a      	cmp	r2, r3
 80091e0:	dde3      	ble.n	80091aa <asciiToValue+0x72>
		}
		//Pass the obtained integer value to targetValue that will be returned
		*targetValue = tempValue;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	601a      	str	r2, [r3, #0]
		//digitCount will carry the number of found digits in the String
		++digitCount;
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
 80091ea:	3301      	adds	r3, #1
 80091ec:	75fb      	strb	r3, [r7, #23]
	}
	return digitCount;
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	371c      	adds	r7, #28
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	08009c64 	.word	0x08009c64
 8009200:	cccccccd 	.word	0xcccccccd

08009204 <rybg211_rxDataRead>:
 * @param moduleBuffer
 * @param targertBuffer
 * @return
 */
uint32_t rybg211_rxDataRead(char* moduleBuffer, char* targertBuffer)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
	//+1 is used to ignore the ',' from the received packet and jump directly to the data field.
	uint8_t dataPositionOffset = BLE_RX_SIZE_BYTE_POSITION + 1;
 800920e:	2308      	movs	r3, #8
 8009210:	73fb      	strb	r3, [r7, #15]

	uint32_t length = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	60bb      	str	r3, [r7, #8]
	//Convert the size from ASCII to integer format and obtain the number of digits to adjust the correct data positio.
	dataPositionOffset += asciiToValue(&length, (uint8_t*)moduleBuffer + BLE_RX_SIZE_BYTE_POSITION);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	1dda      	adds	r2, r3, #7
 800921a:	f107 0308 	add.w	r3, r7, #8
 800921e:	4611      	mov	r1, r2
 8009220:	4618      	mov	r0, r3
 8009222:	f7ff ff89 	bl	8009138 <asciiToValue>
 8009226:	4603      	mov	r3, r0
 8009228:	461a      	mov	r2, r3
 800922a:	7bfb      	ldrb	r3, [r7, #15]
 800922c:	4413      	add	r3, r2
 800922e:	73fb      	strb	r3, [r7, #15]

	memcpy(targertBuffer, moduleBuffer + dataPositionOffset, length);
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	4413      	add	r3, r2
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	4619      	mov	r1, r3
 800923a:	6838      	ldr	r0, [r7, #0]
 800923c:	f000 f840 	bl	80092c0 <memcpy>

	return length;
 8009240:	68bb      	ldr	r3, [r7, #8]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <__errno>:
 800924c:	4b01      	ldr	r3, [pc, #4]	; (8009254 <__errno+0x8>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	200000fc 	.word	0x200000fc

08009258 <__libc_init_array>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	4d0d      	ldr	r5, [pc, #52]	; (8009290 <__libc_init_array+0x38>)
 800925c:	4c0d      	ldr	r4, [pc, #52]	; (8009294 <__libc_init_array+0x3c>)
 800925e:	1b64      	subs	r4, r4, r5
 8009260:	10a4      	asrs	r4, r4, #2
 8009262:	2600      	movs	r6, #0
 8009264:	42a6      	cmp	r6, r4
 8009266:	d109      	bne.n	800927c <__libc_init_array+0x24>
 8009268:	4d0b      	ldr	r5, [pc, #44]	; (8009298 <__libc_init_array+0x40>)
 800926a:	4c0c      	ldr	r4, [pc, #48]	; (800929c <__libc_init_array+0x44>)
 800926c:	f000 fc9e 	bl	8009bac <_init>
 8009270:	1b64      	subs	r4, r4, r5
 8009272:	10a4      	asrs	r4, r4, #2
 8009274:	2600      	movs	r6, #0
 8009276:	42a6      	cmp	r6, r4
 8009278:	d105      	bne.n	8009286 <__libc_init_array+0x2e>
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009280:	4798      	blx	r3
 8009282:	3601      	adds	r6, #1
 8009284:	e7ee      	b.n	8009264 <__libc_init_array+0xc>
 8009286:	f855 3b04 	ldr.w	r3, [r5], #4
 800928a:	4798      	blx	r3
 800928c:	3601      	adds	r6, #1
 800928e:	e7f2      	b.n	8009276 <__libc_init_array+0x1e>
 8009290:	08009da0 	.word	0x08009da0
 8009294:	08009da0 	.word	0x08009da0
 8009298:	08009da0 	.word	0x08009da0
 800929c:	08009da4 	.word	0x08009da4

080092a0 <memcmp>:
 80092a0:	b510      	push	{r4, lr}
 80092a2:	3901      	subs	r1, #1
 80092a4:	4402      	add	r2, r0
 80092a6:	4290      	cmp	r0, r2
 80092a8:	d101      	bne.n	80092ae <memcmp+0xe>
 80092aa:	2000      	movs	r0, #0
 80092ac:	e005      	b.n	80092ba <memcmp+0x1a>
 80092ae:	7803      	ldrb	r3, [r0, #0]
 80092b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80092b4:	42a3      	cmp	r3, r4
 80092b6:	d001      	beq.n	80092bc <memcmp+0x1c>
 80092b8:	1b18      	subs	r0, r3, r4
 80092ba:	bd10      	pop	{r4, pc}
 80092bc:	3001      	adds	r0, #1
 80092be:	e7f2      	b.n	80092a6 <memcmp+0x6>

080092c0 <memcpy>:
 80092c0:	440a      	add	r2, r1
 80092c2:	4291      	cmp	r1, r2
 80092c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092c8:	d100      	bne.n	80092cc <memcpy+0xc>
 80092ca:	4770      	bx	lr
 80092cc:	b510      	push	{r4, lr}
 80092ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092d6:	4291      	cmp	r1, r2
 80092d8:	d1f9      	bne.n	80092ce <memcpy+0xe>
 80092da:	bd10      	pop	{r4, pc}

080092dc <memset>:
 80092dc:	4402      	add	r2, r0
 80092de:	4603      	mov	r3, r0
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d100      	bne.n	80092e6 <memset+0xa>
 80092e4:	4770      	bx	lr
 80092e6:	f803 1b01 	strb.w	r1, [r3], #1
 80092ea:	e7f9      	b.n	80092e0 <memset+0x4>

080092ec <siprintf>:
 80092ec:	b40e      	push	{r1, r2, r3}
 80092ee:	b500      	push	{lr}
 80092f0:	b09c      	sub	sp, #112	; 0x70
 80092f2:	ab1d      	add	r3, sp, #116	; 0x74
 80092f4:	9002      	str	r0, [sp, #8]
 80092f6:	9006      	str	r0, [sp, #24]
 80092f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092fc:	4809      	ldr	r0, [pc, #36]	; (8009324 <siprintf+0x38>)
 80092fe:	9107      	str	r1, [sp, #28]
 8009300:	9104      	str	r1, [sp, #16]
 8009302:	4909      	ldr	r1, [pc, #36]	; (8009328 <siprintf+0x3c>)
 8009304:	f853 2b04 	ldr.w	r2, [r3], #4
 8009308:	9105      	str	r1, [sp, #20]
 800930a:	6800      	ldr	r0, [r0, #0]
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	a902      	add	r1, sp, #8
 8009310:	f000 f868 	bl	80093e4 <_svfiprintf_r>
 8009314:	9b02      	ldr	r3, [sp, #8]
 8009316:	2200      	movs	r2, #0
 8009318:	701a      	strb	r2, [r3, #0]
 800931a:	b01c      	add	sp, #112	; 0x70
 800931c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009320:	b003      	add	sp, #12
 8009322:	4770      	bx	lr
 8009324:	200000fc 	.word	0x200000fc
 8009328:	ffff0208 	.word	0xffff0208

0800932c <__ssputs_r>:
 800932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	688e      	ldr	r6, [r1, #8]
 8009332:	429e      	cmp	r6, r3
 8009334:	4682      	mov	sl, r0
 8009336:	460c      	mov	r4, r1
 8009338:	4690      	mov	r8, r2
 800933a:	461f      	mov	r7, r3
 800933c:	d838      	bhi.n	80093b0 <__ssputs_r+0x84>
 800933e:	898a      	ldrh	r2, [r1, #12]
 8009340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009344:	d032      	beq.n	80093ac <__ssputs_r+0x80>
 8009346:	6825      	ldr	r5, [r4, #0]
 8009348:	6909      	ldr	r1, [r1, #16]
 800934a:	eba5 0901 	sub.w	r9, r5, r1
 800934e:	6965      	ldr	r5, [r4, #20]
 8009350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009358:	3301      	adds	r3, #1
 800935a:	444b      	add	r3, r9
 800935c:	106d      	asrs	r5, r5, #1
 800935e:	429d      	cmp	r5, r3
 8009360:	bf38      	it	cc
 8009362:	461d      	movcc	r5, r3
 8009364:	0553      	lsls	r3, r2, #21
 8009366:	d531      	bpl.n	80093cc <__ssputs_r+0xa0>
 8009368:	4629      	mov	r1, r5
 800936a:	f000 fb55 	bl	8009a18 <_malloc_r>
 800936e:	4606      	mov	r6, r0
 8009370:	b950      	cbnz	r0, 8009388 <__ssputs_r+0x5c>
 8009372:	230c      	movs	r3, #12
 8009374:	f8ca 3000 	str.w	r3, [sl]
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	f04f 30ff 	mov.w	r0, #4294967295
 8009384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009388:	6921      	ldr	r1, [r4, #16]
 800938a:	464a      	mov	r2, r9
 800938c:	f7ff ff98 	bl	80092c0 <memcpy>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	6126      	str	r6, [r4, #16]
 800939e:	6165      	str	r5, [r4, #20]
 80093a0:	444e      	add	r6, r9
 80093a2:	eba5 0509 	sub.w	r5, r5, r9
 80093a6:	6026      	str	r6, [r4, #0]
 80093a8:	60a5      	str	r5, [r4, #8]
 80093aa:	463e      	mov	r6, r7
 80093ac:	42be      	cmp	r6, r7
 80093ae:	d900      	bls.n	80093b2 <__ssputs_r+0x86>
 80093b0:	463e      	mov	r6, r7
 80093b2:	6820      	ldr	r0, [r4, #0]
 80093b4:	4632      	mov	r2, r6
 80093b6:	4641      	mov	r1, r8
 80093b8:	f000 faa8 	bl	800990c <memmove>
 80093bc:	68a3      	ldr	r3, [r4, #8]
 80093be:	1b9b      	subs	r3, r3, r6
 80093c0:	60a3      	str	r3, [r4, #8]
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	4433      	add	r3, r6
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	2000      	movs	r0, #0
 80093ca:	e7db      	b.n	8009384 <__ssputs_r+0x58>
 80093cc:	462a      	mov	r2, r5
 80093ce:	f000 fb97 	bl	8009b00 <_realloc_r>
 80093d2:	4606      	mov	r6, r0
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d1e1      	bne.n	800939c <__ssputs_r+0x70>
 80093d8:	6921      	ldr	r1, [r4, #16]
 80093da:	4650      	mov	r0, sl
 80093dc:	f000 fab0 	bl	8009940 <_free_r>
 80093e0:	e7c7      	b.n	8009372 <__ssputs_r+0x46>
	...

080093e4 <_svfiprintf_r>:
 80093e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e8:	4698      	mov	r8, r3
 80093ea:	898b      	ldrh	r3, [r1, #12]
 80093ec:	061b      	lsls	r3, r3, #24
 80093ee:	b09d      	sub	sp, #116	; 0x74
 80093f0:	4607      	mov	r7, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	4614      	mov	r4, r2
 80093f6:	d50e      	bpl.n	8009416 <_svfiprintf_r+0x32>
 80093f8:	690b      	ldr	r3, [r1, #16]
 80093fa:	b963      	cbnz	r3, 8009416 <_svfiprintf_r+0x32>
 80093fc:	2140      	movs	r1, #64	; 0x40
 80093fe:	f000 fb0b 	bl	8009a18 <_malloc_r>
 8009402:	6028      	str	r0, [r5, #0]
 8009404:	6128      	str	r0, [r5, #16]
 8009406:	b920      	cbnz	r0, 8009412 <_svfiprintf_r+0x2e>
 8009408:	230c      	movs	r3, #12
 800940a:	603b      	str	r3, [r7, #0]
 800940c:	f04f 30ff 	mov.w	r0, #4294967295
 8009410:	e0d1      	b.n	80095b6 <_svfiprintf_r+0x1d2>
 8009412:	2340      	movs	r3, #64	; 0x40
 8009414:	616b      	str	r3, [r5, #20]
 8009416:	2300      	movs	r3, #0
 8009418:	9309      	str	r3, [sp, #36]	; 0x24
 800941a:	2320      	movs	r3, #32
 800941c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009420:	f8cd 800c 	str.w	r8, [sp, #12]
 8009424:	2330      	movs	r3, #48	; 0x30
 8009426:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80095d0 <_svfiprintf_r+0x1ec>
 800942a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800942e:	f04f 0901 	mov.w	r9, #1
 8009432:	4623      	mov	r3, r4
 8009434:	469a      	mov	sl, r3
 8009436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800943a:	b10a      	cbz	r2, 8009440 <_svfiprintf_r+0x5c>
 800943c:	2a25      	cmp	r2, #37	; 0x25
 800943e:	d1f9      	bne.n	8009434 <_svfiprintf_r+0x50>
 8009440:	ebba 0b04 	subs.w	fp, sl, r4
 8009444:	d00b      	beq.n	800945e <_svfiprintf_r+0x7a>
 8009446:	465b      	mov	r3, fp
 8009448:	4622      	mov	r2, r4
 800944a:	4629      	mov	r1, r5
 800944c:	4638      	mov	r0, r7
 800944e:	f7ff ff6d 	bl	800932c <__ssputs_r>
 8009452:	3001      	adds	r0, #1
 8009454:	f000 80aa 	beq.w	80095ac <_svfiprintf_r+0x1c8>
 8009458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800945a:	445a      	add	r2, fp
 800945c:	9209      	str	r2, [sp, #36]	; 0x24
 800945e:	f89a 3000 	ldrb.w	r3, [sl]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 80a2 	beq.w	80095ac <_svfiprintf_r+0x1c8>
 8009468:	2300      	movs	r3, #0
 800946a:	f04f 32ff 	mov.w	r2, #4294967295
 800946e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009472:	f10a 0a01 	add.w	sl, sl, #1
 8009476:	9304      	str	r3, [sp, #16]
 8009478:	9307      	str	r3, [sp, #28]
 800947a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800947e:	931a      	str	r3, [sp, #104]	; 0x68
 8009480:	4654      	mov	r4, sl
 8009482:	2205      	movs	r2, #5
 8009484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009488:	4851      	ldr	r0, [pc, #324]	; (80095d0 <_svfiprintf_r+0x1ec>)
 800948a:	f7f6 feb1 	bl	80001f0 <memchr>
 800948e:	9a04      	ldr	r2, [sp, #16]
 8009490:	b9d8      	cbnz	r0, 80094ca <_svfiprintf_r+0xe6>
 8009492:	06d0      	lsls	r0, r2, #27
 8009494:	bf44      	itt	mi
 8009496:	2320      	movmi	r3, #32
 8009498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800949c:	0711      	lsls	r1, r2, #28
 800949e:	bf44      	itt	mi
 80094a0:	232b      	movmi	r3, #43	; 0x2b
 80094a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094a6:	f89a 3000 	ldrb.w	r3, [sl]
 80094aa:	2b2a      	cmp	r3, #42	; 0x2a
 80094ac:	d015      	beq.n	80094da <_svfiprintf_r+0xf6>
 80094ae:	9a07      	ldr	r2, [sp, #28]
 80094b0:	4654      	mov	r4, sl
 80094b2:	2000      	movs	r0, #0
 80094b4:	f04f 0c0a 	mov.w	ip, #10
 80094b8:	4621      	mov	r1, r4
 80094ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094be:	3b30      	subs	r3, #48	; 0x30
 80094c0:	2b09      	cmp	r3, #9
 80094c2:	d94e      	bls.n	8009562 <_svfiprintf_r+0x17e>
 80094c4:	b1b0      	cbz	r0, 80094f4 <_svfiprintf_r+0x110>
 80094c6:	9207      	str	r2, [sp, #28]
 80094c8:	e014      	b.n	80094f4 <_svfiprintf_r+0x110>
 80094ca:	eba0 0308 	sub.w	r3, r0, r8
 80094ce:	fa09 f303 	lsl.w	r3, r9, r3
 80094d2:	4313      	orrs	r3, r2
 80094d4:	9304      	str	r3, [sp, #16]
 80094d6:	46a2      	mov	sl, r4
 80094d8:	e7d2      	b.n	8009480 <_svfiprintf_r+0x9c>
 80094da:	9b03      	ldr	r3, [sp, #12]
 80094dc:	1d19      	adds	r1, r3, #4
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	9103      	str	r1, [sp, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	bfbb      	ittet	lt
 80094e6:	425b      	neglt	r3, r3
 80094e8:	f042 0202 	orrlt.w	r2, r2, #2
 80094ec:	9307      	strge	r3, [sp, #28]
 80094ee:	9307      	strlt	r3, [sp, #28]
 80094f0:	bfb8      	it	lt
 80094f2:	9204      	strlt	r2, [sp, #16]
 80094f4:	7823      	ldrb	r3, [r4, #0]
 80094f6:	2b2e      	cmp	r3, #46	; 0x2e
 80094f8:	d10c      	bne.n	8009514 <_svfiprintf_r+0x130>
 80094fa:	7863      	ldrb	r3, [r4, #1]
 80094fc:	2b2a      	cmp	r3, #42	; 0x2a
 80094fe:	d135      	bne.n	800956c <_svfiprintf_r+0x188>
 8009500:	9b03      	ldr	r3, [sp, #12]
 8009502:	1d1a      	adds	r2, r3, #4
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	9203      	str	r2, [sp, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	bfb8      	it	lt
 800950c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009510:	3402      	adds	r4, #2
 8009512:	9305      	str	r3, [sp, #20]
 8009514:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095e0 <_svfiprintf_r+0x1fc>
 8009518:	7821      	ldrb	r1, [r4, #0]
 800951a:	2203      	movs	r2, #3
 800951c:	4650      	mov	r0, sl
 800951e:	f7f6 fe67 	bl	80001f0 <memchr>
 8009522:	b140      	cbz	r0, 8009536 <_svfiprintf_r+0x152>
 8009524:	2340      	movs	r3, #64	; 0x40
 8009526:	eba0 000a 	sub.w	r0, r0, sl
 800952a:	fa03 f000 	lsl.w	r0, r3, r0
 800952e:	9b04      	ldr	r3, [sp, #16]
 8009530:	4303      	orrs	r3, r0
 8009532:	3401      	adds	r4, #1
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800953a:	4826      	ldr	r0, [pc, #152]	; (80095d4 <_svfiprintf_r+0x1f0>)
 800953c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009540:	2206      	movs	r2, #6
 8009542:	f7f6 fe55 	bl	80001f0 <memchr>
 8009546:	2800      	cmp	r0, #0
 8009548:	d038      	beq.n	80095bc <_svfiprintf_r+0x1d8>
 800954a:	4b23      	ldr	r3, [pc, #140]	; (80095d8 <_svfiprintf_r+0x1f4>)
 800954c:	bb1b      	cbnz	r3, 8009596 <_svfiprintf_r+0x1b2>
 800954e:	9b03      	ldr	r3, [sp, #12]
 8009550:	3307      	adds	r3, #7
 8009552:	f023 0307 	bic.w	r3, r3, #7
 8009556:	3308      	adds	r3, #8
 8009558:	9303      	str	r3, [sp, #12]
 800955a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800955c:	4433      	add	r3, r6
 800955e:	9309      	str	r3, [sp, #36]	; 0x24
 8009560:	e767      	b.n	8009432 <_svfiprintf_r+0x4e>
 8009562:	fb0c 3202 	mla	r2, ip, r2, r3
 8009566:	460c      	mov	r4, r1
 8009568:	2001      	movs	r0, #1
 800956a:	e7a5      	b.n	80094b8 <_svfiprintf_r+0xd4>
 800956c:	2300      	movs	r3, #0
 800956e:	3401      	adds	r4, #1
 8009570:	9305      	str	r3, [sp, #20]
 8009572:	4619      	mov	r1, r3
 8009574:	f04f 0c0a 	mov.w	ip, #10
 8009578:	4620      	mov	r0, r4
 800957a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800957e:	3a30      	subs	r2, #48	; 0x30
 8009580:	2a09      	cmp	r2, #9
 8009582:	d903      	bls.n	800958c <_svfiprintf_r+0x1a8>
 8009584:	2b00      	cmp	r3, #0
 8009586:	d0c5      	beq.n	8009514 <_svfiprintf_r+0x130>
 8009588:	9105      	str	r1, [sp, #20]
 800958a:	e7c3      	b.n	8009514 <_svfiprintf_r+0x130>
 800958c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009590:	4604      	mov	r4, r0
 8009592:	2301      	movs	r3, #1
 8009594:	e7f0      	b.n	8009578 <_svfiprintf_r+0x194>
 8009596:	ab03      	add	r3, sp, #12
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	462a      	mov	r2, r5
 800959c:	4b0f      	ldr	r3, [pc, #60]	; (80095dc <_svfiprintf_r+0x1f8>)
 800959e:	a904      	add	r1, sp, #16
 80095a0:	4638      	mov	r0, r7
 80095a2:	f3af 8000 	nop.w
 80095a6:	1c42      	adds	r2, r0, #1
 80095a8:	4606      	mov	r6, r0
 80095aa:	d1d6      	bne.n	800955a <_svfiprintf_r+0x176>
 80095ac:	89ab      	ldrh	r3, [r5, #12]
 80095ae:	065b      	lsls	r3, r3, #25
 80095b0:	f53f af2c 	bmi.w	800940c <_svfiprintf_r+0x28>
 80095b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095b6:	b01d      	add	sp, #116	; 0x74
 80095b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095bc:	ab03      	add	r3, sp, #12
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	462a      	mov	r2, r5
 80095c2:	4b06      	ldr	r3, [pc, #24]	; (80095dc <_svfiprintf_r+0x1f8>)
 80095c4:	a904      	add	r1, sp, #16
 80095c6:	4638      	mov	r0, r7
 80095c8:	f000 f87a 	bl	80096c0 <_printf_i>
 80095cc:	e7eb      	b.n	80095a6 <_svfiprintf_r+0x1c2>
 80095ce:	bf00      	nop
 80095d0:	08009d65 	.word	0x08009d65
 80095d4:	08009d6f 	.word	0x08009d6f
 80095d8:	00000000 	.word	0x00000000
 80095dc:	0800932d 	.word	0x0800932d
 80095e0:	08009d6b 	.word	0x08009d6b

080095e4 <_printf_common>:
 80095e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	4616      	mov	r6, r2
 80095ea:	4699      	mov	r9, r3
 80095ec:	688a      	ldr	r2, [r1, #8]
 80095ee:	690b      	ldr	r3, [r1, #16]
 80095f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095f4:	4293      	cmp	r3, r2
 80095f6:	bfb8      	it	lt
 80095f8:	4613      	movlt	r3, r2
 80095fa:	6033      	str	r3, [r6, #0]
 80095fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009600:	4607      	mov	r7, r0
 8009602:	460c      	mov	r4, r1
 8009604:	b10a      	cbz	r2, 800960a <_printf_common+0x26>
 8009606:	3301      	adds	r3, #1
 8009608:	6033      	str	r3, [r6, #0]
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	0699      	lsls	r1, r3, #26
 800960e:	bf42      	ittt	mi
 8009610:	6833      	ldrmi	r3, [r6, #0]
 8009612:	3302      	addmi	r3, #2
 8009614:	6033      	strmi	r3, [r6, #0]
 8009616:	6825      	ldr	r5, [r4, #0]
 8009618:	f015 0506 	ands.w	r5, r5, #6
 800961c:	d106      	bne.n	800962c <_printf_common+0x48>
 800961e:	f104 0a19 	add.w	sl, r4, #25
 8009622:	68e3      	ldr	r3, [r4, #12]
 8009624:	6832      	ldr	r2, [r6, #0]
 8009626:	1a9b      	subs	r3, r3, r2
 8009628:	42ab      	cmp	r3, r5
 800962a:	dc26      	bgt.n	800967a <_printf_common+0x96>
 800962c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009630:	1e13      	subs	r3, r2, #0
 8009632:	6822      	ldr	r2, [r4, #0]
 8009634:	bf18      	it	ne
 8009636:	2301      	movne	r3, #1
 8009638:	0692      	lsls	r2, r2, #26
 800963a:	d42b      	bmi.n	8009694 <_printf_common+0xb0>
 800963c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009640:	4649      	mov	r1, r9
 8009642:	4638      	mov	r0, r7
 8009644:	47c0      	blx	r8
 8009646:	3001      	adds	r0, #1
 8009648:	d01e      	beq.n	8009688 <_printf_common+0xa4>
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	68e5      	ldr	r5, [r4, #12]
 800964e:	6832      	ldr	r2, [r6, #0]
 8009650:	f003 0306 	and.w	r3, r3, #6
 8009654:	2b04      	cmp	r3, #4
 8009656:	bf08      	it	eq
 8009658:	1aad      	subeq	r5, r5, r2
 800965a:	68a3      	ldr	r3, [r4, #8]
 800965c:	6922      	ldr	r2, [r4, #16]
 800965e:	bf0c      	ite	eq
 8009660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009664:	2500      	movne	r5, #0
 8009666:	4293      	cmp	r3, r2
 8009668:	bfc4      	itt	gt
 800966a:	1a9b      	subgt	r3, r3, r2
 800966c:	18ed      	addgt	r5, r5, r3
 800966e:	2600      	movs	r6, #0
 8009670:	341a      	adds	r4, #26
 8009672:	42b5      	cmp	r5, r6
 8009674:	d11a      	bne.n	80096ac <_printf_common+0xc8>
 8009676:	2000      	movs	r0, #0
 8009678:	e008      	b.n	800968c <_printf_common+0xa8>
 800967a:	2301      	movs	r3, #1
 800967c:	4652      	mov	r2, sl
 800967e:	4649      	mov	r1, r9
 8009680:	4638      	mov	r0, r7
 8009682:	47c0      	blx	r8
 8009684:	3001      	adds	r0, #1
 8009686:	d103      	bne.n	8009690 <_printf_common+0xac>
 8009688:	f04f 30ff 	mov.w	r0, #4294967295
 800968c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009690:	3501      	adds	r5, #1
 8009692:	e7c6      	b.n	8009622 <_printf_common+0x3e>
 8009694:	18e1      	adds	r1, r4, r3
 8009696:	1c5a      	adds	r2, r3, #1
 8009698:	2030      	movs	r0, #48	; 0x30
 800969a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800969e:	4422      	add	r2, r4
 80096a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096a8:	3302      	adds	r3, #2
 80096aa:	e7c7      	b.n	800963c <_printf_common+0x58>
 80096ac:	2301      	movs	r3, #1
 80096ae:	4622      	mov	r2, r4
 80096b0:	4649      	mov	r1, r9
 80096b2:	4638      	mov	r0, r7
 80096b4:	47c0      	blx	r8
 80096b6:	3001      	adds	r0, #1
 80096b8:	d0e6      	beq.n	8009688 <_printf_common+0xa4>
 80096ba:	3601      	adds	r6, #1
 80096bc:	e7d9      	b.n	8009672 <_printf_common+0x8e>
	...

080096c0 <_printf_i>:
 80096c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096c4:	7e0f      	ldrb	r7, [r1, #24]
 80096c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096c8:	2f78      	cmp	r7, #120	; 0x78
 80096ca:	4691      	mov	r9, r2
 80096cc:	4680      	mov	r8, r0
 80096ce:	460c      	mov	r4, r1
 80096d0:	469a      	mov	sl, r3
 80096d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096d6:	d807      	bhi.n	80096e8 <_printf_i+0x28>
 80096d8:	2f62      	cmp	r7, #98	; 0x62
 80096da:	d80a      	bhi.n	80096f2 <_printf_i+0x32>
 80096dc:	2f00      	cmp	r7, #0
 80096de:	f000 80d8 	beq.w	8009892 <_printf_i+0x1d2>
 80096e2:	2f58      	cmp	r7, #88	; 0x58
 80096e4:	f000 80a3 	beq.w	800982e <_printf_i+0x16e>
 80096e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096f0:	e03a      	b.n	8009768 <_printf_i+0xa8>
 80096f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096f6:	2b15      	cmp	r3, #21
 80096f8:	d8f6      	bhi.n	80096e8 <_printf_i+0x28>
 80096fa:	a101      	add	r1, pc, #4	; (adr r1, 8009700 <_printf_i+0x40>)
 80096fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009700:	08009759 	.word	0x08009759
 8009704:	0800976d 	.word	0x0800976d
 8009708:	080096e9 	.word	0x080096e9
 800970c:	080096e9 	.word	0x080096e9
 8009710:	080096e9 	.word	0x080096e9
 8009714:	080096e9 	.word	0x080096e9
 8009718:	0800976d 	.word	0x0800976d
 800971c:	080096e9 	.word	0x080096e9
 8009720:	080096e9 	.word	0x080096e9
 8009724:	080096e9 	.word	0x080096e9
 8009728:	080096e9 	.word	0x080096e9
 800972c:	08009879 	.word	0x08009879
 8009730:	0800979d 	.word	0x0800979d
 8009734:	0800985b 	.word	0x0800985b
 8009738:	080096e9 	.word	0x080096e9
 800973c:	080096e9 	.word	0x080096e9
 8009740:	0800989b 	.word	0x0800989b
 8009744:	080096e9 	.word	0x080096e9
 8009748:	0800979d 	.word	0x0800979d
 800974c:	080096e9 	.word	0x080096e9
 8009750:	080096e9 	.word	0x080096e9
 8009754:	08009863 	.word	0x08009863
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	1d1a      	adds	r2, r3, #4
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	602a      	str	r2, [r5, #0]
 8009760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009768:	2301      	movs	r3, #1
 800976a:	e0a3      	b.n	80098b4 <_printf_i+0x1f4>
 800976c:	6820      	ldr	r0, [r4, #0]
 800976e:	6829      	ldr	r1, [r5, #0]
 8009770:	0606      	lsls	r6, r0, #24
 8009772:	f101 0304 	add.w	r3, r1, #4
 8009776:	d50a      	bpl.n	800978e <_printf_i+0xce>
 8009778:	680e      	ldr	r6, [r1, #0]
 800977a:	602b      	str	r3, [r5, #0]
 800977c:	2e00      	cmp	r6, #0
 800977e:	da03      	bge.n	8009788 <_printf_i+0xc8>
 8009780:	232d      	movs	r3, #45	; 0x2d
 8009782:	4276      	negs	r6, r6
 8009784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009788:	485e      	ldr	r0, [pc, #376]	; (8009904 <_printf_i+0x244>)
 800978a:	230a      	movs	r3, #10
 800978c:	e019      	b.n	80097c2 <_printf_i+0x102>
 800978e:	680e      	ldr	r6, [r1, #0]
 8009790:	602b      	str	r3, [r5, #0]
 8009792:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009796:	bf18      	it	ne
 8009798:	b236      	sxthne	r6, r6
 800979a:	e7ef      	b.n	800977c <_printf_i+0xbc>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	6820      	ldr	r0, [r4, #0]
 80097a0:	1d19      	adds	r1, r3, #4
 80097a2:	6029      	str	r1, [r5, #0]
 80097a4:	0601      	lsls	r1, r0, #24
 80097a6:	d501      	bpl.n	80097ac <_printf_i+0xec>
 80097a8:	681e      	ldr	r6, [r3, #0]
 80097aa:	e002      	b.n	80097b2 <_printf_i+0xf2>
 80097ac:	0646      	lsls	r6, r0, #25
 80097ae:	d5fb      	bpl.n	80097a8 <_printf_i+0xe8>
 80097b0:	881e      	ldrh	r6, [r3, #0]
 80097b2:	4854      	ldr	r0, [pc, #336]	; (8009904 <_printf_i+0x244>)
 80097b4:	2f6f      	cmp	r7, #111	; 0x6f
 80097b6:	bf0c      	ite	eq
 80097b8:	2308      	moveq	r3, #8
 80097ba:	230a      	movne	r3, #10
 80097bc:	2100      	movs	r1, #0
 80097be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097c2:	6865      	ldr	r5, [r4, #4]
 80097c4:	60a5      	str	r5, [r4, #8]
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	bfa2      	ittt	ge
 80097ca:	6821      	ldrge	r1, [r4, #0]
 80097cc:	f021 0104 	bicge.w	r1, r1, #4
 80097d0:	6021      	strge	r1, [r4, #0]
 80097d2:	b90e      	cbnz	r6, 80097d8 <_printf_i+0x118>
 80097d4:	2d00      	cmp	r5, #0
 80097d6:	d04d      	beq.n	8009874 <_printf_i+0x1b4>
 80097d8:	4615      	mov	r5, r2
 80097da:	fbb6 f1f3 	udiv	r1, r6, r3
 80097de:	fb03 6711 	mls	r7, r3, r1, r6
 80097e2:	5dc7      	ldrb	r7, [r0, r7]
 80097e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097e8:	4637      	mov	r7, r6
 80097ea:	42bb      	cmp	r3, r7
 80097ec:	460e      	mov	r6, r1
 80097ee:	d9f4      	bls.n	80097da <_printf_i+0x11a>
 80097f0:	2b08      	cmp	r3, #8
 80097f2:	d10b      	bne.n	800980c <_printf_i+0x14c>
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	07de      	lsls	r6, r3, #31
 80097f8:	d508      	bpl.n	800980c <_printf_i+0x14c>
 80097fa:	6923      	ldr	r3, [r4, #16]
 80097fc:	6861      	ldr	r1, [r4, #4]
 80097fe:	4299      	cmp	r1, r3
 8009800:	bfde      	ittt	le
 8009802:	2330      	movle	r3, #48	; 0x30
 8009804:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800980c:	1b52      	subs	r2, r2, r5
 800980e:	6122      	str	r2, [r4, #16]
 8009810:	f8cd a000 	str.w	sl, [sp]
 8009814:	464b      	mov	r3, r9
 8009816:	aa03      	add	r2, sp, #12
 8009818:	4621      	mov	r1, r4
 800981a:	4640      	mov	r0, r8
 800981c:	f7ff fee2 	bl	80095e4 <_printf_common>
 8009820:	3001      	adds	r0, #1
 8009822:	d14c      	bne.n	80098be <_printf_i+0x1fe>
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	b004      	add	sp, #16
 800982a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982e:	4835      	ldr	r0, [pc, #212]	; (8009904 <_printf_i+0x244>)
 8009830:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009834:	6829      	ldr	r1, [r5, #0]
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	f851 6b04 	ldr.w	r6, [r1], #4
 800983c:	6029      	str	r1, [r5, #0]
 800983e:	061d      	lsls	r5, r3, #24
 8009840:	d514      	bpl.n	800986c <_printf_i+0x1ac>
 8009842:	07df      	lsls	r7, r3, #31
 8009844:	bf44      	itt	mi
 8009846:	f043 0320 	orrmi.w	r3, r3, #32
 800984a:	6023      	strmi	r3, [r4, #0]
 800984c:	b91e      	cbnz	r6, 8009856 <_printf_i+0x196>
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	f023 0320 	bic.w	r3, r3, #32
 8009854:	6023      	str	r3, [r4, #0]
 8009856:	2310      	movs	r3, #16
 8009858:	e7b0      	b.n	80097bc <_printf_i+0xfc>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	f043 0320 	orr.w	r3, r3, #32
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	2378      	movs	r3, #120	; 0x78
 8009864:	4828      	ldr	r0, [pc, #160]	; (8009908 <_printf_i+0x248>)
 8009866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800986a:	e7e3      	b.n	8009834 <_printf_i+0x174>
 800986c:	0659      	lsls	r1, r3, #25
 800986e:	bf48      	it	mi
 8009870:	b2b6      	uxthmi	r6, r6
 8009872:	e7e6      	b.n	8009842 <_printf_i+0x182>
 8009874:	4615      	mov	r5, r2
 8009876:	e7bb      	b.n	80097f0 <_printf_i+0x130>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	6826      	ldr	r6, [r4, #0]
 800987c:	6961      	ldr	r1, [r4, #20]
 800987e:	1d18      	adds	r0, r3, #4
 8009880:	6028      	str	r0, [r5, #0]
 8009882:	0635      	lsls	r5, r6, #24
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	d501      	bpl.n	800988c <_printf_i+0x1cc>
 8009888:	6019      	str	r1, [r3, #0]
 800988a:	e002      	b.n	8009892 <_printf_i+0x1d2>
 800988c:	0670      	lsls	r0, r6, #25
 800988e:	d5fb      	bpl.n	8009888 <_printf_i+0x1c8>
 8009890:	8019      	strh	r1, [r3, #0]
 8009892:	2300      	movs	r3, #0
 8009894:	6123      	str	r3, [r4, #16]
 8009896:	4615      	mov	r5, r2
 8009898:	e7ba      	b.n	8009810 <_printf_i+0x150>
 800989a:	682b      	ldr	r3, [r5, #0]
 800989c:	1d1a      	adds	r2, r3, #4
 800989e:	602a      	str	r2, [r5, #0]
 80098a0:	681d      	ldr	r5, [r3, #0]
 80098a2:	6862      	ldr	r2, [r4, #4]
 80098a4:	2100      	movs	r1, #0
 80098a6:	4628      	mov	r0, r5
 80098a8:	f7f6 fca2 	bl	80001f0 <memchr>
 80098ac:	b108      	cbz	r0, 80098b2 <_printf_i+0x1f2>
 80098ae:	1b40      	subs	r0, r0, r5
 80098b0:	6060      	str	r0, [r4, #4]
 80098b2:	6863      	ldr	r3, [r4, #4]
 80098b4:	6123      	str	r3, [r4, #16]
 80098b6:	2300      	movs	r3, #0
 80098b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098bc:	e7a8      	b.n	8009810 <_printf_i+0x150>
 80098be:	6923      	ldr	r3, [r4, #16]
 80098c0:	462a      	mov	r2, r5
 80098c2:	4649      	mov	r1, r9
 80098c4:	4640      	mov	r0, r8
 80098c6:	47d0      	blx	sl
 80098c8:	3001      	adds	r0, #1
 80098ca:	d0ab      	beq.n	8009824 <_printf_i+0x164>
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	079b      	lsls	r3, r3, #30
 80098d0:	d413      	bmi.n	80098fa <_printf_i+0x23a>
 80098d2:	68e0      	ldr	r0, [r4, #12]
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	4298      	cmp	r0, r3
 80098d8:	bfb8      	it	lt
 80098da:	4618      	movlt	r0, r3
 80098dc:	e7a4      	b.n	8009828 <_printf_i+0x168>
 80098de:	2301      	movs	r3, #1
 80098e0:	4632      	mov	r2, r6
 80098e2:	4649      	mov	r1, r9
 80098e4:	4640      	mov	r0, r8
 80098e6:	47d0      	blx	sl
 80098e8:	3001      	adds	r0, #1
 80098ea:	d09b      	beq.n	8009824 <_printf_i+0x164>
 80098ec:	3501      	adds	r5, #1
 80098ee:	68e3      	ldr	r3, [r4, #12]
 80098f0:	9903      	ldr	r1, [sp, #12]
 80098f2:	1a5b      	subs	r3, r3, r1
 80098f4:	42ab      	cmp	r3, r5
 80098f6:	dcf2      	bgt.n	80098de <_printf_i+0x21e>
 80098f8:	e7eb      	b.n	80098d2 <_printf_i+0x212>
 80098fa:	2500      	movs	r5, #0
 80098fc:	f104 0619 	add.w	r6, r4, #25
 8009900:	e7f5      	b.n	80098ee <_printf_i+0x22e>
 8009902:	bf00      	nop
 8009904:	08009d76 	.word	0x08009d76
 8009908:	08009d87 	.word	0x08009d87

0800990c <memmove>:
 800990c:	4288      	cmp	r0, r1
 800990e:	b510      	push	{r4, lr}
 8009910:	eb01 0402 	add.w	r4, r1, r2
 8009914:	d902      	bls.n	800991c <memmove+0x10>
 8009916:	4284      	cmp	r4, r0
 8009918:	4623      	mov	r3, r4
 800991a:	d807      	bhi.n	800992c <memmove+0x20>
 800991c:	1e43      	subs	r3, r0, #1
 800991e:	42a1      	cmp	r1, r4
 8009920:	d008      	beq.n	8009934 <memmove+0x28>
 8009922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800992a:	e7f8      	b.n	800991e <memmove+0x12>
 800992c:	4402      	add	r2, r0
 800992e:	4601      	mov	r1, r0
 8009930:	428a      	cmp	r2, r1
 8009932:	d100      	bne.n	8009936 <memmove+0x2a>
 8009934:	bd10      	pop	{r4, pc}
 8009936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800993a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800993e:	e7f7      	b.n	8009930 <memmove+0x24>

08009940 <_free_r>:
 8009940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009942:	2900      	cmp	r1, #0
 8009944:	d044      	beq.n	80099d0 <_free_r+0x90>
 8009946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800994a:	9001      	str	r0, [sp, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	f1a1 0404 	sub.w	r4, r1, #4
 8009952:	bfb8      	it	lt
 8009954:	18e4      	addlt	r4, r4, r3
 8009956:	f000 f913 	bl	8009b80 <__malloc_lock>
 800995a:	4a1e      	ldr	r2, [pc, #120]	; (80099d4 <_free_r+0x94>)
 800995c:	9801      	ldr	r0, [sp, #4]
 800995e:	6813      	ldr	r3, [r2, #0]
 8009960:	b933      	cbnz	r3, 8009970 <_free_r+0x30>
 8009962:	6063      	str	r3, [r4, #4]
 8009964:	6014      	str	r4, [r2, #0]
 8009966:	b003      	add	sp, #12
 8009968:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800996c:	f000 b90e 	b.w	8009b8c <__malloc_unlock>
 8009970:	42a3      	cmp	r3, r4
 8009972:	d908      	bls.n	8009986 <_free_r+0x46>
 8009974:	6825      	ldr	r5, [r4, #0]
 8009976:	1961      	adds	r1, r4, r5
 8009978:	428b      	cmp	r3, r1
 800997a:	bf01      	itttt	eq
 800997c:	6819      	ldreq	r1, [r3, #0]
 800997e:	685b      	ldreq	r3, [r3, #4]
 8009980:	1949      	addeq	r1, r1, r5
 8009982:	6021      	streq	r1, [r4, #0]
 8009984:	e7ed      	b.n	8009962 <_free_r+0x22>
 8009986:	461a      	mov	r2, r3
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	b10b      	cbz	r3, 8009990 <_free_r+0x50>
 800998c:	42a3      	cmp	r3, r4
 800998e:	d9fa      	bls.n	8009986 <_free_r+0x46>
 8009990:	6811      	ldr	r1, [r2, #0]
 8009992:	1855      	adds	r5, r2, r1
 8009994:	42a5      	cmp	r5, r4
 8009996:	d10b      	bne.n	80099b0 <_free_r+0x70>
 8009998:	6824      	ldr	r4, [r4, #0]
 800999a:	4421      	add	r1, r4
 800999c:	1854      	adds	r4, r2, r1
 800999e:	42a3      	cmp	r3, r4
 80099a0:	6011      	str	r1, [r2, #0]
 80099a2:	d1e0      	bne.n	8009966 <_free_r+0x26>
 80099a4:	681c      	ldr	r4, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	6053      	str	r3, [r2, #4]
 80099aa:	4421      	add	r1, r4
 80099ac:	6011      	str	r1, [r2, #0]
 80099ae:	e7da      	b.n	8009966 <_free_r+0x26>
 80099b0:	d902      	bls.n	80099b8 <_free_r+0x78>
 80099b2:	230c      	movs	r3, #12
 80099b4:	6003      	str	r3, [r0, #0]
 80099b6:	e7d6      	b.n	8009966 <_free_r+0x26>
 80099b8:	6825      	ldr	r5, [r4, #0]
 80099ba:	1961      	adds	r1, r4, r5
 80099bc:	428b      	cmp	r3, r1
 80099be:	bf04      	itt	eq
 80099c0:	6819      	ldreq	r1, [r3, #0]
 80099c2:	685b      	ldreq	r3, [r3, #4]
 80099c4:	6063      	str	r3, [r4, #4]
 80099c6:	bf04      	itt	eq
 80099c8:	1949      	addeq	r1, r1, r5
 80099ca:	6021      	streq	r1, [r4, #0]
 80099cc:	6054      	str	r4, [r2, #4]
 80099ce:	e7ca      	b.n	8009966 <_free_r+0x26>
 80099d0:	b003      	add	sp, #12
 80099d2:	bd30      	pop	{r4, r5, pc}
 80099d4:	200022c8 	.word	0x200022c8

080099d8 <sbrk_aligned>:
 80099d8:	b570      	push	{r4, r5, r6, lr}
 80099da:	4e0e      	ldr	r6, [pc, #56]	; (8009a14 <sbrk_aligned+0x3c>)
 80099dc:	460c      	mov	r4, r1
 80099de:	6831      	ldr	r1, [r6, #0]
 80099e0:	4605      	mov	r5, r0
 80099e2:	b911      	cbnz	r1, 80099ea <sbrk_aligned+0x12>
 80099e4:	f000 f8bc 	bl	8009b60 <_sbrk_r>
 80099e8:	6030      	str	r0, [r6, #0]
 80099ea:	4621      	mov	r1, r4
 80099ec:	4628      	mov	r0, r5
 80099ee:	f000 f8b7 	bl	8009b60 <_sbrk_r>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d00a      	beq.n	8009a0c <sbrk_aligned+0x34>
 80099f6:	1cc4      	adds	r4, r0, #3
 80099f8:	f024 0403 	bic.w	r4, r4, #3
 80099fc:	42a0      	cmp	r0, r4
 80099fe:	d007      	beq.n	8009a10 <sbrk_aligned+0x38>
 8009a00:	1a21      	subs	r1, r4, r0
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 f8ac 	bl	8009b60 <_sbrk_r>
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d101      	bne.n	8009a10 <sbrk_aligned+0x38>
 8009a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8009a10:	4620      	mov	r0, r4
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	200022cc 	.word	0x200022cc

08009a18 <_malloc_r>:
 8009a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1c:	1ccd      	adds	r5, r1, #3
 8009a1e:	f025 0503 	bic.w	r5, r5, #3
 8009a22:	3508      	adds	r5, #8
 8009a24:	2d0c      	cmp	r5, #12
 8009a26:	bf38      	it	cc
 8009a28:	250c      	movcc	r5, #12
 8009a2a:	2d00      	cmp	r5, #0
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	db01      	blt.n	8009a34 <_malloc_r+0x1c>
 8009a30:	42a9      	cmp	r1, r5
 8009a32:	d905      	bls.n	8009a40 <_malloc_r+0x28>
 8009a34:	230c      	movs	r3, #12
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	2600      	movs	r6, #0
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a40:	4e2e      	ldr	r6, [pc, #184]	; (8009afc <_malloc_r+0xe4>)
 8009a42:	f000 f89d 	bl	8009b80 <__malloc_lock>
 8009a46:	6833      	ldr	r3, [r6, #0]
 8009a48:	461c      	mov	r4, r3
 8009a4a:	bb34      	cbnz	r4, 8009a9a <_malloc_r+0x82>
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f7ff ffc2 	bl	80099d8 <sbrk_aligned>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	4604      	mov	r4, r0
 8009a58:	d14d      	bne.n	8009af6 <_malloc_r+0xde>
 8009a5a:	6834      	ldr	r4, [r6, #0]
 8009a5c:	4626      	mov	r6, r4
 8009a5e:	2e00      	cmp	r6, #0
 8009a60:	d140      	bne.n	8009ae4 <_malloc_r+0xcc>
 8009a62:	6823      	ldr	r3, [r4, #0]
 8009a64:	4631      	mov	r1, r6
 8009a66:	4638      	mov	r0, r7
 8009a68:	eb04 0803 	add.w	r8, r4, r3
 8009a6c:	f000 f878 	bl	8009b60 <_sbrk_r>
 8009a70:	4580      	cmp	r8, r0
 8009a72:	d13a      	bne.n	8009aea <_malloc_r+0xd2>
 8009a74:	6821      	ldr	r1, [r4, #0]
 8009a76:	3503      	adds	r5, #3
 8009a78:	1a6d      	subs	r5, r5, r1
 8009a7a:	f025 0503 	bic.w	r5, r5, #3
 8009a7e:	3508      	adds	r5, #8
 8009a80:	2d0c      	cmp	r5, #12
 8009a82:	bf38      	it	cc
 8009a84:	250c      	movcc	r5, #12
 8009a86:	4629      	mov	r1, r5
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ffa5 	bl	80099d8 <sbrk_aligned>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d02b      	beq.n	8009aea <_malloc_r+0xd2>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	442b      	add	r3, r5
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	e00e      	b.n	8009ab8 <_malloc_r+0xa0>
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	1b52      	subs	r2, r2, r5
 8009a9e:	d41e      	bmi.n	8009ade <_malloc_r+0xc6>
 8009aa0:	2a0b      	cmp	r2, #11
 8009aa2:	d916      	bls.n	8009ad2 <_malloc_r+0xba>
 8009aa4:	1961      	adds	r1, r4, r5
 8009aa6:	42a3      	cmp	r3, r4
 8009aa8:	6025      	str	r5, [r4, #0]
 8009aaa:	bf18      	it	ne
 8009aac:	6059      	strne	r1, [r3, #4]
 8009aae:	6863      	ldr	r3, [r4, #4]
 8009ab0:	bf08      	it	eq
 8009ab2:	6031      	streq	r1, [r6, #0]
 8009ab4:	5162      	str	r2, [r4, r5]
 8009ab6:	604b      	str	r3, [r1, #4]
 8009ab8:	4638      	mov	r0, r7
 8009aba:	f104 060b 	add.w	r6, r4, #11
 8009abe:	f000 f865 	bl	8009b8c <__malloc_unlock>
 8009ac2:	f026 0607 	bic.w	r6, r6, #7
 8009ac6:	1d23      	adds	r3, r4, #4
 8009ac8:	1af2      	subs	r2, r6, r3
 8009aca:	d0b6      	beq.n	8009a3a <_malloc_r+0x22>
 8009acc:	1b9b      	subs	r3, r3, r6
 8009ace:	50a3      	str	r3, [r4, r2]
 8009ad0:	e7b3      	b.n	8009a3a <_malloc_r+0x22>
 8009ad2:	6862      	ldr	r2, [r4, #4]
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	bf0c      	ite	eq
 8009ad8:	6032      	streq	r2, [r6, #0]
 8009ada:	605a      	strne	r2, [r3, #4]
 8009adc:	e7ec      	b.n	8009ab8 <_malloc_r+0xa0>
 8009ade:	4623      	mov	r3, r4
 8009ae0:	6864      	ldr	r4, [r4, #4]
 8009ae2:	e7b2      	b.n	8009a4a <_malloc_r+0x32>
 8009ae4:	4634      	mov	r4, r6
 8009ae6:	6876      	ldr	r6, [r6, #4]
 8009ae8:	e7b9      	b.n	8009a5e <_malloc_r+0x46>
 8009aea:	230c      	movs	r3, #12
 8009aec:	603b      	str	r3, [r7, #0]
 8009aee:	4638      	mov	r0, r7
 8009af0:	f000 f84c 	bl	8009b8c <__malloc_unlock>
 8009af4:	e7a1      	b.n	8009a3a <_malloc_r+0x22>
 8009af6:	6025      	str	r5, [r4, #0]
 8009af8:	e7de      	b.n	8009ab8 <_malloc_r+0xa0>
 8009afa:	bf00      	nop
 8009afc:	200022c8 	.word	0x200022c8

08009b00 <_realloc_r>:
 8009b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b04:	4680      	mov	r8, r0
 8009b06:	4614      	mov	r4, r2
 8009b08:	460e      	mov	r6, r1
 8009b0a:	b921      	cbnz	r1, 8009b16 <_realloc_r+0x16>
 8009b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b10:	4611      	mov	r1, r2
 8009b12:	f7ff bf81 	b.w	8009a18 <_malloc_r>
 8009b16:	b92a      	cbnz	r2, 8009b24 <_realloc_r+0x24>
 8009b18:	f7ff ff12 	bl	8009940 <_free_r>
 8009b1c:	4625      	mov	r5, r4
 8009b1e:	4628      	mov	r0, r5
 8009b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b24:	f000 f838 	bl	8009b98 <_malloc_usable_size_r>
 8009b28:	4284      	cmp	r4, r0
 8009b2a:	4607      	mov	r7, r0
 8009b2c:	d802      	bhi.n	8009b34 <_realloc_r+0x34>
 8009b2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b32:	d812      	bhi.n	8009b5a <_realloc_r+0x5a>
 8009b34:	4621      	mov	r1, r4
 8009b36:	4640      	mov	r0, r8
 8009b38:	f7ff ff6e 	bl	8009a18 <_malloc_r>
 8009b3c:	4605      	mov	r5, r0
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d0ed      	beq.n	8009b1e <_realloc_r+0x1e>
 8009b42:	42bc      	cmp	r4, r7
 8009b44:	4622      	mov	r2, r4
 8009b46:	4631      	mov	r1, r6
 8009b48:	bf28      	it	cs
 8009b4a:	463a      	movcs	r2, r7
 8009b4c:	f7ff fbb8 	bl	80092c0 <memcpy>
 8009b50:	4631      	mov	r1, r6
 8009b52:	4640      	mov	r0, r8
 8009b54:	f7ff fef4 	bl	8009940 <_free_r>
 8009b58:	e7e1      	b.n	8009b1e <_realloc_r+0x1e>
 8009b5a:	4635      	mov	r5, r6
 8009b5c:	e7df      	b.n	8009b1e <_realloc_r+0x1e>
	...

08009b60 <_sbrk_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d06      	ldr	r5, [pc, #24]	; (8009b7c <_sbrk_r+0x1c>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	602b      	str	r3, [r5, #0]
 8009b6c:	f7f7 f85e 	bl	8000c2c <_sbrk>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_sbrk_r+0x1a>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_sbrk_r+0x1a>
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	200022d0 	.word	0x200022d0

08009b80 <__malloc_lock>:
 8009b80:	4801      	ldr	r0, [pc, #4]	; (8009b88 <__malloc_lock+0x8>)
 8009b82:	f000 b811 	b.w	8009ba8 <__retarget_lock_acquire_recursive>
 8009b86:	bf00      	nop
 8009b88:	200022d4 	.word	0x200022d4

08009b8c <__malloc_unlock>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__malloc_unlock+0x8>)
 8009b8e:	f000 b80c 	b.w	8009baa <__retarget_lock_release_recursive>
 8009b92:	bf00      	nop
 8009b94:	200022d4 	.word	0x200022d4

08009b98 <_malloc_usable_size_r>:
 8009b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b9c:	1f18      	subs	r0, r3, #4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	bfbc      	itt	lt
 8009ba2:	580b      	ldrlt	r3, [r1, r0]
 8009ba4:	18c0      	addlt	r0, r0, r3
 8009ba6:	4770      	bx	lr

08009ba8 <__retarget_lock_acquire_recursive>:
 8009ba8:	4770      	bx	lr

08009baa <__retarget_lock_release_recursive>:
 8009baa:	4770      	bx	lr

08009bac <_init>:
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	bf00      	nop
 8009bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb2:	bc08      	pop	{r3}
 8009bb4:	469e      	mov	lr, r3
 8009bb6:	4770      	bx	lr

08009bb8 <_fini>:
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	bf00      	nop
 8009bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bbe:	bc08      	pop	{r3}
 8009bc0:	469e      	mov	lr, r3
 8009bc2:	4770      	bx	lr
