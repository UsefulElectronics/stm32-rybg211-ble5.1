
rybg211_ble5.1_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009994  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08009b34  08009b34  00019b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d08  08009d08  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009d08  08009d08  00019d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d10  08009d10  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d10  08009d10  00019d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002178  20000160  08009e78  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022d8  08009e78  000222d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138fc  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003389  00000000  00000000  00033a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00036e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00037cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019380  00000000  00000000  00038a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001399a  00000000  00000000  00051d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ace0  00000000  00000000  0006571a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f03fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed0  00000000  00000000  000f044c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b1c 	.word	0x08009b1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08009b1c 	.word	0x08009b1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fb8e 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f82e 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8e6 	bl	8000770 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8bc 	bl	8000720 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f890 	bl	80006cc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005ac:	f007 ffd0 	bl	8008550 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  rybg211_bleModuleInit();
 80005b0:	f008 fcec 	bl	8008f8c <rybg211_bleModuleInit>

  rybg211_setDeviceName(hBleModule.txBuffer, "BLE Bridge");
 80005b4:	490c      	ldr	r1, [pc, #48]	; (80005e8 <main+0x54>)
 80005b6:	480d      	ldr	r0, [pc, #52]	; (80005ec <main+0x58>)
 80005b8:	f008 fcfc 	bl	8008fb4 <rybg211_setDeviceName>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80005bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c0:	490b      	ldr	r1, [pc, #44]	; (80005f0 <main+0x5c>)
 80005c2:	480c      	ldr	r0, [pc, #48]	; (80005f4 <main+0x60>)
 80005c4:	f003 fa60 	bl	8003a88 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <main+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <main+0x64>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f022 0208 	bic.w	r2, r2, #8
 80005d6:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  main_UartTxTask();
 80005d8:	f000 f944 	bl	8000864 <main_UartTxTask>

	  main_UartRxTask();
 80005dc:	f000 f96e 	bl	80008bc <main_UartRxTask>

	  main_bridgeDataTransfare();
 80005e0:	f000 f99c 	bl	800091c <main_bridgeDataTransfare>
	  main_UartTxTask();
 80005e4:	e7f8      	b.n	80005d8 <main+0x44>
 80005e6:	bf00      	nop
 80005e8:	08009b34 	.word	0x08009b34
 80005ec:	200020c5 	.word	0x200020c5
 80005f0:	200021c5 	.word	0x200021c5
 80005f4:	2000017c 	.word	0x2000017c
 80005f8:	200001c0 	.word	0x200001c0

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 fe1e 	bl	800924c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <SystemClock_Config+0xc8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a26      	ldr	r2, [pc, #152]	; (80006c4 <SystemClock_Config+0xc8>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <SystemClock_Config+0xc8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <SystemClock_Config+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a20      	ldr	r2, [pc, #128]	; (80006c8 <SystemClock_Config+0xcc>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <SystemClock_Config+0xcc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800066c:	230f      	movs	r3, #15
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000670:	2390      	movs	r3, #144	; 0x90
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000674:	2304      	movs	r3, #4
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000678:	2305      	movs	r3, #5
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f002 fcdd 	bl	8003040 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800068c:	f000 f96c 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2101      	movs	r1, #1
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 ff3f 	bl	8003530 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b8:	f000 f956 	bl	8000968 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	; 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_USART1_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 8000704:	f003 f8f4 	bl	80038f0 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 f92b 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000017c 	.word	0x2000017c
 800071c:	40011000 	.word	0x40011000

08000720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_DMA_Init+0x4c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <MX_DMA_Init+0x4c>)
 8000730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_DMA_Init+0x4c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	203a      	movs	r0, #58	; 0x3a
 8000748:	f000 fc27 	bl	8000f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800074c:	203a      	movs	r0, #58	; 0x3a
 800074e:	f000 fc40 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2046      	movs	r0, #70	; 0x46
 8000758:	f000 fc1f 	bl	8000f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800075c:	2046      	movs	r0, #70	; 0x46
 800075e:	f000 fc38 	bl	8000fd2 <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_GPIO_Init+0x9c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1f      	ldr	r2, [pc, #124]	; (800080c <MX_GPIO_Init+0x9c>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_GPIO_Init+0x9c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_GPIO_Init+0x9c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <MX_GPIO_Init+0x9c>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_GPIO_Init+0x9c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_GPIO_Init+0x9c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a11      	ldr	r2, [pc, #68]	; (800080c <MX_GPIO_Init+0x9c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_GPIO_Init+0x9c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f244 01e0 	movw	r1, #16608	; 0x40e0
 80007e0:	480b      	ldr	r0, [pc, #44]	; (8000810 <MX_GPIO_Init+0xa0>)
 80007e2:	f001 f997 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODULE_RESET_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80007e6:	f244 03e0 	movw	r3, #16608	; 0x40e0
 80007ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4619      	mov	r1, r3
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_GPIO_Init+0xa0>)
 8000800:	f001 f804 	bl	800180c <HAL_GPIO_Init>

}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400

08000814 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	807b      	strh	r3, [r7, #2]
	hBleModule.controlFlags.flag.packetReceived = ENABLE;
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <HAL_UARTEx_RxEventCallback+0x40>)
 8000822:	7813      	ldrb	r3, [r2, #0]
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	7013      	strb	r3, [r2, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 800082a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800082e:	490a      	ldr	r1, [pc, #40]	; (8000858 <HAL_UARTEx_RxEventCallback+0x44>)
 8000830:	480a      	ldr	r0, [pc, #40]	; (800085c <HAL_UARTEx_RxEventCallback+0x48>)
 8000832:	f003 f929 	bl	8003a88 <HAL_UARTEx_ReceiveToIdle_DMA>

	hBleModule.rxPacketSize = Size;
 8000836:	4a07      	ldr	r2, [pc, #28]	; (8000854 <HAL_UARTEx_RxEventCallback+0x40>)
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	8093      	strh	r3, [r2, #4]

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_UARTEx_RxEventCallback+0x4c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f022 0208 	bic.w	r2, r2, #8
 800084a:	601a      	str	r2, [r3, #0]
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200020b0 	.word	0x200020b0
 8000858:	200021c5 	.word	0x200021c5
 800085c:	2000017c 	.word	0x2000017c
 8000860:	200001c0 	.word	0x200001c0

08000864 <main_UartTxTask>:


static void main_UartTxTask()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hBleModule.txTimer > 1000))
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <main_UartTxTask+0x4c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d019      	beq.n	80008aa <main_UartTxTask+0x46>
 8000876:	f000 fa85 	bl	8000d84 <HAL_GetTick>
 800087a:	4602      	mov	r2, r0
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <main_UartTxTask+0x4c>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000886:	d910      	bls.n	80008aa <main_UartTxTask+0x46>
	{
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <main_UartTxTask+0x4c>)
 800088a:	885b      	ldrh	r3, [r3, #2]
 800088c:	461a      	mov	r2, r3
 800088e:	4909      	ldr	r1, [pc, #36]	; (80008b4 <main_UartTxTask+0x50>)
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <main_UartTxTask+0x54>)
 8000892:	f003 f87b 	bl	800398c <HAL_UART_Transmit_DMA>

		hBleModule.controlFlags.flag.packetToTransmit = DISABLE;
 8000896:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <main_UartTxTask+0x4c>)
 8000898:	7813      	ldrb	r3, [r2, #0]
 800089a:	f36f 0341 	bfc	r3, #1, #1
 800089e:	7013      	strb	r3, [r2, #0]

		hBleModule.txTimer = HAL_GetTick();
 80008a0:	f000 fa70 	bl	8000d84 <HAL_GetTick>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4a02      	ldr	r2, [pc, #8]	; (80008b0 <main_UartTxTask+0x4c>)
 80008a8:	60d3      	str	r3, [r2, #12]
	}
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200020b0 	.word	0x200020b0
 80008b4:	200020c5 	.word	0x200020c5
 80008b8:	2000017c 	.word	0x2000017c

080008bc <main_UartRxTask>:

static void main_UartRxTask()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetReceived)
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <main_UartRxTask+0x50>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d01b      	beq.n	8000906 <main_UartRxTask+0x4a>
	{
		if(rybg211_rxPacketParser(hBleModule.rxBuffer, hBleModule.rxPacketSize))
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <main_UartRxTask+0x50>)
 80008d0:	889b      	ldrh	r3, [r3, #4]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4619      	mov	r1, r3
 80008d6:	480e      	ldr	r0, [pc, #56]	; (8000910 <main_UartRxTask+0x54>)
 80008d8:	f008 fba2 	bl	8009020 <rybg211_rxPacketParser>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00c      	beq.n	80008fc <main_UartRxTask+0x40>
		{
			hBridge.blePacketSize = (uint16_t)rybg211_rxDataRead(hBleModule.rxBuffer, hBridge.bleBuffer);
 80008e2:	490c      	ldr	r1, [pc, #48]	; (8000914 <main_UartRxTask+0x58>)
 80008e4:	480a      	ldr	r0, [pc, #40]	; (8000910 <main_UartRxTask+0x54>)
 80008e6:	f008 fc45 	bl	8009174 <rybg211_rxDataRead>
 80008ea:	4603      	mov	r3, r0
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <main_UartRxTask+0x5c>)
 80008f0:	805a      	strh	r2, [r3, #2]

			hBridge.controlFlags.flag.bleToUsb = ENABLE;
 80008f2:	4a09      	ldr	r2, [pc, #36]	; (8000918 <main_UartRxTask+0x5c>)
 80008f4:	7813      	ldrb	r3, [r2, #0]
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	7013      	strb	r3, [r2, #0]
		}
		hBleModule.controlFlags.flag.packetReceived = DISABLE;
 80008fc:	4a03      	ldr	r2, [pc, #12]	; (800090c <main_UartRxTask+0x50>)
 80008fe:	7813      	ldrb	r3, [r2, #0]
 8000900:	f36f 0300 	bfc	r3, #0, #1
 8000904:	7013      	strb	r3, [r2, #0]

	}
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200020b0 	.word	0x200020b0
 8000910:	200021c5 	.word	0x200021c5
 8000914:	2000028c 	.word	0x2000028c
 8000918:	20000280 	.word	0x20000280

0800091c <main_bridgeDataTransfare>:


static void main_bridgeDataTransfare()
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	if(hBridge.controlFlags.flag.bleToUsb)
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <main_bridgeDataTransfare+0x44>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d015      	beq.n	800095a <main_bridgeDataTransfare+0x3e>
	{
		hBridge.controlFlags.flag.bleToUsb = DISABLE;
 800092e:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <main_bridgeDataTransfare+0x44>)
 8000930:	7813      	ldrb	r3, [r2, #0]
 8000932:	f36f 0300 	bfc	r3, #0, #1
 8000936:	7013      	strb	r3, [r2, #0]

		//Place feedline character at the end of the packet and increment the size by 1.
		hBridge.bleBuffer[hBridge.blePacketSize++] = '\n';
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <main_bridgeDataTransfare+0x44>)
 800093a:	885b      	ldrh	r3, [r3, #2]
 800093c:	1c5a      	adds	r2, r3, #1
 800093e:	b291      	uxth	r1, r2
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <main_bridgeDataTransfare+0x44>)
 8000942:	8051      	strh	r1, [r2, #2]
 8000944:	461a      	mov	r2, r3
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <main_bridgeDataTransfare+0x44>)
 8000948:	4413      	add	r3, r2
 800094a:	220a      	movs	r2, #10
 800094c:	731a      	strb	r2, [r3, #12]

		CDC_Transmit_FS((uint8_t*) hBridge.bleBuffer, (uint16_t)hBridge.blePacketSize);
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <main_bridgeDataTransfare+0x44>)
 8000950:	885b      	ldrh	r3, [r3, #2]
 8000952:	4619      	mov	r1, r3
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <main_bridgeDataTransfare+0x48>)
 8000956:	f007 fec7 	bl	80086e8 <CDC_Transmit_FS>
	}
	else if(hBridge.controlFlags.flag.usbToBle)
	{

	}
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000280 	.word	0x20000280
 8000964:	2000028c 	.word	0x2000028c

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a4c      	ldr	r2, [pc, #304]	; (8000b14 <HAL_UART_MspInit+0x150>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	f040 8091 	bne.w	8000b0a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <HAL_UART_MspInit+0x154>)
 80009ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f0:	4a49      	ldr	r2, [pc, #292]	; (8000b18 <HAL_UART_MspInit+0x154>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6453      	str	r3, [r2, #68]	; 0x44
 80009f8:	4b47      	ldr	r3, [pc, #284]	; (8000b18 <HAL_UART_MspInit+0x154>)
 80009fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <HAL_UART_MspInit+0x154>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	4a42      	ldr	r2, [pc, #264]	; (8000b18 <HAL_UART_MspInit+0x154>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6313      	str	r3, [r2, #48]	; 0x30
 8000a14:	4b40      	ldr	r3, [pc, #256]	; (8000b18 <HAL_UART_MspInit+0x154>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4837      	ldr	r0, [pc, #220]	; (8000b1c <HAL_UART_MspInit+0x158>)
 8000a3e:	f000 fee5 	bl	800180c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000a42:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a44:	4a37      	ldr	r2, [pc, #220]	; (8000b24 <HAL_UART_MspInit+0x160>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a48:	4b35      	ldr	r3, [pc, #212]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a50:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a56:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a62:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a64:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a70:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a82:	4827      	ldr	r0, [pc, #156]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a84:	f000 fac0 	bl	8001008 <HAL_DMA_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000a8e:	f7ff ff6b 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a96:	639a      	str	r2, [r3, #56]	; 0x38
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000aa0:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <HAL_UART_MspInit+0x168>)
 8000aa2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aaa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000aae:	2240      	movs	r2, #64	; 0x40
 8000ab0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000abe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ae0:	f000 fa92 	bl	8001008 <HAL_DMA_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000aea:	f7ff ff3d 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000af2:	635a      	str	r2, [r3, #52]	; 0x34
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2025      	movs	r0, #37	; 0x25
 8000b00:	f000 fa4b 	bl	8000f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b04:	2025      	movs	r0, #37	; 0x25
 8000b06:	f000 fa64 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40011000 	.word	0x40011000
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	200001c0 	.word	0x200001c0
 8000b24:	40026440 	.word	0x40026440
 8000b28:	20000220 	.word	0x20000220
 8000b2c:	400264b8 	.word	0x400264b8

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 f8ee 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <USART1_IRQHandler+0x10>)
 8000b8a:	f002 ffe3 	bl	8003b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000017c 	.word	0x2000017c

08000b98 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <DMA2_Stream2_IRQHandler+0x10>)
 8000b9e:	f000 fbcb 	bl	8001338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001c0 	.word	0x200001c0

08000bac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <OTG_FS_IRQHandler+0x10>)
 8000bb2:	f001 f918 	bl	8001de6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20001984 	.word	0x20001984

08000bc0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <DMA2_Stream7_IRQHandler+0x10>)
 8000bc6:	f000 fbb7 	bl	8001338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000220 	.word	0x20000220

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d207      	bcs.n	8000c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c04:	f008 fada 	bl	80091bc <__errno>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20020000 	.word	0x20020000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	2000048c 	.word	0x2000048c
 8000c3c:	200022d8 	.word	0x200022d8

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f008 fa99 	bl	80091c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fc7d 	bl	8000594 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000ca8:	08009d18 	.word	0x08009d18
  ldr r2, =_sbss
 8000cac:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000cb0:	200022d8 	.word	0x200022d8

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f94f 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fe42 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f967 	bl	8000fee <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f92f 	bl	8000f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000490 	.word	0x20000490

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000490 	.word	0x20000490

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff ffee 	bl	8000d84 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_Delay+0x44>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc2:	bf00      	nop
 8000dc4:	f7ff ffde 	bl	8000d84 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db0b      	blt.n	8000e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f003 021f 	and.w	r2, r3, #31
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <__NVIC_EnableIRQ+0x38>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	2001      	movs	r0, #1
 8000e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f7ff ff8e 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff29 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff3e 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff8e 	bl	8000ed8 <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff31 	bl	8000e48 <__NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa2 	bl	8000f40 <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff feb6 	bl	8000d84 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e099      	b.n	8001158 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2202      	movs	r2, #2
 8001028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0201 	bic.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001044:	e00f      	b.n	8001066 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001046:	f7ff fe9d 	bl	8000d84 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b05      	cmp	r3, #5
 8001052:	d908      	bls.n	8001066 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2220      	movs	r2, #32
 8001058:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e078      	b.n	8001158 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1e8      	bne.n	8001046 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <HAL_DMA_Init+0x158>)
 8001080:	4013      	ands	r3, r2
 8001082:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001092:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d107      	bne.n	80010d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	4313      	orrs	r3, r2
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f023 0307 	bic.w	r3, r3, #7
 80010e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d117      	bne.n	800112a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4313      	orrs	r3, r2
 8001102:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00e      	beq.n	800112a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 fb01 	bl	8001714 <DMA_CheckFifoParam>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d008      	beq.n	800112a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2240      	movs	r2, #64	; 0x40
 800111c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001126:	2301      	movs	r3, #1
 8001128:	e016      	b.n	8001158 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 fab8 	bl	80016a8 <DMA_CalcBaseAndBitshift>
 8001138:	4603      	mov	r3, r0
 800113a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001140:	223f      	movs	r2, #63	; 0x3f
 8001142:	409a      	lsls	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	f010803f 	.word	0xf010803f

08001164 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <HAL_DMA_Start_IT+0x26>
 8001186:	2302      	movs	r3, #2
 8001188:	e040      	b.n	800120c <HAL_DMA_Start_IT+0xa8>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12f      	bne.n	80011fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2202      	movs	r2, #2
 80011a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f000 fa4a 	bl	800164c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011bc:	223f      	movs	r2, #63	; 0x3f
 80011be:	409a      	lsls	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0216 	orr.w	r2, r2, #22
 80011d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0208 	orr.w	r2, r2, #8
 80011ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0201 	orr.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e005      	b.n	800120a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001206:	2302      	movs	r3, #2
 8001208:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800120a:	7dfb      	ldrb	r3, [r7, #23]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001222:	f7ff fdaf 	bl	8000d84 <HAL_GetTick>
 8001226:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d008      	beq.n	8001246 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e052      	b.n	80012ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0216 	bic.w	r2, r2, #22
 8001254:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001264:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	2b00      	cmp	r3, #0
 800126c:	d103      	bne.n	8001276 <HAL_DMA_Abort+0x62>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0208 	bic.w	r2, r2, #8
 8001284:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0201 	bic.w	r2, r2, #1
 8001294:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001296:	e013      	b.n	80012c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001298:	f7ff fd74 	bl	8000d84 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	d90c      	bls.n	80012c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2220      	movs	r2, #32
 80012aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2203      	movs	r2, #3
 80012b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e015      	b.n	80012ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1e4      	bne.n	8001298 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d2:	223f      	movs	r2, #63	; 0x3f
 80012d4:	409a      	lsls	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d004      	beq.n	8001312 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00c      	b.n	800132c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2205      	movs	r2, #5
 8001316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0201 	bic.w	r2, r2, #1
 8001328:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001344:	4b8e      	ldr	r3, [pc, #568]	; (8001580 <HAL_DMA_IRQHandler+0x248>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a8e      	ldr	r2, [pc, #568]	; (8001584 <HAL_DMA_IRQHandler+0x24c>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0a9b      	lsrs	r3, r3, #10
 8001350:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001362:	2208      	movs	r2, #8
 8001364:	409a      	lsls	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d01a      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0204 	bic.w	r2, r2, #4
 800138a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001390:	2208      	movs	r2, #8
 8001392:	409a      	lsls	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139c:	f043 0201 	orr.w	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	2201      	movs	r2, #1
 80013aa:	409a      	lsls	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d012      	beq.n	80013da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	2201      	movs	r2, #1
 80013c8:	409a      	lsls	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d2:	f043 0202 	orr.w	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013de:	2204      	movs	r2, #4
 80013e0:	409a      	lsls	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d012      	beq.n	8001410 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fc:	2204      	movs	r2, #4
 80013fe:	409a      	lsls	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	f043 0204 	orr.w	r2, r3, #4
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001414:	2210      	movs	r2, #16
 8001416:	409a      	lsls	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4013      	ands	r3, r2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d043      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d03c      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001432:	2210      	movs	r2, #16
 8001434:	409a      	lsls	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d018      	beq.n	800147a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d108      	bne.n	8001468 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	2b00      	cmp	r3, #0
 800145c:	d024      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	4798      	blx	r3
 8001466:	e01f      	b.n	80014a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01b      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	4798      	blx	r3
 8001478:	e016      	b.n	80014a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0208 	bic.w	r2, r2, #8
 8001496:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ac:	2220      	movs	r2, #32
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 808f 	beq.w	80015d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 8087 	beq.w	80015d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	2220      	movs	r2, #32
 80014d0:	409a      	lsls	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d136      	bne.n	8001550 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0216 	bic.w	r2, r2, #22
 80014f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001500:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	2b00      	cmp	r3, #0
 8001508:	d103      	bne.n	8001512 <HAL_DMA_IRQHandler+0x1da>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0208 	bic.w	r2, r2, #8
 8001520:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	223f      	movs	r2, #63	; 0x3f
 8001528:	409a      	lsls	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001542:	2b00      	cmp	r3, #0
 8001544:	d07e      	beq.n	8001644 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
        }
        return;
 800154e:	e079      	b.n	8001644 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d01d      	beq.n	800159a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10d      	bne.n	8001588 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	2b00      	cmp	r3, #0
 8001572:	d031      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	4798      	blx	r3
 800157c:	e02c      	b.n	80015d8 <HAL_DMA_IRQHandler+0x2a0>
 800157e:	bf00      	nop
 8001580:	20000000 	.word	0x20000000
 8001584:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158c:	2b00      	cmp	r3, #0
 800158e:	d023      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	4798      	blx	r3
 8001598:	e01e      	b.n	80015d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10f      	bne.n	80015c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0210 	bic.w	r2, r2, #16
 80015b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d032      	beq.n	8001646 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d022      	beq.n	8001632 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2205      	movs	r2, #5
 80015f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0201 	bic.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	3301      	adds	r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	429a      	cmp	r2, r3
 800160e:	d307      	bcc.n	8001620 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f2      	bne.n	8001604 <HAL_DMA_IRQHandler+0x2cc>
 800161e:	e000      	b.n	8001622 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001620:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
 8001642:	e000      	b.n	8001646 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001644:	bf00      	nop
    }
  }
}
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001668:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b40      	cmp	r3, #64	; 0x40
 8001678:	d108      	bne.n	800168c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800168a:	e007      	b.n	800169c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	60da      	str	r2, [r3, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	3b10      	subs	r3, #16
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <DMA_CalcBaseAndBitshift+0x64>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <DMA_CalcBaseAndBitshift+0x68>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d909      	bls.n	80016ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016de:	f023 0303 	bic.w	r3, r3, #3
 80016e2:	1d1a      	adds	r2, r3, #4
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	659a      	str	r2, [r3, #88]	; 0x58
 80016e8:	e007      	b.n	80016fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016f2:	f023 0303 	bic.w	r3, r3, #3
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	aaaaaaab 	.word	0xaaaaaaab
 8001710:	08009bcc 	.word	0x08009bcc

08001714 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d11f      	bne.n	800176e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d856      	bhi.n	80017e2 <DMA_CheckFifoParam+0xce>
 8001734:	a201      	add	r2, pc, #4	; (adr r2, 800173c <DMA_CheckFifoParam+0x28>)
 8001736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173a:	bf00      	nop
 800173c:	0800174d 	.word	0x0800174d
 8001740:	0800175f 	.word	0x0800175f
 8001744:	0800174d 	.word	0x0800174d
 8001748:	080017e3 	.word	0x080017e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d046      	beq.n	80017e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800175c:	e043      	b.n	80017e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001766:	d140      	bne.n	80017ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800176c:	e03d      	b.n	80017ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001776:	d121      	bne.n	80017bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d837      	bhi.n	80017ee <DMA_CheckFifoParam+0xda>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <DMA_CheckFifoParam+0x70>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001795 	.word	0x08001795
 8001788:	0800179b 	.word	0x0800179b
 800178c:	08001795 	.word	0x08001795
 8001790:	080017ad 	.word	0x080017ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
      break;
 8001798:	e030      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d025      	beq.n	80017f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017aa:	e022      	b.n	80017f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017b4:	d11f      	bne.n	80017f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017ba:	e01c      	b.n	80017f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d903      	bls.n	80017ca <DMA_CheckFifoParam+0xb6>
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d003      	beq.n	80017d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017c8:	e018      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
      break;
 80017ce:	e015      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00e      	beq.n	80017fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
      break;
 80017e0:	e00b      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017e2:	bf00      	nop
 80017e4:	e00a      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;
 80017e6:	bf00      	nop
 80017e8:	e008      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;
 80017ea:	bf00      	nop
 80017ec:	e006      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;
 80017ee:	bf00      	nop
 80017f0:	e004      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;
 80017f2:	bf00      	nop
 80017f4:	e002      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;   
 80017f6:	bf00      	nop
 80017f8:	e000      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;
 80017fa:	bf00      	nop
    }
  } 
  
  return status; 
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e159      	b.n	8001adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001828:	2201      	movs	r2, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	429a      	cmp	r2, r3
 8001842:	f040 8148 	bne.w	8001ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b01      	cmp	r3, #1
 8001850:	d005      	beq.n	800185e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185a:	2b02      	cmp	r3, #2
 800185c:	d130      	bne.n	80018c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d017      	beq.n	80018fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d123      	bne.n	8001950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3208      	adds	r2, #8
 800194a:	69b9      	ldr	r1, [r7, #24]
 800194c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a2 	beq.w	8001ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <HAL_GPIO_Init+0x2e8>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a56      	ldr	r2, [pc, #344]	; (8001af4 <HAL_GPIO_Init+0x2e8>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b54      	ldr	r3, [pc, #336]	; (8001af4 <HAL_GPIO_Init+0x2e8>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ae:	4a52      	ldr	r2, [pc, #328]	; (8001af8 <HAL_GPIO_Init+0x2ec>)
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a49      	ldr	r2, [pc, #292]	; (8001afc <HAL_GPIO_Init+0x2f0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d019      	beq.n	8001a0e <HAL_GPIO_Init+0x202>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a48      	ldr	r2, [pc, #288]	; (8001b00 <HAL_GPIO_Init+0x2f4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0x1fe>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a47      	ldr	r2, [pc, #284]	; (8001b04 <HAL_GPIO_Init+0x2f8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00d      	beq.n	8001a06 <HAL_GPIO_Init+0x1fa>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <HAL_GPIO_Init+0x2fc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d007      	beq.n	8001a02 <HAL_GPIO_Init+0x1f6>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a45      	ldr	r2, [pc, #276]	; (8001b0c <HAL_GPIO_Init+0x300>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d101      	bne.n	80019fe <HAL_GPIO_Init+0x1f2>
 80019fa:	2304      	movs	r3, #4
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 80019fe:	2307      	movs	r3, #7
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x204>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	; (8001af8 <HAL_GPIO_Init+0x2ec>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_GPIO_Init+0x304>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a2f      	ldr	r2, [pc, #188]	; (8001b10 <HAL_GPIO_Init+0x304>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_GPIO_Init+0x304>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <HAL_GPIO_Init+0x304>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <HAL_GPIO_Init+0x304>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <HAL_GPIO_Init+0x304>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_GPIO_Init+0x304>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_GPIO_Init+0x304>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f aea2 	bls.w	8001828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40013c00 	.word	0x40013c00

08001b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
 8001b20:	4613      	mov	r3, r2
 8001b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b30:	e003      	b.n	8001b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	041a      	lsls	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	619a      	str	r2, [r3, #24]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b48:	b08f      	sub	sp, #60	; 0x3c
 8001b4a:	af0a      	add	r7, sp, #40	; 0x28
 8001b4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e10f      	b.n	8001d78 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f006 ff00 	bl	8008978 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 f9d9 	bl	8004f4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	687e      	ldr	r6, [r7, #4]
 8001ba4:	466d      	mov	r5, sp
 8001ba6:	f106 0410 	add.w	r4, r6, #16
 8001baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bba:	1d33      	adds	r3, r6, #4
 8001bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bbe:	6838      	ldr	r0, [r7, #0]
 8001bc0:	f003 f8b0 	bl	8004d24 <USB_CoreInit>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0d0      	b.n	8001d78 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 f9c7 	bl	8004f70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e04a      	b.n	8001c7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	333d      	adds	r3, #61	; 0x3d
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	333c      	adds	r3, #60	; 0x3c
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	b298      	uxth	r0, r3
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	3344      	adds	r3, #68	; 0x44
 8001c24:	4602      	mov	r2, r0
 8001c26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	3340      	adds	r3, #64	; 0x40
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3348      	adds	r3, #72	; 0x48
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	334c      	adds	r3, #76	; 0x4c
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	3354      	adds	r3, #84	; 0x54
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d3af      	bcc.n	8001be8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e044      	b.n	8001d18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ce6:	7bfa      	ldrb	r2, [r7, #15]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	3301      	adds	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d3b5      	bcc.n	8001c8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	687e      	ldr	r6, [r7, #4]
 8001d2a:	466d      	mov	r5, sp
 8001d2c:	f106 0410 	add.w	r4, r6, #16
 8001d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d40:	1d33      	adds	r3, r6, #4
 8001d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d44:	6838      	ldr	r0, [r7, #0]
 8001d46:	f003 f95f 	bl	8005008 <USB_DevInit>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e00d      	b.n	8001d78 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 faae 	bl	80062d2 <USB_DevDisconnect>

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_PCD_Start+0x1c>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e020      	b.n	8001dde <HAL_PCD_Start+0x5e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d109      	bne.n	8001dc0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d005      	beq.n	8001dc0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 f8b1 	bl	8004f2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 fa5e 	bl	8006290 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001de6:	b590      	push	{r4, r7, lr}
 8001de8:	b08d      	sub	sp, #52	; 0x34
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 fb1c 	bl	800643a <USB_GetMode>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 848a 	bne.w	800271e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 fa80 	bl	8006314 <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8480 	beq.w	800271c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f004 fa6d 	bl	8006314 <USB_ReadInterrupts>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d107      	bne.n	8001e54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f002 0202 	and.w	r2, r2, #2
 8001e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 fa5b 	bl	8006314 <USB_ReadInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d161      	bne.n	8001f2c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0210 	bic.w	r2, r2, #16
 8001e76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	3304      	adds	r3, #4
 8001e96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	0c5b      	lsrs	r3, r3, #17
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d124      	bne.n	8001eee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d035      	beq.n	8001f1c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	6a38      	ldr	r0, [r7, #32]
 8001ec4:	f004 f892 	bl	8005fec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ed4:	441a      	add	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	6a1a      	ldr	r2, [r3, #32]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ee6:	441a      	add	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	621a      	str	r2, [r3, #32]
 8001eec:	e016      	b.n	8001f1c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	0c5b      	lsrs	r3, r3, #17
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d110      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f00:	2208      	movs	r2, #8
 8001f02:	4619      	mov	r1, r3
 8001f04:	6a38      	ldr	r0, [r7, #32]
 8001f06:	f004 f871 	bl	8005fec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	6a1a      	ldr	r2, [r3, #32]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f16:	441a      	add	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0210 	orr.w	r2, r2, #16
 8001f2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 f9ef 	bl	8006314 <USB_ReadInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f40:	f040 80a7 	bne.w	8002092 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f004 f9f4 	bl	800633a <USB_ReadDevAllOutEpInterrupt>
 8001f52:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f54:	e099      	b.n	800208a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 808e 	beq.w	800207e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 fa18 	bl	80063a2 <USB_ReadDevOutEPInterrupt>
 8001f72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00c      	beq.n	8001f98 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fec2 	bl	8002d1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00c      	beq.n	8001fbc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 ff98 	bl	8002eec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d030      	beq.n	8002044 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	2b80      	cmp	r3, #128	; 0x80
 8001fec:	d109      	bne.n	8002002 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002000:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	3304      	adds	r3, #4
 8002016:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	78db      	ldrb	r3, [r3, #3]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d108      	bne.n	8002032 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2200      	movs	r2, #0
 8002024:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4619      	mov	r1, r3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f006 fd9f 	bl	8008b70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203e:	461a      	mov	r2, r3
 8002040:	2302      	movs	r3, #2
 8002042:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205a:	461a      	mov	r2, r3
 800205c:	2320      	movs	r3, #32
 800205e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	4413      	add	r3, r2
 8002072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002076:	461a      	mov	r2, r3
 8002078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800207c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	3301      	adds	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	f47f af62 	bne.w	8001f56 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 f93c 	bl	8006314 <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020a6:	f040 80db 	bne.w	8002260 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 f95d 	bl	800636e <USB_ReadDevAllInEpInterrupt>
 80020b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020ba:	e0cd      	b.n	8002258 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80c2 	beq.w	800224c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 f983 	bl	80063de <USB_ReadDevInEPInterrupt>
 80020d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d057      	beq.n	8002194 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	2201      	movs	r2, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69f9      	ldr	r1, [r7, #28]
 8002100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002104:	4013      	ands	r3, r2
 8002106:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002114:	461a      	mov	r2, r3
 8002116:	2301      	movs	r3, #1
 8002118:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d132      	bne.n	8002188 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	334c      	adds	r3, #76	; 0x4c
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4403      	add	r3, r0
 8002142:	3348      	adds	r3, #72	; 0x48
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4419      	add	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4403      	add	r3, r0
 8002156:	334c      	adds	r3, #76	; 0x4c
 8002158:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	2b00      	cmp	r3, #0
 800215e:	d113      	bne.n	8002188 <HAL_PCD_IRQHandler+0x3a2>
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3354      	adds	r3, #84	; 0x54
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002180:	461a      	mov	r2, r3
 8002182:	2101      	movs	r1, #1
 8002184:	f004 f98a 	bl	800649c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f006 fc73 	bl	8008a7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021aa:	461a      	mov	r2, r3
 80021ac:	2308      	movs	r3, #8
 80021ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021c6:	461a      	mov	r2, r3
 80021c8:	2310      	movs	r3, #16
 80021ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e2:	461a      	mov	r2, r3
 80021e4:	2340      	movs	r3, #64	; 0x40
 80021e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d023      	beq.n	800223a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f4:	6a38      	ldr	r0, [r7, #32]
 80021f6:	f003 f86b 	bl	80052d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3338      	adds	r3, #56	; 0x38
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	3304      	adds	r3, #4
 800220c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	78db      	ldrb	r3, [r3, #3]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d108      	bne.n	8002228 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2200      	movs	r2, #0
 800221a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f006 fcb6 	bl	8008b94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002234:	461a      	mov	r2, r3
 8002236:	2302      	movs	r3, #2
 8002238:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fcdb 	bl	8002c02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	3301      	adds	r3, #1
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	2b00      	cmp	r3, #0
 800225c:	f47f af2e 	bne.w	80020bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f004 f855 	bl	8006314 <USB_ReadInterrupts>
 800226a:	4603      	mov	r3, r0
 800226c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002274:	d122      	bne.n	80022bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002290:	2b01      	cmp	r3, #1
 8002292:	d108      	bne.n	80022a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800229c:	2100      	movs	r1, #0
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fec2 	bl	8003028 <HAL_PCDEx_LPM_Callback>
 80022a4:	e002      	b.n	80022ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f006 fc54 	bl	8008b54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 f827 	bl	8006314 <USB_ReadInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d0:	d112      	bne.n	80022f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d102      	bne.n	80022e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f006 fc10 	bl	8008b08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022f6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f004 f809 	bl	8006314 <USB_ReadInterrupts>
 8002302:	4603      	mov	r3, r0
 8002304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230c:	f040 80b7 	bne.w	800247e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2110      	movs	r1, #16
 800232a:	4618      	mov	r0, r3
 800232c:	f002 ffd0 	bl	80052d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002334:	e046      	b.n	80023c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002342:	461a      	mov	r2, r3
 8002344:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002348:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800235a:	0151      	lsls	r1, r2, #5
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	440a      	add	r2, r1
 8002360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002364:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002368:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	461a      	mov	r2, r3
 8002378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800237c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800238e:	0151      	lsls	r1, r2, #5
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	440a      	add	r2, r1
 8002394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002398:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800239c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ae:	0151      	lsls	r1, r2, #5
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	440a      	add	r2, r1
 80023b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	3301      	adds	r3, #1
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d3b3      	bcc.n	8002336 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023fa:	f043 030b 	orr.w	r3, r3, #11
 80023fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002410:	f043 030b 	orr.w	r3, r3, #11
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	e015      	b.n	8002444 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002426:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800242a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800242e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800243e:	f043 030b 	orr.w	r3, r3, #11
 8002442:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002452:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002456:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002468:	461a      	mov	r2, r3
 800246a:	f004 f817 	bl	800649c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800247c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f003 ff46 	bl	8006314 <USB_ReadInterrupts>
 8002488:	4603      	mov	r3, r0
 800248a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002492:	d124      	bne.n	80024de <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f003 ffdc 	bl	8006456 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 ff91 	bl	80053ca <USB_GetDevSpeed>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681c      	ldr	r4, [r3, #0]
 80024b4:	f001 f9e8 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80024b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	4620      	mov	r0, r4
 80024c4:	f002 fc90 	bl	8004de8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f006 fafe 	bl	8008aca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 ff16 	bl	8006314 <USB_ReadInterrupts>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d10a      	bne.n	8002508 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f006 fadb 	bl	8008aae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f002 0208 	and.w	r2, r2, #8
 8002506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f003 ff01 	bl	8006314 <USB_ReadInterrupts>
 8002512:	4603      	mov	r3, r0
 8002514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	d122      	bne.n	8002562 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002528:	2301      	movs	r3, #1
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
 800252c:	e014      	b.n	8002558 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d105      	bne.n	8002552 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	b2db      	uxtb	r3, r3
 800254a:	4619      	mov	r1, r3
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fb27 	bl	8002ba0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	3301      	adds	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	429a      	cmp	r2, r3
 8002560:	d3e5      	bcc.n	800252e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fed4 	bl	8006314 <USB_ReadInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002576:	d13b      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002578:	2301      	movs	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	e02b      	b.n	80025d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	3340      	adds	r3, #64	; 0x40
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d115      	bne.n	80025d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80025a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	da12      	bge.n	80025d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	333f      	adds	r3, #63	; 0x3f
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fae8 	bl	8002ba0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	3301      	adds	r3, #1
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025dc:	429a      	cmp	r2, r3
 80025de:	d3ce      	bcc.n	800257e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fe8d 	bl	8006314 <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002600:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002604:	d155      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002606:	2301      	movs	r3, #1
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
 800260a:	e045      	b.n	8002698 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d12e      	bne.n	8002692 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002634:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002636:	2b00      	cmp	r3, #0
 8002638:	da2b      	bge.n	8002692 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002646:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800264a:	429a      	cmp	r2, r3
 800264c:	d121      	bne.n	8002692 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800268a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268e:	6053      	str	r3, [r2, #4]
            break;
 8002690:	e007      	b.n	80026a2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	3301      	adds	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269e:	429a      	cmp	r2, r3
 80026a0:	d3b4      	bcc.n	800260c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80026b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fe2c 	bl	8006314 <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c6:	d10a      	bne.n	80026de <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f006 fa75 	bl	8008bb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fe16 	bl	8006314 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d115      	bne.n	800271e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f006 fa65 	bl	8008bd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	e000      	b.n	800271e <HAL_PCD_IRQHandler+0x938>
      return;
 800271c:	bf00      	nop
    }
  }
}
 800271e:	3734      	adds	r7, #52	; 0x34
 8002720:	46bd      	mov	sp, r7
 8002722:	bd90      	pop	{r4, r7, pc}

08002724 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_PCD_SetAddress+0x1a>
 800273a:	2302      	movs	r3, #2
 800273c:	e013      	b.n	8002766 <HAL_PCD_SetAddress+0x42>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fd74 	bl	8006244 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	4608      	mov	r0, r1
 8002778:	4611      	mov	r1, r2
 800277a:	461a      	mov	r2, r3
 800277c:	4603      	mov	r3, r0
 800277e:	70fb      	strb	r3, [r7, #3]
 8002780:	460b      	mov	r3, r1
 8002782:	803b      	strh	r3, [r7, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800278c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002790:	2b00      	cmp	r3, #0
 8002792:	da0f      	bge.n	80027b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 020f 	and.w	r2, r3, #15
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	3338      	adds	r3, #56	; 0x38
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	705a      	strb	r2, [r3, #1]
 80027b2:	e00f      	b.n	80027d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	3304      	adds	r3, #4
 80027cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027e0:	883a      	ldrh	r2, [r7, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	78ba      	ldrb	r2, [r7, #2]
 80027ea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027fe:	78bb      	ldrb	r3, [r7, #2]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d102      	bne.n	800280a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_PCD_EP_Open+0xaa>
 8002814:	2302      	movs	r3, #2
 8002816:	e00e      	b.n	8002836 <HAL_PCD_EP_Open+0xc8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68f9      	ldr	r1, [r7, #12]
 8002826:	4618      	mov	r0, r3
 8002828:	f002 fdf4 	bl	8005414 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002834:	7afb      	ldrb	r3, [r7, #11]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800284a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800284e:	2b00      	cmp	r3, #0
 8002850:	da0f      	bge.n	8002872 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	3338      	adds	r3, #56	; 0x38
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	3304      	adds	r3, #4
 8002868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	705a      	strb	r2, [r3, #1]
 8002870:	e00f      	b.n	8002892 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f003 020f 	and.w	r2, r3, #15
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4413      	add	r3, r2
 8002888:	3304      	adds	r3, #4
 800288a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_PCD_EP_Close+0x6e>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e00e      	b.n	80028ca <HAL_PCD_EP_Close+0x8c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68f9      	ldr	r1, [r7, #12]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f002 fe32 	bl	8005524 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	460b      	mov	r3, r1
 80028e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	3304      	adds	r3, #4
 80028fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	b2da      	uxtb	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d102      	bne.n	800292e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800292e:	7afb      	ldrb	r3, [r7, #11]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	6979      	ldr	r1, [r7, #20]
 8002946:	f003 f911 	bl	8005b6c <USB_EP0StartXfer>
 800294a:	e008      	b.n	800295e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	6979      	ldr	r1, [r7, #20]
 800295a:	f002 febf 	bl	80056dc <USB_EPStartXfer>
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	460b      	mov	r3, r1
 80029a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a8:	7afb      	ldrb	r3, [r7, #11]
 80029aa:	f003 020f 	and.w	r2, r3, #15
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3338      	adds	r3, #56	; 0x38
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	3304      	adds	r3, #4
 80029be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2200      	movs	r2, #0
 80029d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2201      	movs	r2, #1
 80029d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d102      	bne.n	80029f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029f2:	7afb      	ldrb	r3, [r7, #11]
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	6979      	ldr	r1, [r7, #20]
 8002a0a:	f003 f8af 	bl	8005b6c <USB_EP0StartXfer>
 8002a0e:	e008      	b.n	8002a22 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6979      	ldr	r1, [r7, #20]
 8002a1e:	f002 fe5d 	bl	80056dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	f003 020f 	and.w	r2, r3, #15
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d901      	bls.n	8002a4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e050      	b.n	8002aec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	da0f      	bge.n	8002a72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	f003 020f 	and.w	r2, r3, #15
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	3338      	adds	r3, #56	; 0x38
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	705a      	strb	r2, [r3, #1]
 8002a70:	e00d      	b.n	8002a8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	3304      	adds	r3, #4
 8002a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_PCD_EP_SetStall+0x82>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e01e      	b.n	8002aec <HAL_PCD_EP_SetStall+0xc0>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 faed 	bl	800609c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	b2d9      	uxtb	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002adc:	461a      	mov	r2, r3
 8002ade:	f003 fcdd 	bl	800649c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	f003 020f 	and.w	r2, r3, #15
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d901      	bls.n	8002b12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e042      	b.n	8002b98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	da0f      	bge.n	8002b3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	f003 020f 	and.w	r2, r3, #15
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	3338      	adds	r3, #56	; 0x38
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3304      	adds	r3, #4
 8002b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	705a      	strb	r2, [r3, #1]
 8002b38:	e00f      	b.n	8002b5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	f003 020f 	and.w	r2, r3, #15
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_PCD_EP_ClrStall+0x86>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e00e      	b.n	8002b98 <HAL_PCD_EP_ClrStall+0xa4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 faf5 	bl	8006178 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	da0c      	bge.n	8002bce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3338      	adds	r3, #56	; 0x38
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e00c      	b.n	8002be8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4413      	add	r3, r2
 8002be4:	3304      	adds	r3, #4
 8002be6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 f914 	bl	8005e1c <USB_EPStopXfer>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08a      	sub	sp, #40	; 0x28
 8002c06:	af02      	add	r7, sp, #8
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	3338      	adds	r3, #56	; 0x38
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d901      	bls.n	8002c3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06c      	b.n	8002d14 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d902      	bls.n	8002c56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3303      	adds	r3, #3
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c5e:	e02b      	b.n	8002cb8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d902      	bls.n	8002c7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	3303      	adds	r3, #3
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6919      	ldr	r1, [r3, #16]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	4603      	mov	r3, r0
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f003 f968 	bl	8005f70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	441a      	add	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	441a      	add	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d809      	bhi.n	8002ce2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d203      	bcs.n	8002ce2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1be      	bne.n	8002c60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d811      	bhi.n	8002d12 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	6939      	ldr	r1, [r7, #16]
 8002d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d0e:	4013      	ands	r3, r2
 8002d10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	333c      	adds	r3, #60	; 0x3c
 8002d34:	3304      	adds	r3, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d17b      	bne.n	8002e4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d015      	beq.n	8002d88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	4a61      	ldr	r2, [pc, #388]	; (8002ee4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	f240 80b9 	bls.w	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80b3 	beq.w	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d84:	6093      	str	r3, [r2, #8]
 8002d86:	e0a7      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2320      	movs	r3, #32
 8002da2:	6093      	str	r3, [r2, #8]
 8002da4:	e098      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f040 8093 	bne.w	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4a4b      	ldr	r2, [pc, #300]	; (8002ee4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d90f      	bls.n	8002dda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dd6:	6093      	str	r3, [r2, #8]
 8002dd8:	e07e      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	3304      	adds	r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	1ad2      	subs	r2, r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d114      	bne.n	8002e3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e24:	461a      	mov	r2, r3
 8002e26:	2101      	movs	r1, #1
 8002e28:	f003 fb38 	bl	800649c <USB_EP0_OutStart>
 8002e2c:	e006      	b.n	8002e3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	441a      	add	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4619      	mov	r1, r3
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f005 fdfe 	bl	8008a44 <HAL_PCD_DataOutStageCallback>
 8002e48:	e046      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	4a26      	ldr	r2, [pc, #152]	; (8002ee8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d124      	bne.n	8002e9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e6e:	6093      	str	r3, [r2, #8]
 8002e70:	e032      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f005 fdd5 	bl	8008a44 <HAL_PCD_DataOutStageCallback>
 8002e9a:	e01d      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d114      	bne.n	8002ecc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d108      	bne.n	8002ecc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	f003 fae8 	bl	800649c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f005 fdb6 	bl	8008a44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	4f54300a 	.word	0x4f54300a
 8002ee8:	4f54310a 	.word	0x4f54310a

08002eec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	333c      	adds	r3, #60	; 0x3c
 8002f04:	3304      	adds	r3, #4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d90e      	bls.n	8002f40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f005 fd6d 	bl	8008a20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d90c      	bls.n	8002f68 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d108      	bne.n	8002f68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f60:	461a      	mov	r2, r3
 8002f62:	2101      	movs	r1, #1
 8002f64:	f003 fa9a 	bl	800649c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	4f54300a 	.word	0x4f54300a

08002f78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
 8002f84:	4613      	mov	r3, r2
 8002f86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f96:	883b      	ldrh	r3, [r7, #0]
 8002f98:	0419      	lsls	r1, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa4:	e028      	b.n	8002ff8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	e00d      	b.n	8002fd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	3340      	adds	r3, #64	; 0x40
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	4413      	add	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d3ec      	bcc.n	8002fba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fe0:	883b      	ldrh	r3, [r7, #0]
 8002fe2:	0418      	lsls	r0, r3, #16
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	4302      	orrs	r2, r0
 8002ff0:	3340      	adds	r3, #64	; 0x40
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	887a      	ldrh	r2, [r7, #2]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e267      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d075      	beq.n	800314a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800305e:	4b88      	ldr	r3, [pc, #544]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b04      	cmp	r3, #4
 8003068:	d00c      	beq.n	8003084 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306a:	4b85      	ldr	r3, [pc, #532]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003072:	2b08      	cmp	r3, #8
 8003074:	d112      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003076:	4b82      	ldr	r3, [pc, #520]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003082:	d10b      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	4b7e      	ldr	r3, [pc, #504]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05b      	beq.n	8003148 <HAL_RCC_OscConfig+0x108>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d157      	bne.n	8003148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e242      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a4:	d106      	bne.n	80030b4 <HAL_RCC_OscConfig+0x74>
 80030a6:	4b76      	ldr	r3, [pc, #472]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a75      	ldr	r2, [pc, #468]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e01d      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x98>
 80030be:	4b70      	ldr	r3, [pc, #448]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6f      	ldr	r2, [pc, #444]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b6d      	ldr	r3, [pc, #436]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a6c      	ldr	r2, [pc, #432]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030d8:	4b69      	ldr	r3, [pc, #420]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a68      	ldr	r2, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b66      	ldr	r3, [pc, #408]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a65      	ldr	r2, [pc, #404]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fd fe44 	bl	8000d84 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003100:	f7fd fe40 	bl	8000d84 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e207      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0xc0>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fd fe30 	bl	8000d84 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003128:	f7fd fe2c 	bl	8000d84 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e1f3      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	4b51      	ldr	r3, [pc, #324]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0xe8>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d063      	beq.n	800321e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003156:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800316a:	2b08      	cmp	r3, #8
 800316c:	d11c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b44      	ldr	r3, [pc, #272]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d116      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d001      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e1c7      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4937      	ldr	r1, [pc, #220]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	e03a      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <HAL_RCC_OscConfig+0x244>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fd fde5 	bl	8000d84 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031be:	f7fd fde1 	bl	8000d84 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1a8      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4925      	ldr	r1, [pc, #148]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_OscConfig+0x244>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fd fdc4 	bl	8000d84 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003200:	f7fd fdc0 	bl	8000d84 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e187      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d036      	beq.n	8003298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <HAL_RCC_OscConfig+0x248>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fd fda4 	bl	8000d84 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003240:	f7fd fda0 	bl	8000d84 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e167      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x200>
 800325e:	e01b      	b.n	8003298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_OscConfig+0x248>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fd fd8d 	bl	8000d84 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	e00e      	b.n	800328c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326e:	f7fd fd89 	bl	8000d84 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d907      	bls.n	800328c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e150      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
 8003280:	40023800 	.word	0x40023800
 8003284:	42470000 	.word	0x42470000
 8003288:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b88      	ldr	r3, [pc, #544]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ea      	bne.n	800326e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8097 	beq.w	80033d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b81      	ldr	r3, [pc, #516]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4b7d      	ldr	r3, [pc, #500]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4a7c      	ldr	r2, [pc, #496]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b7a      	ldr	r3, [pc, #488]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b77      	ldr	r3, [pc, #476]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d118      	bne.n	8003314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e2:	4b74      	ldr	r3, [pc, #464]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a73      	ldr	r2, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ee:	f7fd fd49 	bl	8000d84 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f6:	f7fd fd45 	bl	8000d84 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e10c      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x2ea>
 800331c:	4b64      	ldr	r3, [pc, #400]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	4a63      	ldr	r2, [pc, #396]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	; 0x70
 8003328:	e01c      	b.n	8003364 <HAL_RCC_OscConfig+0x324>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x30c>
 8003332:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a5e      	ldr	r2, [pc, #376]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
 800333e:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a5b      	ldr	r2, [pc, #364]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0x324>
 800334c:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a57      	ldr	r2, [pc, #348]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	4b55      	ldr	r3, [pc, #340]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a54      	ldr	r2, [pc, #336]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d015      	beq.n	8003398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fd fd0a 	bl	8000d84 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	e00a      	b.n	800338a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	f7fd fd06 	bl	8000d84 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0cb      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	4b49      	ldr	r3, [pc, #292]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ee      	beq.n	8003374 <HAL_RCC_OscConfig+0x334>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003398:	f7fd fcf4 	bl	8000d84 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fd fcf0 	bl	8000d84 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0b5      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b6:	4b3e      	ldr	r3, [pc, #248]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ee      	bne.n	80033a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4b39      	ldr	r3, [pc, #228]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	4a38      	ldr	r2, [pc, #224]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80a1 	beq.w	8003520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033de:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d05c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d141      	bne.n	8003476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b31      	ldr	r3, [pc, #196]	; (80034b8 <HAL_RCC_OscConfig+0x478>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fd fcc4 	bl	8000d84 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7fd fcc0 	bl	8000d84 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e087      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	491b      	ldr	r1, [pc, #108]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_RCC_OscConfig+0x478>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fd fc99 	bl	8000d84 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003456:	f7fd fc95 	bl	8000d84 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e05c      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x416>
 8003474:	e054      	b.n	8003520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_RCC_OscConfig+0x478>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd fc82 	bl	8000d84 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003484:	f7fd fc7e 	bl	8000d84 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e045      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x444>
 80034a2:	e03d      	b.n	8003520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e038      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40007000 	.word	0x40007000
 80034b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x4ec>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d028      	beq.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d121      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d11a      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d111      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	3b01      	subs	r3, #1
 8003506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0cc      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b68      	ldr	r3, [pc, #416]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d90c      	bls.n	800356c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b63      	ldr	r3, [pc, #396]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0b8      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003584:	4b59      	ldr	r3, [pc, #356]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a58      	ldr	r2, [pc, #352]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800358e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800359c:	4b53      	ldr	r3, [pc, #332]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a52      	ldr	r2, [pc, #328]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	494d      	ldr	r1, [pc, #308]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d044      	beq.n	8003650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d119      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e07f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b3f      	ldr	r3, [pc, #252]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e067      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b37      	ldr	r3, [pc, #220]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4934      	ldr	r1, [pc, #208]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	4313      	orrs	r3, r2
 800361e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fd fbb0 	bl	8000d84 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fd fbac 	bl	8000d84 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e04f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d20c      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e032      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4916      	ldr	r1, [pc, #88]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	490e      	ldr	r1, [pc, #56]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036b6:	f000 f821 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80036ba:	4602      	mov	r2, r0
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	490a      	ldr	r1, [pc, #40]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	5ccb      	ldrb	r3, [r1, r3]
 80036ca:	fa22 f303 	lsr.w	r3, r2, r3
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd fb10 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023c00 	.word	0x40023c00
 80036ec:	40023800 	.word	0x40023800
 80036f0:	08009bb4 	.word	0x08009bb4
 80036f4:	20000000 	.word	0x20000000
 80036f8:	20000004 	.word	0x20000004

080036fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003700:	b090      	sub	sp, #64	; 0x40
 8003702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
 8003708:	2300      	movs	r3, #0
 800370a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370c:	2300      	movs	r3, #0
 800370e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003714:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b08      	cmp	r3, #8
 800371e:	d00d      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x40>
 8003720:	2b08      	cmp	r3, #8
 8003722:	f200 80a1 	bhi.w	8003868 <HAL_RCC_GetSysClockFreq+0x16c>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x34>
 800372a:	2b04      	cmp	r3, #4
 800372c:	d003      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0x3a>
 800372e:	e09b      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4b53      	ldr	r3, [pc, #332]	; (8003880 <HAL_RCC_GetSysClockFreq+0x184>)
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003734:	e09b      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003736:	4b53      	ldr	r3, [pc, #332]	; (8003884 <HAL_RCC_GetSysClockFreq+0x188>)
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800373a:	e098      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800373c:	4b4f      	ldr	r3, [pc, #316]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003746:	4b4d      	ldr	r3, [pc, #308]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d028      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b4a      	ldr	r3, [pc, #296]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	2200      	movs	r2, #0
 800375a:	623b      	str	r3, [r7, #32]
 800375c:	627a      	str	r2, [r7, #36]	; 0x24
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003764:	2100      	movs	r1, #0
 8003766:	4b47      	ldr	r3, [pc, #284]	; (8003884 <HAL_RCC_GetSysClockFreq+0x188>)
 8003768:	fb03 f201 	mul.w	r2, r3, r1
 800376c:	2300      	movs	r3, #0
 800376e:	fb00 f303 	mul.w	r3, r0, r3
 8003772:	4413      	add	r3, r2
 8003774:	4a43      	ldr	r2, [pc, #268]	; (8003884 <HAL_RCC_GetSysClockFreq+0x188>)
 8003776:	fba0 1202 	umull	r1, r2, r0, r2
 800377a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800377c:	460a      	mov	r2, r1
 800377e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003782:	4413      	add	r3, r2
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	2200      	movs	r2, #0
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	61fa      	str	r2, [r7, #28]
 800378e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003792:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003796:	f7fc fd7b 	bl	8000290 <__aeabi_uldivmod>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4613      	mov	r3, r2
 80037a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a2:	e053      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a4:	4b35      	ldr	r3, [pc, #212]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	2200      	movs	r2, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	617a      	str	r2, [r7, #20]
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037b6:	f04f 0b00 	mov.w	fp, #0
 80037ba:	4652      	mov	r2, sl
 80037bc:	465b      	mov	r3, fp
 80037be:	f04f 0000 	mov.w	r0, #0
 80037c2:	f04f 0100 	mov.w	r1, #0
 80037c6:	0159      	lsls	r1, r3, #5
 80037c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037cc:	0150      	lsls	r0, r2, #5
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	ebb2 080a 	subs.w	r8, r2, sl
 80037d6:	eb63 090b 	sbc.w	r9, r3, fp
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037ee:	ebb2 0408 	subs.w	r4, r2, r8
 80037f2:	eb63 0509 	sbc.w	r5, r3, r9
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	00eb      	lsls	r3, r5, #3
 8003800:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003804:	00e2      	lsls	r2, r4, #3
 8003806:	4614      	mov	r4, r2
 8003808:	461d      	mov	r5, r3
 800380a:	eb14 030a 	adds.w	r3, r4, sl
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	eb45 030b 	adc.w	r3, r5, fp
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003822:	4629      	mov	r1, r5
 8003824:	028b      	lsls	r3, r1, #10
 8003826:	4621      	mov	r1, r4
 8003828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800382c:	4621      	mov	r1, r4
 800382e:	028a      	lsls	r2, r1, #10
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003836:	2200      	movs	r2, #0
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	60fa      	str	r2, [r7, #12]
 800383c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003840:	f7fc fd26 	bl	8000290 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4613      	mov	r3, r2
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	3301      	adds	r3, #1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800385c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003866:	e002      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_RCC_GetSysClockFreq+0x184>)
 800386a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800386c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003870:	4618      	mov	r0, r3
 8003872:	3740      	adds	r7, #64	; 0x40
 8003874:	46bd      	mov	sp, r7
 8003876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800
 8003880:	00f42400 	.word	0x00f42400
 8003884:	017d7840 	.word	0x017d7840

08003888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_RCC_GetHCLKFreq+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000000 	.word	0x20000000

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038a4:	f7ff fff0 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0a9b      	lsrs	r3, r3, #10
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	08009bc4 	.word	0x08009bc4

080038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038cc:	f7ff ffdc 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0b5b      	lsrs	r3, r3, #13
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	08009bc4 	.word	0x08009bc4

080038f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e03f      	b.n	8003982 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd f854 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	; 0x24
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003932:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 ff81 	bl	800483c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003948:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003958:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003968:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08c      	sub	sp, #48	; 0x30
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d165      	bne.n	8003a72 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_UART_Transmit_DMA+0x26>
 80039ac:	88fb      	ldrh	r3, [r7, #6]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e05e      	b.n	8003a74 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_UART_Transmit_DMA+0x38>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e057      	b.n	8003a74 <HAL_UART_Transmit_DMA+0xe8>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	88fa      	ldrh	r2, [r7, #6]
 80039d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	88fa      	ldrh	r2, [r7, #6]
 80039dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2221      	movs	r2, #33	; 0x21
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f0:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <HAL_UART_Transmit_DMA+0xf0>)
 80039f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	4a21      	ldr	r2, [pc, #132]	; (8003a80 <HAL_UART_Transmit_DMA+0xf4>)
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	4a20      	ldr	r2, [pc, #128]	; (8003a84 <HAL_UART_Transmit_DMA+0xf8>)
 8003a02:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a08:	2200      	movs	r2, #0
 8003a0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003a0c:	f107 0308 	add.w	r3, r7, #8
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	6819      	ldr	r1, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	461a      	mov	r2, r3
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	f7fd fb9e 	bl	8001164 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a30:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3314      	adds	r3, #20
 8003a40:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	617b      	str	r3, [r7, #20]
   return(result);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3314      	adds	r3, #20
 8003a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5a:	627a      	str	r2, [r7, #36]	; 0x24
 8003a5c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6a39      	ldr	r1, [r7, #32]
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e5      	bne.n	8003a3a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003a72:	2302      	movs	r3, #2
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3730      	adds	r7, #48	; 0x30
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	080040d5 	.word	0x080040d5
 8003a80:	0800416f 	.word	0x0800416f
 8003a84:	080042e7 	.word	0x080042e7

08003a88 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08c      	sub	sp, #48	; 0x30
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d152      	bne.n	8003b48 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e04b      	b.n	8003b4a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e044      	b.n	8003b4a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fc51 	bl	800437c <UART_Start_Receive_DMA>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003ae0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d12c      	bne.n	8003b42 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d125      	bne.n	8003b3c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	617b      	str	r3, [r7, #20]
   return(result);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f043 0310 	orr.w	r3, r3, #16
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b26:	627a      	str	r2, [r7, #36]	; 0x24
 8003b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	6a39      	ldr	r1, [r7, #32]
 8003b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e5      	bne.n	8003b06 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003b3a:	e002      	b.n	8003b42 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b46:	e000      	b.n	8003b4a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003b48:	2302      	movs	r3, #2
  }
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3730      	adds	r7, #48	; 0x30
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b0ba      	sub	sp, #232	; 0xe8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10f      	bne.n	8003bba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_UART_IRQHandler+0x66>
 8003ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fd87 	bl	80046c6 <UART_Receive_IT>
      return;
 8003bb8:	e256      	b.n	8004068 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80de 	beq.w	8003d80 <HAL_UART_IRQHandler+0x22c>
 8003bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80d1 	beq.w	8003d80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_UART_IRQHandler+0xae>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_UART_IRQHandler+0xd2>
 8003c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f043 0202 	orr.w	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_UART_IRQHandler+0xf6>
 8003c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f043 0204 	orr.w	r2, r3, #4
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d011      	beq.n	8003c7a <HAL_UART_IRQHandler+0x126>
 8003c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d105      	bne.n	8003c6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f043 0208 	orr.w	r2, r3, #8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 81ed 	beq.w	800405e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x14e>
 8003c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fd12 	bl	80046c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_UART_IRQHandler+0x17a>
 8003cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d04f      	beq.n	8003d6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fc1a 	bl	8004508 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d141      	bne.n	8003d66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3314      	adds	r3, #20
 8003d0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1d9      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d013      	beq.n	8003d5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	4a7d      	ldr	r2, [pc, #500]	; (8003f30 <HAL_UART_IRQHandler+0x3dc>)
 8003d3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd fad6 	bl	80012f4 <HAL_DMA_Abort_IT>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	e00e      	b.n	8003d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f9ae 	bl	80040c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	e00a      	b.n	8003d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f9aa 	bl	80040c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	e006      	b.n	8003d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f9a6 	bl	80040c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d7a:	e170      	b.n	800405e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	bf00      	nop
    return;
 8003d7e:	e16e      	b.n	800405e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	f040 814a 	bne.w	800401e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8143 	beq.w	800401e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 813c 	beq.w	800401e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	f040 80b4 	bne.w	8003f34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8140 	beq.w	8004062 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dea:	429a      	cmp	r2, r3
 8003dec:	f080 8139 	bcs.w	8004062 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003df6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e02:	f000 8088 	beq.w	8003f16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1d9      	bne.n	8003e06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3314      	adds	r3, #20
 8003e72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e1      	bne.n	8003e52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3314      	adds	r3, #20
 8003e94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3314      	adds	r3, #20
 8003eae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003eb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003eb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003eb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e3      	bne.n	8003e8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee6:	f023 0310 	bic.w	r3, r3, #16
 8003eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ef8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003efa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003efe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e3      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fd f97f 	bl	8001214 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fc fc74 	bl	8000814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f2c:	e099      	b.n	8004062 <HAL_UART_IRQHandler+0x50e>
 8003f2e:	bf00      	nop
 8003f30:	080045cf 	.word	0x080045cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 808b 	beq.w	8004066 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8086 	beq.w	8004066 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	330c      	adds	r3, #12
 8003f60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f7e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e3      	bne.n	8003f5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3314      	adds	r3, #20
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	623b      	str	r3, [r7, #32]
   return(result);
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fb6:	633a      	str	r2, [r7, #48]	; 0x30
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e3      	bne.n	8003f92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0310 	bic.w	r3, r3, #16
 8003fee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	330c      	adds	r3, #12
 8003ff8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ffc:	61fa      	str	r2, [r7, #28]
 8003ffe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	69b9      	ldr	r1, [r7, #24]
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	e841 2300 	strex	r3, r2, [r1]
 8004008:	617b      	str	r3, [r7, #20]
   return(result);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e3      	bne.n	8003fd8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fc fbfc 	bl	8000814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800401c:	e023      	b.n	8004066 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_UART_IRQHandler+0x4ea>
 800402a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fadd 	bl	80045f6 <UART_Transmit_IT>
    return;
 800403c:	e014      	b.n	8004068 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00e      	beq.n	8004068 <HAL_UART_IRQHandler+0x514>
 800404a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d008      	beq.n	8004068 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fb1d 	bl	8004696 <UART_EndTransmit_IT>
    return;
 800405c:	e004      	b.n	8004068 <HAL_UART_IRQHandler+0x514>
    return;
 800405e:	bf00      	nop
 8004060:	e002      	b.n	8004068 <HAL_UART_IRQHandler+0x514>
      return;
 8004062:	bf00      	nop
 8004064:	e000      	b.n	8004068 <HAL_UART_IRQHandler+0x514>
      return;
 8004066:	bf00      	nop
  }
}
 8004068:	37e8      	adds	r7, #232	; 0xe8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop

08004070 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b090      	sub	sp, #64	; 0x40
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d137      	bne.n	8004160 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80040f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f2:	2200      	movs	r2, #0
 80040f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	623b      	str	r3, [r7, #32]
   return(result);
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410c:	63bb      	str	r3, [r7, #56]	; 0x38
 800410e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004116:	633a      	str	r2, [r7, #48]	; 0x30
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800412a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	60fb      	str	r3, [r7, #12]
   return(result);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
 8004142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800414a:	61fa      	str	r2, [r7, #28]
 800414c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	69b9      	ldr	r1, [r7, #24]
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	617b      	str	r3, [r7, #20]
   return(result);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e5      	bne.n	800412a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800415e:	e002      	b.n	8004166 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004160:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004162:	f7ff ff85 	bl	8004070 <HAL_UART_TxCpltCallback>
}
 8004166:	bf00      	nop
 8004168:	3740      	adds	r7, #64	; 0x40
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f7ff ff81 	bl	8004084 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b09c      	sub	sp, #112	; 0x70
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d172      	bne.n	800428c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	2200      	movs	r2, #0
 80041aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80041ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e5      	bne.n	80041ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	667b      	str	r3, [r7, #100]	; 0x64
 80041f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3314      	adds	r3, #20
 80041fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004200:	647a      	str	r2, [r7, #68]	; 0x44
 8004202:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800420e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e5      	bne.n	80041e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3314      	adds	r3, #20
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	623b      	str	r3, [r7, #32]
   return(result);
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422a:	663b      	str	r3, [r7, #96]	; 0x60
 800422c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004234:	633a      	str	r2, [r7, #48]	; 0x30
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800423a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e5      	bne.n	8004214 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	2b01      	cmp	r3, #1
 8004256:	d119      	bne.n	800428c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	60fb      	str	r3, [r7, #12]
   return(result);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0310 	bic.w	r3, r3, #16
 800426e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004278:	61fa      	str	r2, [r7, #28]
 800427a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	69b9      	ldr	r1, [r7, #24]
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	617b      	str	r3, [r7, #20]
   return(result);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e5      	bne.n	8004258 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004296:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004298:	4619      	mov	r1, r3
 800429a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800429c:	f7fc faba 	bl	8000814 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042a0:	e002      	b.n	80042a8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80042a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80042a4:	f7ff fef8 	bl	8004098 <HAL_UART_RxCpltCallback>
}
 80042a8:	bf00      	nop
 80042aa:	3770      	adds	r7, #112	; 0x70
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d108      	bne.n	80042d8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	4619      	mov	r1, r3
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7fc fa9f 	bl	8000814 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042d6:	e002      	b.n	80042de <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff fee7 	bl	80040ac <HAL_UART_RxHalfCpltCallback>
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	2b80      	cmp	r3, #128	; 0x80
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b21      	cmp	r3, #33	; 0x21
 8004318:	d108      	bne.n	800432c <UART_DMAError+0x46>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2200      	movs	r2, #0
 8004324:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004326:	68b8      	ldr	r0, [r7, #8]
 8004328:	f000 f8c6 	bl	80044b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b22      	cmp	r3, #34	; 0x22
 800434c:	d108      	bne.n	8004360 <UART_DMAError+0x7a>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2200      	movs	r2, #0
 8004358:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800435a:	68b8      	ldr	r0, [r7, #8]
 800435c:	f000 f8d4 	bl	8004508 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	f043 0210 	orr.w	r2, r3, #16
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800436c:	68b8      	ldr	r0, [r7, #8]
 800436e:	f7ff fea7 	bl	80040c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b098      	sub	sp, #96	; 0x60
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2222      	movs	r2, #34	; 0x22
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	4a40      	ldr	r2, [pc, #256]	; (80044ac <UART_Start_Receive_DMA+0x130>)
 80043aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	4a3f      	ldr	r2, [pc, #252]	; (80044b0 <UART_Start_Receive_DMA+0x134>)
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	4a3e      	ldr	r2, [pc, #248]	; (80044b4 <UART_Start_Receive_DMA+0x138>)
 80043ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	2200      	movs	r2, #0
 80043c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80043c4:	f107 0308 	add.w	r3, r7, #8
 80043c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	f7fc fec2 	bl	8001164 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d019      	beq.n	800443a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441c:	65bb      	str	r3, [r7, #88]	; 0x58
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004426:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004428:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800442c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3314      	adds	r3, #20
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	657b      	str	r3, [r7, #84]	; 0x54
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3314      	adds	r3, #20
 8004458:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800445a:	63ba      	str	r2, [r7, #56]	; 0x38
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e5      	bne.n	800443a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3314      	adds	r3, #20
 8004474:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	617b      	str	r3, [r7, #20]
   return(result);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004484:	653b      	str	r3, [r7, #80]	; 0x50
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3314      	adds	r3, #20
 800448c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800448e:	627a      	str	r2, [r7, #36]	; 0x24
 8004490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6a39      	ldr	r1, [r7, #32]
 8004494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	61fb      	str	r3, [r7, #28]
   return(result);
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3760      	adds	r7, #96	; 0x60
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	0800418b 	.word	0x0800418b
 80044b0:	080042b1 	.word	0x080042b1
 80044b4:	080042e7 	.word	0x080042e7

080044b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	; 0x24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	61ba      	str	r2, [r7, #24]
 80044e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6979      	ldr	r1, [r7, #20]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	613b      	str	r3, [r7, #16]
   return(result);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e5      	bne.n	80044c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80044fc:	bf00      	nop
 80044fe:	3724      	adds	r7, #36	; 0x24
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b095      	sub	sp, #84	; 0x54
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	330c      	adds	r3, #12
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004530:	643a      	str	r2, [r7, #64]	; 0x40
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e5      	bne.n	8004510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3314      	adds	r3, #20
 800454a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	61fb      	str	r3, [r7, #28]
   return(result);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	64bb      	str	r3, [r7, #72]	; 0x48
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3314      	adds	r3, #20
 8004562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004564:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800456a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e5      	bne.n	8004544 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	2b01      	cmp	r3, #1
 800457e:	d119      	bne.n	80045b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f023 0310 	bic.w	r3, r3, #16
 8004596:	647b      	str	r3, [r7, #68]	; 0x44
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045a0:	61ba      	str	r2, [r7, #24]
 80045a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6979      	ldr	r1, [r7, #20]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	613b      	str	r3, [r7, #16]
   return(result);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e5      	bne.n	8004580 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045c2:	bf00      	nop
 80045c4:	3754      	adds	r7, #84	; 0x54
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff fd69 	bl	80040c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b21      	cmp	r3, #33	; 0x21
 8004608:	d13e      	bne.n	8004688 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004612:	d114      	bne.n	800463e <UART_Transmit_IT+0x48>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d110      	bne.n	800463e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004630:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	1c9a      	adds	r2, r3, #2
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	621a      	str	r2, [r3, #32]
 800463c:	e008      	b.n	8004650 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	1c59      	adds	r1, r3, #1
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6211      	str	r1, [r2, #32]
 8004648:	781a      	ldrb	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29b      	uxth	r3, r3
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4619      	mov	r1, r3
 800465e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10f      	bne.n	8004684 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004672:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004682:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e000      	b.n	800468a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004688:	2302      	movs	r3, #2
  }
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff fcda 	bl	8004070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b08c      	sub	sp, #48	; 0x30
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b22      	cmp	r3, #34	; 0x22
 80046d8:	f040 80ab 	bne.w	8004832 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e4:	d117      	bne.n	8004716 <UART_Receive_IT+0x50>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d113      	bne.n	8004716 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004704:	b29a      	uxth	r2, r3
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	1c9a      	adds	r2, r3, #2
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	629a      	str	r2, [r3, #40]	; 0x28
 8004714:	e026      	b.n	8004764 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004728:	d007      	beq.n	800473a <UART_Receive_IT+0x74>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <UART_Receive_IT+0x82>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	e008      	b.n	800475a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004754:	b2da      	uxtb	r2, r3
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29b      	uxth	r3, r3
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4619      	mov	r1, r3
 8004772:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004774:	2b00      	cmp	r3, #0
 8004776:	d15a      	bne.n	800482e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0220 	bic.w	r2, r2, #32
 8004786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695a      	ldr	r2, [r3, #20]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0201 	bic.w	r2, r2, #1
 80047a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d135      	bne.n	8004824 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	613b      	str	r3, [r7, #16]
   return(result);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f023 0310 	bic.w	r3, r3, #16
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	330c      	adds	r3, #12
 80047dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047de:	623a      	str	r2, [r7, #32]
 80047e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	69f9      	ldr	r1, [r7, #28]
 80047e4:	6a3a      	ldr	r2, [r7, #32]
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e5      	bne.n	80047be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d10a      	bne.n	8004816 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7fb fff9 	bl	8000814 <HAL_UARTEx_RxEventCallback>
 8004822:	e002      	b.n	800482a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fc37 	bl	8004098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	e002      	b.n	8004834 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	e000      	b.n	8004834 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004832:	2302      	movs	r3, #2
  }
}
 8004834:	4618      	mov	r0, r3
 8004836:	3730      	adds	r7, #48	; 0x30
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800483c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004840:	b0c0      	sub	sp, #256	; 0x100
 8004842:	af00      	add	r7, sp, #0
 8004844:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	68d9      	ldr	r1, [r3, #12]
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	ea40 0301 	orr.w	r3, r0, r1
 8004864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	431a      	orrs	r2, r3
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	431a      	orrs	r2, r3
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004894:	f021 010c 	bic.w	r1, r1, #12
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048a2:	430b      	orrs	r3, r1
 80048a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	6999      	ldr	r1, [r3, #24]
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	ea40 0301 	orr.w	r3, r0, r1
 80048c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b8f      	ldr	r3, [pc, #572]	; (8004b08 <UART_SetConfig+0x2cc>)
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d005      	beq.n	80048dc <UART_SetConfig+0xa0>
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b8d      	ldr	r3, [pc, #564]	; (8004b0c <UART_SetConfig+0x2d0>)
 80048d8:	429a      	cmp	r2, r3
 80048da:	d104      	bne.n	80048e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048dc:	f7fe fff4 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 80048e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048e4:	e003      	b.n	80048ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048e6:	f7fe ffdb 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 80048ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	f040 810c 	bne.w	8004b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004900:	2200      	movs	r2, #0
 8004902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004906:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800490a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800490e:	4622      	mov	r2, r4
 8004910:	462b      	mov	r3, r5
 8004912:	1891      	adds	r1, r2, r2
 8004914:	65b9      	str	r1, [r7, #88]	; 0x58
 8004916:	415b      	adcs	r3, r3
 8004918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800491a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800491e:	4621      	mov	r1, r4
 8004920:	eb12 0801 	adds.w	r8, r2, r1
 8004924:	4629      	mov	r1, r5
 8004926:	eb43 0901 	adc.w	r9, r3, r1
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800493a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800493e:	4690      	mov	r8, r2
 8004940:	4699      	mov	r9, r3
 8004942:	4623      	mov	r3, r4
 8004944:	eb18 0303 	adds.w	r3, r8, r3
 8004948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800494c:	462b      	mov	r3, r5
 800494e:	eb49 0303 	adc.w	r3, r9, r3
 8004952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004962:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800496a:	460b      	mov	r3, r1
 800496c:	18db      	adds	r3, r3, r3
 800496e:	653b      	str	r3, [r7, #80]	; 0x50
 8004970:	4613      	mov	r3, r2
 8004972:	eb42 0303 	adc.w	r3, r2, r3
 8004976:	657b      	str	r3, [r7, #84]	; 0x54
 8004978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800497c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004980:	f7fb fc86 	bl	8000290 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4b61      	ldr	r3, [pc, #388]	; (8004b10 <UART_SetConfig+0x2d4>)
 800498a:	fba3 2302 	umull	r2, r3, r3, r2
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	011c      	lsls	r4, r3, #4
 8004992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800499c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049a4:	4642      	mov	r2, r8
 80049a6:	464b      	mov	r3, r9
 80049a8:	1891      	adds	r1, r2, r2
 80049aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80049ac:	415b      	adcs	r3, r3
 80049ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049b4:	4641      	mov	r1, r8
 80049b6:	eb12 0a01 	adds.w	sl, r2, r1
 80049ba:	4649      	mov	r1, r9
 80049bc:	eb43 0b01 	adc.w	fp, r3, r1
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049d4:	4692      	mov	sl, r2
 80049d6:	469b      	mov	fp, r3
 80049d8:	4643      	mov	r3, r8
 80049da:	eb1a 0303 	adds.w	r3, sl, r3
 80049de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049e2:	464b      	mov	r3, r9
 80049e4:	eb4b 0303 	adc.w	r3, fp, r3
 80049e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a00:	460b      	mov	r3, r1
 8004a02:	18db      	adds	r3, r3, r3
 8004a04:	643b      	str	r3, [r7, #64]	; 0x40
 8004a06:	4613      	mov	r3, r2
 8004a08:	eb42 0303 	adc.w	r3, r2, r3
 8004a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a16:	f7fb fc3b 	bl	8000290 <__aeabi_uldivmod>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <UART_SetConfig+0x2d4>)
 8004a22:	fba3 2301 	umull	r2, r3, r3, r1
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2264      	movs	r2, #100	; 0x64
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	1acb      	subs	r3, r1, r3
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a36:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <UART_SetConfig+0x2d4>)
 8004a38:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a44:	441c      	add	r4, r3
 8004a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	1891      	adds	r1, r2, r2
 8004a5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a60:	415b      	adcs	r3, r3
 8004a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a68:	4641      	mov	r1, r8
 8004a6a:	1851      	adds	r1, r2, r1
 8004a6c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a6e:	4649      	mov	r1, r9
 8004a70:	414b      	adcs	r3, r1
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a80:	4659      	mov	r1, fp
 8004a82:	00cb      	lsls	r3, r1, #3
 8004a84:	4651      	mov	r1, sl
 8004a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	00ca      	lsls	r2, r1, #3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	4642      	mov	r2, r8
 8004a96:	189b      	adds	r3, r3, r2
 8004a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	460a      	mov	r2, r1
 8004aa0:	eb42 0303 	adc.w	r3, r2, r3
 8004aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004abc:	460b      	mov	r3, r1
 8004abe:	18db      	adds	r3, r3, r3
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	eb42 0303 	adc.w	r3, r2, r3
 8004ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ad2:	f7fb fbdd 	bl	8000290 <__aeabi_uldivmod>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <UART_SetConfig+0x2d4>)
 8004adc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	2164      	movs	r1, #100	; 0x64
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	3332      	adds	r3, #50	; 0x32
 8004aee:	4a08      	ldr	r2, [pc, #32]	; (8004b10 <UART_SetConfig+0x2d4>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	f003 0207 	and.w	r2, r3, #7
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4422      	add	r2, r4
 8004b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b04:	e105      	b.n	8004d12 <UART_SetConfig+0x4d6>
 8004b06:	bf00      	nop
 8004b08:	40011000 	.word	0x40011000
 8004b0c:	40011400 	.word	0x40011400
 8004b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b26:	4642      	mov	r2, r8
 8004b28:	464b      	mov	r3, r9
 8004b2a:	1891      	adds	r1, r2, r2
 8004b2c:	6239      	str	r1, [r7, #32]
 8004b2e:	415b      	adcs	r3, r3
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
 8004b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b36:	4641      	mov	r1, r8
 8004b38:	1854      	adds	r4, r2, r1
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	eb43 0501 	adc.w	r5, r3, r1
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	00eb      	lsls	r3, r5, #3
 8004b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b4e:	00e2      	lsls	r2, r4, #3
 8004b50:	4614      	mov	r4, r2
 8004b52:	461d      	mov	r5, r3
 8004b54:	4643      	mov	r3, r8
 8004b56:	18e3      	adds	r3, r4, r3
 8004b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b5c:	464b      	mov	r3, r9
 8004b5e:	eb45 0303 	adc.w	r3, r5, r3
 8004b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b82:	4629      	mov	r1, r5
 8004b84:	008b      	lsls	r3, r1, #2
 8004b86:	4621      	mov	r1, r4
 8004b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	008a      	lsls	r2, r1, #2
 8004b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b94:	f7fb fb7c 	bl	8000290 <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4b60      	ldr	r3, [pc, #384]	; (8004d20 <UART_SetConfig+0x4e4>)
 8004b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	011c      	lsls	r4, r3, #4
 8004ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	1891      	adds	r1, r2, r2
 8004bbe:	61b9      	str	r1, [r7, #24]
 8004bc0:	415b      	adcs	r3, r3
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc8:	4641      	mov	r1, r8
 8004bca:	1851      	adds	r1, r2, r1
 8004bcc:	6139      	str	r1, [r7, #16]
 8004bce:	4649      	mov	r1, r9
 8004bd0:	414b      	adcs	r3, r1
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be0:	4659      	mov	r1, fp
 8004be2:	00cb      	lsls	r3, r1, #3
 8004be4:	4651      	mov	r1, sl
 8004be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bea:	4651      	mov	r1, sl
 8004bec:	00ca      	lsls	r2, r1, #3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	460a      	mov	r2, r1
 8004c00:	eb42 0303 	adc.w	r3, r2, r3
 8004c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c20:	4649      	mov	r1, r9
 8004c22:	008b      	lsls	r3, r1, #2
 8004c24:	4641      	mov	r1, r8
 8004c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	008a      	lsls	r2, r1, #2
 8004c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c32:	f7fb fb2d 	bl	8000290 <__aeabi_uldivmod>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <UART_SetConfig+0x4e4>)
 8004c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	2164      	movs	r1, #100	; 0x64
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	3332      	adds	r3, #50	; 0x32
 8004c4e:	4a34      	ldr	r2, [pc, #208]	; (8004d20 <UART_SetConfig+0x4e4>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c5a:	441c      	add	r4, r3
 8004c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c60:	2200      	movs	r2, #0
 8004c62:	673b      	str	r3, [r7, #112]	; 0x70
 8004c64:	677a      	str	r2, [r7, #116]	; 0x74
 8004c66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c6a:	4642      	mov	r2, r8
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	1891      	adds	r1, r2, r2
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	415b      	adcs	r3, r3
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	1851      	adds	r1, r2, r1
 8004c7e:	6039      	str	r1, [r7, #0]
 8004c80:	4649      	mov	r1, r9
 8004c82:	414b      	adcs	r3, r1
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c92:	4659      	mov	r1, fp
 8004c94:	00cb      	lsls	r3, r1, #3
 8004c96:	4651      	mov	r1, sl
 8004c98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c9c:	4651      	mov	r1, sl
 8004c9e:	00ca      	lsls	r2, r1, #3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4642      	mov	r2, r8
 8004ca8:	189b      	adds	r3, r3, r2
 8004caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cac:	464b      	mov	r3, r9
 8004cae:	460a      	mov	r2, r1
 8004cb0:	eb42 0303 	adc.w	r3, r2, r3
 8004cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8004cc0:	667a      	str	r2, [r7, #100]	; 0x64
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cce:	4649      	mov	r1, r9
 8004cd0:	008b      	lsls	r3, r1, #2
 8004cd2:	4641      	mov	r1, r8
 8004cd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd8:	4641      	mov	r1, r8
 8004cda:	008a      	lsls	r2, r1, #2
 8004cdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ce0:	f7fb fad6 	bl	8000290 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <UART_SetConfig+0x4e4>)
 8004cea:	fba3 1302 	umull	r1, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2164      	movs	r1, #100	; 0x64
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	3332      	adds	r3, #50	; 0x32
 8004cfc:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <UART_SetConfig+0x4e4>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	f003 020f 	and.w	r2, r3, #15
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4422      	add	r2, r4
 8004d10:	609a      	str	r2, [r3, #8]
}
 8004d12:	bf00      	nop
 8004d14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d1e:	bf00      	nop
 8004d20:	51eb851f 	.word	0x51eb851f

08004d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d24:	b084      	sub	sp, #16
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	f107 001c 	add.w	r0, r7, #28
 8004d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d122      	bne.n	8004d82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d105      	bne.n	8004d76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f001 fbee 	bl	8006558 <USB_CoreReset>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	73fb      	strb	r3, [r7, #15]
 8004d80:	e01a      	b.n	8004db8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f001 fbe2 	bl	8006558 <USB_CoreReset>
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38
 8004daa:	e005      	b.n	8004db8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d10b      	bne.n	8004dd6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f043 0206 	orr.w	r2, r3, #6
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004de2:	b004      	add	sp, #16
 8004de4:	4770      	bx	lr
	...

08004de8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d165      	bne.n	8004ec8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a41      	ldr	r2, [pc, #260]	; (8004f04 <USB_SetTurnaroundTime+0x11c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d906      	bls.n	8004e12 <USB_SetTurnaroundTime+0x2a>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a40      	ldr	r2, [pc, #256]	; (8004f08 <USB_SetTurnaroundTime+0x120>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d202      	bcs.n	8004e12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e0c:	230f      	movs	r3, #15
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	e062      	b.n	8004ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	4a3c      	ldr	r2, [pc, #240]	; (8004f08 <USB_SetTurnaroundTime+0x120>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d306      	bcc.n	8004e28 <USB_SetTurnaroundTime+0x40>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4a3b      	ldr	r2, [pc, #236]	; (8004f0c <USB_SetTurnaroundTime+0x124>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d202      	bcs.n	8004e28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e22:	230e      	movs	r3, #14
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	e057      	b.n	8004ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4a38      	ldr	r2, [pc, #224]	; (8004f0c <USB_SetTurnaroundTime+0x124>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d306      	bcc.n	8004e3e <USB_SetTurnaroundTime+0x56>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4a37      	ldr	r2, [pc, #220]	; (8004f10 <USB_SetTurnaroundTime+0x128>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d202      	bcs.n	8004e3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e38:	230d      	movs	r3, #13
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e04c      	b.n	8004ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4a33      	ldr	r2, [pc, #204]	; (8004f10 <USB_SetTurnaroundTime+0x128>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d306      	bcc.n	8004e54 <USB_SetTurnaroundTime+0x6c>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4a32      	ldr	r2, [pc, #200]	; (8004f14 <USB_SetTurnaroundTime+0x12c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d802      	bhi.n	8004e54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e4e:	230c      	movs	r3, #12
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e041      	b.n	8004ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a2f      	ldr	r2, [pc, #188]	; (8004f14 <USB_SetTurnaroundTime+0x12c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d906      	bls.n	8004e6a <USB_SetTurnaroundTime+0x82>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4a2e      	ldr	r2, [pc, #184]	; (8004f18 <USB_SetTurnaroundTime+0x130>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d802      	bhi.n	8004e6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e64:	230b      	movs	r3, #11
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	e036      	b.n	8004ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4a2a      	ldr	r2, [pc, #168]	; (8004f18 <USB_SetTurnaroundTime+0x130>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d906      	bls.n	8004e80 <USB_SetTurnaroundTime+0x98>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4a29      	ldr	r2, [pc, #164]	; (8004f1c <USB_SetTurnaroundTime+0x134>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d802      	bhi.n	8004e80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e7a:	230a      	movs	r3, #10
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	e02b      	b.n	8004ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <USB_SetTurnaroundTime+0x134>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d906      	bls.n	8004e96 <USB_SetTurnaroundTime+0xae>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <USB_SetTurnaroundTime+0x138>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d202      	bcs.n	8004e96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e90:	2309      	movs	r3, #9
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e020      	b.n	8004ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4a21      	ldr	r2, [pc, #132]	; (8004f20 <USB_SetTurnaroundTime+0x138>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d306      	bcc.n	8004eac <USB_SetTurnaroundTime+0xc4>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <USB_SetTurnaroundTime+0x13c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d802      	bhi.n	8004eac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e015      	b.n	8004ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <USB_SetTurnaroundTime+0x13c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d906      	bls.n	8004ec2 <USB_SetTurnaroundTime+0xda>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <USB_SetTurnaroundTime+0x140>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d202      	bcs.n	8004ec2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ebc:	2307      	movs	r3, #7
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e00a      	b.n	8004ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ec2:	2306      	movs	r3, #6
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	e007      	b.n	8004ed8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ece:	2309      	movs	r3, #9
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e001      	b.n	8004ed8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ed4:	2309      	movs	r3, #9
 8004ed6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	029b      	lsls	r3, r3, #10
 8004eec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	00d8acbf 	.word	0x00d8acbf
 8004f08:	00e4e1c0 	.word	0x00e4e1c0
 8004f0c:	00f42400 	.word	0x00f42400
 8004f10:	01067380 	.word	0x01067380
 8004f14:	011a499f 	.word	0x011a499f
 8004f18:	01312cff 	.word	0x01312cff
 8004f1c:	014ca43f 	.word	0x014ca43f
 8004f20:	016e3600 	.word	0x016e3600
 8004f24:	01a6ab1f 	.word	0x01a6ab1f
 8004f28:	01e84800 	.word	0x01e84800

08004f2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f043 0201 	orr.w	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f023 0201 	bic.w	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d115      	bne.n	8004fbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	f7fb fefc 	bl	8000d9c <HAL_Delay>
      ms++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f001 fa45 	bl	800643a <USB_GetMode>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d01e      	beq.n	8004ff4 <USB_SetCurrentMode+0x84>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b31      	cmp	r3, #49	; 0x31
 8004fba:	d9f0      	bls.n	8004f9e <USB_SetCurrentMode+0x2e>
 8004fbc:	e01a      	b.n	8004ff4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d115      	bne.n	8004ff0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	f7fb fee3 	bl	8000d9c <HAL_Delay>
      ms++;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f001 fa2c 	bl	800643a <USB_GetMode>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <USB_SetCurrentMode+0x84>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b31      	cmp	r3, #49	; 0x31
 8004fec:	d9f0      	bls.n	8004fd0 <USB_SetCurrentMode+0x60>
 8004fee:	e001      	b.n	8004ff4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e005      	b.n	8005000 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b32      	cmp	r3, #50	; 0x32
 8004ff8:	d101      	bne.n	8004ffe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005008:	b084      	sub	sp, #16
 800500a:	b580      	push	{r7, lr}
 800500c:	b086      	sub	sp, #24
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	e009      	b.n	800503c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3340      	adds	r3, #64	; 0x40
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	2200      	movs	r2, #0
 8005034:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3301      	adds	r3, #1
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b0e      	cmp	r3, #14
 8005040:	d9f2      	bls.n	8005028 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d11c      	bne.n	8005082 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005056:	f043 0302 	orr.w	r3, r3, #2
 800505a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38
 8005080:	e00b      	b.n	800509a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050a0:	461a      	mov	r2, r3
 80050a2:	2300      	movs	r3, #0
 80050a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ac:	4619      	mov	r1, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b4:	461a      	mov	r2, r3
 80050b6:	680b      	ldr	r3, [r1, #0]
 80050b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d10c      	bne.n	80050da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d104      	bne.n	80050d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050c6:	2100      	movs	r1, #0
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f965 	bl	8005398 <USB_SetDevSpeed>
 80050ce:	e008      	b.n	80050e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050d0:	2101      	movs	r1, #1
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f960 	bl	8005398 <USB_SetDevSpeed>
 80050d8:	e003      	b.n	80050e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050da:	2103      	movs	r1, #3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f95b 	bl	8005398 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050e2:	2110      	movs	r1, #16
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f8f3 	bl	80052d0 <USB_FlushTxFifo>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f91f 	bl	8005338 <USB_FlushRxFifo>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510a:	461a      	mov	r2, r3
 800510c:	2300      	movs	r3, #0
 800510e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	461a      	mov	r2, r3
 8005118:	2300      	movs	r3, #0
 800511a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	461a      	mov	r2, r3
 8005124:	2300      	movs	r3, #0
 8005126:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	e043      	b.n	80051b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005144:	d118      	bne.n	8005178 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	461a      	mov	r2, r3
 800515a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	e013      	b.n	800518a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516e:	461a      	mov	r2, r3
 8005170:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e008      	b.n	800518a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	461a      	mov	r2, r3
 8005186:	2300      	movs	r3, #0
 8005188:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005196:	461a      	mov	r2, r3
 8005198:	2300      	movs	r3, #0
 800519a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	461a      	mov	r2, r3
 80051aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	3301      	adds	r3, #1
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d3b7      	bcc.n	800512e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051be:	2300      	movs	r3, #0
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	e043      	b.n	800524c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051da:	d118      	bne.n	800520e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10a      	bne.n	80051f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ee:	461a      	mov	r2, r3
 80051f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e013      	b.n	8005220 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	461a      	mov	r2, r3
 8005206:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	e008      	b.n	8005220 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	461a      	mov	r2, r3
 800521c:	2300      	movs	r3, #0
 800521e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	461a      	mov	r2, r3
 800522e:	2300      	movs	r3, #0
 8005230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	461a      	mov	r2, r3
 8005240:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005244:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	3301      	adds	r3, #1
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	429a      	cmp	r2, r3
 8005252:	d3b7      	bcc.n	80051c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005266:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005274:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	2b00      	cmp	r3, #0
 800527a:	d105      	bne.n	8005288 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f043 0210 	orr.w	r2, r3, #16
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699a      	ldr	r2, [r3, #24]
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <USB_DevInit+0x2c4>)
 800528e:	4313      	orrs	r3, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f043 0208 	orr.w	r2, r3, #8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d107      	bne.n	80052bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052b4:	f043 0304 	orr.w	r3, r3, #4
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c8:	b004      	add	sp, #16
 80052ca:	4770      	bx	lr
 80052cc:	803c3800 	.word	0x803c3800

080052d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4a13      	ldr	r2, [pc, #76]	; (8005334 <USB_FlushTxFifo+0x64>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e01b      	b.n	8005328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	daf2      	bge.n	80052de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	019b      	lsls	r3, r3, #6
 8005300:	f043 0220 	orr.w	r2, r3, #32
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a08      	ldr	r2, [pc, #32]	; (8005334 <USB_FlushTxFifo+0x64>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e006      	b.n	8005328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	d0f0      	beq.n	8005308 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	00030d40 	.word	0x00030d40

08005338 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4a11      	ldr	r2, [pc, #68]	; (8005394 <USB_FlushRxFifo+0x5c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e018      	b.n	8005388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	daf2      	bge.n	8005344 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2210      	movs	r2, #16
 8005366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3301      	adds	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <USB_FlushRxFifo+0x5c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e006      	b.n	8005388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	2b10      	cmp	r3, #16
 8005384:	d0f0      	beq.n	8005368 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	00030d40 	.word	0x00030d40

08005398 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b8:	4313      	orrs	r3, r2
 80053ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b087      	sub	sp, #28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 0306 	and.w	r3, r3, #6
 80053e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053ea:	2300      	movs	r3, #0
 80053ec:	75fb      	strb	r3, [r7, #23]
 80053ee:	e00a      	b.n	8005406 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d002      	beq.n	80053fc <USB_GetDevSpeed+0x32>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b06      	cmp	r3, #6
 80053fa:	d102      	bne.n	8005402 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053fc:	2302      	movs	r3, #2
 80053fe:	75fb      	strb	r3, [r7, #23]
 8005400:	e001      	b.n	8005406 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005402:	230f      	movs	r3, #15
 8005404:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005406:	7dfb      	ldrb	r3, [r7, #23]
}
 8005408:	4618      	mov	r0, r3
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d13a      	bne.n	80054a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	2101      	movs	r1, #1
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	b29b      	uxth	r3, r3
 8005448:	68f9      	ldr	r1, [r7, #12]
 800544a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800544e:	4313      	orrs	r3, r2
 8005450:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d155      	bne.n	8005514 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	791b      	ldrb	r3, [r3, #4]
 8005482:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005484:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	059b      	lsls	r3, r3, #22
 800548a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800548c:	4313      	orrs	r3, r2
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	e036      	b.n	8005514 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	2101      	movs	r1, #1
 80054b8:	fa01 f303 	lsl.w	r3, r1, r3
 80054bc:	041b      	lsls	r3, r3, #16
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d11a      	bne.n	8005514 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	791b      	ldrb	r3, [r3, #4]
 80054f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054fa:	430b      	orrs	r3, r1
 80054fc:	4313      	orrs	r3, r2
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800550a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005512:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d161      	bne.n	8005604 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005556:	d11f      	bne.n	8005598 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	440a      	add	r2, r1
 800556e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005572:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005576:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005596:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	2101      	movs	r1, #1
 80055aa:	fa01 f303 	lsl.w	r3, r1, r3
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b8:	4013      	ands	r3, r2
 80055ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	2101      	movs	r1, #1
 80055ce:	fa01 f303 	lsl.w	r3, r1, r3
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	43db      	mvns	r3, r3
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055dc:	4013      	ands	r3, r2
 80055de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	0159      	lsls	r1, r3, #5
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	440b      	add	r3, r1
 80055f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fa:	4619      	mov	r1, r3
 80055fc:	4b35      	ldr	r3, [pc, #212]	; (80056d4 <USB_DeactivateEndpoint+0x1b0>)
 80055fe:	4013      	ands	r3, r2
 8005600:	600b      	str	r3, [r1, #0]
 8005602:	e060      	b.n	80056c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561a:	d11f      	bne.n	800565c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	440a      	add	r2, r1
 8005632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800563a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	0151      	lsls	r1, r2, #5
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	440a      	add	r2, r1
 8005652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005656:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800565a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	2101      	movs	r1, #1
 800566e:	fa01 f303 	lsl.w	r3, r1, r3
 8005672:	041b      	lsls	r3, r3, #16
 8005674:	43db      	mvns	r3, r3
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800567c:	4013      	ands	r3, r2
 800567e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	2101      	movs	r1, #1
 8005692:	fa01 f303 	lsl.w	r3, r1, r3
 8005696:	041b      	lsls	r3, r3, #16
 8005698:	43db      	mvns	r3, r3
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056a0:	4013      	ands	r3, r2
 80056a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	0159      	lsls	r1, r3, #5
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	440b      	add	r3, r1
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	4619      	mov	r1, r3
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <USB_DeactivateEndpoint+0x1b4>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	ec337800 	.word	0xec337800
 80056d8:	eff37800 	.word	0xeff37800

080056dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	; 0x28
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	4613      	mov	r3, r2
 80056e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	f040 815c 	bne.w	80059b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d132      	bne.n	800576c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	440a      	add	r2, r1
 800571c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005720:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005724:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005728:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	440a      	add	r2, r1
 8005760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005764:	0cdb      	lsrs	r3, r3, #19
 8005766:	04db      	lsls	r3, r3, #19
 8005768:	6113      	str	r3, [r2, #16]
 800576a:	e074      	b.n	8005856 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	440a      	add	r2, r1
 8005782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005786:	0cdb      	lsrs	r3, r3, #19
 8005788:	04db      	lsls	r3, r3, #19
 800578a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6999      	ldr	r1, [r3, #24]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	440b      	add	r3, r1
 80057c8:	1e59      	subs	r1, r3, #1
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80057d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057d4:	4b9d      	ldr	r3, [pc, #628]	; (8005a4c <USB_EPStartXfer+0x370>)
 80057d6:	400b      	ands	r3, r1
 80057d8:	69b9      	ldr	r1, [r7, #24]
 80057da:	0148      	lsls	r0, r1, #5
 80057dc:	69f9      	ldr	r1, [r7, #28]
 80057de:	4401      	add	r1, r0
 80057e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057e4:	4313      	orrs	r3, r2
 80057e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057fe:	69b9      	ldr	r1, [r7, #24]
 8005800:	0148      	lsls	r0, r1, #5
 8005802:	69f9      	ldr	r1, [r7, #28]
 8005804:	4401      	add	r1, r0
 8005806:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800580a:	4313      	orrs	r3, r2
 800580c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	791b      	ldrb	r3, [r3, #4]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d11f      	bne.n	8005856 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005830:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005834:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005850:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005854:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d14b      	bne.n	80058f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d009      	beq.n	8005878 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	461a      	mov	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	791b      	ldrb	r3, [r3, #4]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d128      	bne.n	80058d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d110      	bne.n	80058b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	e00f      	b.n	80058d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	e133      	b.n	8005b5c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	0151      	lsls	r1, r2, #5
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	440a      	add	r2, r1
 800590a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005912:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	791b      	ldrb	r3, [r3, #4]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d015      	beq.n	8005948 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 811b 	beq.w	8005b5c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	2101      	movs	r1, #1
 8005938:	fa01 f303 	lsl.w	r3, r1, r3
 800593c:	69f9      	ldr	r1, [r7, #28]
 800593e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005942:	4313      	orrs	r3, r2
 8005944:	634b      	str	r3, [r1, #52]	; 0x34
 8005946:	e109      	b.n	8005b5c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d110      	bne.n	800597a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	440a      	add	r2, r1
 800596e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005972:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	e00f      	b.n	800599a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	0151      	lsls	r1, r2, #5
 800598c:	69fa      	ldr	r2, [r7, #28]
 800598e:	440a      	add	r2, r1
 8005990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005998:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6919      	ldr	r1, [r3, #16]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	781a      	ldrb	r2, [r3, #0]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	b298      	uxth	r0, r3
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	4603      	mov	r3, r0
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 fade 	bl	8005f70 <USB_WritePacket>
 80059b4:	e0d2      	b.n	8005b5c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	69fa      	ldr	r2, [r7, #28]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d0:	0cdb      	lsrs	r3, r3, #19
 80059d2:	04db      	lsls	r3, r3, #19
 80059d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d126      	bne.n	8005a50 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a18:	69b9      	ldr	r1, [r7, #24]
 8005a1a:	0148      	lsls	r0, r1, #5
 8005a1c:	69f9      	ldr	r1, [r7, #28]
 8005a1e:	4401      	add	r1, r0
 8005a20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a24:	4313      	orrs	r3, r2
 8005a26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a46:	6113      	str	r3, [r2, #16]
 8005a48:	e03a      	b.n	8005ac0 <USB_EPStartXfer+0x3e4>
 8005a4a:	bf00      	nop
 8005a4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	699a      	ldr	r2, [r3, #24]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	1e5a      	subs	r2, r3, #1
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	8afa      	ldrh	r2, [r7, #22]
 8005a6c:	fb03 f202 	mul.w	r2, r3, r2
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	691a      	ldr	r2, [r3, #16]
 8005a82:	8afb      	ldrh	r3, [r7, #22]
 8005a84:	04d9      	lsls	r1, r3, #19
 8005a86:	4b38      	ldr	r3, [pc, #224]	; (8005b68 <USB_EPStartXfer+0x48c>)
 8005a88:	400b      	ands	r3, r1
 8005a8a:	69b9      	ldr	r1, [r7, #24]
 8005a8c:	0148      	lsls	r0, r1, #5
 8005a8e:	69f9      	ldr	r1, [r7, #28]
 8005a90:	4401      	add	r1, r0
 8005a92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a96:	4313      	orrs	r3, r2
 8005a98:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab0:	69b9      	ldr	r1, [r7, #24]
 8005ab2:	0148      	lsls	r0, r1, #5
 8005ab4:	69f9      	ldr	r1, [r7, #28]
 8005ab6:	4401      	add	r1, r0
 8005ab8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005abc:	4313      	orrs	r3, r2
 8005abe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d10d      	bne.n	8005ae2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6919      	ldr	r1, [r3, #16]
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	460a      	mov	r2, r1
 8005ae0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	791b      	ldrb	r3, [r3, #4]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d128      	bne.n	8005b3c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d110      	bne.n	8005b1c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e00f      	b.n	8005b3c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	1ff80000 	.word	0x1ff80000

08005b6c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	4613      	mov	r3, r2
 8005b78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	f040 80ce 	bne.w	8005d2a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d132      	bne.n	8005bfc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf4:	0cdb      	lsrs	r3, r3, #19
 8005bf6:	04db      	lsls	r3, r3, #19
 8005bf8:	6113      	str	r3, [r2, #16]
 8005bfa:	e04e      	b.n	8005c9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c16:	0cdb      	lsrs	r3, r3, #19
 8005c18:	04db      	lsls	r3, r3, #19
 8005c1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c3e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	699a      	ldr	r2, [r3, #24]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d903      	bls.n	8005c54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c8a:	6939      	ldr	r1, [r7, #16]
 8005c8c:	0148      	lsls	r0, r1, #5
 8005c8e:	6979      	ldr	r1, [r7, #20]
 8005c90:	4401      	add	r1, r0
 8005c92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c96:	4313      	orrs	r3, r2
 8005c98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d11e      	bne.n	8005cde <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d009      	beq.n	8005cbc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	e097      	b.n	8005e0e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cfc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8083 	beq.w	8005e0e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	f003 030f 	and.w	r3, r3, #15
 8005d18:	2101      	movs	r1, #1
 8005d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1e:	6979      	ldr	r1, [r7, #20]
 8005d20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d24:	4313      	orrs	r3, r2
 8005d26:	634b      	str	r3, [r1, #52]	; 0x34
 8005d28:	e071      	b.n	8005e0e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d44:	0cdb      	lsrs	r3, r3, #19
 8005d46:	04db      	lsls	r3, r3, #19
 8005d48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d6c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dbc:	6939      	ldr	r1, [r7, #16]
 8005dbe:	0148      	lsls	r0, r1, #5
 8005dc0:	6979      	ldr	r1, [r7, #20]
 8005dc2:	4401      	add	r1, r0
 8005dc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d10d      	bne.n	8005dee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	6919      	ldr	r1, [r3, #16]
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	460a      	mov	r2, r1
 8005dec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d14a      	bne.n	8005ed0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e52:	f040 8086 	bne.w	8005f62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	7812      	ldrb	r2, [r2, #0]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d902      	bls.n	8005eb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8005eb2:	e056      	b.n	8005f62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ecc:	d0e7      	beq.n	8005e9e <USB_EPStopXfer+0x82>
 8005ece:	e048      	b.n	8005f62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee8:	d13b      	bne.n	8005f62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	7812      	ldrb	r2, [r2, #0]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	7812      	ldrb	r2, [r2, #0]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d902      	bls.n	8005f48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	75fb      	strb	r3, [r7, #23]
          break;
 8005f46:	e00c      	b.n	8005f62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f60:	d0e7      	beq.n	8005f32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	371c      	adds	r7, #28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b089      	sub	sp, #36	; 0x24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	460b      	mov	r3, r1
 8005f80:	71fb      	strb	r3, [r7, #7]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d123      	bne.n	8005fde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f96:	88bb      	ldrh	r3, [r7, #4]
 8005f98:	3303      	adds	r3, #3
 8005f9a:	089b      	lsrs	r3, r3, #2
 8005f9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61bb      	str	r3, [r7, #24]
 8005fa2:	e018      	b.n	8005fd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	031a      	lsls	r2, r3, #12
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d3e2      	bcc.n	8005fa4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3724      	adds	r7, #36	; 0x24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b08b      	sub	sp, #44	; 0x2c
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	089b      	lsrs	r3, r3, #2
 8006006:	b29b      	uxth	r3, r3
 8006008:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800600a:	88fb      	ldrh	r3, [r7, #6]
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006012:	2300      	movs	r3, #0
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	e014      	b.n	8006042 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	601a      	str	r2, [r3, #0]
    pDest++;
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	3301      	adds	r3, #1
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	3301      	adds	r3, #1
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	3301      	adds	r3, #1
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	3301      	adds	r3, #1
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	3301      	adds	r3, #1
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	6a3a      	ldr	r2, [r7, #32]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	429a      	cmp	r2, r3
 8006048:	d3e6      	bcc.n	8006018 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800604a:	8bfb      	ldrh	r3, [r7, #30]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01e      	beq.n	800608e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605a:	461a      	mov	r2, r3
 800605c:	f107 0310 	add.w	r3, r7, #16
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	fa22 f303 	lsr.w	r3, r2, r3
 8006070:	b2da      	uxtb	r2, r3
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	701a      	strb	r2, [r3, #0]
      i++;
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	3301      	adds	r3, #1
 800607a:	623b      	str	r3, [r7, #32]
      pDest++;
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	3301      	adds	r3, #1
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006082:	8bfb      	ldrh	r3, [r7, #30]
 8006084:	3b01      	subs	r3, #1
 8006086:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006088:	8bfb      	ldrh	r3, [r7, #30]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1ea      	bne.n	8006064 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006090:	4618      	mov	r0, r3
 8006092:	372c      	adds	r7, #44	; 0x2c
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	785b      	ldrb	r3, [r3, #1]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d12c      	bne.n	8006112 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	db12      	blt.n	80060f0 <USB_EPSetStall+0x54>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00f      	beq.n	80060f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	0151      	lsls	r1, r2, #5
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	440a      	add	r2, r1
 8006106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	e02b      	b.n	800616a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	db12      	blt.n	800614a <USB_EPSetStall+0xae>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00f      	beq.n	800614a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	440a      	add	r2, r1
 8006140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006144:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006148:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006168:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d128      	bne.n	80061e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	791b      	ldrb	r3, [r3, #4]
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d003      	beq.n	80061c4 <USB_EPClearStall+0x4c>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	791b      	ldrb	r3, [r3, #4]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d138      	bne.n	8006236 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	e027      	b.n	8006236 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006200:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006204:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	791b      	ldrb	r3, [r3, #4]
 800620a:	2b03      	cmp	r3, #3
 800620c:	d003      	beq.n	8006216 <USB_EPClearStall+0x9e>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	791b      	ldrb	r3, [r3, #4]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d10f      	bne.n	8006236 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	0151      	lsls	r1, r2, #5
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	440a      	add	r2, r1
 800622c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006234:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006262:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006266:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006278:	68f9      	ldr	r1, [r7, #12]
 800627a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800627e:	4313      	orrs	r3, r2
 8006280:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062be:	f023 0302 	bic.w	r3, r3, #2
 80062c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b085      	sub	sp, #20
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062ec:	f023 0303 	bic.w	r3, r3, #3
 80062f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006300:	f043 0302 	orr.w	r3, r3, #2
 8006304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4013      	ands	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800632c:	68fb      	ldr	r3, [r7, #12]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	4013      	ands	r3, r2
 800635c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	0c1b      	lsrs	r3, r3, #16
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	4013      	ands	r3, r2
 8006390:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	b29b      	uxth	r3, r3
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063b2:	78fb      	ldrb	r3, [r7, #3]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	4013      	ands	r3, r2
 80063ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063d0:	68bb      	ldr	r3, [r7, #8]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063de:	b480      	push	{r7}
 80063e0:	b087      	sub	sp, #28
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006400:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	fa22 f303 	lsr.w	r3, r2, r3
 800640e:	01db      	lsls	r3, r3, #7
 8006410:	b2db      	uxtb	r3, r3
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4013      	ands	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800642c:	68bb      	ldr	r3, [r7, #8]
}
 800642e:	4618      	mov	r0, r3
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0301 	and.w	r3, r3, #1
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006470:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006474:	f023 0307 	bic.w	r3, r3, #7
 8006478:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800648c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	460b      	mov	r3, r1
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	333c      	adds	r3, #60	; 0x3c
 80064b2:	3304      	adds	r3, #4
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	4a26      	ldr	r2, [pc, #152]	; (8006554 <USB_EP0_OutStart+0xb8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d90a      	bls.n	80064d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064d0:	d101      	bne.n	80064d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	e037      	b.n	8006546 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064dc:	461a      	mov	r2, r3
 80064de:	2300      	movs	r3, #0
 80064e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006504:	f043 0318 	orr.w	r3, r3, #24
 8006508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006518:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800651c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800651e:	7afb      	ldrb	r3, [r7, #11]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d10f      	bne.n	8006544 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652a:	461a      	mov	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800653e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006542:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	4f54300a 	.word	0x4f54300a

08006558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4a13      	ldr	r2, [pc, #76]	; (80065bc <USB_CoreReset+0x64>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e01b      	b.n	80065ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	daf2      	bge.n	8006564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f043 0201 	orr.w	r2, r3, #1
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3301      	adds	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4a09      	ldr	r2, [pc, #36]	; (80065bc <USB_CoreReset+0x64>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d901      	bls.n	80065a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e006      	b.n	80065ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d0f0      	beq.n	800658e <USB_CoreReset+0x36>

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	00030d40 	.word	0x00030d40

080065c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065d0:	f002 fc98 	bl	8008f04 <USBD_static_malloc>
 80065d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d109      	bne.n	80065f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	32b0      	adds	r2, #176	; 0xb0
 80065e6:	2100      	movs	r1, #0
 80065e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80065ec:	2302      	movs	r3, #2
 80065ee:	e0d4      	b.n	800679a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80065f0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80065f4:	2100      	movs	r1, #0
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f002 fe28 	bl	800924c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	32b0      	adds	r2, #176	; 0xb0
 8006606:	68f9      	ldr	r1, [r7, #12]
 8006608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	32b0      	adds	r2, #176	; 0xb0
 8006616:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	7c1b      	ldrb	r3, [r3, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d138      	bne.n	800669a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006628:	4b5e      	ldr	r3, [pc, #376]	; (80067a4 <USBD_CDC_Init+0x1e4>)
 800662a:	7819      	ldrb	r1, [r3, #0]
 800662c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006630:	2202      	movs	r2, #2
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f002 fb43 	bl	8008cbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006638:	4b5a      	ldr	r3, [pc, #360]	; (80067a4 <USBD_CDC_Init+0x1e4>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	f003 020f 	and.w	r2, r3, #15
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	3324      	adds	r3, #36	; 0x24
 800664e:	2201      	movs	r2, #1
 8006650:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006652:	4b55      	ldr	r3, [pc, #340]	; (80067a8 <USBD_CDC_Init+0x1e8>)
 8006654:	7819      	ldrb	r1, [r3, #0]
 8006656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800665a:	2202      	movs	r2, #2
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f002 fb2e 	bl	8008cbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006662:	4b51      	ldr	r3, [pc, #324]	; (80067a8 <USBD_CDC_Init+0x1e8>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	f003 020f 	and.w	r2, r3, #15
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800667a:	2201      	movs	r2, #1
 800667c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800667e:	4b4b      	ldr	r3, [pc, #300]	; (80067ac <USBD_CDC_Init+0x1ec>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	f003 020f 	and.w	r2, r3, #15
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	440b      	add	r3, r1
 8006692:	3326      	adds	r3, #38	; 0x26
 8006694:	2210      	movs	r2, #16
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	e035      	b.n	8006706 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800669a:	4b42      	ldr	r3, [pc, #264]	; (80067a4 <USBD_CDC_Init+0x1e4>)
 800669c:	7819      	ldrb	r1, [r3, #0]
 800669e:	2340      	movs	r3, #64	; 0x40
 80066a0:	2202      	movs	r2, #2
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f002 fb0b 	bl	8008cbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066a8:	4b3e      	ldr	r3, [pc, #248]	; (80067a4 <USBD_CDC_Init+0x1e4>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	f003 020f 	and.w	r2, r3, #15
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	3324      	adds	r3, #36	; 0x24
 80066be:	2201      	movs	r2, #1
 80066c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066c2:	4b39      	ldr	r3, [pc, #228]	; (80067a8 <USBD_CDC_Init+0x1e8>)
 80066c4:	7819      	ldrb	r1, [r3, #0]
 80066c6:	2340      	movs	r3, #64	; 0x40
 80066c8:	2202      	movs	r2, #2
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f002 faf7 	bl	8008cbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066d0:	4b35      	ldr	r3, [pc, #212]	; (80067a8 <USBD_CDC_Init+0x1e8>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f003 020f 	and.w	r2, r3, #15
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066e8:	2201      	movs	r2, #1
 80066ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80066ec:	4b2f      	ldr	r3, [pc, #188]	; (80067ac <USBD_CDC_Init+0x1ec>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	3326      	adds	r3, #38	; 0x26
 8006702:	2210      	movs	r2, #16
 8006704:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006706:	4b29      	ldr	r3, [pc, #164]	; (80067ac <USBD_CDC_Init+0x1ec>)
 8006708:	7819      	ldrb	r1, [r3, #0]
 800670a:	2308      	movs	r3, #8
 800670c:	2203      	movs	r2, #3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f002 fad5 	bl	8008cbe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006714:	4b25      	ldr	r3, [pc, #148]	; (80067ac <USBD_CDC_Init+0x1ec>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	f003 020f 	and.w	r2, r3, #15
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	3324      	adds	r3, #36	; 0x24
 800672a:	2201      	movs	r2, #1
 800672c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	33b0      	adds	r3, #176	; 0xb0
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006764:	2302      	movs	r3, #2
 8006766:	e018      	b.n	800679a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7c1b      	ldrb	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006770:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <USBD_CDC_Init+0x1e8>)
 8006772:	7819      	ldrb	r1, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800677a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f002 fb8c 	bl	8008e9c <USBD_LL_PrepareReceive>
 8006784:	e008      	b.n	8006798 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006786:	4b08      	ldr	r3, [pc, #32]	; (80067a8 <USBD_CDC_Init+0x1e8>)
 8006788:	7819      	ldrb	r1, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006790:	2340      	movs	r3, #64	; 0x40
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f002 fb82 	bl	8008e9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000093 	.word	0x20000093
 80067a8:	20000094 	.word	0x20000094
 80067ac:	20000095 	.word	0x20000095

080067b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80067bc:	4b3a      	ldr	r3, [pc, #232]	; (80068a8 <USBD_CDC_DeInit+0xf8>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f002 faa1 	bl	8008d0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067c8:	4b37      	ldr	r3, [pc, #220]	; (80068a8 <USBD_CDC_DeInit+0xf8>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f003 020f 	and.w	r2, r3, #15
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	3324      	adds	r3, #36	; 0x24
 80067de:	2200      	movs	r2, #0
 80067e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80067e2:	4b32      	ldr	r3, [pc, #200]	; (80068ac <USBD_CDC_DeInit+0xfc>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f002 fa8e 	bl	8008d0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80067ee:	4b2f      	ldr	r3, [pc, #188]	; (80068ac <USBD_CDC_DeInit+0xfc>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	f003 020f 	and.w	r2, r3, #15
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006806:	2200      	movs	r2, #0
 8006808:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800680a:	4b29      	ldr	r3, [pc, #164]	; (80068b0 <USBD_CDC_DeInit+0x100>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f002 fa7a 	bl	8008d0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006816:	4b26      	ldr	r3, [pc, #152]	; (80068b0 <USBD_CDC_DeInit+0x100>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	f003 020f 	and.w	r2, r3, #15
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	3324      	adds	r3, #36	; 0x24
 800682c:	2200      	movs	r2, #0
 800682e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006830:	4b1f      	ldr	r3, [pc, #124]	; (80068b0 <USBD_CDC_DeInit+0x100>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f003 020f 	and.w	r2, r3, #15
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	440b      	add	r3, r1
 8006844:	3326      	adds	r3, #38	; 0x26
 8006846:	2200      	movs	r2, #0
 8006848:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	32b0      	adds	r2, #176	; 0xb0
 8006854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01f      	beq.n	800689c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	33b0      	adds	r3, #176	; 0xb0
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	32b0      	adds	r2, #176	; 0xb0
 800687a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687e:	4618      	mov	r0, r3
 8006880:	f002 fb4e 	bl	8008f20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	32b0      	adds	r2, #176	; 0xb0
 800688e:	2100      	movs	r1, #0
 8006890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000093 	.word	0x20000093
 80068ac:	20000094 	.word	0x20000094
 80068b0:	20000095 	.word	0x20000095

080068b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	32b0      	adds	r2, #176	; 0xb0
 80068c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e0bf      	b.n	8006a64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d050      	beq.n	8006992 <USBD_CDC_Setup+0xde>
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	f040 80af 	bne.w	8006a54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	88db      	ldrh	r3, [r3, #6]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d03a      	beq.n	8006974 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	b25b      	sxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	da1b      	bge.n	8006940 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	33b0      	adds	r3, #176	; 0xb0
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800691e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	88d2      	ldrh	r2, [r2, #6]
 8006924:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	88db      	ldrh	r3, [r3, #6]
 800692a:	2b07      	cmp	r3, #7
 800692c:	bf28      	it	cs
 800692e:	2307      	movcs	r3, #7
 8006930:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	89fa      	ldrh	r2, [r7, #14]
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 fd89 	bl	8008450 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800693e:	e090      	b.n	8006a62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	785a      	ldrb	r2, [r3, #1]
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	2b3f      	cmp	r3, #63	; 0x3f
 8006950:	d803      	bhi.n	800695a <USBD_CDC_Setup+0xa6>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	88db      	ldrh	r3, [r3, #6]
 8006956:	b2da      	uxtb	r2, r3
 8006958:	e000      	b.n	800695c <USBD_CDC_Setup+0xa8>
 800695a:	2240      	movs	r2, #64	; 0x40
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006962:	6939      	ldr	r1, [r7, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800696a:	461a      	mov	r2, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fd9b 	bl	80084a8 <USBD_CtlPrepareRx>
      break;
 8006972:	e076      	b.n	8006a62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	33b0      	adds	r3, #176	; 0xb0
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	7850      	ldrb	r0, [r2, #1]
 800698a:	2200      	movs	r2, #0
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	4798      	blx	r3
      break;
 8006990:	e067      	b.n	8006a62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	2b0b      	cmp	r3, #11
 8006998:	d851      	bhi.n	8006a3e <USBD_CDC_Setup+0x18a>
 800699a:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <USBD_CDC_Setup+0xec>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069d1 	.word	0x080069d1
 80069a4:	08006a4d 	.word	0x08006a4d
 80069a8:	08006a3f 	.word	0x08006a3f
 80069ac:	08006a3f 	.word	0x08006a3f
 80069b0:	08006a3f 	.word	0x08006a3f
 80069b4:	08006a3f 	.word	0x08006a3f
 80069b8:	08006a3f 	.word	0x08006a3f
 80069bc:	08006a3f 	.word	0x08006a3f
 80069c0:	08006a3f 	.word	0x08006a3f
 80069c4:	08006a3f 	.word	0x08006a3f
 80069c8:	080069fb 	.word	0x080069fb
 80069cc:	08006a25 	.word	0x08006a25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d107      	bne.n	80069ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069dc:	f107 030a 	add.w	r3, r7, #10
 80069e0:	2202      	movs	r2, #2
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 fd33 	bl	8008450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069ea:	e032      	b.n	8006a52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 fcbd 	bl	800836e <USBD_CtlError>
            ret = USBD_FAIL;
 80069f4:	2303      	movs	r3, #3
 80069f6:	75fb      	strb	r3, [r7, #23]
          break;
 80069f8:	e02b      	b.n	8006a52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d107      	bne.n	8006a16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a06:	f107 030d 	add.w	r3, r7, #13
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fd1e 	bl	8008450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a14:	e01d      	b.n	8006a52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fca8 	bl	800836e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	75fb      	strb	r3, [r7, #23]
          break;
 8006a22:	e016      	b.n	8006a52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d00f      	beq.n	8006a50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fc9b 	bl	800836e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a3c:	e008      	b.n	8006a50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fc94 	bl	800836e <USBD_CtlError>
          ret = USBD_FAIL;
 8006a46:	2303      	movs	r3, #3
 8006a48:	75fb      	strb	r3, [r7, #23]
          break;
 8006a4a:	e002      	b.n	8006a52 <USBD_CDC_Setup+0x19e>
          break;
 8006a4c:	bf00      	nop
 8006a4e:	e008      	b.n	8006a62 <USBD_CDC_Setup+0x1ae>
          break;
 8006a50:	bf00      	nop
      }
      break;
 8006a52:	e006      	b.n	8006a62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 fc89 	bl	800836e <USBD_CtlError>
      ret = USBD_FAIL;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a60:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	32b0      	adds	r2, #176	; 0xb0
 8006a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e065      	b.n	8006b62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	32b0      	adds	r2, #176	; 0xb0
 8006aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006aa6:	78fb      	ldrb	r3, [r7, #3]
 8006aa8:	f003 020f 	and.w	r2, r3, #15
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	3318      	adds	r3, #24
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d02f      	beq.n	8006b20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	f003 020f 	and.w	r2, r3, #15
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	3318      	adds	r3, #24
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	f003 010f 	and.w	r1, r3, #15
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	440b      	add	r3, r1
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4403      	add	r3, r0
 8006ae8:	3348      	adds	r3, #72	; 0x48
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	fbb2 f1f3 	udiv	r1, r2, r3
 8006af0:	fb01 f303 	mul.w	r3, r1, r3
 8006af4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d112      	bne.n	8006b20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	f003 020f 	and.w	r2, r3, #15
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	3318      	adds	r3, #24
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b12:	78f9      	ldrb	r1, [r7, #3]
 8006b14:	2300      	movs	r3, #0
 8006b16:	2200      	movs	r2, #0
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f002 f99e 	bl	8008e5a <USBD_LL_Transmit>
 8006b1e:	e01f      	b.n	8006b60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	33b0      	adds	r3, #176	; 0xb0
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d010      	beq.n	8006b60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	33b0      	adds	r3, #176	; 0xb0
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b5c:	78fa      	ldrb	r2, [r7, #3]
 8006b5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	32b0      	adds	r2, #176	; 0xb0
 8006b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	32b0      	adds	r2, #176	; 0xb0
 8006b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e01a      	b.n	8006bd2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f002 f99c 	bl	8008ede <USBD_LL_GetRxDataSize>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	33b0      	adds	r3, #176	; 0xb0
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bcc:	4611      	mov	r1, r2
 8006bce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	32b0      	adds	r2, #176	; 0xb0
 8006bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e025      	b.n	8006c48 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	33b0      	adds	r3, #176	; 0xb0
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01a      	beq.n	8006c46 <USBD_CDC_EP0_RxReady+0x6c>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c16:	2bff      	cmp	r3, #255	; 0xff
 8006c18:	d015      	beq.n	8006c46 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	33b0      	adds	r3, #176	; 0xb0
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	22ff      	movs	r2, #255	; 0xff
 8006c42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c58:	2182      	movs	r1, #130	; 0x82
 8006c5a:	4818      	ldr	r0, [pc, #96]	; (8006cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c5c:	f000 fd4f 	bl	80076fe <USBD_GetEpDesc>
 8006c60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c62:	2101      	movs	r1, #1
 8006c64:	4815      	ldr	r0, [pc, #84]	; (8006cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c66:	f000 fd4a 	bl	80076fe <USBD_GetEpDesc>
 8006c6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c6c:	2181      	movs	r1, #129	; 0x81
 8006c6e:	4813      	ldr	r0, [pc, #76]	; (8006cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c70:	f000 fd45 	bl	80076fe <USBD_GetEpDesc>
 8006c74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2210      	movs	r2, #16
 8006c80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d006      	beq.n	8006c96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c90:	711a      	strb	r2, [r3, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d006      	beq.n	8006caa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca4:	711a      	strb	r2, [r3, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2243      	movs	r2, #67	; 0x43
 8006cae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cb0:	4b02      	ldr	r3, [pc, #8]	; (8006cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000050 	.word	0x20000050

08006cc0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cc8:	2182      	movs	r1, #130	; 0x82
 8006cca:	4818      	ldr	r0, [pc, #96]	; (8006d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ccc:	f000 fd17 	bl	80076fe <USBD_GetEpDesc>
 8006cd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	4815      	ldr	r0, [pc, #84]	; (8006d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cd6:	f000 fd12 	bl	80076fe <USBD_GetEpDesc>
 8006cda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cdc:	2181      	movs	r1, #129	; 0x81
 8006cde:	4813      	ldr	r0, [pc, #76]	; (8006d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ce0:	f000 fd0d 	bl	80076fe <USBD_GetEpDesc>
 8006ce4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2210      	movs	r2, #16
 8006cf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d006      	beq.n	8006d06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	711a      	strb	r2, [r3, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f042 0202 	orr.w	r2, r2, #2
 8006d04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d006      	beq.n	8006d1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	711a      	strb	r2, [r3, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f042 0202 	orr.w	r2, r2, #2
 8006d18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2243      	movs	r2, #67	; 0x43
 8006d1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d20:	4b02      	ldr	r3, [pc, #8]	; (8006d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000050 	.word	0x20000050

08006d30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d38:	2182      	movs	r1, #130	; 0x82
 8006d3a:	4818      	ldr	r0, [pc, #96]	; (8006d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d3c:	f000 fcdf 	bl	80076fe <USBD_GetEpDesc>
 8006d40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d42:	2101      	movs	r1, #1
 8006d44:	4815      	ldr	r0, [pc, #84]	; (8006d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d46:	f000 fcda 	bl	80076fe <USBD_GetEpDesc>
 8006d4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d4c:	2181      	movs	r1, #129	; 0x81
 8006d4e:	4813      	ldr	r0, [pc, #76]	; (8006d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d50:	f000 fcd5 	bl	80076fe <USBD_GetEpDesc>
 8006d54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2210      	movs	r2, #16
 8006d60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d006      	beq.n	8006d76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d70:	711a      	strb	r2, [r3, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d006      	beq.n	8006d8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d84:	711a      	strb	r2, [r3, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2243      	movs	r2, #67	; 0x43
 8006d8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d90:	4b02      	ldr	r3, [pc, #8]	; (8006d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000050 	.word	0x20000050

08006da0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	220a      	movs	r2, #10
 8006dac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006dae:	4b03      	ldr	r3, [pc, #12]	; (8006dbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	2000000c 	.word	0x2000000c

08006dc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e009      	b.n	8006de8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	33b0      	adds	r3, #176	; 0xb0
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	32b0      	adds	r2, #176	; 0xb0
 8006e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e008      	b.n	8006e2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	371c      	adds	r7, #28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	32b0      	adds	r2, #176	; 0xb0
 8006e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e004      	b.n	8006e66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
	...

08006e74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	32b0      	adds	r2, #176	; 0xb0
 8006e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32b0      	adds	r2, #176	; 0xb0
 8006e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e025      	b.n	8006ef2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d11f      	bne.n	8006ef0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006eb8:	4b10      	ldr	r3, [pc, #64]	; (8006efc <USBD_CDC_TransmitPacket+0x88>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	f003 020f 	and.w	r2, r3, #15
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4403      	add	r3, r0
 8006ed2:	3318      	adds	r3, #24
 8006ed4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006ed6:	4b09      	ldr	r3, [pc, #36]	; (8006efc <USBD_CDC_TransmitPacket+0x88>)
 8006ed8:	7819      	ldrb	r1, [r3, #0]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 ffb7 	bl	8008e5a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000093 	.word	0x20000093

08006f00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32b0      	adds	r2, #176	; 0xb0
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	32b0      	adds	r2, #176	; 0xb0
 8006f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e018      	b.n	8006f60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7c1b      	ldrb	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f36:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <USBD_CDC_ReceivePacket+0x68>)
 8006f38:	7819      	ldrb	r1, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 ffa9 	bl	8008e9c <USBD_LL_PrepareReceive>
 8006f4a:	e008      	b.n	8006f5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <USBD_CDC_ReceivePacket+0x68>)
 8006f4e:	7819      	ldrb	r1, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f56:	2340      	movs	r3, #64	; 0x40
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 ff9f 	bl	8008e9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000094 	.word	0x20000094

08006f6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e01f      	b.n	8006fc4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	79fa      	ldrb	r2, [r7, #7]
 8006fb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f001 fe19 	bl	8008bf0 <USBD_LL_Init>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e025      	b.n	8007030 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32ae      	adds	r2, #174	; 0xae
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00f      	beq.n	8007020 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	32ae      	adds	r2, #174	; 0xae
 800700a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	f107 020e 	add.w	r2, r7, #14
 8007014:	4610      	mov	r0, r2
 8007016:	4798      	blx	r3
 8007018:	4602      	mov	r2, r0
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 fe21 	bl	8008c88 <USBD_LL_Start>
 8007046:	4603      	mov	r3, r0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007058:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800705a:	4618      	mov	r0, r3
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d009      	beq.n	8007094 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	78fa      	ldrb	r2, [r7, #3]
 800708a:	4611      	mov	r1, r2
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	4798      	blx	r3
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	4611      	mov	r1, r2
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80070c4:	2303      	movs	r3, #3
 80070c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f001 f908 	bl	80082fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070f8:	461a      	mov	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	2b02      	cmp	r3, #2
 800710c:	d01a      	beq.n	8007144 <USBD_LL_SetupStage+0x72>
 800710e:	2b02      	cmp	r3, #2
 8007110:	d822      	bhi.n	8007158 <USBD_LL_SetupStage+0x86>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <USBD_LL_SetupStage+0x4a>
 8007116:	2b01      	cmp	r3, #1
 8007118:	d00a      	beq.n	8007130 <USBD_LL_SetupStage+0x5e>
 800711a:	e01d      	b.n	8007158 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fb5f 	bl	80077e8 <USBD_StdDevReq>
 800712a:	4603      	mov	r3, r0
 800712c:	73fb      	strb	r3, [r7, #15]
      break;
 800712e:	e020      	b.n	8007172 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fbc7 	bl	80078cc <USBD_StdItfReq>
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
      break;
 8007142:	e016      	b.n	8007172 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fc29 	bl	80079a4 <USBD_StdEPReq>
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]
      break;
 8007156:	e00c      	b.n	8007172 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800715e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007162:	b2db      	uxtb	r3, r3
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 fdee 	bl	8008d48 <USBD_LL_StallEP>
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]
      break;
 8007170:	bf00      	nop
  }

  return ret;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	460b      	mov	r3, r1
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d16e      	bne.n	8007272 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800719a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	f040 8098 	bne.w	80072d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d913      	bls.n	80071dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	1ad2      	subs	r2, r2, r3
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	4293      	cmp	r3, r2
 80071cc:	bf28      	it	cs
 80071ce:	4613      	movcs	r3, r2
 80071d0:	461a      	mov	r2, r3
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f001 f984 	bl	80084e2 <USBD_CtlContinueRx>
 80071da:	e07d      	b.n	80072d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d014      	beq.n	8007214 <USBD_LL_DataOutStage+0x98>
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d81d      	bhi.n	800722a <USBD_LL_DataOutStage+0xae>
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <USBD_LL_DataOutStage+0x7c>
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d003      	beq.n	80071fe <USBD_LL_DataOutStage+0x82>
 80071f6:	e018      	b.n	800722a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	75bb      	strb	r3, [r7, #22]
            break;
 80071fc:	e018      	b.n	8007230 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007204:	b2db      	uxtb	r3, r3
 8007206:	4619      	mov	r1, r3
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 fa5e 	bl	80076ca <USBD_CoreFindIF>
 800720e:	4603      	mov	r3, r0
 8007210:	75bb      	strb	r3, [r7, #22]
            break;
 8007212:	e00d      	b.n	8007230 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800721a:	b2db      	uxtb	r3, r3
 800721c:	4619      	mov	r1, r3
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 fa60 	bl	80076e4 <USBD_CoreFindEP>
 8007224:	4603      	mov	r3, r0
 8007226:	75bb      	strb	r3, [r7, #22]
            break;
 8007228:	e002      	b.n	8007230 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	75bb      	strb	r3, [r7, #22]
            break;
 800722e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007230:	7dbb      	ldrb	r3, [r7, #22]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d119      	bne.n	800726a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b03      	cmp	r3, #3
 8007240:	d113      	bne.n	800726a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007242:	7dba      	ldrb	r2, [r7, #22]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	32ae      	adds	r2, #174	; 0xae
 8007248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007252:	7dba      	ldrb	r2, [r7, #22]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800725a:	7dba      	ldrb	r2, [r7, #22]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	32ae      	adds	r2, #174	; 0xae
 8007260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f001 f94a 	bl	8008504 <USBD_CtlSendStatus>
 8007270:	e032      	b.n	80072d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007272:	7afb      	ldrb	r3, [r7, #11]
 8007274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007278:	b2db      	uxtb	r3, r3
 800727a:	4619      	mov	r1, r3
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fa31 	bl	80076e4 <USBD_CoreFindEP>
 8007282:	4603      	mov	r3, r0
 8007284:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007286:	7dbb      	ldrb	r3, [r7, #22]
 8007288:	2bff      	cmp	r3, #255	; 0xff
 800728a:	d025      	beq.n	80072d8 <USBD_LL_DataOutStage+0x15c>
 800728c:	7dbb      	ldrb	r3, [r7, #22]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d122      	bne.n	80072d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b03      	cmp	r3, #3
 800729c:	d117      	bne.n	80072ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800729e:	7dba      	ldrb	r2, [r7, #22]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	32ae      	adds	r2, #174	; 0xae
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00f      	beq.n	80072ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80072ae:	7dba      	ldrb	r2, [r7, #22]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80072b6:	7dba      	ldrb	r2, [r7, #22]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	32ae      	adds	r2, #174	; 0xae
 80072bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	7afa      	ldrb	r2, [r7, #11]
 80072c4:	4611      	mov	r1, r2
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	4798      	blx	r3
 80072ca:	4603      	mov	r3, r0
 80072cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	e000      	b.n	80072da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b086      	sub	sp, #24
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	460b      	mov	r3, r1
 80072ec:	607a      	str	r2, [r7, #4]
 80072ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d16f      	bne.n	80073d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3314      	adds	r3, #20
 80072fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007302:	2b02      	cmp	r3, #2
 8007304:	d15a      	bne.n	80073bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	429a      	cmp	r2, r3
 8007310:	d914      	bls.n	800733c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	1ad2      	subs	r2, r2, r3
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	461a      	mov	r2, r3
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f001 f8ac 	bl	8008486 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800732e:	2300      	movs	r3, #0
 8007330:	2200      	movs	r2, #0
 8007332:	2100      	movs	r1, #0
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f001 fdb1 	bl	8008e9c <USBD_LL_PrepareReceive>
 800733a:	e03f      	b.n	80073bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	429a      	cmp	r2, r3
 8007346:	d11c      	bne.n	8007382 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007350:	429a      	cmp	r2, r3
 8007352:	d316      	bcc.n	8007382 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800735e:	429a      	cmp	r2, r3
 8007360:	d20f      	bcs.n	8007382 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007362:	2200      	movs	r2, #0
 8007364:	2100      	movs	r1, #0
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f001 f88d 	bl	8008486 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007374:	2300      	movs	r3, #0
 8007376:	2200      	movs	r2, #0
 8007378:	2100      	movs	r1, #0
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f001 fd8e 	bl	8008e9c <USBD_LL_PrepareReceive>
 8007380:	e01c      	b.n	80073bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b03      	cmp	r3, #3
 800738c:	d10f      	bne.n	80073ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073ae:	2180      	movs	r1, #128	; 0x80
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f001 fcc9 	bl	8008d48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f001 f8b7 	bl	800852a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d03a      	beq.n	800743c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f7ff fe42 	bl	8007050 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073d4:	e032      	b.n	800743c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	4619      	mov	r1, r3
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f97f 	bl	80076e4 <USBD_CoreFindEP>
 80073e6:	4603      	mov	r3, r0
 80073e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	2bff      	cmp	r3, #255	; 0xff
 80073ee:	d025      	beq.n	800743c <USBD_LL_DataInStage+0x15a>
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d122      	bne.n	800743c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d11c      	bne.n	800743c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007402:	7dfa      	ldrb	r2, [r7, #23]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	32ae      	adds	r2, #174	; 0xae
 8007408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d014      	beq.n	800743c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007412:	7dfa      	ldrb	r2, [r7, #23]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800741a:	7dfa      	ldrb	r2, [r7, #23]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	32ae      	adds	r2, #174	; 0xae
 8007420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	7afa      	ldrb	r2, [r7, #11]
 8007428:	4611      	mov	r1, r2
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	4798      	blx	r3
 800742e:	4603      	mov	r3, r0
 8007430:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007432:	7dbb      	ldrb	r3, [r7, #22]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007438:	7dbb      	ldrb	r3, [r7, #22]
 800743a:	e000      	b.n	800743e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747e:	2b00      	cmp	r3, #0
 8007480:	d014      	beq.n	80074ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00e      	beq.n	80074ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6852      	ldr	r2, [r2, #4]
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	4611      	mov	r1, r2
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	4798      	blx	r3
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80074a8:	2303      	movs	r3, #3
 80074aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074ac:	2340      	movs	r3, #64	; 0x40
 80074ae:	2200      	movs	r2, #0
 80074b0:	2100      	movs	r1, #0
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fc03 	bl	8008cbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2240      	movs	r2, #64	; 0x40
 80074c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074c8:	2340      	movs	r3, #64	; 0x40
 80074ca:	2200      	movs	r2, #0
 80074cc:	2180      	movs	r1, #128	; 0x80
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fbf5 	bl	8008cbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2240      	movs	r2, #64	; 0x40
 80074de:	621a      	str	r2, [r3, #32]

  return ret;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	460b      	mov	r3, r1
 80074f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	78fa      	ldrb	r2, [r7, #3]
 80074fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007518:	b2da      	uxtb	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2204      	movs	r2, #4
 8007524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b04      	cmp	r3, #4
 8007548:	d106      	bne.n	8007558 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007550:	b2da      	uxtb	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b082      	sub	sp, #8
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b03      	cmp	r3, #3
 8007578:	d110      	bne.n	800759c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00b      	beq.n	800759c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	32ae      	adds	r2, #174	; 0xae
 80075bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e01c      	b.n	8007602 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d115      	bne.n	8007600 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	32ae      	adds	r2, #174	; 0xae
 80075de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	32ae      	adds	r2, #174	; 0xae
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	4611      	mov	r1, r2
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	460b      	mov	r3, r1
 8007614:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	32ae      	adds	r2, #174	; 0xae
 8007620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007628:	2303      	movs	r3, #3
 800762a:	e01c      	b.n	8007666 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b03      	cmp	r3, #3
 8007636:	d115      	bne.n	8007664 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	32ae      	adds	r2, #174	; 0xae
 8007642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	32ae      	adds	r2, #174	; 0xae
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	78fa      	ldrb	r2, [r7, #3]
 800765e:	4611      	mov	r1, r2
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6852      	ldr	r2, [r2, #4]
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	4611      	mov	r1, r2
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076bc:	2303      	movs	r3, #3
 80076be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b086      	sub	sp, #24
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007712:	2300      	movs	r3, #0
 8007714:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	885b      	ldrh	r3, [r3, #2]
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	429a      	cmp	r2, r3
 8007724:	d920      	bls.n	8007768 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	b29b      	uxth	r3, r3
 800772c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800772e:	e013      	b.n	8007758 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007730:	f107 030a 	add.w	r3, r7, #10
 8007734:	4619      	mov	r1, r3
 8007736:	6978      	ldr	r0, [r7, #20]
 8007738:	f000 f81b 	bl	8007772 <USBD_GetNextDesc>
 800773c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	785b      	ldrb	r3, [r3, #1]
 8007742:	2b05      	cmp	r3, #5
 8007744:	d108      	bne.n	8007758 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	789b      	ldrb	r3, [r3, #2]
 800774e:	78fa      	ldrb	r2, [r7, #3]
 8007750:	429a      	cmp	r2, r3
 8007752:	d008      	beq.n	8007766 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007754:	2300      	movs	r3, #0
 8007756:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	885b      	ldrh	r3, [r3, #2]
 800775c:	b29a      	uxth	r2, r3
 800775e:	897b      	ldrh	r3, [r7, #10]
 8007760:	429a      	cmp	r2, r3
 8007762:	d8e5      	bhi.n	8007730 <USBD_GetEpDesc+0x32>
 8007764:	e000      	b.n	8007768 <USBD_GetEpDesc+0x6a>
          break;
 8007766:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007768:	693b      	ldr	r3, [r7, #16]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007772:	b480      	push	{r7}
 8007774:	b085      	sub	sp, #20
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	881a      	ldrh	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	4413      	add	r3, r2
 800778c:	b29a      	uxth	r2, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4413      	add	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800779e:	68fb      	ldr	r3, [r7, #12]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	3301      	adds	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077ca:	8a3b      	ldrh	r3, [r7, #16]
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	b21a      	sxth	r2, r3
 80077d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	b21b      	sxth	r3, r3
 80077d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077da:	89fb      	ldrh	r3, [r7, #14]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	371c      	adds	r7, #28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077fe:	2b40      	cmp	r3, #64	; 0x40
 8007800:	d005      	beq.n	800780e <USBD_StdDevReq+0x26>
 8007802:	2b40      	cmp	r3, #64	; 0x40
 8007804:	d857      	bhi.n	80078b6 <USBD_StdDevReq+0xce>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00f      	beq.n	800782a <USBD_StdDevReq+0x42>
 800780a:	2b20      	cmp	r3, #32
 800780c:	d153      	bne.n	80078b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	32ae      	adds	r2, #174	; 0xae
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
 8007824:	4603      	mov	r3, r0
 8007826:	73fb      	strb	r3, [r7, #15]
      break;
 8007828:	e04a      	b.n	80078c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	785b      	ldrb	r3, [r3, #1]
 800782e:	2b09      	cmp	r3, #9
 8007830:	d83b      	bhi.n	80078aa <USBD_StdDevReq+0xc2>
 8007832:	a201      	add	r2, pc, #4	; (adr r2, 8007838 <USBD_StdDevReq+0x50>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	0800788d 	.word	0x0800788d
 800783c:	080078a1 	.word	0x080078a1
 8007840:	080078ab 	.word	0x080078ab
 8007844:	08007897 	.word	0x08007897
 8007848:	080078ab 	.word	0x080078ab
 800784c:	0800786b 	.word	0x0800786b
 8007850:	08007861 	.word	0x08007861
 8007854:	080078ab 	.word	0x080078ab
 8007858:	08007883 	.word	0x08007883
 800785c:	08007875 	.word	0x08007875
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa3c 	bl	8007ce0 <USBD_GetDescriptor>
          break;
 8007868:	e024      	b.n	80078b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fba1 	bl	8007fb4 <USBD_SetAddress>
          break;
 8007872:	e01f      	b.n	80078b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fbe0 	bl	800803c <USBD_SetConfig>
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
          break;
 8007880:	e018      	b.n	80078b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fc83 	bl	8008190 <USBD_GetConfig>
          break;
 800788a:	e013      	b.n	80078b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fcb4 	bl	80081fc <USBD_GetStatus>
          break;
 8007894:	e00e      	b.n	80078b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fce3 	bl	8008264 <USBD_SetFeature>
          break;
 800789e:	e009      	b.n	80078b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fd07 	bl	80082b6 <USBD_ClrFeature>
          break;
 80078a8:	e004      	b.n	80078b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fd5e 	bl	800836e <USBD_CtlError>
          break;
 80078b2:	bf00      	nop
      }
      break;
 80078b4:	e004      	b.n	80078c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fd58 	bl	800836e <USBD_CtlError>
      break;
 80078be:	bf00      	nop
  }

  return ret;
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop

080078cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078e2:	2b40      	cmp	r3, #64	; 0x40
 80078e4:	d005      	beq.n	80078f2 <USBD_StdItfReq+0x26>
 80078e6:	2b40      	cmp	r3, #64	; 0x40
 80078e8:	d852      	bhi.n	8007990 <USBD_StdItfReq+0xc4>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <USBD_StdItfReq+0x26>
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d14e      	bne.n	8007990 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d840      	bhi.n	8007982 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	889b      	ldrh	r3, [r3, #4]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b01      	cmp	r3, #1
 8007908:	d836      	bhi.n	8007978 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	889b      	ldrh	r3, [r3, #4]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff fed9 	bl	80076ca <USBD_CoreFindIF>
 8007918:	4603      	mov	r3, r0
 800791a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2bff      	cmp	r3, #255	; 0xff
 8007920:	d01d      	beq.n	800795e <USBD_StdItfReq+0x92>
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d11a      	bne.n	800795e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007928:	7bba      	ldrb	r2, [r7, #14]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	32ae      	adds	r2, #174	; 0xae
 800792e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00f      	beq.n	8007958 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007938:	7bba      	ldrb	r2, [r7, #14]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007940:	7bba      	ldrb	r2, [r7, #14]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	32ae      	adds	r2, #174	; 0xae
 8007946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
 8007952:	4603      	mov	r3, r0
 8007954:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007956:	e004      	b.n	8007962 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007958:	2303      	movs	r3, #3
 800795a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800795c:	e001      	b.n	8007962 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800795e:	2303      	movs	r3, #3
 8007960:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	88db      	ldrh	r3, [r3, #6]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d110      	bne.n	800798c <USBD_StdItfReq+0xc0>
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10d      	bne.n	800798c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fdc7 	bl	8008504 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007976:	e009      	b.n	800798c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fcf7 	bl	800836e <USBD_CtlError>
          break;
 8007980:	e004      	b.n	800798c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fcf2 	bl	800836e <USBD_CtlError>
          break;
 800798a:	e000      	b.n	800798e <USBD_StdItfReq+0xc2>
          break;
 800798c:	bf00      	nop
      }
      break;
 800798e:	e004      	b.n	800799a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fceb 	bl	800836e <USBD_CtlError>
      break;
 8007998:	bf00      	nop
  }

  return ret;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	889b      	ldrh	r3, [r3, #4]
 80079b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079c0:	2b40      	cmp	r3, #64	; 0x40
 80079c2:	d007      	beq.n	80079d4 <USBD_StdEPReq+0x30>
 80079c4:	2b40      	cmp	r3, #64	; 0x40
 80079c6:	f200 817f 	bhi.w	8007cc8 <USBD_StdEPReq+0x324>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d02a      	beq.n	8007a24 <USBD_StdEPReq+0x80>
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	f040 817a 	bne.w	8007cc8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff fe83 	bl	80076e4 <USBD_CoreFindEP>
 80079de:	4603      	mov	r3, r0
 80079e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079e2:	7b7b      	ldrb	r3, [r7, #13]
 80079e4:	2bff      	cmp	r3, #255	; 0xff
 80079e6:	f000 8174 	beq.w	8007cd2 <USBD_StdEPReq+0x32e>
 80079ea:	7b7b      	ldrb	r3, [r7, #13]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f040 8170 	bne.w	8007cd2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079f2:	7b7a      	ldrb	r2, [r7, #13]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079fa:	7b7a      	ldrb	r2, [r7, #13]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	32ae      	adds	r2, #174	; 0xae
 8007a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8163 	beq.w	8007cd2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a0c:	7b7a      	ldrb	r2, [r7, #13]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	32ae      	adds	r2, #174	; 0xae
 8007a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a22:	e156      	b.n	8007cd2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d008      	beq.n	8007a3e <USBD_StdEPReq+0x9a>
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	f300 8145 	bgt.w	8007cbc <USBD_StdEPReq+0x318>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 809b 	beq.w	8007b6e <USBD_StdEPReq+0x1ca>
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d03c      	beq.n	8007ab6 <USBD_StdEPReq+0x112>
 8007a3c:	e13e      	b.n	8007cbc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d002      	beq.n	8007a50 <USBD_StdEPReq+0xac>
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d016      	beq.n	8007a7c <USBD_StdEPReq+0xd8>
 8007a4e:	e02c      	b.n	8007aaa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00d      	beq.n	8007a72 <USBD_StdEPReq+0xce>
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b80      	cmp	r3, #128	; 0x80
 8007a5a:	d00a      	beq.n	8007a72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 f971 	bl	8008d48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a66:	2180      	movs	r1, #128	; 0x80
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 f96d 	bl	8008d48 <USBD_LL_StallEP>
 8007a6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a70:	e020      	b.n	8007ab4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fc7a 	bl	800836e <USBD_CtlError>
              break;
 8007a7a:	e01b      	b.n	8007ab4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	885b      	ldrh	r3, [r3, #2]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10e      	bne.n	8007aa2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00b      	beq.n	8007aa2 <USBD_StdEPReq+0xfe>
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b80      	cmp	r3, #128	; 0x80
 8007a8e:	d008      	beq.n	8007aa2 <USBD_StdEPReq+0xfe>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	88db      	ldrh	r3, [r3, #6]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d104      	bne.n	8007aa2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 f953 	bl	8008d48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fd2e 	bl	8008504 <USBD_CtlSendStatus>

              break;
 8007aa8:	e004      	b.n	8007ab4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fc5e 	bl	800836e <USBD_CtlError>
              break;
 8007ab2:	bf00      	nop
          }
          break;
 8007ab4:	e107      	b.n	8007cc6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d002      	beq.n	8007ac8 <USBD_StdEPReq+0x124>
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d016      	beq.n	8007af4 <USBD_StdEPReq+0x150>
 8007ac6:	e04b      	b.n	8007b60 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00d      	beq.n	8007aea <USBD_StdEPReq+0x146>
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b80      	cmp	r3, #128	; 0x80
 8007ad2:	d00a      	beq.n	8007aea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 f935 	bl	8008d48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ade:	2180      	movs	r1, #128	; 0x80
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 f931 	bl	8008d48 <USBD_LL_StallEP>
 8007ae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ae8:	e040      	b.n	8007b6c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fc3e 	bl	800836e <USBD_CtlError>
              break;
 8007af2:	e03b      	b.n	8007b6c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	885b      	ldrh	r3, [r3, #2]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d136      	bne.n	8007b6a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 f93b 	bl	8008d86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fcf7 	bl	8008504 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff fde2 	bl	80076e4 <USBD_CoreFindEP>
 8007b20:	4603      	mov	r3, r0
 8007b22:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b24:	7b7b      	ldrb	r3, [r7, #13]
 8007b26:	2bff      	cmp	r3, #255	; 0xff
 8007b28:	d01f      	beq.n	8007b6a <USBD_StdEPReq+0x1c6>
 8007b2a:	7b7b      	ldrb	r3, [r7, #13]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d11c      	bne.n	8007b6a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b30:	7b7a      	ldrb	r2, [r7, #13]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b38:	7b7a      	ldrb	r2, [r7, #13]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	32ae      	adds	r2, #174	; 0xae
 8007b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d010      	beq.n	8007b6a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b48:	7b7a      	ldrb	r2, [r7, #13]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	32ae      	adds	r2, #174	; 0xae
 8007b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b5e:	e004      	b.n	8007b6a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fc03 	bl	800836e <USBD_CtlError>
              break;
 8007b68:	e000      	b.n	8007b6c <USBD_StdEPReq+0x1c8>
              break;
 8007b6a:	bf00      	nop
          }
          break;
 8007b6c:	e0ab      	b.n	8007cc6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d002      	beq.n	8007b80 <USBD_StdEPReq+0x1dc>
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d032      	beq.n	8007be4 <USBD_StdEPReq+0x240>
 8007b7e:	e097      	b.n	8007cb0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d007      	beq.n	8007b96 <USBD_StdEPReq+0x1f2>
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b80      	cmp	r3, #128	; 0x80
 8007b8a:	d004      	beq.n	8007b96 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fbed 	bl	800836e <USBD_CtlError>
                break;
 8007b94:	e091      	b.n	8007cba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	da0b      	bge.n	8007bb6 <USBD_StdEPReq+0x212>
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	3310      	adds	r3, #16
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	e00b      	b.n	8007bce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	4413      	add	r3, r2
 8007bcc:	3304      	adds	r3, #4
 8007bce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fc37 	bl	8008450 <USBD_CtlSendData>
              break;
 8007be2:	e06a      	b.n	8007cba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da11      	bge.n	8007c10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	f003 020f 	and.w	r2, r3, #15
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	3324      	adds	r3, #36	; 0x24
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d117      	bne.n	8007c36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fbb0 	bl	800836e <USBD_CtlError>
                  break;
 8007c0e:	e054      	b.n	8007cba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	f003 020f 	and.w	r2, r3, #15
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d104      	bne.n	8007c36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fb9d 	bl	800836e <USBD_CtlError>
                  break;
 8007c34:	e041      	b.n	8007cba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	da0b      	bge.n	8007c56 <USBD_StdEPReq+0x2b2>
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	3310      	adds	r3, #16
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	4413      	add	r3, r2
 8007c52:	3304      	adds	r3, #4
 8007c54:	e00b      	b.n	8007c6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <USBD_StdEPReq+0x2d8>
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	2b80      	cmp	r3, #128	; 0x80
 8007c7a:	d103      	bne.n	8007c84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	e00e      	b.n	8007ca2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 f89b 	bl	8008dc4 <USBD_LL_IsStallEP>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2201      	movs	r2, #1
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	e002      	b.n	8007ca2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fbd1 	bl	8008450 <USBD_CtlSendData>
              break;
 8007cae:	e004      	b.n	8007cba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fb5b 	bl	800836e <USBD_CtlError>
              break;
 8007cb8:	bf00      	nop
          }
          break;
 8007cba:	e004      	b.n	8007cc6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fb55 	bl	800836e <USBD_CtlError>
          break;
 8007cc4:	bf00      	nop
      }
      break;
 8007cc6:	e005      	b.n	8007cd4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fb4f 	bl	800836e <USBD_CtlError>
      break;
 8007cd0:	e000      	b.n	8007cd4 <USBD_StdEPReq+0x330>
      break;
 8007cd2:	bf00      	nop
  }

  return ret;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	0a1b      	lsrs	r3, r3, #8
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	2b06      	cmp	r3, #6
 8007d02:	f200 8128 	bhi.w	8007f56 <USBD_GetDescriptor+0x276>
 8007d06:	a201      	add	r2, pc, #4	; (adr r2, 8007d0c <USBD_GetDescriptor+0x2c>)
 8007d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0c:	08007d29 	.word	0x08007d29
 8007d10:	08007d41 	.word	0x08007d41
 8007d14:	08007d81 	.word	0x08007d81
 8007d18:	08007f57 	.word	0x08007f57
 8007d1c:	08007f57 	.word	0x08007f57
 8007d20:	08007ef7 	.word	0x08007ef7
 8007d24:	08007f23 	.word	0x08007f23
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	7c12      	ldrb	r2, [r2, #16]
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	60f8      	str	r0, [r7, #12]
      break;
 8007d3e:	e112      	b.n	8007f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	7c1b      	ldrb	r3, [r3, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10d      	bne.n	8007d64 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	f107 0208 	add.w	r2, r7, #8
 8007d54:	4610      	mov	r0, r2
 8007d56:	4798      	blx	r3
 8007d58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	2202      	movs	r2, #2
 8007d60:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d62:	e100      	b.n	8007f66 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	f107 0208 	add.w	r2, r7, #8
 8007d70:	4610      	mov	r0, r2
 8007d72:	4798      	blx	r3
 8007d74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	701a      	strb	r2, [r3, #0]
      break;
 8007d7e:	e0f2      	b.n	8007f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	885b      	ldrh	r3, [r3, #2]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b05      	cmp	r3, #5
 8007d88:	f200 80ac 	bhi.w	8007ee4 <USBD_GetDescriptor+0x204>
 8007d8c:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <USBD_GetDescriptor+0xb4>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007dad 	.word	0x08007dad
 8007d98:	08007de1 	.word	0x08007de1
 8007d9c:	08007e15 	.word	0x08007e15
 8007da0:	08007e49 	.word	0x08007e49
 8007da4:	08007e7d 	.word	0x08007e7d
 8007da8:	08007eb1 	.word	0x08007eb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00b      	beq.n	8007dd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	7c12      	ldrb	r2, [r2, #16]
 8007dc4:	f107 0108 	add.w	r1, r7, #8
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
 8007dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dce:	e091      	b.n	8007ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 facb 	bl	800836e <USBD_CtlError>
            err++;
 8007dd8:	7afb      	ldrb	r3, [r7, #11]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dde:	e089      	b.n	8007ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00b      	beq.n	8007e04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	7c12      	ldrb	r2, [r2, #16]
 8007df8:	f107 0108 	add.w	r1, r7, #8
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	4798      	blx	r3
 8007e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e02:	e077      	b.n	8007ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fab1 	bl	800836e <USBD_CtlError>
            err++;
 8007e0c:	7afb      	ldrb	r3, [r7, #11]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	72fb      	strb	r3, [r7, #11]
          break;
 8007e12:	e06f      	b.n	8007ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	7c12      	ldrb	r2, [r2, #16]
 8007e2c:	f107 0108 	add.w	r1, r7, #8
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
 8007e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e36:	e05d      	b.n	8007ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fa97 	bl	800836e <USBD_CtlError>
            err++;
 8007e40:	7afb      	ldrb	r3, [r7, #11]
 8007e42:	3301      	adds	r3, #1
 8007e44:	72fb      	strb	r3, [r7, #11]
          break;
 8007e46:	e055      	b.n	8007ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	7c12      	ldrb	r2, [r2, #16]
 8007e60:	f107 0108 	add.w	r1, r7, #8
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
 8007e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e6a:	e043      	b.n	8007ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa7d 	bl	800836e <USBD_CtlError>
            err++;
 8007e74:	7afb      	ldrb	r3, [r7, #11]
 8007e76:	3301      	adds	r3, #1
 8007e78:	72fb      	strb	r3, [r7, #11]
          break;
 8007e7a:	e03b      	b.n	8007ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00b      	beq.n	8007ea0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	7c12      	ldrb	r2, [r2, #16]
 8007e94:	f107 0108 	add.w	r1, r7, #8
 8007e98:	4610      	mov	r0, r2
 8007e9a:	4798      	blx	r3
 8007e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e9e:	e029      	b.n	8007ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa63 	bl	800836e <USBD_CtlError>
            err++;
 8007ea8:	7afb      	ldrb	r3, [r7, #11]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	72fb      	strb	r3, [r7, #11]
          break;
 8007eae:	e021      	b.n	8007ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00b      	beq.n	8007ed4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	7c12      	ldrb	r2, [r2, #16]
 8007ec8:	f107 0108 	add.w	r1, r7, #8
 8007ecc:	4610      	mov	r0, r2
 8007ece:	4798      	blx	r3
 8007ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ed2:	e00f      	b.n	8007ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fa49 	bl	800836e <USBD_CtlError>
            err++;
 8007edc:	7afb      	ldrb	r3, [r7, #11]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ee2:	e007      	b.n	8007ef4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa41 	bl	800836e <USBD_CtlError>
          err++;
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ef2:	bf00      	nop
      }
      break;
 8007ef4:	e037      	b.n	8007f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	7c1b      	ldrb	r3, [r3, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d109      	bne.n	8007f12 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f06:	f107 0208 	add.w	r2, r7, #8
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	4798      	blx	r3
 8007f0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f10:	e029      	b.n	8007f66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fa2a 	bl	800836e <USBD_CtlError>
        err++;
 8007f1a:	7afb      	ldrb	r3, [r7, #11]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f20:	e021      	b.n	8007f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	7c1b      	ldrb	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10d      	bne.n	8007f46 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	f107 0208 	add.w	r2, r7, #8
 8007f36:	4610      	mov	r0, r2
 8007f38:	4798      	blx	r3
 8007f3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	2207      	movs	r2, #7
 8007f42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f44:	e00f      	b.n	8007f66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fa10 	bl	800836e <USBD_CtlError>
        err++;
 8007f4e:	7afb      	ldrb	r3, [r7, #11]
 8007f50:	3301      	adds	r3, #1
 8007f52:	72fb      	strb	r3, [r7, #11]
      break;
 8007f54:	e007      	b.n	8007f66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fa08 	bl	800836e <USBD_CtlError>
      err++;
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	3301      	adds	r3, #1
 8007f62:	72fb      	strb	r3, [r7, #11]
      break;
 8007f64:	bf00      	nop
  }

  if (err != 0U)
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d11e      	bne.n	8007faa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	88db      	ldrh	r3, [r3, #6]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d016      	beq.n	8007fa2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f74:	893b      	ldrh	r3, [r7, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00e      	beq.n	8007f98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	88da      	ldrh	r2, [r3, #6]
 8007f7e:	893b      	ldrh	r3, [r7, #8]
 8007f80:	4293      	cmp	r3, r2
 8007f82:	bf28      	it	cs
 8007f84:	4613      	movcs	r3, r2
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f8a:	893b      	ldrh	r3, [r7, #8]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fa5d 	bl	8008450 <USBD_CtlSendData>
 8007f96:	e009      	b.n	8007fac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f9e7 	bl	800836e <USBD_CtlError>
 8007fa0:	e004      	b.n	8007fac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 faae 	bl	8008504 <USBD_CtlSendStatus>
 8007fa8:	e000      	b.n	8007fac <USBD_GetDescriptor+0x2cc>
    return;
 8007faa:	bf00      	nop
  }
}
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop

08007fb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	889b      	ldrh	r3, [r3, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d131      	bne.n	800802a <USBD_SetAddress+0x76>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	88db      	ldrh	r3, [r3, #6]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d12d      	bne.n	800802a <USBD_SetAddress+0x76>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8007fd4:	d829      	bhi.n	800802a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d104      	bne.n	8007ff8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f9bc 	bl	800836e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff6:	e01d      	b.n	8008034 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	7bfa      	ldrb	r2, [r7, #15]
 8007ffc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 ff09 	bl	8008e1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa7a 	bl	8008504 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d004      	beq.n	8008020 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2202      	movs	r2, #2
 800801a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801e:	e009      	b.n	8008034 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008028:	e004      	b.n	8008034 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f99e 	bl	800836e <USBD_CtlError>
  }
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	885b      	ldrh	r3, [r3, #2]
 800804e:	b2da      	uxtb	r2, r3
 8008050:	4b4e      	ldr	r3, [pc, #312]	; (800818c <USBD_SetConfig+0x150>)
 8008052:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008054:	4b4d      	ldr	r3, [pc, #308]	; (800818c <USBD_SetConfig+0x150>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d905      	bls.n	8008068 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f985 	bl	800836e <USBD_CtlError>
    return USBD_FAIL;
 8008064:	2303      	movs	r3, #3
 8008066:	e08c      	b.n	8008182 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b02      	cmp	r3, #2
 8008072:	d002      	beq.n	800807a <USBD_SetConfig+0x3e>
 8008074:	2b03      	cmp	r3, #3
 8008076:	d029      	beq.n	80080cc <USBD_SetConfig+0x90>
 8008078:	e075      	b.n	8008166 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800807a:	4b44      	ldr	r3, [pc, #272]	; (800818c <USBD_SetConfig+0x150>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d020      	beq.n	80080c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008082:	4b42      	ldr	r3, [pc, #264]	; (800818c <USBD_SetConfig+0x150>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800808c:	4b3f      	ldr	r3, [pc, #252]	; (800818c <USBD_SetConfig+0x150>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7fe ffe7 	bl	8007066 <USBD_SetClassConfig>
 8008098:	4603      	mov	r3, r0
 800809a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d008      	beq.n	80080b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f962 	bl	800836e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2202      	movs	r2, #2
 80080ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080b2:	e065      	b.n	8008180 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fa25 	bl	8008504 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2203      	movs	r2, #3
 80080be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080c2:	e05d      	b.n	8008180 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa1d 	bl	8008504 <USBD_CtlSendStatus>
      break;
 80080ca:	e059      	b.n	8008180 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080cc:	4b2f      	ldr	r3, [pc, #188]	; (800818c <USBD_SetConfig+0x150>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d112      	bne.n	80080fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080dc:	4b2b      	ldr	r3, [pc, #172]	; (800818c <USBD_SetConfig+0x150>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080e6:	4b29      	ldr	r3, [pc, #164]	; (800818c <USBD_SetConfig+0x150>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7fe ffd6 	bl	800709e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa06 	bl	8008504 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080f8:	e042      	b.n	8008180 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080fa:	4b24      	ldr	r3, [pc, #144]	; (800818c <USBD_SetConfig+0x150>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	429a      	cmp	r2, r3
 8008106:	d02a      	beq.n	800815e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7fe ffc4 	bl	800709e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008116:	4b1d      	ldr	r3, [pc, #116]	; (800818c <USBD_SetConfig+0x150>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008120:	4b1a      	ldr	r3, [pc, #104]	; (800818c <USBD_SetConfig+0x150>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fe ff9d 	bl	8007066 <USBD_SetClassConfig>
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008130:	7bfb      	ldrb	r3, [r7, #15]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00f      	beq.n	8008156 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f918 	bl	800836e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fe ffa9 	bl	800709e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008154:	e014      	b.n	8008180 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f9d4 	bl	8008504 <USBD_CtlSendStatus>
      break;
 800815c:	e010      	b.n	8008180 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f9d0 	bl	8008504 <USBD_CtlSendStatus>
      break;
 8008164:	e00c      	b.n	8008180 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f900 	bl	800836e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800816e:	4b07      	ldr	r3, [pc, #28]	; (800818c <USBD_SetConfig+0x150>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7fe ff92 	bl	800709e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800817a:	2303      	movs	r3, #3
 800817c:	73fb      	strb	r3, [r7, #15]
      break;
 800817e:	bf00      	nop
  }

  return ret;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20000494 	.word	0x20000494

08008190 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	88db      	ldrh	r3, [r3, #6]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d004      	beq.n	80081ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f8e2 	bl	800836e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081aa:	e023      	b.n	80081f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	dc02      	bgt.n	80081be <USBD_GetConfig+0x2e>
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	dc03      	bgt.n	80081c4 <USBD_GetConfig+0x34>
 80081bc:	e015      	b.n	80081ea <USBD_GetConfig+0x5a>
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d00b      	beq.n	80081da <USBD_GetConfig+0x4a>
 80081c2:	e012      	b.n	80081ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3308      	adds	r3, #8
 80081ce:	2201      	movs	r2, #1
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f93c 	bl	8008450 <USBD_CtlSendData>
        break;
 80081d8:	e00c      	b.n	80081f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3304      	adds	r3, #4
 80081de:	2201      	movs	r2, #1
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f934 	bl	8008450 <USBD_CtlSendData>
        break;
 80081e8:	e004      	b.n	80081f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f8be 	bl	800836e <USBD_CtlError>
        break;
 80081f2:	bf00      	nop
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820c:	b2db      	uxtb	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	2b02      	cmp	r3, #2
 8008212:	d81e      	bhi.n	8008252 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	88db      	ldrh	r3, [r3, #6]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d004      	beq.n	8008226 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f8a5 	bl	800836e <USBD_CtlError>
        break;
 8008224:	e01a      	b.n	800825c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f043 0202 	orr.w	r2, r3, #2
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	330c      	adds	r3, #12
 8008246:	2202      	movs	r2, #2
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f900 	bl	8008450 <USBD_CtlSendData>
      break;
 8008250:	e004      	b.n	800825c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f88a 	bl	800836e <USBD_CtlError>
      break;
 800825a:	bf00      	nop
  }
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	885b      	ldrh	r3, [r3, #2]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d107      	bne.n	8008286 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f940 	bl	8008504 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008284:	e013      	b.n	80082ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	885b      	ldrh	r3, [r3, #2]
 800828a:	2b02      	cmp	r3, #2
 800828c:	d10b      	bne.n	80082a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	889b      	ldrh	r3, [r3, #4]
 8008292:	0a1b      	lsrs	r3, r3, #8
 8008294:	b29b      	uxth	r3, r3
 8008296:	b2da      	uxtb	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f930 	bl	8008504 <USBD_CtlSendStatus>
}
 80082a4:	e003      	b.n	80082ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f860 	bl	800836e <USBD_CtlError>
}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	3b01      	subs	r3, #1
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d80b      	bhi.n	80082e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	885b      	ldrh	r3, [r3, #2]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d10c      	bne.n	80082f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f910 	bl	8008504 <USBD_CtlSendStatus>
      }
      break;
 80082e4:	e004      	b.n	80082f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f840 	bl	800836e <USBD_CtlError>
      break;
 80082ee:	e000      	b.n	80082f2 <USBD_ClrFeature+0x3c>
      break;
 80082f0:	bf00      	nop
  }
}
 80082f2:	bf00      	nop
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	781a      	ldrb	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	3301      	adds	r3, #1
 8008314:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3301      	adds	r3, #1
 8008322:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff fa41 	bl	80077ac <SWAPBYTE>
 800832a:	4603      	mov	r3, r0
 800832c:	461a      	mov	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3301      	adds	r3, #1
 8008336:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3301      	adds	r3, #1
 800833c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff fa34 	bl	80077ac <SWAPBYTE>
 8008344:	4603      	mov	r3, r0
 8008346:	461a      	mov	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3301      	adds	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3301      	adds	r3, #1
 8008356:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f7ff fa27 	bl	80077ac <SWAPBYTE>
 800835e:	4603      	mov	r3, r0
 8008360:	461a      	mov	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	80da      	strh	r2, [r3, #6]
}
 8008366:	bf00      	nop
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b082      	sub	sp, #8
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008378:	2180      	movs	r1, #128	; 0x80
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fce4 	bl	8008d48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008380:	2100      	movs	r1, #0
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fce0 	bl	8008d48 <USBD_LL_StallEP>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800839c:	2300      	movs	r3, #0
 800839e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d036      	beq.n	8008414 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083aa:	6938      	ldr	r0, [r7, #16]
 80083ac:	f000 f836 	bl	800841c <USBD_GetLen>
 80083b0:	4603      	mov	r3, r0
 80083b2:	3301      	adds	r3, #1
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	4413      	add	r3, r2
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	7812      	ldrb	r2, [r2, #0]
 80083c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	3301      	adds	r3, #1
 80083ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	4413      	add	r3, r2
 80083d6:	2203      	movs	r2, #3
 80083d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	3301      	adds	r3, #1
 80083de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083e0:	e013      	b.n	800840a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	4413      	add	r3, r2
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	7812      	ldrb	r2, [r2, #0]
 80083ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	3301      	adds	r3, #1
 80083f2:	613b      	str	r3, [r7, #16]
    idx++;
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	3301      	adds	r3, #1
 80083f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	4413      	add	r3, r2
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
    idx++;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	3301      	adds	r3, #1
 8008408:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e7      	bne.n	80083e2 <USBD_GetString+0x52>
 8008412:	e000      	b.n	8008416 <USBD_GetString+0x86>
    return;
 8008414:	bf00      	nop
  }
}
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800842c:	e005      	b.n	800843a <USBD_GetLen+0x1e>
  {
    len++;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	3301      	adds	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	3301      	adds	r3, #1
 8008438:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f5      	bne.n	800842e <USBD_GetLen+0x12>
  }

  return len;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2202      	movs	r2, #2
 8008460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	2100      	movs	r1, #0
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 fcef 	bl	8008e5a <USBD_LL_Transmit>

  return USBD_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b084      	sub	sp, #16
 800848a:	af00      	add	r7, sp, #0
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	2100      	movs	r1, #0
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 fcde 	bl	8008e5a <USBD_LL_Transmit>

  return USBD_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2203      	movs	r2, #3
 80084b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	2100      	movs	r1, #0
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 fce2 	bl	8008e9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	2100      	movs	r1, #0
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 fcd1 	bl	8008e9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2204      	movs	r2, #4
 8008510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008514:	2300      	movs	r3, #0
 8008516:	2200      	movs	r2, #0
 8008518:	2100      	movs	r1, #0
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fc9d 	bl	8008e5a <USBD_LL_Transmit>

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2205      	movs	r2, #5
 8008536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800853a:	2300      	movs	r3, #0
 800853c:	2200      	movs	r2, #0
 800853e:	2100      	movs	r1, #0
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fcab 	bl	8008e9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008554:	2200      	movs	r2, #0
 8008556:	4912      	ldr	r1, [pc, #72]	; (80085a0 <MX_USB_DEVICE_Init+0x50>)
 8008558:	4812      	ldr	r0, [pc, #72]	; (80085a4 <MX_USB_DEVICE_Init+0x54>)
 800855a:	f7fe fd07 	bl	8006f6c <USBD_Init>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008564:	f7f8 fa00 	bl	8000968 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008568:	490f      	ldr	r1, [pc, #60]	; (80085a8 <MX_USB_DEVICE_Init+0x58>)
 800856a:	480e      	ldr	r0, [pc, #56]	; (80085a4 <MX_USB_DEVICE_Init+0x54>)
 800856c:	f7fe fd2e 	bl	8006fcc <USBD_RegisterClass>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008576:	f7f8 f9f7 	bl	8000968 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800857a:	490c      	ldr	r1, [pc, #48]	; (80085ac <MX_USB_DEVICE_Init+0x5c>)
 800857c:	4809      	ldr	r0, [pc, #36]	; (80085a4 <MX_USB_DEVICE_Init+0x54>)
 800857e:	f7fe fc1f 	bl	8006dc0 <USBD_CDC_RegisterInterface>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008588:	f7f8 f9ee 	bl	8000968 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800858c:	4805      	ldr	r0, [pc, #20]	; (80085a4 <MX_USB_DEVICE_Init+0x54>)
 800858e:	f7fe fd53 	bl	8007038 <USBD_Start>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008598:	f7f8 f9e6 	bl	8000968 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800859c:	bf00      	nop
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	200000ac 	.word	0x200000ac
 80085a4:	20000498 	.word	0x20000498
 80085a8:	20000018 	.word	0x20000018
 80085ac:	20000098 	.word	0x20000098

080085b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085b4:	2200      	movs	r2, #0
 80085b6:	4905      	ldr	r1, [pc, #20]	; (80085cc <CDC_Init_FS+0x1c>)
 80085b8:	4805      	ldr	r0, [pc, #20]	; (80085d0 <CDC_Init_FS+0x20>)
 80085ba:	f7fe fc1b 	bl	8006df4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085be:	4905      	ldr	r1, [pc, #20]	; (80085d4 <CDC_Init_FS+0x24>)
 80085c0:	4803      	ldr	r0, [pc, #12]	; (80085d0 <CDC_Init_FS+0x20>)
 80085c2:	f7fe fc39 	bl	8006e38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20000f74 	.word	0x20000f74
 80085d0:	20000498 	.word	0x20000498
 80085d4:	20000774 	.word	0x20000774

080085d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085de:	4618      	mov	r0, r3
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	6039      	str	r1, [r7, #0]
 80085f2:	71fb      	strb	r3, [r7, #7]
 80085f4:	4613      	mov	r3, r2
 80085f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085f8:	79fb      	ldrb	r3, [r7, #7]
 80085fa:	2b23      	cmp	r3, #35	; 0x23
 80085fc:	d84a      	bhi.n	8008694 <CDC_Control_FS+0xac>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <CDC_Control_FS+0x1c>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008695 	.word	0x08008695
 8008608:	08008695 	.word	0x08008695
 800860c:	08008695 	.word	0x08008695
 8008610:	08008695 	.word	0x08008695
 8008614:	08008695 	.word	0x08008695
 8008618:	08008695 	.word	0x08008695
 800861c:	08008695 	.word	0x08008695
 8008620:	08008695 	.word	0x08008695
 8008624:	08008695 	.word	0x08008695
 8008628:	08008695 	.word	0x08008695
 800862c:	08008695 	.word	0x08008695
 8008630:	08008695 	.word	0x08008695
 8008634:	08008695 	.word	0x08008695
 8008638:	08008695 	.word	0x08008695
 800863c:	08008695 	.word	0x08008695
 8008640:	08008695 	.word	0x08008695
 8008644:	08008695 	.word	0x08008695
 8008648:	08008695 	.word	0x08008695
 800864c:	08008695 	.word	0x08008695
 8008650:	08008695 	.word	0x08008695
 8008654:	08008695 	.word	0x08008695
 8008658:	08008695 	.word	0x08008695
 800865c:	08008695 	.word	0x08008695
 8008660:	08008695 	.word	0x08008695
 8008664:	08008695 	.word	0x08008695
 8008668:	08008695 	.word	0x08008695
 800866c:	08008695 	.word	0x08008695
 8008670:	08008695 	.word	0x08008695
 8008674:	08008695 	.word	0x08008695
 8008678:	08008695 	.word	0x08008695
 800867c:	08008695 	.word	0x08008695
 8008680:	08008695 	.word	0x08008695
 8008684:	08008695 	.word	0x08008695
 8008688:	08008695 	.word	0x08008695
 800868c:	08008695 	.word	0x08008695
 8008690:	08008695 	.word	0x08008695
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008694:	bf00      	nop
  }

  return (USBD_OK);
 8008696:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	480b      	ldr	r0, [pc, #44]	; (80086e0 <CDC_Receive_FS+0x3c>)
 80086b2:	f7fe fbc1 	bl	8006e38 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086b6:	480a      	ldr	r0, [pc, #40]	; (80086e0 <CDC_Receive_FS+0x3c>)
 80086b8:	f7fe fc22 	bl	8006f00 <USBD_CDC_ReceivePacket>
	//Set the received packet length
	cdcHandeler.cdcRxPacketSize = *Len;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	4b08      	ldr	r3, [pc, #32]	; (80086e4 <CDC_Receive_FS+0x40>)
 80086c4:	811a      	strh	r2, [r3, #8]

	CDC_Transmit_FS(Buf, hUsbDeviceFS.ep0_data_len);
 80086c6:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <CDC_Receive_FS+0x3c>)
 80086c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f809 	bl	80086e8 <CDC_Transmit_FS>

	return (USBD_OK);
 80086d6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20000498 	.word	0x20000498
 80086e4:	20001774 	.word	0x20001774

080086e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086f8:	4b0d      	ldr	r3, [pc, #52]	; (8008730 <CDC_Transmit_FS+0x48>)
 80086fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800870a:	2301      	movs	r3, #1
 800870c:	e00b      	b.n	8008726 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800870e:	887b      	ldrh	r3, [r7, #2]
 8008710:	461a      	mov	r2, r3
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	4806      	ldr	r0, [pc, #24]	; (8008730 <CDC_Transmit_FS+0x48>)
 8008716:	f7fe fb6d 	bl	8006df4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800871a:	4805      	ldr	r0, [pc, #20]	; (8008730 <CDC_Transmit_FS+0x48>)
 800871c:	f7fe fbaa 	bl	8006e74 <USBD_CDC_TransmitPacket>
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20000498 	.word	0x20000498

08008734 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008746:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800874a:	4618      	mov	r0, r3
 800874c:	371c      	adds	r7, #28
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
	...

08008758 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2212      	movs	r2, #18
 8008768:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800876a:	4b03      	ldr	r3, [pc, #12]	; (8008778 <USBD_FS_DeviceDescriptor+0x20>)
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	200000c8 	.word	0x200000c8

0800877c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2204      	movs	r2, #4
 800878c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800878e:	4b03      	ldr	r3, [pc, #12]	; (800879c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	200000dc 	.word	0x200000dc

080087a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	6039      	str	r1, [r7, #0]
 80087aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d105      	bne.n	80087be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	4907      	ldr	r1, [pc, #28]	; (80087d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80087b6:	4808      	ldr	r0, [pc, #32]	; (80087d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80087b8:	f7ff fdea 	bl	8008390 <USBD_GetString>
 80087bc:	e004      	b.n	80087c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	4904      	ldr	r1, [pc, #16]	; (80087d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80087c2:	4805      	ldr	r0, [pc, #20]	; (80087d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80087c4:	f7ff fde4 	bl	8008390 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087c8:	4b02      	ldr	r3, [pc, #8]	; (80087d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20001784 	.word	0x20001784
 80087d8:	08009b40 	.word	0x08009b40

080087dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	6039      	str	r1, [r7, #0]
 80087e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	4904      	ldr	r1, [pc, #16]	; (80087fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087ec:	4804      	ldr	r0, [pc, #16]	; (8008800 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087ee:	f7ff fdcf 	bl	8008390 <USBD_GetString>
  return USBD_StrDesc;
 80087f2:	4b02      	ldr	r3, [pc, #8]	; (80087fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20001784 	.word	0x20001784
 8008800:	08009b4c 	.word	0x08009b4c

08008804 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	221a      	movs	r2, #26
 8008814:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008816:	f000 f843 	bl	80088a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800881a:	4b02      	ldr	r3, [pc, #8]	; (8008824 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	200000e0 	.word	0x200000e0

08008828 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d105      	bne.n	8008846 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4907      	ldr	r1, [pc, #28]	; (800885c <USBD_FS_ConfigStrDescriptor+0x34>)
 800883e:	4808      	ldr	r0, [pc, #32]	; (8008860 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008840:	f7ff fda6 	bl	8008390 <USBD_GetString>
 8008844:	e004      	b.n	8008850 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4904      	ldr	r1, [pc, #16]	; (800885c <USBD_FS_ConfigStrDescriptor+0x34>)
 800884a:	4805      	ldr	r0, [pc, #20]	; (8008860 <USBD_FS_ConfigStrDescriptor+0x38>)
 800884c:	f7ff fda0 	bl	8008390 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008850:	4b02      	ldr	r3, [pc, #8]	; (800885c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20001784 	.word	0x20001784
 8008860:	08009b60 	.word	0x08009b60

08008864 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	6039      	str	r1, [r7, #0]
 800886e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d105      	bne.n	8008882 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	4907      	ldr	r1, [pc, #28]	; (8008898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800887a:	4808      	ldr	r0, [pc, #32]	; (800889c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800887c:	f7ff fd88 	bl	8008390 <USBD_GetString>
 8008880:	e004      	b.n	800888c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4904      	ldr	r1, [pc, #16]	; (8008898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008886:	4805      	ldr	r0, [pc, #20]	; (800889c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008888:	f7ff fd82 	bl	8008390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800888c:	4b02      	ldr	r3, [pc, #8]	; (8008898 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20001784 	.word	0x20001784
 800889c:	08009b6c 	.word	0x08009b6c

080088a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088a6:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <Get_SerialNum+0x44>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088ac:	4b0e      	ldr	r3, [pc, #56]	; (80088e8 <Get_SerialNum+0x48>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088b2:	4b0e      	ldr	r3, [pc, #56]	; (80088ec <Get_SerialNum+0x4c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4413      	add	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088c6:	2208      	movs	r2, #8
 80088c8:	4909      	ldr	r1, [pc, #36]	; (80088f0 <Get_SerialNum+0x50>)
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 f814 	bl	80088f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088d0:	2204      	movs	r2, #4
 80088d2:	4908      	ldr	r1, [pc, #32]	; (80088f4 <Get_SerialNum+0x54>)
 80088d4:	68b8      	ldr	r0, [r7, #8]
 80088d6:	f000 f80f 	bl	80088f8 <IntToUnicode>
  }
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	1fff7a10 	.word	0x1fff7a10
 80088e8:	1fff7a14 	.word	0x1fff7a14
 80088ec:	1fff7a18 	.word	0x1fff7a18
 80088f0:	200000e2 	.word	0x200000e2
 80088f4:	200000f2 	.word	0x200000f2

080088f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800890a:	2300      	movs	r3, #0
 800890c:	75fb      	strb	r3, [r7, #23]
 800890e:	e027      	b.n	8008960 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	0f1b      	lsrs	r3, r3, #28
 8008914:	2b09      	cmp	r3, #9
 8008916:	d80b      	bhi.n	8008930 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	0f1b      	lsrs	r3, r3, #28
 800891c:	b2da      	uxtb	r2, r3
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4619      	mov	r1, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	440b      	add	r3, r1
 8008928:	3230      	adds	r2, #48	; 0x30
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	e00a      	b.n	8008946 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	0f1b      	lsrs	r3, r3, #28
 8008934:	b2da      	uxtb	r2, r3
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	4619      	mov	r1, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	440b      	add	r3, r1
 8008940:	3237      	adds	r2, #55	; 0x37
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	3301      	adds	r3, #1
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	4413      	add	r3, r2
 8008956:	2200      	movs	r2, #0
 8008958:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	3301      	adds	r3, #1
 800895e:	75fb      	strb	r3, [r7, #23]
 8008960:	7dfa      	ldrb	r2, [r7, #23]
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	429a      	cmp	r2, r3
 8008966:	d3d3      	bcc.n	8008910 <IntToUnicode+0x18>
  }
}
 8008968:	bf00      	nop
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
	...

08008978 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	; 0x28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008980:	f107 0314 	add.w	r3, r7, #20
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	605a      	str	r2, [r3, #4]
 800898a:	609a      	str	r2, [r3, #8]
 800898c:	60da      	str	r2, [r3, #12]
 800898e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008998:	d13a      	bne.n	8008a10 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800899a:	2300      	movs	r3, #0
 800899c:	613b      	str	r3, [r7, #16]
 800899e:	4b1e      	ldr	r3, [pc, #120]	; (8008a18 <HAL_PCD_MspInit+0xa0>)
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	4a1d      	ldr	r2, [pc, #116]	; (8008a18 <HAL_PCD_MspInit+0xa0>)
 80089a4:	f043 0301 	orr.w	r3, r3, #1
 80089a8:	6313      	str	r3, [r2, #48]	; 0x30
 80089aa:	4b1b      	ldr	r3, [pc, #108]	; (8008a18 <HAL_PCD_MspInit+0xa0>)
 80089ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	613b      	str	r3, [r7, #16]
 80089b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80089ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089bc:	2302      	movs	r3, #2
 80089be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c0:	2300      	movs	r3, #0
 80089c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089c4:	2303      	movs	r3, #3
 80089c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089c8:	230a      	movs	r3, #10
 80089ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089cc:	f107 0314 	add.w	r3, r7, #20
 80089d0:	4619      	mov	r1, r3
 80089d2:	4812      	ldr	r0, [pc, #72]	; (8008a1c <HAL_PCD_MspInit+0xa4>)
 80089d4:	f7f8 ff1a 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089d8:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <HAL_PCD_MspInit+0xa0>)
 80089da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089dc:	4a0e      	ldr	r2, [pc, #56]	; (8008a18 <HAL_PCD_MspInit+0xa0>)
 80089de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e2:	6353      	str	r3, [r2, #52]	; 0x34
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <HAL_PCD_MspInit+0xa0>)
 80089ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ec:	4a0a      	ldr	r2, [pc, #40]	; (8008a18 <HAL_PCD_MspInit+0xa0>)
 80089ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089f2:	6453      	str	r3, [r2, #68]	; 0x44
 80089f4:	4b08      	ldr	r3, [pc, #32]	; (8008a18 <HAL_PCD_MspInit+0xa0>)
 80089f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a00:	2200      	movs	r2, #0
 8008a02:	2100      	movs	r1, #0
 8008a04:	2043      	movs	r0, #67	; 0x43
 8008a06:	f7f8 fac8 	bl	8000f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a0a:	2043      	movs	r0, #67	; 0x43
 8008a0c:	f7f8 fae1 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a10:	bf00      	nop
 8008a12:	3728      	adds	r7, #40	; 0x28
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	40023800 	.word	0x40023800
 8008a1c:	40020000 	.word	0x40020000

08008a20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a34:	4619      	mov	r1, r3
 8008a36:	4610      	mov	r0, r2
 8008a38:	f7fe fb4b 	bl	80070d2 <USBD_LL_SetupStage>
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	00db      	lsls	r3, r3, #3
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	440b      	add	r3, r1
 8008a64:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	f7fe fb85 	bl	800717c <USBD_LL_DataOutStage>
}
 8008a72:	bf00      	nop
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	460b      	mov	r3, r1
 8008a84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	4613      	mov	r3, r2
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	440b      	add	r3, r1
 8008a9a:	334c      	adds	r3, #76	; 0x4c
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	78fb      	ldrb	r3, [r7, #3]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	f7fe fc1e 	bl	80072e2 <USBD_LL_DataInStage>
}
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe fd52 	bl	8007566 <USBD_LL_SOF>
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d001      	beq.n	8008ae2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ade:	f7f7 ff43 	bl	8000968 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ae8:	7bfa      	ldrb	r2, [r7, #15]
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe fcfc 	bl	80074ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fe fca4 	bl	8007446 <USBD_LL_Reset>
}
 8008afe:	bf00      	nop
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe fcf7 	bl	800750a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	6812      	ldr	r2, [r2, #0]
 8008b2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b2e:	f043 0301 	orr.w	r3, r3, #1
 8008b32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b3c:	4b04      	ldr	r3, [pc, #16]	; (8008b50 <HAL_PCD_SuspendCallback+0x48>)
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	4a03      	ldr	r2, [pc, #12]	; (8008b50 <HAL_PCD_SuspendCallback+0x48>)
 8008b42:	f043 0306 	orr.w	r3, r3, #6
 8008b46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	e000ed00 	.word	0xe000ed00

08008b54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe fce7 	bl	8007536 <USBD_LL_Resume>
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b82:	78fa      	ldrb	r2, [r7, #3]
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fd3f 	bl	800760a <USBD_LL_IsoOUTIncomplete>
}
 8008b8c:	bf00      	nop
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ba6:	78fa      	ldrb	r2, [r7, #3]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fcfb 	bl	80075a6 <USBD_LL_IsoINIncomplete>
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fd51 	bl	800766e <USBD_LL_DevConnected>
}
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fe fd4e 	bl	8007684 <USBD_LL_DevDisconnected>
}
 8008be8:	bf00      	nop
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d13c      	bne.n	8008c7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c00:	4a20      	ldr	r2, [pc, #128]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a1e      	ldr	r2, [pc, #120]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c0c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c10:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c18:	4b1a      	ldr	r3, [pc, #104]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c1a:	2204      	movs	r2, #4
 8008c1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c1e:	4b19      	ldr	r3, [pc, #100]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c20:	2202      	movs	r2, #2
 8008c22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c24:	4b17      	ldr	r3, [pc, #92]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c2a:	4b16      	ldr	r3, [pc, #88]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c30:	4b14      	ldr	r3, [pc, #80]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c36:	4b13      	ldr	r3, [pc, #76]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c3c:	4b11      	ldr	r3, [pc, #68]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c42:	4b10      	ldr	r3, [pc, #64]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c48:	4b0e      	ldr	r3, [pc, #56]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c4e:	480d      	ldr	r0, [pc, #52]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c50:	f7f8 ff79 	bl	8001b46 <HAL_PCD_Init>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c5a:	f7f7 fe85 	bl	8000968 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c5e:	2180      	movs	r1, #128	; 0x80
 8008c60:	4808      	ldr	r0, [pc, #32]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c62:	f7fa f9d0 	bl	8003006 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c66:	2240      	movs	r2, #64	; 0x40
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4806      	ldr	r0, [pc, #24]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c6c:	f7fa f984 	bl	8002f78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c70:	2280      	movs	r2, #128	; 0x80
 8008c72:	2101      	movs	r1, #1
 8008c74:	4803      	ldr	r0, [pc, #12]	; (8008c84 <USBD_LL_Init+0x94>)
 8008c76:	f7fa f97f 	bl	8002f78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	20001984 	.word	0x20001984

08008c88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7f9 f86e 	bl	8001d80 <HAL_PCD_Start>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 f942 	bl	8008f34 <USBD_Get_USB_Status>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	4608      	mov	r0, r1
 8008cc8:	4611      	mov	r1, r2
 8008cca:	461a      	mov	r2, r3
 8008ccc:	4603      	mov	r3, r0
 8008cce:	70fb      	strb	r3, [r7, #3]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70bb      	strb	r3, [r7, #2]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ce6:	78bb      	ldrb	r3, [r7, #2]
 8008ce8:	883a      	ldrh	r2, [r7, #0]
 8008cea:	78f9      	ldrb	r1, [r7, #3]
 8008cec:	f7f9 fd3f 	bl	800276e <HAL_PCD_EP_Open>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 f91c 	bl	8008f34 <USBD_Get_USB_Status>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	460b      	mov	r3, r1
 8008d14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d24:	78fa      	ldrb	r2, [r7, #3]
 8008d26:	4611      	mov	r1, r2
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7f9 fd88 	bl	800283e <HAL_PCD_EP_Close>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 f8fd 	bl	8008f34 <USBD_Get_USB_Status>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d62:	78fa      	ldrb	r2, [r7, #3]
 8008d64:	4611      	mov	r1, r2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7f9 fe60 	bl	8002a2c <HAL_PCD_EP_SetStall>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 f8de 	bl	8008f34 <USBD_Get_USB_Status>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	460b      	mov	r3, r1
 8008d90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008da0:	78fa      	ldrb	r2, [r7, #3]
 8008da2:	4611      	mov	r1, r2
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7f9 fea5 	bl	8002af4 <HAL_PCD_EP_ClrStall>
 8008daa:	4603      	mov	r3, r0
 8008dac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 f8bf 	bl	8008f34 <USBD_Get_USB_Status>
 8008db6:	4603      	mov	r3, r0
 8008db8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	da0b      	bge.n	8008df8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008de6:	68f9      	ldr	r1, [r7, #12]
 8008de8:	4613      	mov	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	333e      	adds	r3, #62	; 0x3e
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	e00b      	b.n	8008e10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	4613      	mov	r3, r2
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	440b      	add	r3, r1
 8008e0a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e36:	78fa      	ldrb	r2, [r7, #3]
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7f9 fc72 	bl	8002724 <HAL_PCD_SetAddress>
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 f874 	bl	8008f34 <USBD_Get_USB_Status>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b086      	sub	sp, #24
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
 8008e66:	460b      	mov	r3, r1
 8008e68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e78:	7af9      	ldrb	r1, [r7, #11]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	f7f9 fd8b 	bl	8002998 <HAL_PCD_EP_Transmit>
 8008e82:	4603      	mov	r3, r0
 8008e84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 f853 	bl	8008f34 <USBD_Get_USB_Status>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e92:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	607a      	str	r2, [r7, #4]
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008eba:	7af9      	ldrb	r1, [r7, #11]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	f7f9 fd07 	bl	80028d2 <HAL_PCD_EP_Receive>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 f832 	bl	8008f34 <USBD_Get_USB_Status>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ed4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7f9 fd37 	bl	8002968 <HAL_PCD_EP_GetRxCount>
 8008efa:	4603      	mov	r3, r0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f0c:	4b03      	ldr	r3, [pc, #12]	; (8008f1c <USBD_static_malloc+0x18>)
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	20001e90 	.word	0x20001e90

08008f20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]

}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f42:	79fb      	ldrb	r3, [r7, #7]
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d817      	bhi.n	8008f78 <USBD_Get_USB_Status+0x44>
 8008f48:	a201      	add	r2, pc, #4	; (adr r2, 8008f50 <USBD_Get_USB_Status+0x1c>)
 8008f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4e:	bf00      	nop
 8008f50:	08008f61 	.word	0x08008f61
 8008f54:	08008f67 	.word	0x08008f67
 8008f58:	08008f6d 	.word	0x08008f6d
 8008f5c:	08008f73 	.word	0x08008f73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	73fb      	strb	r3, [r7, #15]
    break;
 8008f64:	e00b      	b.n	8008f7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f66:	2303      	movs	r3, #3
 8008f68:	73fb      	strb	r3, [r7, #15]
    break;
 8008f6a:	e008      	b.n	8008f7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f70:	e005      	b.n	8008f7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f72:	2303      	movs	r3, #3
 8008f74:	73fb      	strb	r3, [r7, #15]
    break;
 8008f76:	e002      	b.n	8008f7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f7c:	bf00      	nop
  }
  return usb_status;
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <rybg211_bleModuleInit>:

/* PRIVATE FUNCTIONS DECLARATION ---------------------------------------------*/

/* FUNCTION PROTOTYPES -------------------------------------------------------*/
void rybg211_bleModuleInit(void)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	af00      	add	r7, sp, #0
	memset(&hBleModule, 0, sizeof(hBleModule_t));
 8008f90:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008f94:	2100      	movs	r1, #0
 8008f96:	4805      	ldr	r0, [pc, #20]	; (8008fac <rybg211_bleModuleInit+0x20>)
 8008f98:	f000 f958 	bl	800924c <memset>

	HAL_GPIO_WritePin(BLE_MODULE_RESET_GPIO_PORT, BLE_MODULE_RESET_PIN, ENABLE);
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008fa2:	4803      	ldr	r0, [pc, #12]	; (8008fb0 <rybg211_bleModuleInit+0x24>)
 8008fa4:	f7f8 fdb6 	bl	8001b14 <HAL_GPIO_WritePin>
}
 8008fa8:	bf00      	nop
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	200020b0 	.word	0x200020b0
 8008fb0:	40020400 	.word	0x40020400

08008fb4 <rybg211_setDeviceName>:

void rybg211_setDeviceName(char* moduleBuffer, char* nameString)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af04      	add	r7, sp, #16
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
	uint8_t nameStringSize = strlen(nameString);
 8008fbe:	6838      	ldr	r0, [r7, #0]
 8008fc0:	f7f7 f90e 	bl	80001e0 <strlen>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73fb      	strb	r3, [r7, #15]

	memcpy(moduleBuffer ,BLE_NAME_SET, sizeof(BLE_NAME_SET));
 8008fc8:	2209      	movs	r2, #9
 8008fca:	4910      	ldr	r1, [pc, #64]	; (800900c <rybg211_setDeviceName+0x58>)
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f92f 	bl	8009230 <memcpy>

	sprintf((char*)moduleBuffer, "%s%d%s%s%s",BLE_NAME_SET,
 8008fd2:	7bfa      	ldrb	r2, [r7, #15]
 8008fd4:	4b0e      	ldr	r3, [pc, #56]	; (8009010 <rybg211_setDeviceName+0x5c>)
 8008fd6:	9302      	str	r3, [sp, #8]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	4b0d      	ldr	r3, [pc, #52]	; (8009014 <rybg211_setDeviceName+0x60>)
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	4a0a      	ldr	r2, [pc, #40]	; (800900c <rybg211_setDeviceName+0x58>)
 8008fe4:	490c      	ldr	r1, [pc, #48]	; (8009018 <rybg211_setDeviceName+0x64>)
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f938 	bl	800925c <siprintf>
										BLE_NEW_FIELD,
										nameString,
										BLE_CMD_TERM);


	hBleModule.txPacketSize = strlen((char*)moduleBuffer);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7f7 f8f7 	bl	80001e0 <strlen>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	4b09      	ldr	r3, [pc, #36]	; (800901c <rybg211_setDeviceName+0x68>)
 8008ff8:	805a      	strh	r2, [r3, #2]

	hBleModule.controlFlags.flag.packetToTransmit = ENABLE;
 8008ffa:	4a08      	ldr	r2, [pc, #32]	; (800901c <rybg211_setDeviceName+0x68>)
 8008ffc:	7813      	ldrb	r3, [r2, #0]
 8008ffe:	f043 0302 	orr.w	r3, r3, #2
 8009002:	7013      	strb	r3, [r2, #0]
}
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	08009b7c 	.word	0x08009b7c
 8009010:	08009b94 	.word	0x08009b94
 8009014:	08009b98 	.word	0x08009b98
 8009018:	08009b88 	.word	0x08009b88
 800901c:	200020b0 	.word	0x200020b0

08009020 <rybg211_rxPacketParser>:

uint8_t rybg211_rxPacketParser(char* moduleBuffer, uint8_t packetSize)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	70fb      	strb	r3, [r7, #3]
	uint8_t packetToRead = false;
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]

	if(0 == memcmp(moduleBuffer, BLE_DATA_RX, BLE_PARSER_CHAR_COUNT))
 8009030:	2204      	movs	r2, #4
 8009032:	4919      	ldr	r1, [pc, #100]	; (8009098 <rybg211_rxPacketParser+0x78>)
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f8eb 	bl	8009210 <memcmp>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d102      	bne.n	8009046 <rybg211_rxPacketParser+0x26>
	{
		//Activation to read the data part of the received packet.
		packetToRead = true;
 8009040:	2301      	movs	r3, #1
 8009042:	73fb      	strb	r3, [r7, #15]
 8009044:	e023      	b.n	800908e <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_CONNECTION,BLE_PARSER_CHAR_COUNT))
 8009046:	2204      	movs	r2, #4
 8009048:	4914      	ldr	r1, [pc, #80]	; (800909c <rybg211_rxPacketParser+0x7c>)
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f8e0 	bl	8009210 <memcmp>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <rybg211_rxPacketParser+0x4c>
	{
		hBleModule.ConnectedDevice = moduleBuffer[6];
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	799a      	ldrb	r2, [r3, #6]
 800905a:	4b11      	ldr	r3, [pc, #68]	; (80090a0 <rybg211_rxPacketParser+0x80>)
 800905c:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 800905e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009062:	2100      	movs	r1, #0
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f8f1 	bl	800924c <memset>
 800906a:	e010      	b.n	800908e <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_DISCONNECTION, BLE_PARSER_CHAR_COUNT))
 800906c:	2204      	movs	r2, #4
 800906e:	490d      	ldr	r1, [pc, #52]	; (80090a4 <rybg211_rxPacketParser+0x84>)
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f8cd 	bl	8009210 <memcmp>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d108      	bne.n	800908e <rybg211_rxPacketParser+0x6e>
	{
		hBleModule.ConnectedDevice = 0;
 800907c:	4b08      	ldr	r3, [pc, #32]	; (80090a0 <rybg211_rxPacketParser+0x80>)
 800907e:	2200      	movs	r2, #0
 8009080:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 8009082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009086:	2100      	movs	r1, #0
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f8df 	bl	800924c <memset>
	}

	return packetToRead;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	08009b9c 	.word	0x08009b9c
 800909c:	08009ba4 	.word	0x08009ba4
 80090a0:	200020b0 	.word	0x200020b0
 80090a4:	08009bac 	.word	0x08009bac

080090a8 <asciiToValue>:
 * 						  stored in targetValue. the value stored in String won't be changed.
 *
 * @return	This function will return the number of found digits in the passed String.
 */
uint8_t asciiToValue(uint32_t* targetValue, uint8_t* String)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
	uint8_t 	digitCount  = 0;
 80090b2:	2300      	movs	r3, #0
 80090b4:	75fb      	strb	r3, [r7, #23]
	uint32_t 	tempValue 	= 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	613b      	str	r3, [r7, #16]
	uint16_t 	tens 		= 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	81fb      	strh	r3, [r7, #14]
	//Count the number of digits in the string
	while(isdigit(String[digitCount]))
 80090be:	e002      	b.n	80090c6 <asciiToValue+0x1e>
	{
		++digitCount;
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
 80090c2:	3301      	adds	r3, #1
 80090c4:	75fb      	strb	r3, [r7, #23]
	while(isdigit(String[digitCount]))
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	4413      	add	r3, r2
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	3301      	adds	r3, #1
 80090d0:	4a26      	ldr	r2, [pc, #152]	; (800916c <asciiToValue+0xc4>)
 80090d2:	4413      	add	r3, r2
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1f0      	bne.n	80090c0 <asciiToValue+0x18>
	}
	//This check is done to prevent this function from execution if non alphanumeric string is passed to this function.
	if(0 != digitCount)
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d03c      	beq.n	800915e <asciiToValue+0xb6>
	{
		//Operation fix
		digitCount -= 1;
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
 80090e6:	3b01      	subs	r3, #1
 80090e8:	75fb      	strb	r3, [r7, #23]
		//determines the multiplications of tens
		tens = digitCount == ONE_DIGIT   ? 1   : tens;
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <asciiToValue+0x4c>
 80090f0:	89fb      	ldrh	r3, [r7, #14]
 80090f2:	e000      	b.n	80090f6 <asciiToValue+0x4e>
 80090f4:	2301      	movs	r3, #1
 80090f6:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == TWO_DIGIT   ? 10  : tens;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d001      	beq.n	8009102 <asciiToValue+0x5a>
 80090fe:	89fb      	ldrh	r3, [r7, #14]
 8009100:	e000      	b.n	8009104 <asciiToValue+0x5c>
 8009102:	230a      	movs	r3, #10
 8009104:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == THREE_DIGIT ? 100 : tens;
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d001      	beq.n	8009110 <asciiToValue+0x68>
 800910c:	89fb      	ldrh	r3, [r7, #14]
 800910e:	e000      	b.n	8009112 <asciiToValue+0x6a>
 8009110:	2364      	movs	r3, #100	; 0x64
 8009112:	81fb      	strh	r3, [r7, #14]
		//Start calculating the integer value out of the passed digits
		for(int8_t i = 0; i <= digitCount; ++i)
 8009114:	2300      	movs	r3, #0
 8009116:	737b      	strb	r3, [r7, #13]
 8009118:	e016      	b.n	8009148 <asciiToValue+0xa0>
		{
			tempValue = tempValue + ((String[i] - ASCII_STARTING_VALUE) * tens);
 800911a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	4413      	add	r3, r2
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	3b30      	subs	r3, #48	; 0x30
 8009126:	89fa      	ldrh	r2, [r7, #14]
 8009128:	fb02 f303 	mul.w	r3, r2, r3
 800912c:	461a      	mov	r2, r3
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	4413      	add	r3, r2
 8009132:	613b      	str	r3, [r7, #16]
			tens = tens / 10;
 8009134:	89fb      	ldrh	r3, [r7, #14]
 8009136:	4a0e      	ldr	r2, [pc, #56]	; (8009170 <asciiToValue+0xc8>)
 8009138:	fba2 2303 	umull	r2, r3, r2, r3
 800913c:	08db      	lsrs	r3, r3, #3
 800913e:	81fb      	strh	r3, [r7, #14]
		for(int8_t i = 0; i <= digitCount; ++i)
 8009140:	7b7b      	ldrb	r3, [r7, #13]
 8009142:	3301      	adds	r3, #1
 8009144:	b2db      	uxtb	r3, r3
 8009146:	737b      	strb	r3, [r7, #13]
 8009148:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800914c:	7dfb      	ldrb	r3, [r7, #23]
 800914e:	429a      	cmp	r2, r3
 8009150:	dde3      	ble.n	800911a <asciiToValue+0x72>
		}
		//Pass the obtained integer value to targetValue that will be returned
		*targetValue = tempValue;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	601a      	str	r2, [r3, #0]
		//digitCount will carry the number of found digits in the String
		++digitCount;
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	3301      	adds	r3, #1
 800915c:	75fb      	strb	r3, [r7, #23]
	}
	return digitCount;
 800915e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009160:	4618      	mov	r0, r3
 8009162:	371c      	adds	r7, #28
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	08009bd4 	.word	0x08009bd4
 8009170:	cccccccd 	.word	0xcccccccd

08009174 <rybg211_rxDataRead>:
 * @param moduleBuffer
 * @param targertBuffer
 * @return
 */
uint32_t rybg211_rxDataRead(char* moduleBuffer, char* targertBuffer)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
	//+1 is used to ignore the ',' from the received packet and jump directly to the data field.
	uint8_t dataPositionOffset = BLE_RX_SIZE_BYTE_POSITION + 1;
 800917e:	2308      	movs	r3, #8
 8009180:	73fb      	strb	r3, [r7, #15]

	uint32_t length = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	60bb      	str	r3, [r7, #8]
	//Convert the size from ASCII to integer format and obtain the number of digits to adjust the correct data positio.
	dataPositionOffset += asciiToValue(&length, (uint8_t*)moduleBuffer + BLE_RX_SIZE_BYTE_POSITION);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	1dda      	adds	r2, r3, #7
 800918a:	f107 0308 	add.w	r3, r7, #8
 800918e:	4611      	mov	r1, r2
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff ff89 	bl	80090a8 <asciiToValue>
 8009196:	4603      	mov	r3, r0
 8009198:	461a      	mov	r2, r3
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	4413      	add	r3, r2
 800919e:	73fb      	strb	r3, [r7, #15]

	memcpy(targertBuffer, moduleBuffer + dataPositionOffset, length);
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	4413      	add	r3, r2
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	4619      	mov	r1, r3
 80091aa:	6838      	ldr	r0, [r7, #0]
 80091ac:	f000 f840 	bl	8009230 <memcpy>

	return length;
 80091b0:	68bb      	ldr	r3, [r7, #8]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <__errno>:
 80091bc:	4b01      	ldr	r3, [pc, #4]	; (80091c4 <__errno+0x8>)
 80091be:	6818      	ldr	r0, [r3, #0]
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	200000fc 	.word	0x200000fc

080091c8 <__libc_init_array>:
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	4d0d      	ldr	r5, [pc, #52]	; (8009200 <__libc_init_array+0x38>)
 80091cc:	4c0d      	ldr	r4, [pc, #52]	; (8009204 <__libc_init_array+0x3c>)
 80091ce:	1b64      	subs	r4, r4, r5
 80091d0:	10a4      	asrs	r4, r4, #2
 80091d2:	2600      	movs	r6, #0
 80091d4:	42a6      	cmp	r6, r4
 80091d6:	d109      	bne.n	80091ec <__libc_init_array+0x24>
 80091d8:	4d0b      	ldr	r5, [pc, #44]	; (8009208 <__libc_init_array+0x40>)
 80091da:	4c0c      	ldr	r4, [pc, #48]	; (800920c <__libc_init_array+0x44>)
 80091dc:	f000 fc9e 	bl	8009b1c <_init>
 80091e0:	1b64      	subs	r4, r4, r5
 80091e2:	10a4      	asrs	r4, r4, #2
 80091e4:	2600      	movs	r6, #0
 80091e6:	42a6      	cmp	r6, r4
 80091e8:	d105      	bne.n	80091f6 <__libc_init_array+0x2e>
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f0:	4798      	blx	r3
 80091f2:	3601      	adds	r6, #1
 80091f4:	e7ee      	b.n	80091d4 <__libc_init_array+0xc>
 80091f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091fa:	4798      	blx	r3
 80091fc:	3601      	adds	r6, #1
 80091fe:	e7f2      	b.n	80091e6 <__libc_init_array+0x1e>
 8009200:	08009d10 	.word	0x08009d10
 8009204:	08009d10 	.word	0x08009d10
 8009208:	08009d10 	.word	0x08009d10
 800920c:	08009d14 	.word	0x08009d14

08009210 <memcmp>:
 8009210:	b510      	push	{r4, lr}
 8009212:	3901      	subs	r1, #1
 8009214:	4402      	add	r2, r0
 8009216:	4290      	cmp	r0, r2
 8009218:	d101      	bne.n	800921e <memcmp+0xe>
 800921a:	2000      	movs	r0, #0
 800921c:	e005      	b.n	800922a <memcmp+0x1a>
 800921e:	7803      	ldrb	r3, [r0, #0]
 8009220:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009224:	42a3      	cmp	r3, r4
 8009226:	d001      	beq.n	800922c <memcmp+0x1c>
 8009228:	1b18      	subs	r0, r3, r4
 800922a:	bd10      	pop	{r4, pc}
 800922c:	3001      	adds	r0, #1
 800922e:	e7f2      	b.n	8009216 <memcmp+0x6>

08009230 <memcpy>:
 8009230:	440a      	add	r2, r1
 8009232:	4291      	cmp	r1, r2
 8009234:	f100 33ff 	add.w	r3, r0, #4294967295
 8009238:	d100      	bne.n	800923c <memcpy+0xc>
 800923a:	4770      	bx	lr
 800923c:	b510      	push	{r4, lr}
 800923e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009246:	4291      	cmp	r1, r2
 8009248:	d1f9      	bne.n	800923e <memcpy+0xe>
 800924a:	bd10      	pop	{r4, pc}

0800924c <memset>:
 800924c:	4402      	add	r2, r0
 800924e:	4603      	mov	r3, r0
 8009250:	4293      	cmp	r3, r2
 8009252:	d100      	bne.n	8009256 <memset+0xa>
 8009254:	4770      	bx	lr
 8009256:	f803 1b01 	strb.w	r1, [r3], #1
 800925a:	e7f9      	b.n	8009250 <memset+0x4>

0800925c <siprintf>:
 800925c:	b40e      	push	{r1, r2, r3}
 800925e:	b500      	push	{lr}
 8009260:	b09c      	sub	sp, #112	; 0x70
 8009262:	ab1d      	add	r3, sp, #116	; 0x74
 8009264:	9002      	str	r0, [sp, #8]
 8009266:	9006      	str	r0, [sp, #24]
 8009268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800926c:	4809      	ldr	r0, [pc, #36]	; (8009294 <siprintf+0x38>)
 800926e:	9107      	str	r1, [sp, #28]
 8009270:	9104      	str	r1, [sp, #16]
 8009272:	4909      	ldr	r1, [pc, #36]	; (8009298 <siprintf+0x3c>)
 8009274:	f853 2b04 	ldr.w	r2, [r3], #4
 8009278:	9105      	str	r1, [sp, #20]
 800927a:	6800      	ldr	r0, [r0, #0]
 800927c:	9301      	str	r3, [sp, #4]
 800927e:	a902      	add	r1, sp, #8
 8009280:	f000 f868 	bl	8009354 <_svfiprintf_r>
 8009284:	9b02      	ldr	r3, [sp, #8]
 8009286:	2200      	movs	r2, #0
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	b01c      	add	sp, #112	; 0x70
 800928c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009290:	b003      	add	sp, #12
 8009292:	4770      	bx	lr
 8009294:	200000fc 	.word	0x200000fc
 8009298:	ffff0208 	.word	0xffff0208

0800929c <__ssputs_r>:
 800929c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	688e      	ldr	r6, [r1, #8]
 80092a2:	429e      	cmp	r6, r3
 80092a4:	4682      	mov	sl, r0
 80092a6:	460c      	mov	r4, r1
 80092a8:	4690      	mov	r8, r2
 80092aa:	461f      	mov	r7, r3
 80092ac:	d838      	bhi.n	8009320 <__ssputs_r+0x84>
 80092ae:	898a      	ldrh	r2, [r1, #12]
 80092b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092b4:	d032      	beq.n	800931c <__ssputs_r+0x80>
 80092b6:	6825      	ldr	r5, [r4, #0]
 80092b8:	6909      	ldr	r1, [r1, #16]
 80092ba:	eba5 0901 	sub.w	r9, r5, r1
 80092be:	6965      	ldr	r5, [r4, #20]
 80092c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092c8:	3301      	adds	r3, #1
 80092ca:	444b      	add	r3, r9
 80092cc:	106d      	asrs	r5, r5, #1
 80092ce:	429d      	cmp	r5, r3
 80092d0:	bf38      	it	cc
 80092d2:	461d      	movcc	r5, r3
 80092d4:	0553      	lsls	r3, r2, #21
 80092d6:	d531      	bpl.n	800933c <__ssputs_r+0xa0>
 80092d8:	4629      	mov	r1, r5
 80092da:	f000 fb55 	bl	8009988 <_malloc_r>
 80092de:	4606      	mov	r6, r0
 80092e0:	b950      	cbnz	r0, 80092f8 <__ssputs_r+0x5c>
 80092e2:	230c      	movs	r3, #12
 80092e4:	f8ca 3000 	str.w	r3, [sl]
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295
 80092f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f8:	6921      	ldr	r1, [r4, #16]
 80092fa:	464a      	mov	r2, r9
 80092fc:	f7ff ff98 	bl	8009230 <memcpy>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800930a:	81a3      	strh	r3, [r4, #12]
 800930c:	6126      	str	r6, [r4, #16]
 800930e:	6165      	str	r5, [r4, #20]
 8009310:	444e      	add	r6, r9
 8009312:	eba5 0509 	sub.w	r5, r5, r9
 8009316:	6026      	str	r6, [r4, #0]
 8009318:	60a5      	str	r5, [r4, #8]
 800931a:	463e      	mov	r6, r7
 800931c:	42be      	cmp	r6, r7
 800931e:	d900      	bls.n	8009322 <__ssputs_r+0x86>
 8009320:	463e      	mov	r6, r7
 8009322:	6820      	ldr	r0, [r4, #0]
 8009324:	4632      	mov	r2, r6
 8009326:	4641      	mov	r1, r8
 8009328:	f000 faa8 	bl	800987c <memmove>
 800932c:	68a3      	ldr	r3, [r4, #8]
 800932e:	1b9b      	subs	r3, r3, r6
 8009330:	60a3      	str	r3, [r4, #8]
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	4433      	add	r3, r6
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	2000      	movs	r0, #0
 800933a:	e7db      	b.n	80092f4 <__ssputs_r+0x58>
 800933c:	462a      	mov	r2, r5
 800933e:	f000 fb97 	bl	8009a70 <_realloc_r>
 8009342:	4606      	mov	r6, r0
 8009344:	2800      	cmp	r0, #0
 8009346:	d1e1      	bne.n	800930c <__ssputs_r+0x70>
 8009348:	6921      	ldr	r1, [r4, #16]
 800934a:	4650      	mov	r0, sl
 800934c:	f000 fab0 	bl	80098b0 <_free_r>
 8009350:	e7c7      	b.n	80092e2 <__ssputs_r+0x46>
	...

08009354 <_svfiprintf_r>:
 8009354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009358:	4698      	mov	r8, r3
 800935a:	898b      	ldrh	r3, [r1, #12]
 800935c:	061b      	lsls	r3, r3, #24
 800935e:	b09d      	sub	sp, #116	; 0x74
 8009360:	4607      	mov	r7, r0
 8009362:	460d      	mov	r5, r1
 8009364:	4614      	mov	r4, r2
 8009366:	d50e      	bpl.n	8009386 <_svfiprintf_r+0x32>
 8009368:	690b      	ldr	r3, [r1, #16]
 800936a:	b963      	cbnz	r3, 8009386 <_svfiprintf_r+0x32>
 800936c:	2140      	movs	r1, #64	; 0x40
 800936e:	f000 fb0b 	bl	8009988 <_malloc_r>
 8009372:	6028      	str	r0, [r5, #0]
 8009374:	6128      	str	r0, [r5, #16]
 8009376:	b920      	cbnz	r0, 8009382 <_svfiprintf_r+0x2e>
 8009378:	230c      	movs	r3, #12
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	f04f 30ff 	mov.w	r0, #4294967295
 8009380:	e0d1      	b.n	8009526 <_svfiprintf_r+0x1d2>
 8009382:	2340      	movs	r3, #64	; 0x40
 8009384:	616b      	str	r3, [r5, #20]
 8009386:	2300      	movs	r3, #0
 8009388:	9309      	str	r3, [sp, #36]	; 0x24
 800938a:	2320      	movs	r3, #32
 800938c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009390:	f8cd 800c 	str.w	r8, [sp, #12]
 8009394:	2330      	movs	r3, #48	; 0x30
 8009396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009540 <_svfiprintf_r+0x1ec>
 800939a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800939e:	f04f 0901 	mov.w	r9, #1
 80093a2:	4623      	mov	r3, r4
 80093a4:	469a      	mov	sl, r3
 80093a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093aa:	b10a      	cbz	r2, 80093b0 <_svfiprintf_r+0x5c>
 80093ac:	2a25      	cmp	r2, #37	; 0x25
 80093ae:	d1f9      	bne.n	80093a4 <_svfiprintf_r+0x50>
 80093b0:	ebba 0b04 	subs.w	fp, sl, r4
 80093b4:	d00b      	beq.n	80093ce <_svfiprintf_r+0x7a>
 80093b6:	465b      	mov	r3, fp
 80093b8:	4622      	mov	r2, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	4638      	mov	r0, r7
 80093be:	f7ff ff6d 	bl	800929c <__ssputs_r>
 80093c2:	3001      	adds	r0, #1
 80093c4:	f000 80aa 	beq.w	800951c <_svfiprintf_r+0x1c8>
 80093c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093ca:	445a      	add	r2, fp
 80093cc:	9209      	str	r2, [sp, #36]	; 0x24
 80093ce:	f89a 3000 	ldrb.w	r3, [sl]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 80a2 	beq.w	800951c <_svfiprintf_r+0x1c8>
 80093d8:	2300      	movs	r3, #0
 80093da:	f04f 32ff 	mov.w	r2, #4294967295
 80093de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e2:	f10a 0a01 	add.w	sl, sl, #1
 80093e6:	9304      	str	r3, [sp, #16]
 80093e8:	9307      	str	r3, [sp, #28]
 80093ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093ee:	931a      	str	r3, [sp, #104]	; 0x68
 80093f0:	4654      	mov	r4, sl
 80093f2:	2205      	movs	r2, #5
 80093f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f8:	4851      	ldr	r0, [pc, #324]	; (8009540 <_svfiprintf_r+0x1ec>)
 80093fa:	f7f6 fef9 	bl	80001f0 <memchr>
 80093fe:	9a04      	ldr	r2, [sp, #16]
 8009400:	b9d8      	cbnz	r0, 800943a <_svfiprintf_r+0xe6>
 8009402:	06d0      	lsls	r0, r2, #27
 8009404:	bf44      	itt	mi
 8009406:	2320      	movmi	r3, #32
 8009408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800940c:	0711      	lsls	r1, r2, #28
 800940e:	bf44      	itt	mi
 8009410:	232b      	movmi	r3, #43	; 0x2b
 8009412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009416:	f89a 3000 	ldrb.w	r3, [sl]
 800941a:	2b2a      	cmp	r3, #42	; 0x2a
 800941c:	d015      	beq.n	800944a <_svfiprintf_r+0xf6>
 800941e:	9a07      	ldr	r2, [sp, #28]
 8009420:	4654      	mov	r4, sl
 8009422:	2000      	movs	r0, #0
 8009424:	f04f 0c0a 	mov.w	ip, #10
 8009428:	4621      	mov	r1, r4
 800942a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800942e:	3b30      	subs	r3, #48	; 0x30
 8009430:	2b09      	cmp	r3, #9
 8009432:	d94e      	bls.n	80094d2 <_svfiprintf_r+0x17e>
 8009434:	b1b0      	cbz	r0, 8009464 <_svfiprintf_r+0x110>
 8009436:	9207      	str	r2, [sp, #28]
 8009438:	e014      	b.n	8009464 <_svfiprintf_r+0x110>
 800943a:	eba0 0308 	sub.w	r3, r0, r8
 800943e:	fa09 f303 	lsl.w	r3, r9, r3
 8009442:	4313      	orrs	r3, r2
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	46a2      	mov	sl, r4
 8009448:	e7d2      	b.n	80093f0 <_svfiprintf_r+0x9c>
 800944a:	9b03      	ldr	r3, [sp, #12]
 800944c:	1d19      	adds	r1, r3, #4
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	9103      	str	r1, [sp, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	bfbb      	ittet	lt
 8009456:	425b      	neglt	r3, r3
 8009458:	f042 0202 	orrlt.w	r2, r2, #2
 800945c:	9307      	strge	r3, [sp, #28]
 800945e:	9307      	strlt	r3, [sp, #28]
 8009460:	bfb8      	it	lt
 8009462:	9204      	strlt	r2, [sp, #16]
 8009464:	7823      	ldrb	r3, [r4, #0]
 8009466:	2b2e      	cmp	r3, #46	; 0x2e
 8009468:	d10c      	bne.n	8009484 <_svfiprintf_r+0x130>
 800946a:	7863      	ldrb	r3, [r4, #1]
 800946c:	2b2a      	cmp	r3, #42	; 0x2a
 800946e:	d135      	bne.n	80094dc <_svfiprintf_r+0x188>
 8009470:	9b03      	ldr	r3, [sp, #12]
 8009472:	1d1a      	adds	r2, r3, #4
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	9203      	str	r2, [sp, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	bfb8      	it	lt
 800947c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009480:	3402      	adds	r4, #2
 8009482:	9305      	str	r3, [sp, #20]
 8009484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009550 <_svfiprintf_r+0x1fc>
 8009488:	7821      	ldrb	r1, [r4, #0]
 800948a:	2203      	movs	r2, #3
 800948c:	4650      	mov	r0, sl
 800948e:	f7f6 feaf 	bl	80001f0 <memchr>
 8009492:	b140      	cbz	r0, 80094a6 <_svfiprintf_r+0x152>
 8009494:	2340      	movs	r3, #64	; 0x40
 8009496:	eba0 000a 	sub.w	r0, r0, sl
 800949a:	fa03 f000 	lsl.w	r0, r3, r0
 800949e:	9b04      	ldr	r3, [sp, #16]
 80094a0:	4303      	orrs	r3, r0
 80094a2:	3401      	adds	r4, #1
 80094a4:	9304      	str	r3, [sp, #16]
 80094a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094aa:	4826      	ldr	r0, [pc, #152]	; (8009544 <_svfiprintf_r+0x1f0>)
 80094ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094b0:	2206      	movs	r2, #6
 80094b2:	f7f6 fe9d 	bl	80001f0 <memchr>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d038      	beq.n	800952c <_svfiprintf_r+0x1d8>
 80094ba:	4b23      	ldr	r3, [pc, #140]	; (8009548 <_svfiprintf_r+0x1f4>)
 80094bc:	bb1b      	cbnz	r3, 8009506 <_svfiprintf_r+0x1b2>
 80094be:	9b03      	ldr	r3, [sp, #12]
 80094c0:	3307      	adds	r3, #7
 80094c2:	f023 0307 	bic.w	r3, r3, #7
 80094c6:	3308      	adds	r3, #8
 80094c8:	9303      	str	r3, [sp, #12]
 80094ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094cc:	4433      	add	r3, r6
 80094ce:	9309      	str	r3, [sp, #36]	; 0x24
 80094d0:	e767      	b.n	80093a2 <_svfiprintf_r+0x4e>
 80094d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d6:	460c      	mov	r4, r1
 80094d8:	2001      	movs	r0, #1
 80094da:	e7a5      	b.n	8009428 <_svfiprintf_r+0xd4>
 80094dc:	2300      	movs	r3, #0
 80094de:	3401      	adds	r4, #1
 80094e0:	9305      	str	r3, [sp, #20]
 80094e2:	4619      	mov	r1, r3
 80094e4:	f04f 0c0a 	mov.w	ip, #10
 80094e8:	4620      	mov	r0, r4
 80094ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ee:	3a30      	subs	r2, #48	; 0x30
 80094f0:	2a09      	cmp	r2, #9
 80094f2:	d903      	bls.n	80094fc <_svfiprintf_r+0x1a8>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0c5      	beq.n	8009484 <_svfiprintf_r+0x130>
 80094f8:	9105      	str	r1, [sp, #20]
 80094fa:	e7c3      	b.n	8009484 <_svfiprintf_r+0x130>
 80094fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009500:	4604      	mov	r4, r0
 8009502:	2301      	movs	r3, #1
 8009504:	e7f0      	b.n	80094e8 <_svfiprintf_r+0x194>
 8009506:	ab03      	add	r3, sp, #12
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	462a      	mov	r2, r5
 800950c:	4b0f      	ldr	r3, [pc, #60]	; (800954c <_svfiprintf_r+0x1f8>)
 800950e:	a904      	add	r1, sp, #16
 8009510:	4638      	mov	r0, r7
 8009512:	f3af 8000 	nop.w
 8009516:	1c42      	adds	r2, r0, #1
 8009518:	4606      	mov	r6, r0
 800951a:	d1d6      	bne.n	80094ca <_svfiprintf_r+0x176>
 800951c:	89ab      	ldrh	r3, [r5, #12]
 800951e:	065b      	lsls	r3, r3, #25
 8009520:	f53f af2c 	bmi.w	800937c <_svfiprintf_r+0x28>
 8009524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009526:	b01d      	add	sp, #116	; 0x74
 8009528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952c:	ab03      	add	r3, sp, #12
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	462a      	mov	r2, r5
 8009532:	4b06      	ldr	r3, [pc, #24]	; (800954c <_svfiprintf_r+0x1f8>)
 8009534:	a904      	add	r1, sp, #16
 8009536:	4638      	mov	r0, r7
 8009538:	f000 f87a 	bl	8009630 <_printf_i>
 800953c:	e7eb      	b.n	8009516 <_svfiprintf_r+0x1c2>
 800953e:	bf00      	nop
 8009540:	08009cd5 	.word	0x08009cd5
 8009544:	08009cdf 	.word	0x08009cdf
 8009548:	00000000 	.word	0x00000000
 800954c:	0800929d 	.word	0x0800929d
 8009550:	08009cdb 	.word	0x08009cdb

08009554 <_printf_common>:
 8009554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009558:	4616      	mov	r6, r2
 800955a:	4699      	mov	r9, r3
 800955c:	688a      	ldr	r2, [r1, #8]
 800955e:	690b      	ldr	r3, [r1, #16]
 8009560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009564:	4293      	cmp	r3, r2
 8009566:	bfb8      	it	lt
 8009568:	4613      	movlt	r3, r2
 800956a:	6033      	str	r3, [r6, #0]
 800956c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009570:	4607      	mov	r7, r0
 8009572:	460c      	mov	r4, r1
 8009574:	b10a      	cbz	r2, 800957a <_printf_common+0x26>
 8009576:	3301      	adds	r3, #1
 8009578:	6033      	str	r3, [r6, #0]
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	0699      	lsls	r1, r3, #26
 800957e:	bf42      	ittt	mi
 8009580:	6833      	ldrmi	r3, [r6, #0]
 8009582:	3302      	addmi	r3, #2
 8009584:	6033      	strmi	r3, [r6, #0]
 8009586:	6825      	ldr	r5, [r4, #0]
 8009588:	f015 0506 	ands.w	r5, r5, #6
 800958c:	d106      	bne.n	800959c <_printf_common+0x48>
 800958e:	f104 0a19 	add.w	sl, r4, #25
 8009592:	68e3      	ldr	r3, [r4, #12]
 8009594:	6832      	ldr	r2, [r6, #0]
 8009596:	1a9b      	subs	r3, r3, r2
 8009598:	42ab      	cmp	r3, r5
 800959a:	dc26      	bgt.n	80095ea <_printf_common+0x96>
 800959c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095a0:	1e13      	subs	r3, r2, #0
 80095a2:	6822      	ldr	r2, [r4, #0]
 80095a4:	bf18      	it	ne
 80095a6:	2301      	movne	r3, #1
 80095a8:	0692      	lsls	r2, r2, #26
 80095aa:	d42b      	bmi.n	8009604 <_printf_common+0xb0>
 80095ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095b0:	4649      	mov	r1, r9
 80095b2:	4638      	mov	r0, r7
 80095b4:	47c0      	blx	r8
 80095b6:	3001      	adds	r0, #1
 80095b8:	d01e      	beq.n	80095f8 <_printf_common+0xa4>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	68e5      	ldr	r5, [r4, #12]
 80095be:	6832      	ldr	r2, [r6, #0]
 80095c0:	f003 0306 	and.w	r3, r3, #6
 80095c4:	2b04      	cmp	r3, #4
 80095c6:	bf08      	it	eq
 80095c8:	1aad      	subeq	r5, r5, r2
 80095ca:	68a3      	ldr	r3, [r4, #8]
 80095cc:	6922      	ldr	r2, [r4, #16]
 80095ce:	bf0c      	ite	eq
 80095d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095d4:	2500      	movne	r5, #0
 80095d6:	4293      	cmp	r3, r2
 80095d8:	bfc4      	itt	gt
 80095da:	1a9b      	subgt	r3, r3, r2
 80095dc:	18ed      	addgt	r5, r5, r3
 80095de:	2600      	movs	r6, #0
 80095e0:	341a      	adds	r4, #26
 80095e2:	42b5      	cmp	r5, r6
 80095e4:	d11a      	bne.n	800961c <_printf_common+0xc8>
 80095e6:	2000      	movs	r0, #0
 80095e8:	e008      	b.n	80095fc <_printf_common+0xa8>
 80095ea:	2301      	movs	r3, #1
 80095ec:	4652      	mov	r2, sl
 80095ee:	4649      	mov	r1, r9
 80095f0:	4638      	mov	r0, r7
 80095f2:	47c0      	blx	r8
 80095f4:	3001      	adds	r0, #1
 80095f6:	d103      	bne.n	8009600 <_printf_common+0xac>
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295
 80095fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009600:	3501      	adds	r5, #1
 8009602:	e7c6      	b.n	8009592 <_printf_common+0x3e>
 8009604:	18e1      	adds	r1, r4, r3
 8009606:	1c5a      	adds	r2, r3, #1
 8009608:	2030      	movs	r0, #48	; 0x30
 800960a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800960e:	4422      	add	r2, r4
 8009610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009618:	3302      	adds	r3, #2
 800961a:	e7c7      	b.n	80095ac <_printf_common+0x58>
 800961c:	2301      	movs	r3, #1
 800961e:	4622      	mov	r2, r4
 8009620:	4649      	mov	r1, r9
 8009622:	4638      	mov	r0, r7
 8009624:	47c0      	blx	r8
 8009626:	3001      	adds	r0, #1
 8009628:	d0e6      	beq.n	80095f8 <_printf_common+0xa4>
 800962a:	3601      	adds	r6, #1
 800962c:	e7d9      	b.n	80095e2 <_printf_common+0x8e>
	...

08009630 <_printf_i>:
 8009630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009634:	7e0f      	ldrb	r7, [r1, #24]
 8009636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009638:	2f78      	cmp	r7, #120	; 0x78
 800963a:	4691      	mov	r9, r2
 800963c:	4680      	mov	r8, r0
 800963e:	460c      	mov	r4, r1
 8009640:	469a      	mov	sl, r3
 8009642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009646:	d807      	bhi.n	8009658 <_printf_i+0x28>
 8009648:	2f62      	cmp	r7, #98	; 0x62
 800964a:	d80a      	bhi.n	8009662 <_printf_i+0x32>
 800964c:	2f00      	cmp	r7, #0
 800964e:	f000 80d8 	beq.w	8009802 <_printf_i+0x1d2>
 8009652:	2f58      	cmp	r7, #88	; 0x58
 8009654:	f000 80a3 	beq.w	800979e <_printf_i+0x16e>
 8009658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800965c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009660:	e03a      	b.n	80096d8 <_printf_i+0xa8>
 8009662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009666:	2b15      	cmp	r3, #21
 8009668:	d8f6      	bhi.n	8009658 <_printf_i+0x28>
 800966a:	a101      	add	r1, pc, #4	; (adr r1, 8009670 <_printf_i+0x40>)
 800966c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009670:	080096c9 	.word	0x080096c9
 8009674:	080096dd 	.word	0x080096dd
 8009678:	08009659 	.word	0x08009659
 800967c:	08009659 	.word	0x08009659
 8009680:	08009659 	.word	0x08009659
 8009684:	08009659 	.word	0x08009659
 8009688:	080096dd 	.word	0x080096dd
 800968c:	08009659 	.word	0x08009659
 8009690:	08009659 	.word	0x08009659
 8009694:	08009659 	.word	0x08009659
 8009698:	08009659 	.word	0x08009659
 800969c:	080097e9 	.word	0x080097e9
 80096a0:	0800970d 	.word	0x0800970d
 80096a4:	080097cb 	.word	0x080097cb
 80096a8:	08009659 	.word	0x08009659
 80096ac:	08009659 	.word	0x08009659
 80096b0:	0800980b 	.word	0x0800980b
 80096b4:	08009659 	.word	0x08009659
 80096b8:	0800970d 	.word	0x0800970d
 80096bc:	08009659 	.word	0x08009659
 80096c0:	08009659 	.word	0x08009659
 80096c4:	080097d3 	.word	0x080097d3
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	1d1a      	adds	r2, r3, #4
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	602a      	str	r2, [r5, #0]
 80096d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096d8:	2301      	movs	r3, #1
 80096da:	e0a3      	b.n	8009824 <_printf_i+0x1f4>
 80096dc:	6820      	ldr	r0, [r4, #0]
 80096de:	6829      	ldr	r1, [r5, #0]
 80096e0:	0606      	lsls	r6, r0, #24
 80096e2:	f101 0304 	add.w	r3, r1, #4
 80096e6:	d50a      	bpl.n	80096fe <_printf_i+0xce>
 80096e8:	680e      	ldr	r6, [r1, #0]
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	2e00      	cmp	r6, #0
 80096ee:	da03      	bge.n	80096f8 <_printf_i+0xc8>
 80096f0:	232d      	movs	r3, #45	; 0x2d
 80096f2:	4276      	negs	r6, r6
 80096f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096f8:	485e      	ldr	r0, [pc, #376]	; (8009874 <_printf_i+0x244>)
 80096fa:	230a      	movs	r3, #10
 80096fc:	e019      	b.n	8009732 <_printf_i+0x102>
 80096fe:	680e      	ldr	r6, [r1, #0]
 8009700:	602b      	str	r3, [r5, #0]
 8009702:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009706:	bf18      	it	ne
 8009708:	b236      	sxthne	r6, r6
 800970a:	e7ef      	b.n	80096ec <_printf_i+0xbc>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	6820      	ldr	r0, [r4, #0]
 8009710:	1d19      	adds	r1, r3, #4
 8009712:	6029      	str	r1, [r5, #0]
 8009714:	0601      	lsls	r1, r0, #24
 8009716:	d501      	bpl.n	800971c <_printf_i+0xec>
 8009718:	681e      	ldr	r6, [r3, #0]
 800971a:	e002      	b.n	8009722 <_printf_i+0xf2>
 800971c:	0646      	lsls	r6, r0, #25
 800971e:	d5fb      	bpl.n	8009718 <_printf_i+0xe8>
 8009720:	881e      	ldrh	r6, [r3, #0]
 8009722:	4854      	ldr	r0, [pc, #336]	; (8009874 <_printf_i+0x244>)
 8009724:	2f6f      	cmp	r7, #111	; 0x6f
 8009726:	bf0c      	ite	eq
 8009728:	2308      	moveq	r3, #8
 800972a:	230a      	movne	r3, #10
 800972c:	2100      	movs	r1, #0
 800972e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009732:	6865      	ldr	r5, [r4, #4]
 8009734:	60a5      	str	r5, [r4, #8]
 8009736:	2d00      	cmp	r5, #0
 8009738:	bfa2      	ittt	ge
 800973a:	6821      	ldrge	r1, [r4, #0]
 800973c:	f021 0104 	bicge.w	r1, r1, #4
 8009740:	6021      	strge	r1, [r4, #0]
 8009742:	b90e      	cbnz	r6, 8009748 <_printf_i+0x118>
 8009744:	2d00      	cmp	r5, #0
 8009746:	d04d      	beq.n	80097e4 <_printf_i+0x1b4>
 8009748:	4615      	mov	r5, r2
 800974a:	fbb6 f1f3 	udiv	r1, r6, r3
 800974e:	fb03 6711 	mls	r7, r3, r1, r6
 8009752:	5dc7      	ldrb	r7, [r0, r7]
 8009754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009758:	4637      	mov	r7, r6
 800975a:	42bb      	cmp	r3, r7
 800975c:	460e      	mov	r6, r1
 800975e:	d9f4      	bls.n	800974a <_printf_i+0x11a>
 8009760:	2b08      	cmp	r3, #8
 8009762:	d10b      	bne.n	800977c <_printf_i+0x14c>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	07de      	lsls	r6, r3, #31
 8009768:	d508      	bpl.n	800977c <_printf_i+0x14c>
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	6861      	ldr	r1, [r4, #4]
 800976e:	4299      	cmp	r1, r3
 8009770:	bfde      	ittt	le
 8009772:	2330      	movle	r3, #48	; 0x30
 8009774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009778:	f105 35ff 	addle.w	r5, r5, #4294967295
 800977c:	1b52      	subs	r2, r2, r5
 800977e:	6122      	str	r2, [r4, #16]
 8009780:	f8cd a000 	str.w	sl, [sp]
 8009784:	464b      	mov	r3, r9
 8009786:	aa03      	add	r2, sp, #12
 8009788:	4621      	mov	r1, r4
 800978a:	4640      	mov	r0, r8
 800978c:	f7ff fee2 	bl	8009554 <_printf_common>
 8009790:	3001      	adds	r0, #1
 8009792:	d14c      	bne.n	800982e <_printf_i+0x1fe>
 8009794:	f04f 30ff 	mov.w	r0, #4294967295
 8009798:	b004      	add	sp, #16
 800979a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800979e:	4835      	ldr	r0, [pc, #212]	; (8009874 <_printf_i+0x244>)
 80097a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097a4:	6829      	ldr	r1, [r5, #0]
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80097ac:	6029      	str	r1, [r5, #0]
 80097ae:	061d      	lsls	r5, r3, #24
 80097b0:	d514      	bpl.n	80097dc <_printf_i+0x1ac>
 80097b2:	07df      	lsls	r7, r3, #31
 80097b4:	bf44      	itt	mi
 80097b6:	f043 0320 	orrmi.w	r3, r3, #32
 80097ba:	6023      	strmi	r3, [r4, #0]
 80097bc:	b91e      	cbnz	r6, 80097c6 <_printf_i+0x196>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	f023 0320 	bic.w	r3, r3, #32
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	2310      	movs	r3, #16
 80097c8:	e7b0      	b.n	800972c <_printf_i+0xfc>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	f043 0320 	orr.w	r3, r3, #32
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	2378      	movs	r3, #120	; 0x78
 80097d4:	4828      	ldr	r0, [pc, #160]	; (8009878 <_printf_i+0x248>)
 80097d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097da:	e7e3      	b.n	80097a4 <_printf_i+0x174>
 80097dc:	0659      	lsls	r1, r3, #25
 80097de:	bf48      	it	mi
 80097e0:	b2b6      	uxthmi	r6, r6
 80097e2:	e7e6      	b.n	80097b2 <_printf_i+0x182>
 80097e4:	4615      	mov	r5, r2
 80097e6:	e7bb      	b.n	8009760 <_printf_i+0x130>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	6826      	ldr	r6, [r4, #0]
 80097ec:	6961      	ldr	r1, [r4, #20]
 80097ee:	1d18      	adds	r0, r3, #4
 80097f0:	6028      	str	r0, [r5, #0]
 80097f2:	0635      	lsls	r5, r6, #24
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	d501      	bpl.n	80097fc <_printf_i+0x1cc>
 80097f8:	6019      	str	r1, [r3, #0]
 80097fa:	e002      	b.n	8009802 <_printf_i+0x1d2>
 80097fc:	0670      	lsls	r0, r6, #25
 80097fe:	d5fb      	bpl.n	80097f8 <_printf_i+0x1c8>
 8009800:	8019      	strh	r1, [r3, #0]
 8009802:	2300      	movs	r3, #0
 8009804:	6123      	str	r3, [r4, #16]
 8009806:	4615      	mov	r5, r2
 8009808:	e7ba      	b.n	8009780 <_printf_i+0x150>
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	1d1a      	adds	r2, r3, #4
 800980e:	602a      	str	r2, [r5, #0]
 8009810:	681d      	ldr	r5, [r3, #0]
 8009812:	6862      	ldr	r2, [r4, #4]
 8009814:	2100      	movs	r1, #0
 8009816:	4628      	mov	r0, r5
 8009818:	f7f6 fcea 	bl	80001f0 <memchr>
 800981c:	b108      	cbz	r0, 8009822 <_printf_i+0x1f2>
 800981e:	1b40      	subs	r0, r0, r5
 8009820:	6060      	str	r0, [r4, #4]
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	6123      	str	r3, [r4, #16]
 8009826:	2300      	movs	r3, #0
 8009828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800982c:	e7a8      	b.n	8009780 <_printf_i+0x150>
 800982e:	6923      	ldr	r3, [r4, #16]
 8009830:	462a      	mov	r2, r5
 8009832:	4649      	mov	r1, r9
 8009834:	4640      	mov	r0, r8
 8009836:	47d0      	blx	sl
 8009838:	3001      	adds	r0, #1
 800983a:	d0ab      	beq.n	8009794 <_printf_i+0x164>
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	079b      	lsls	r3, r3, #30
 8009840:	d413      	bmi.n	800986a <_printf_i+0x23a>
 8009842:	68e0      	ldr	r0, [r4, #12]
 8009844:	9b03      	ldr	r3, [sp, #12]
 8009846:	4298      	cmp	r0, r3
 8009848:	bfb8      	it	lt
 800984a:	4618      	movlt	r0, r3
 800984c:	e7a4      	b.n	8009798 <_printf_i+0x168>
 800984e:	2301      	movs	r3, #1
 8009850:	4632      	mov	r2, r6
 8009852:	4649      	mov	r1, r9
 8009854:	4640      	mov	r0, r8
 8009856:	47d0      	blx	sl
 8009858:	3001      	adds	r0, #1
 800985a:	d09b      	beq.n	8009794 <_printf_i+0x164>
 800985c:	3501      	adds	r5, #1
 800985e:	68e3      	ldr	r3, [r4, #12]
 8009860:	9903      	ldr	r1, [sp, #12]
 8009862:	1a5b      	subs	r3, r3, r1
 8009864:	42ab      	cmp	r3, r5
 8009866:	dcf2      	bgt.n	800984e <_printf_i+0x21e>
 8009868:	e7eb      	b.n	8009842 <_printf_i+0x212>
 800986a:	2500      	movs	r5, #0
 800986c:	f104 0619 	add.w	r6, r4, #25
 8009870:	e7f5      	b.n	800985e <_printf_i+0x22e>
 8009872:	bf00      	nop
 8009874:	08009ce6 	.word	0x08009ce6
 8009878:	08009cf7 	.word	0x08009cf7

0800987c <memmove>:
 800987c:	4288      	cmp	r0, r1
 800987e:	b510      	push	{r4, lr}
 8009880:	eb01 0402 	add.w	r4, r1, r2
 8009884:	d902      	bls.n	800988c <memmove+0x10>
 8009886:	4284      	cmp	r4, r0
 8009888:	4623      	mov	r3, r4
 800988a:	d807      	bhi.n	800989c <memmove+0x20>
 800988c:	1e43      	subs	r3, r0, #1
 800988e:	42a1      	cmp	r1, r4
 8009890:	d008      	beq.n	80098a4 <memmove+0x28>
 8009892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009896:	f803 2f01 	strb.w	r2, [r3, #1]!
 800989a:	e7f8      	b.n	800988e <memmove+0x12>
 800989c:	4402      	add	r2, r0
 800989e:	4601      	mov	r1, r0
 80098a0:	428a      	cmp	r2, r1
 80098a2:	d100      	bne.n	80098a6 <memmove+0x2a>
 80098a4:	bd10      	pop	{r4, pc}
 80098a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098ae:	e7f7      	b.n	80098a0 <memmove+0x24>

080098b0 <_free_r>:
 80098b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098b2:	2900      	cmp	r1, #0
 80098b4:	d044      	beq.n	8009940 <_free_r+0x90>
 80098b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ba:	9001      	str	r0, [sp, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f1a1 0404 	sub.w	r4, r1, #4
 80098c2:	bfb8      	it	lt
 80098c4:	18e4      	addlt	r4, r4, r3
 80098c6:	f000 f913 	bl	8009af0 <__malloc_lock>
 80098ca:	4a1e      	ldr	r2, [pc, #120]	; (8009944 <_free_r+0x94>)
 80098cc:	9801      	ldr	r0, [sp, #4]
 80098ce:	6813      	ldr	r3, [r2, #0]
 80098d0:	b933      	cbnz	r3, 80098e0 <_free_r+0x30>
 80098d2:	6063      	str	r3, [r4, #4]
 80098d4:	6014      	str	r4, [r2, #0]
 80098d6:	b003      	add	sp, #12
 80098d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098dc:	f000 b90e 	b.w	8009afc <__malloc_unlock>
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d908      	bls.n	80098f6 <_free_r+0x46>
 80098e4:	6825      	ldr	r5, [r4, #0]
 80098e6:	1961      	adds	r1, r4, r5
 80098e8:	428b      	cmp	r3, r1
 80098ea:	bf01      	itttt	eq
 80098ec:	6819      	ldreq	r1, [r3, #0]
 80098ee:	685b      	ldreq	r3, [r3, #4]
 80098f0:	1949      	addeq	r1, r1, r5
 80098f2:	6021      	streq	r1, [r4, #0]
 80098f4:	e7ed      	b.n	80098d2 <_free_r+0x22>
 80098f6:	461a      	mov	r2, r3
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	b10b      	cbz	r3, 8009900 <_free_r+0x50>
 80098fc:	42a3      	cmp	r3, r4
 80098fe:	d9fa      	bls.n	80098f6 <_free_r+0x46>
 8009900:	6811      	ldr	r1, [r2, #0]
 8009902:	1855      	adds	r5, r2, r1
 8009904:	42a5      	cmp	r5, r4
 8009906:	d10b      	bne.n	8009920 <_free_r+0x70>
 8009908:	6824      	ldr	r4, [r4, #0]
 800990a:	4421      	add	r1, r4
 800990c:	1854      	adds	r4, r2, r1
 800990e:	42a3      	cmp	r3, r4
 8009910:	6011      	str	r1, [r2, #0]
 8009912:	d1e0      	bne.n	80098d6 <_free_r+0x26>
 8009914:	681c      	ldr	r4, [r3, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	6053      	str	r3, [r2, #4]
 800991a:	4421      	add	r1, r4
 800991c:	6011      	str	r1, [r2, #0]
 800991e:	e7da      	b.n	80098d6 <_free_r+0x26>
 8009920:	d902      	bls.n	8009928 <_free_r+0x78>
 8009922:	230c      	movs	r3, #12
 8009924:	6003      	str	r3, [r0, #0]
 8009926:	e7d6      	b.n	80098d6 <_free_r+0x26>
 8009928:	6825      	ldr	r5, [r4, #0]
 800992a:	1961      	adds	r1, r4, r5
 800992c:	428b      	cmp	r3, r1
 800992e:	bf04      	itt	eq
 8009930:	6819      	ldreq	r1, [r3, #0]
 8009932:	685b      	ldreq	r3, [r3, #4]
 8009934:	6063      	str	r3, [r4, #4]
 8009936:	bf04      	itt	eq
 8009938:	1949      	addeq	r1, r1, r5
 800993a:	6021      	streq	r1, [r4, #0]
 800993c:	6054      	str	r4, [r2, #4]
 800993e:	e7ca      	b.n	80098d6 <_free_r+0x26>
 8009940:	b003      	add	sp, #12
 8009942:	bd30      	pop	{r4, r5, pc}
 8009944:	200022c8 	.word	0x200022c8

08009948 <sbrk_aligned>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	4e0e      	ldr	r6, [pc, #56]	; (8009984 <sbrk_aligned+0x3c>)
 800994c:	460c      	mov	r4, r1
 800994e:	6831      	ldr	r1, [r6, #0]
 8009950:	4605      	mov	r5, r0
 8009952:	b911      	cbnz	r1, 800995a <sbrk_aligned+0x12>
 8009954:	f000 f8bc 	bl	8009ad0 <_sbrk_r>
 8009958:	6030      	str	r0, [r6, #0]
 800995a:	4621      	mov	r1, r4
 800995c:	4628      	mov	r0, r5
 800995e:	f000 f8b7 	bl	8009ad0 <_sbrk_r>
 8009962:	1c43      	adds	r3, r0, #1
 8009964:	d00a      	beq.n	800997c <sbrk_aligned+0x34>
 8009966:	1cc4      	adds	r4, r0, #3
 8009968:	f024 0403 	bic.w	r4, r4, #3
 800996c:	42a0      	cmp	r0, r4
 800996e:	d007      	beq.n	8009980 <sbrk_aligned+0x38>
 8009970:	1a21      	subs	r1, r4, r0
 8009972:	4628      	mov	r0, r5
 8009974:	f000 f8ac 	bl	8009ad0 <_sbrk_r>
 8009978:	3001      	adds	r0, #1
 800997a:	d101      	bne.n	8009980 <sbrk_aligned+0x38>
 800997c:	f04f 34ff 	mov.w	r4, #4294967295
 8009980:	4620      	mov	r0, r4
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	200022cc 	.word	0x200022cc

08009988 <_malloc_r>:
 8009988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800998c:	1ccd      	adds	r5, r1, #3
 800998e:	f025 0503 	bic.w	r5, r5, #3
 8009992:	3508      	adds	r5, #8
 8009994:	2d0c      	cmp	r5, #12
 8009996:	bf38      	it	cc
 8009998:	250c      	movcc	r5, #12
 800999a:	2d00      	cmp	r5, #0
 800999c:	4607      	mov	r7, r0
 800999e:	db01      	blt.n	80099a4 <_malloc_r+0x1c>
 80099a0:	42a9      	cmp	r1, r5
 80099a2:	d905      	bls.n	80099b0 <_malloc_r+0x28>
 80099a4:	230c      	movs	r3, #12
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	2600      	movs	r6, #0
 80099aa:	4630      	mov	r0, r6
 80099ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b0:	4e2e      	ldr	r6, [pc, #184]	; (8009a6c <_malloc_r+0xe4>)
 80099b2:	f000 f89d 	bl	8009af0 <__malloc_lock>
 80099b6:	6833      	ldr	r3, [r6, #0]
 80099b8:	461c      	mov	r4, r3
 80099ba:	bb34      	cbnz	r4, 8009a0a <_malloc_r+0x82>
 80099bc:	4629      	mov	r1, r5
 80099be:	4638      	mov	r0, r7
 80099c0:	f7ff ffc2 	bl	8009948 <sbrk_aligned>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	4604      	mov	r4, r0
 80099c8:	d14d      	bne.n	8009a66 <_malloc_r+0xde>
 80099ca:	6834      	ldr	r4, [r6, #0]
 80099cc:	4626      	mov	r6, r4
 80099ce:	2e00      	cmp	r6, #0
 80099d0:	d140      	bne.n	8009a54 <_malloc_r+0xcc>
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	4631      	mov	r1, r6
 80099d6:	4638      	mov	r0, r7
 80099d8:	eb04 0803 	add.w	r8, r4, r3
 80099dc:	f000 f878 	bl	8009ad0 <_sbrk_r>
 80099e0:	4580      	cmp	r8, r0
 80099e2:	d13a      	bne.n	8009a5a <_malloc_r+0xd2>
 80099e4:	6821      	ldr	r1, [r4, #0]
 80099e6:	3503      	adds	r5, #3
 80099e8:	1a6d      	subs	r5, r5, r1
 80099ea:	f025 0503 	bic.w	r5, r5, #3
 80099ee:	3508      	adds	r5, #8
 80099f0:	2d0c      	cmp	r5, #12
 80099f2:	bf38      	it	cc
 80099f4:	250c      	movcc	r5, #12
 80099f6:	4629      	mov	r1, r5
 80099f8:	4638      	mov	r0, r7
 80099fa:	f7ff ffa5 	bl	8009948 <sbrk_aligned>
 80099fe:	3001      	adds	r0, #1
 8009a00:	d02b      	beq.n	8009a5a <_malloc_r+0xd2>
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	442b      	add	r3, r5
 8009a06:	6023      	str	r3, [r4, #0]
 8009a08:	e00e      	b.n	8009a28 <_malloc_r+0xa0>
 8009a0a:	6822      	ldr	r2, [r4, #0]
 8009a0c:	1b52      	subs	r2, r2, r5
 8009a0e:	d41e      	bmi.n	8009a4e <_malloc_r+0xc6>
 8009a10:	2a0b      	cmp	r2, #11
 8009a12:	d916      	bls.n	8009a42 <_malloc_r+0xba>
 8009a14:	1961      	adds	r1, r4, r5
 8009a16:	42a3      	cmp	r3, r4
 8009a18:	6025      	str	r5, [r4, #0]
 8009a1a:	bf18      	it	ne
 8009a1c:	6059      	strne	r1, [r3, #4]
 8009a1e:	6863      	ldr	r3, [r4, #4]
 8009a20:	bf08      	it	eq
 8009a22:	6031      	streq	r1, [r6, #0]
 8009a24:	5162      	str	r2, [r4, r5]
 8009a26:	604b      	str	r3, [r1, #4]
 8009a28:	4638      	mov	r0, r7
 8009a2a:	f104 060b 	add.w	r6, r4, #11
 8009a2e:	f000 f865 	bl	8009afc <__malloc_unlock>
 8009a32:	f026 0607 	bic.w	r6, r6, #7
 8009a36:	1d23      	adds	r3, r4, #4
 8009a38:	1af2      	subs	r2, r6, r3
 8009a3a:	d0b6      	beq.n	80099aa <_malloc_r+0x22>
 8009a3c:	1b9b      	subs	r3, r3, r6
 8009a3e:	50a3      	str	r3, [r4, r2]
 8009a40:	e7b3      	b.n	80099aa <_malloc_r+0x22>
 8009a42:	6862      	ldr	r2, [r4, #4]
 8009a44:	42a3      	cmp	r3, r4
 8009a46:	bf0c      	ite	eq
 8009a48:	6032      	streq	r2, [r6, #0]
 8009a4a:	605a      	strne	r2, [r3, #4]
 8009a4c:	e7ec      	b.n	8009a28 <_malloc_r+0xa0>
 8009a4e:	4623      	mov	r3, r4
 8009a50:	6864      	ldr	r4, [r4, #4]
 8009a52:	e7b2      	b.n	80099ba <_malloc_r+0x32>
 8009a54:	4634      	mov	r4, r6
 8009a56:	6876      	ldr	r6, [r6, #4]
 8009a58:	e7b9      	b.n	80099ce <_malloc_r+0x46>
 8009a5a:	230c      	movs	r3, #12
 8009a5c:	603b      	str	r3, [r7, #0]
 8009a5e:	4638      	mov	r0, r7
 8009a60:	f000 f84c 	bl	8009afc <__malloc_unlock>
 8009a64:	e7a1      	b.n	80099aa <_malloc_r+0x22>
 8009a66:	6025      	str	r5, [r4, #0]
 8009a68:	e7de      	b.n	8009a28 <_malloc_r+0xa0>
 8009a6a:	bf00      	nop
 8009a6c:	200022c8 	.word	0x200022c8

08009a70 <_realloc_r>:
 8009a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a74:	4680      	mov	r8, r0
 8009a76:	4614      	mov	r4, r2
 8009a78:	460e      	mov	r6, r1
 8009a7a:	b921      	cbnz	r1, 8009a86 <_realloc_r+0x16>
 8009a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a80:	4611      	mov	r1, r2
 8009a82:	f7ff bf81 	b.w	8009988 <_malloc_r>
 8009a86:	b92a      	cbnz	r2, 8009a94 <_realloc_r+0x24>
 8009a88:	f7ff ff12 	bl	80098b0 <_free_r>
 8009a8c:	4625      	mov	r5, r4
 8009a8e:	4628      	mov	r0, r5
 8009a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a94:	f000 f838 	bl	8009b08 <_malloc_usable_size_r>
 8009a98:	4284      	cmp	r4, r0
 8009a9a:	4607      	mov	r7, r0
 8009a9c:	d802      	bhi.n	8009aa4 <_realloc_r+0x34>
 8009a9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009aa2:	d812      	bhi.n	8009aca <_realloc_r+0x5a>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	f7ff ff6e 	bl	8009988 <_malloc_r>
 8009aac:	4605      	mov	r5, r0
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d0ed      	beq.n	8009a8e <_realloc_r+0x1e>
 8009ab2:	42bc      	cmp	r4, r7
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	bf28      	it	cs
 8009aba:	463a      	movcs	r2, r7
 8009abc:	f7ff fbb8 	bl	8009230 <memcpy>
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4640      	mov	r0, r8
 8009ac4:	f7ff fef4 	bl	80098b0 <_free_r>
 8009ac8:	e7e1      	b.n	8009a8e <_realloc_r+0x1e>
 8009aca:	4635      	mov	r5, r6
 8009acc:	e7df      	b.n	8009a8e <_realloc_r+0x1e>
	...

08009ad0 <_sbrk_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d06      	ldr	r5, [pc, #24]	; (8009aec <_sbrk_r+0x1c>)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4608      	mov	r0, r1
 8009ada:	602b      	str	r3, [r5, #0]
 8009adc:	f7f7 f87a 	bl	8000bd4 <_sbrk>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d102      	bne.n	8009aea <_sbrk_r+0x1a>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <_sbrk_r+0x1a>
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	200022d0 	.word	0x200022d0

08009af0 <__malloc_lock>:
 8009af0:	4801      	ldr	r0, [pc, #4]	; (8009af8 <__malloc_lock+0x8>)
 8009af2:	f000 b811 	b.w	8009b18 <__retarget_lock_acquire_recursive>
 8009af6:	bf00      	nop
 8009af8:	200022d4 	.word	0x200022d4

08009afc <__malloc_unlock>:
 8009afc:	4801      	ldr	r0, [pc, #4]	; (8009b04 <__malloc_unlock+0x8>)
 8009afe:	f000 b80c 	b.w	8009b1a <__retarget_lock_release_recursive>
 8009b02:	bf00      	nop
 8009b04:	200022d4 	.word	0x200022d4

08009b08 <_malloc_usable_size_r>:
 8009b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b0c:	1f18      	subs	r0, r3, #4
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	bfbc      	itt	lt
 8009b12:	580b      	ldrlt	r3, [r1, r0]
 8009b14:	18c0      	addlt	r0, r0, r3
 8009b16:	4770      	bx	lr

08009b18 <__retarget_lock_acquire_recursive>:
 8009b18:	4770      	bx	lr

08009b1a <__retarget_lock_release_recursive>:
 8009b1a:	4770      	bx	lr

08009b1c <_init>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	bf00      	nop
 8009b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b22:	bc08      	pop	{r3}
 8009b24:	469e      	mov	lr, r3
 8009b26:	4770      	bx	lr

08009b28 <_fini>:
 8009b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2a:	bf00      	nop
 8009b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2e:	bc08      	pop	{r3}
 8009b30:	469e      	mov	lr, r3
 8009b32:	4770      	bx	lr
