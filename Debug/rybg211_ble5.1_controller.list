
rybg211_ble5.1_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009acc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08009c6c  08009c6c  00019c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e70  08009e70  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009e70  08009e70  00019e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e78  08009e78  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e78  08009e78  00019e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e7c  08009e7c  00019e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002178  20000160  08009fe0  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022d8  08009fe0  000222d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139e1  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c2  00000000  00000000  00033b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00036f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00037de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019386  00000000  00000000  00038b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a02  00000000  00000000  00051ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad4b  00000000  00000000  000658c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f18  00000000  00000000  000f0664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c54 	.word	0x08009c54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08009c54 	.word	0x08009c54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fbde 	bl	8000d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f832 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8ea 	bl	8000778 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8c0 	bl	8000728 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f894 	bl	80006d4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005ac:	f008 f820 	bl	80085f0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  CDC_Handler_Init_FS	(main_UsbRxTask);
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <main+0x58>)
 80005b2:	f008 f921 	bl	80087f8 <CDC_Handler_Init_FS>

  rybg211_bleModuleInit();
 80005b6:	f008 fd55 	bl	8009064 <rybg211_bleModuleInit>

  rybg211_setDeviceName(hBleModule.txBuffer, "BLE Bridge");
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <main+0x5c>)
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <main+0x60>)
 80005be:	f008 fd65 	bl	800908c <rybg211_setDeviceName>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80005c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c6:	490c      	ldr	r1, [pc, #48]	; (80005f8 <main+0x64>)
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <main+0x68>)
 80005ca:	f003 faad 	bl	8003b28 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <main+0x6c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x6c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f022 0208 	bic.w	r2, r2, #8
 80005dc:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  main_UartTxTask();
 80005de:	f000 f945 	bl	800086c <main_UartTxTask>

	  main_UartRxTask();
 80005e2:	f000 f96f 	bl	80008c4 <main_UartRxTask>

	  main_bridgeDataTransfare();
 80005e6:	f000 f9c7 	bl	8000978 <main_bridgeDataTransfare>
	  main_UartTxTask();
 80005ea:	e7f8      	b.n	80005de <main+0x4a>
 80005ec:	08000925 	.word	0x08000925
 80005f0:	08009c6c 	.word	0x08009c6c
 80005f4:	200020c5 	.word	0x200020c5
 80005f8:	200021c5 	.word	0x200021c5
 80005fc:	2000017c 	.word	0x2000017c
 8000600:	200001c0 	.word	0x200001c0

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f008 feb6 	bl	8009384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <SystemClock_Config+0xc8>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xcc>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000674:	230f      	movs	r3, #15
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000678:	2390      	movs	r3, #144	; 0x90
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067c:	2304      	movs	r3, #4
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000680:	2305      	movs	r3, #5
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fd29 	bl	80030e0 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 f9b8 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2101      	movs	r1, #1
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 ff8b 	bl	80035d0 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c0:	f000 f9a2 	bl	8000a08 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART1_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 800070c:	f003 f940 	bl	8003990 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f977 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000017c 	.word	0x2000017c
 8000724:	40011000 	.word	0x40011000

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_DMA_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <MX_DMA_Init+0x4c>)
 8000738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_DMA_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	203a      	movs	r0, #58	; 0x3a
 8000750:	f000 fc73 	bl	800103a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000754:	203a      	movs	r0, #58	; 0x3a
 8000756:	f000 fc8c 	bl	8001072 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2046      	movs	r0, #70	; 0x46
 8000760:	f000 fc6b 	bl	800103a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000764:	2046      	movs	r0, #70	; 0x46
 8000766:	f000 fc84 	bl	8001072 <HAL_NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f244 01e0 	movw	r1, #16608	; 0x40e0
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007ea:	f001 f9e3 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODULE_RESET_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80007ee:	f244 03e0 	movw	r3, #16608	; 0x40e0
 80007f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0xa0>)
 8000808:	f001 f850 	bl	80018ac <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400

0800081c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	807b      	strh	r3, [r7, #2]
	hBleModule.controlFlags.flag.packetReceived = ENABLE;
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <HAL_UARTEx_RxEventCallback+0x40>)
 800082a:	7813      	ldrb	r3, [r2, #0]
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	7013      	strb	r3, [r2, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 8000832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000836:	490a      	ldr	r1, [pc, #40]	; (8000860 <HAL_UARTEx_RxEventCallback+0x44>)
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <HAL_UARTEx_RxEventCallback+0x48>)
 800083a:	f003 f975 	bl	8003b28 <HAL_UARTEx_ReceiveToIdle_DMA>

	hBleModule.rxPacketSize = Size;
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_UARTEx_RxEventCallback+0x40>)
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	8093      	strh	r3, [r2, #4]

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_UARTEx_RxEventCallback+0x4c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f022 0208 	bic.w	r2, r2, #8
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200020b0 	.word	0x200020b0
 8000860:	200021c5 	.word	0x200021c5
 8000864:	2000017c 	.word	0x2000017c
 8000868:	200001c0 	.word	0x200001c0

0800086c <main_UartTxTask>:


static void main_UartTxTask()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hBleModule.txTimer > 1000))
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <main_UartTxTask+0x4c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d019      	beq.n	80008b2 <main_UartTxTask+0x46>
 800087e:	f000 fad1 	bl	8000e24 <HAL_GetTick>
 8000882:	4602      	mov	r2, r0
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <main_UartTxTask+0x4c>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800088e:	d910      	bls.n	80008b2 <main_UartTxTask+0x46>
	{
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <main_UartTxTask+0x4c>)
 8000892:	885b      	ldrh	r3, [r3, #2]
 8000894:	461a      	mov	r2, r3
 8000896:	4909      	ldr	r1, [pc, #36]	; (80008bc <main_UartTxTask+0x50>)
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <main_UartTxTask+0x54>)
 800089a:	f003 f8c7 	bl	8003a2c <HAL_UART_Transmit_DMA>

		hBleModule.controlFlags.flag.packetToTransmit = DISABLE;
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <main_UartTxTask+0x4c>)
 80008a0:	7813      	ldrb	r3, [r2, #0]
 80008a2:	f36f 0341 	bfc	r3, #1, #1
 80008a6:	7013      	strb	r3, [r2, #0]

		hBleModule.txTimer = HAL_GetTick();
 80008a8:	f000 fabc 	bl	8000e24 <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a02      	ldr	r2, [pc, #8]	; (80008b8 <main_UartTxTask+0x4c>)
 80008b0:	60d3      	str	r3, [r2, #12]
	}
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200020b0 	.word	0x200020b0
 80008bc:	200020c5 	.word	0x200020c5
 80008c0:	2000017c 	.word	0x2000017c

080008c4 <main_UartRxTask>:

static void main_UartRxTask()
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetReceived)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <main_UartRxTask+0x50>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d01b      	beq.n	800090e <main_UartRxTask+0x4a>
	{
		if(rybg211_rxPacketParser(hBleModule.rxBuffer, hBleModule.rxPacketSize))
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <main_UartRxTask+0x50>)
 80008d8:	889b      	ldrh	r3, [r3, #4]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <main_UartRxTask+0x54>)
 80008e0:	f008 fc0a 	bl	80090f8 <rybg211_rxPacketParser>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00c      	beq.n	8000904 <main_UartRxTask+0x40>
		{
			hBridge.blePacketSize = (uint16_t)rybg211_rxDataRead(hBleModule.rxBuffer, hBridge.bleBuffer);
 80008ea:	490c      	ldr	r1, [pc, #48]	; (800091c <main_UartRxTask+0x58>)
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <main_UartRxTask+0x54>)
 80008ee:	f008 fcad 	bl	800924c <rybg211_rxDataRead>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <main_UartRxTask+0x5c>)
 80008f8:	805a      	strh	r2, [r3, #2]

			hBridge.controlFlags.flag.bleToUsb = ENABLE;
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <main_UartRxTask+0x5c>)
 80008fc:	7813      	ldrb	r3, [r2, #0]
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	7013      	strb	r3, [r2, #0]
		}
		hBleModule.controlFlags.flag.packetReceived = DISABLE;
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <main_UartRxTask+0x50>)
 8000906:	7813      	ldrb	r3, [r2, #0]
 8000908:	f36f 0300 	bfc	r3, #0, #1
 800090c:	7013      	strb	r3, [r2, #0]

	}
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200020b0 	.word	0x200020b0
 8000918:	200021c5 	.word	0x200021c5
 800091c:	2000028c 	.word	0x2000028c
 8000920:	20000280 	.word	0x20000280

08000924 <main_UsbRxTask>:
 * @param 	cdcRxBuffer	:	Buffer will carry the data received over USB.
 *
 * @param 	packetSize	:	The size of the received packet.
 */
static void main_UsbRxTask(char* cdcRxBuffer, uint16_t packetSize)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	807b      	strh	r3, [r7, #2]
	if(hBleModule.ConnectedDevice)
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <main_UsbRxTask+0x44>)
 8000932:	7d1b      	ldrb	r3, [r3, #20]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00e      	beq.n	8000956 <main_UsbRxTask+0x32>
	{
		memcpy(hBridge.usbBuffer, cdcRxBuffer, packetSize);
 8000938:	887b      	ldrh	r3, [r7, #2]
 800093a:	461a      	mov	r2, r3
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <main_UsbRxTask+0x48>)
 8000940:	f008 fd12 	bl	8009368 <memcpy>

		hBridge.usbPacketSize = packetSize;
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <main_UsbRxTask+0x4c>)
 8000946:	887b      	ldrh	r3, [r7, #2]
 8000948:	8093      	strh	r3, [r2, #4]

		hBridge.controlFlags.flag.usbToBle = ENABLE;
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <main_UsbRxTask+0x4c>)
 800094c:	7813      	ldrb	r3, [r2, #0]
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	7013      	strb	r3, [r2, #0]
//	memcpy(hBridge.usbBuffer, cdcRxBuffer, packetSize);
//
//	hBridge.usbPacketSize = packetSize;
//
//	hBridge.controlFlags.flag.usbToBle = ENABLE;
}
 8000954:	e003      	b.n	800095e <main_UsbRxTask+0x3a>
		CDC_Transmit_FS(BLE_NO_CONNECTION_MESSAGE, strlen(BLE_NO_CONNECTION_MESSAGE));
 8000956:	2112      	movs	r1, #18
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <main_UsbRxTask+0x50>)
 800095a:	f007 ff15 	bl	8008788 <CDC_Transmit_FS>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200020b0 	.word	0x200020b0
 800096c:	2000038c 	.word	0x2000038c
 8000970:	20000280 	.word	0x20000280
 8000974:	08009c78 	.word	0x08009c78

08000978 <main_bridgeDataTransfare>:

static void main_bridgeDataTransfare()
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	if(hBridge.controlFlags.flag.bleToUsb)
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <main_bridgeDataTransfare+0x78>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d016      	beq.n	80009b8 <main_bridgeDataTransfare+0x40>
	{
		hBridge.controlFlags.flag.bleToUsb = DISABLE;
 800098a:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <main_bridgeDataTransfare+0x78>)
 800098c:	7813      	ldrb	r3, [r2, #0]
 800098e:	f36f 0300 	bfc	r3, #0, #1
 8000992:	7013      	strb	r3, [r2, #0]

		//Place feedline character at the end of the packet and increment the size by 1.
		hBridge.bleBuffer[hBridge.blePacketSize++] = '\n';
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <main_bridgeDataTransfare+0x78>)
 8000996:	885b      	ldrh	r3, [r3, #2]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	b291      	uxth	r1, r2
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <main_bridgeDataTransfare+0x78>)
 800099e:	8051      	strh	r1, [r2, #2]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <main_bridgeDataTransfare+0x78>)
 80009a4:	4413      	add	r3, r2
 80009a6:	220a      	movs	r2, #10
 80009a8:	731a      	strb	r2, [r3, #12]

		CDC_Transmit_FS((uint8_t*) hBridge.bleBuffer, (uint16_t)hBridge.blePacketSize);
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <main_bridgeDataTransfare+0x78>)
 80009ac:	885b      	ldrh	r3, [r3, #2]
 80009ae:	4619      	mov	r1, r3
 80009b0:	4810      	ldr	r0, [pc, #64]	; (80009f4 <main_bridgeDataTransfare+0x7c>)
 80009b2:	f007 fee9 	bl	8008788 <CDC_Transmit_FS>

		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);

		hBridge.controlFlags.flag.usbToBle = DISABLE;
	}
}
 80009b6:	e018      	b.n	80009ea <main_bridgeDataTransfare+0x72>
	else if(hBridge.controlFlags.flag.usbToBle)
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <main_bridgeDataTransfare+0x78>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d011      	beq.n	80009ea <main_bridgeDataTransfare+0x72>
		rybg211_txDataSend(hBridge.usbBuffer, hBridge.usbPacketSize);
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <main_bridgeDataTransfare+0x78>)
 80009c8:	889b      	ldrh	r3, [r3, #4]
 80009ca:	4619      	mov	r1, r3
 80009cc:	480a      	ldr	r0, [pc, #40]	; (80009f8 <main_bridgeDataTransfare+0x80>)
 80009ce:	f008 fc61 	bl	8009294 <rybg211_txDataSend>
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <main_bridgeDataTransfare+0x84>)
 80009d4:	885b      	ldrh	r3, [r3, #2]
 80009d6:	461a      	mov	r2, r3
 80009d8:	4909      	ldr	r1, [pc, #36]	; (8000a00 <main_bridgeDataTransfare+0x88>)
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <main_bridgeDataTransfare+0x8c>)
 80009dc:	f003 f826 	bl	8003a2c <HAL_UART_Transmit_DMA>
		hBridge.controlFlags.flag.usbToBle = DISABLE;
 80009e0:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <main_bridgeDataTransfare+0x78>)
 80009e2:	7813      	ldrb	r3, [r2, #0]
 80009e4:	f36f 0341 	bfc	r3, #1, #1
 80009e8:	7013      	strb	r3, [r2, #0]
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000280 	.word	0x20000280
 80009f4:	2000028c 	.word	0x2000028c
 80009f8:	2000038c 	.word	0x2000038c
 80009fc:	200020b0 	.word	0x200020b0
 8000a00:	200020c5 	.word	0x200020c5
 8000a04:	2000017c 	.word	0x2000017c

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <HAL_UART_MspInit+0x150>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	f040 8091 	bne.w	8000baa <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	4b4a      	ldr	r3, [pc, #296]	; (8000bb8 <HAL_UART_MspInit+0x154>)
 8000a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a90:	4a49      	ldr	r2, [pc, #292]	; (8000bb8 <HAL_UART_MspInit+0x154>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6453      	str	r3, [r2, #68]	; 0x44
 8000a98:	4b47      	ldr	r3, [pc, #284]	; (8000bb8 <HAL_UART_MspInit+0x154>)
 8000a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4b43      	ldr	r3, [pc, #268]	; (8000bb8 <HAL_UART_MspInit+0x154>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a42      	ldr	r2, [pc, #264]	; (8000bb8 <HAL_UART_MspInit+0x154>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab4:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <HAL_UART_MspInit+0x154>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ac0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4837      	ldr	r0, [pc, #220]	; (8000bbc <HAL_UART_MspInit+0x158>)
 8000ade:	f000 fee5 	bl	80018ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000ae2:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000ae4:	4a37      	ldr	r2, [pc, #220]	; (8000bc4 <HAL_UART_MspInit+0x160>)
 8000ae6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000ae8:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000aea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af0:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af6:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000afc:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b02:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b04:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b10:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b16:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b1c:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b22:	4827      	ldr	r0, [pc, #156]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000b24:	f000 fac0 	bl	80010a8 <HAL_DMA_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000b2e:	f7ff ff6b 	bl	8000a08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <HAL_UART_MspInit+0x15c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000b3e:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <HAL_UART_MspInit+0x168>)
 8000b42:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b4e:	2240      	movs	r2, #64	; 0x40
 8000b50:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b7e:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b80:	f000 fa92 	bl	80010a8 <HAL_DMA_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000b8a:	f7ff ff3d 	bl	8000a08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
 8000b94:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <HAL_UART_MspInit+0x164>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2025      	movs	r0, #37	; 0x25
 8000ba0:	f000 fa4b 	bl	800103a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ba4:	2025      	movs	r0, #37	; 0x25
 8000ba6:	f000 fa64 	bl	8001072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40011000 	.word	0x40011000
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	200001c0 	.word	0x200001c0
 8000bc4:	40026440 	.word	0x40026440
 8000bc8:	20000220 	.word	0x20000220
 8000bcc:	400264b8 	.word	0x400264b8

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f8ee 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <USART1_IRQHandler+0x10>)
 8000c2a:	f002 ffe3 	bl	8003bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000017c 	.word	0x2000017c

08000c38 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <DMA2_Stream2_IRQHandler+0x10>)
 8000c3e:	f000 fbcb 	bl	80013d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001c0 	.word	0x200001c0

08000c4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <OTG_FS_IRQHandler+0x10>)
 8000c52:	f001 f918 	bl	8001e86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20001984 	.word	0x20001984

08000c60 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <DMA2_Stream7_IRQHandler+0x10>)
 8000c66:	f000 fbb7 	bl	80013d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000220 	.word	0x20000220

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f008 fb26 	bl	80092f4 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20020000 	.word	0x20020000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	2000048c 	.word	0x2000048c
 8000cdc:	200022d8 	.word	0x200022d8

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d20:	4c0b      	ldr	r4, [pc, #44]	; (8000d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2e:	f7ff ffd7 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f008 fae5 	bl	8009300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fc2d 	bl	8000594 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000d48:	08009e80 	.word	0x08009e80
  ldr r2, =_sbss
 8000d4c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000d50:	200022d8 	.word	0x200022d8

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <HAL_Init+0x40>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_Init+0x40>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_Init+0x40>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f94f 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fe42 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f967 	bl	800108e <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f92f 	bl	800103a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000490 	.word	0x20000490

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000490 	.word	0x20000490

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4907      	ldr	r1, [pc, #28]	; (8000f20 <__NVIC_EnableIRQ+0x38>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff29 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff3e 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff8e 	bl	8000f78 <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff31 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffa2 	bl	8000fe0 <SysTick_Config>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff feb6 	bl	8000e24 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e099      	b.n	80011f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2202      	movs	r2, #2
 80010c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e4:	e00f      	b.n	8001106 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010e6:	f7ff fe9d 	bl	8000e24 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d908      	bls.n	8001106 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2220      	movs	r2, #32
 80010f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2203      	movs	r2, #3
 80010fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e078      	b.n	80011f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1e8      	bne.n	80010e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	4b38      	ldr	r3, [pc, #224]	; (8001200 <HAL_DMA_Init+0x158>)
 8001120:	4013      	ands	r3, r2
 8001122:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001132:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4313      	orrs	r3, r2
 8001156:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	2b04      	cmp	r3, #4
 800115e:	d107      	bne.n	8001170 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	4313      	orrs	r3, r2
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4313      	orrs	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f023 0307 	bic.w	r3, r3, #7
 8001186:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	4313      	orrs	r3, r2
 8001190:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	2b04      	cmp	r3, #4
 8001198:	d117      	bne.n	80011ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00e      	beq.n	80011ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 fb01 	bl	80017b4 <DMA_CheckFifoParam>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2240      	movs	r2, #64	; 0x40
 80011bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011c6:	2301      	movs	r3, #1
 80011c8:	e016      	b.n	80011f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 fab8 	bl	8001748 <DMA_CalcBaseAndBitshift>
 80011d8:	4603      	mov	r3, r0
 80011da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e0:	223f      	movs	r2, #63	; 0x3f
 80011e2:	409a      	lsls	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	f010803f 	.word	0xf010803f

08001204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001222:	2b01      	cmp	r3, #1
 8001224:	d101      	bne.n	800122a <HAL_DMA_Start_IT+0x26>
 8001226:	2302      	movs	r3, #2
 8001228:	e040      	b.n	80012ac <HAL_DMA_Start_IT+0xa8>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d12f      	bne.n	800129e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2202      	movs	r2, #2
 8001242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 fa4a 	bl	80016ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	223f      	movs	r2, #63	; 0x3f
 800125e:	409a      	lsls	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0216 	orr.w	r2, r2, #22
 8001272:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0208 	orr.w	r2, r2, #8
 800128a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0201 	orr.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e005      	b.n	80012aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012a6:	2302      	movs	r3, #2
 80012a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012c2:	f7ff fdaf 	bl	8000e24 <HAL_GetTick>
 80012c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d008      	beq.n	80012e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e052      	b.n	800138c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0216 	bic.w	r2, r2, #22
 80012f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001304:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2b00      	cmp	r3, #0
 800130c:	d103      	bne.n	8001316 <HAL_DMA_Abort+0x62>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0208 	bic.w	r2, r2, #8
 8001324:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0201 	bic.w	r2, r2, #1
 8001334:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001336:	e013      	b.n	8001360 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001338:	f7ff fd74 	bl	8000e24 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b05      	cmp	r3, #5
 8001344:	d90c      	bls.n	8001360 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2220      	movs	r2, #32
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2203      	movs	r2, #3
 8001350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e015      	b.n	800138c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1e4      	bne.n	8001338 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001372:	223f      	movs	r2, #63	; 0x3f
 8001374:	409a      	lsls	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d004      	beq.n	80013b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00c      	b.n	80013cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2205      	movs	r2, #5
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0201 	bic.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013e4:	4b8e      	ldr	r3, [pc, #568]	; (8001620 <HAL_DMA_IRQHandler+0x248>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a8e      	ldr	r2, [pc, #568]	; (8001624 <HAL_DMA_IRQHandler+0x24c>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	0a9b      	lsrs	r3, r3, #10
 80013f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001402:	2208      	movs	r2, #8
 8001404:	409a      	lsls	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01a      	beq.n	8001444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0204 	bic.w	r2, r2, #4
 800142a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001430:	2208      	movs	r2, #8
 8001432:	409a      	lsls	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	f043 0201 	orr.w	r2, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001448:	2201      	movs	r2, #1
 800144a:	409a      	lsls	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4013      	ands	r3, r2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d012      	beq.n	800147a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001466:	2201      	movs	r2, #1
 8001468:	409a      	lsls	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001472:	f043 0202 	orr.w	r2, r3, #2
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147e:	2204      	movs	r2, #4
 8001480:	409a      	lsls	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d012      	beq.n	80014b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00b      	beq.n	80014b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	2204      	movs	r2, #4
 800149e:	409a      	lsls	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	f043 0204 	orr.w	r2, r3, #4
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	2210      	movs	r2, #16
 80014b6:	409a      	lsls	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d043      	beq.n	8001548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d03c      	beq.n	8001548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d2:	2210      	movs	r2, #16
 80014d4:	409a      	lsls	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d018      	beq.n	800151a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d108      	bne.n	8001508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d024      	beq.n	8001548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	4798      	blx	r3
 8001506:	e01f      	b.n	8001548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150c:	2b00      	cmp	r3, #0
 800150e:	d01b      	beq.n	8001548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	4798      	blx	r3
 8001518:	e016      	b.n	8001548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d107      	bne.n	8001538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0208 	bic.w	r2, r2, #8
 8001536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	2220      	movs	r2, #32
 800154e:	409a      	lsls	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 808f 	beq.w	8001678 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8087 	beq.w	8001678 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156e:	2220      	movs	r2, #32
 8001570:	409a      	lsls	r2, r3
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b05      	cmp	r3, #5
 8001580:	d136      	bne.n	80015f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0216 	bic.w	r2, r2, #22
 8001590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695a      	ldr	r2, [r3, #20]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <HAL_DMA_IRQHandler+0x1da>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d007      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0208 	bic.w	r2, r2, #8
 80015c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c6:	223f      	movs	r2, #63	; 0x3f
 80015c8:	409a      	lsls	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d07e      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	4798      	blx	r3
        }
        return;
 80015ee:	e079      	b.n	80016e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01d      	beq.n	800163a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10d      	bne.n	8001628 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	2b00      	cmp	r3, #0
 8001612:	d031      	beq.n	8001678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
 800161c:	e02c      	b.n	8001678 <HAL_DMA_IRQHandler+0x2a0>
 800161e:	bf00      	nop
 8001620:	20000000 	.word	0x20000000
 8001624:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d023      	beq.n	8001678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
 8001638:	e01e      	b.n	8001678 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10f      	bne.n	8001668 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0210 	bic.w	r2, r2, #16
 8001656:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167c:	2b00      	cmp	r3, #0
 800167e:	d032      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d022      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2205      	movs	r2, #5
 8001690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	3301      	adds	r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d307      	bcc.n	80016c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f2      	bne.n	80016a4 <HAL_DMA_IRQHandler+0x2cc>
 80016be:	e000      	b.n	80016c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	4798      	blx	r3
 80016e2:	e000      	b.n	80016e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80016e4:	bf00      	nop
    }
  }
}
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001708:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b40      	cmp	r3, #64	; 0x40
 8001718:	d108      	bne.n	800172c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800172a:	e007      	b.n	800173c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	60da      	str	r2, [r3, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	3b10      	subs	r3, #16
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <DMA_CalcBaseAndBitshift+0x64>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001762:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <DMA_CalcBaseAndBitshift+0x68>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d909      	bls.n	800178a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800177e:	f023 0303 	bic.w	r3, r3, #3
 8001782:	1d1a      	adds	r2, r3, #4
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	659a      	str	r2, [r3, #88]	; 0x58
 8001788:	e007      	b.n	800179a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	aaaaaaab 	.word	0xaaaaaaab
 80017b0:	08009d34 	.word	0x08009d34

080017b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d11f      	bne.n	800180e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d856      	bhi.n	8001882 <DMA_CheckFifoParam+0xce>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <DMA_CheckFifoParam+0x28>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017ff 	.word	0x080017ff
 80017e4:	080017ed 	.word	0x080017ed
 80017e8:	08001883 	.word	0x08001883
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d046      	beq.n	8001886 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017fc:	e043      	b.n	8001886 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001806:	d140      	bne.n	800188a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800180c:	e03d      	b.n	800188a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001816:	d121      	bne.n	800185c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d837      	bhi.n	800188e <DMA_CheckFifoParam+0xda>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <DMA_CheckFifoParam+0x70>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	08001835 	.word	0x08001835
 8001828:	0800183b 	.word	0x0800183b
 800182c:	08001835 	.word	0x08001835
 8001830:	0800184d 	.word	0x0800184d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
      break;
 8001838:	e030      	b.n	800189c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d025      	beq.n	8001892 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800184a:	e022      	b.n	8001892 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001854:	d11f      	bne.n	8001896 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800185a:	e01c      	b.n	8001896 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d903      	bls.n	800186a <DMA_CheckFifoParam+0xb6>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d003      	beq.n	8001870 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001868:	e018      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
      break;
 800186e:	e015      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00e      	beq.n	800189a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
      break;
 8001880:	e00b      	b.n	800189a <DMA_CheckFifoParam+0xe6>
      break;
 8001882:	bf00      	nop
 8001884:	e00a      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;
 8001886:	bf00      	nop
 8001888:	e008      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;
 800188a:	bf00      	nop
 800188c:	e006      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;
 800188e:	bf00      	nop
 8001890:	e004      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;
 8001892:	bf00      	nop
 8001894:	e002      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;   
 8001896:	bf00      	nop
 8001898:	e000      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;
 800189a:	bf00      	nop
    }
  } 
  
  return status; 
 800189c:	7bfb      	ldrb	r3, [r7, #15]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e159      	b.n	8001b7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8148 	bne.w	8001b76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d005      	beq.n	80018fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d130      	bne.n	8001960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 0201 	and.w	r2, r3, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b03      	cmp	r3, #3
 800196a:	d017      	beq.n	800199c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a2 	beq.w	8001b76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <HAL_GPIO_Init+0x2e8>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <HAL_GPIO_Init+0x2e8>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b54      	ldr	r3, [pc, #336]	; (8001b94 <HAL_GPIO_Init+0x2e8>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4e:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_GPIO_Init+0x2ec>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a49      	ldr	r2, [pc, #292]	; (8001b9c <HAL_GPIO_Init+0x2f0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d019      	beq.n	8001aae <HAL_GPIO_Init+0x202>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a48      	ldr	r2, [pc, #288]	; (8001ba0 <HAL_GPIO_Init+0x2f4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0x1fe>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <HAL_GPIO_Init+0x2f8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00d      	beq.n	8001aa6 <HAL_GPIO_Init+0x1fa>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a46      	ldr	r2, [pc, #280]	; (8001ba8 <HAL_GPIO_Init+0x2fc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x1f6>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a45      	ldr	r2, [pc, #276]	; (8001bac <HAL_GPIO_Init+0x300>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_GPIO_Init+0x1f2>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e008      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e004      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f002 0203 	and.w	r2, r2, #3
 8001ab6:	0092      	lsls	r2, r2, #2
 8001ab8:	4093      	lsls	r3, r2
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac0:	4935      	ldr	r1, [pc, #212]	; (8001b98 <HAL_GPIO_Init+0x2ec>)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af2:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b1c:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b46:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b70:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2b0f      	cmp	r3, #15
 8001b80:	f67f aea2 	bls.w	80018c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40013c00 	.word	0x40013c00

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd0:	e003      	b.n	8001bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	041a      	lsls	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	619a      	str	r2, [r3, #24]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be8:	b08f      	sub	sp, #60	; 0x3c
 8001bea:	af0a      	add	r7, sp, #40	; 0x28
 8001bec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e10f      	b.n	8001e18 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f006 ff1c 	bl	8008a50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 f9d9 	bl	8004fee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	687e      	ldr	r6, [r7, #4]
 8001c44:	466d      	mov	r5, sp
 8001c46:	f106 0410 	add.w	r4, r6, #16
 8001c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c5a:	1d33      	adds	r3, r6, #4
 8001c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c5e:	6838      	ldr	r0, [r7, #0]
 8001c60:	f003 f8b0 	bl	8004dc4 <USB_CoreInit>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0d0      	b.n	8001e18 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 f9c7 	bl	8005010 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	e04a      	b.n	8001d1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	333d      	adds	r3, #61	; 0x3d
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	333c      	adds	r3, #60	; 0x3c
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	b298      	uxth	r0, r3
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3344      	adds	r3, #68	; 0x44
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3340      	adds	r3, #64	; 0x40
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	3348      	adds	r3, #72	; 0x48
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	334c      	adds	r3, #76	; 0x4c
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3354      	adds	r3, #84	; 0x54
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	73fb      	strb	r3, [r7, #15]
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d3af      	bcc.n	8001c88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	e044      	b.n	8001db8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	3301      	adds	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d3b5      	bcc.n	8001d2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	687e      	ldr	r6, [r7, #4]
 8001dca:	466d      	mov	r5, sp
 8001dcc:	f106 0410 	add.w	r4, r6, #16
 8001dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ddc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001de0:	1d33      	adds	r3, r6, #4
 8001de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de4:	6838      	ldr	r0, [r7, #0]
 8001de6:	f003 f95f 	bl	80050a8 <USB_DevInit>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e00d      	b.n	8001e18 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f004 faae 	bl	8006372 <USB_DevDisconnect>

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_PCD_Start+0x1c>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e020      	b.n	8001e7e <HAL_PCD_Start+0x5e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d109      	bne.n	8001e60 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d005      	beq.n	8001e60 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 f8b1 	bl	8004fcc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 fa5e 	bl	8006330 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e86:	b590      	push	{r4, r7, lr}
 8001e88:	b08d      	sub	sp, #52	; 0x34
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 fb1c 	bl	80064da <USB_GetMode>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 848a 	bne.w	80027be <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 fa80 	bl	80063b4 <USB_ReadInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8480 	beq.w	80027bc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 fa6d 	bl	80063b4 <USB_ReadInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d107      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f002 0202 	and.w	r2, r2, #2
 8001ef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 fa5b 	bl	80063b4 <USB_ReadInterrupts>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d161      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0210 	bic.w	r2, r2, #16
 8001f16:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f003 020f 	and.w	r2, r3, #15
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	0c5b      	lsrs	r3, r3, #17
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d124      	bne.n	8001f8e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d035      	beq.n	8001fbc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	6a38      	ldr	r0, [r7, #32]
 8001f64:	f004 f892 	bl	800608c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f74:	441a      	add	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	6a1a      	ldr	r2, [r3, #32]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f86:	441a      	add	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	621a      	str	r2, [r3, #32]
 8001f8c:	e016      	b.n	8001fbc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	0c5b      	lsrs	r3, r3, #17
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d110      	bne.n	8001fbc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6a38      	ldr	r0, [r7, #32]
 8001fa6:	f004 f871 	bl	800608c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	6a1a      	ldr	r2, [r3, #32]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fb6:	441a      	add	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0210 	orr.w	r2, r2, #16
 8001fca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 f9ef 	bl	80063b4 <USB_ReadInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fdc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001fe0:	f040 80a7 	bne.w	8002132 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 f9f4 	bl	80063da <USB_ReadDevAllOutEpInterrupt>
 8001ff2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ff4:	e099      	b.n	800212a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 808e 	beq.w	800211e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f004 fa18 	bl	8006442 <USB_ReadDevOutEPInterrupt>
 8002012:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202a:	461a      	mov	r2, r3
 800202c:	2301      	movs	r3, #1
 800202e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fec2 	bl	8002dbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204e:	461a      	mov	r2, r3
 8002050:	2308      	movs	r3, #8
 8002052:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 ff98 	bl	8002f8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002072:	461a      	mov	r2, r3
 8002074:	2310      	movs	r3, #16
 8002076:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d030      	beq.n	80020e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208a:	2b80      	cmp	r3, #128	; 0x80
 800208c:	d109      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	78db      	ldrb	r3, [r3, #3]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d108      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2200      	movs	r2, #0
 80020c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	4619      	mov	r1, r3
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f006 fdbb 	bl	8008c48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020de:	461a      	mov	r2, r3
 80020e0:	2302      	movs	r3, #2
 80020e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fa:	461a      	mov	r2, r3
 80020fc:	2320      	movs	r3, #32
 80020fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002116:	461a      	mov	r2, r3
 8002118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800211c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	3301      	adds	r3, #1
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002126:	085b      	lsrs	r3, r3, #1
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f af62 	bne.w	8001ff6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f004 f93c 	bl	80063b4 <USB_ReadInterrupts>
 800213c:	4603      	mov	r3, r0
 800213e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002142:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002146:	f040 80db 	bne.w	8002300 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f004 f95d 	bl	800640e <USB_ReadDevAllInEpInterrupt>
 8002154:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800215a:	e0cd      	b.n	80022f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 80c2 	beq.w	80022ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f004 f983 	bl	800647e <USB_ReadDevInEPInterrupt>
 8002178:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d057      	beq.n	8002234 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	2201      	movs	r2, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	69f9      	ldr	r1, [r7, #28]
 80021a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021a4:	4013      	ands	r3, r2
 80021a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b4:	461a      	mov	r2, r3
 80021b6:	2301      	movs	r3, #1
 80021b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d132      	bne.n	8002228 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	334c      	adds	r3, #76	; 0x4c
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4403      	add	r3, r0
 80021e2:	3348      	adds	r3, #72	; 0x48
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4419      	add	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4403      	add	r3, r0
 80021f6:	334c      	adds	r3, #76	; 0x4c
 80021f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d113      	bne.n	8002228 <HAL_PCD_IRQHandler+0x3a2>
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	3354      	adds	r3, #84	; 0x54
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002220:	461a      	mov	r2, r3
 8002222:	2101      	movs	r1, #1
 8002224:	f004 f98a 	bl	800653c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f006 fc8f 	bl	8008b52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224a:	461a      	mov	r2, r3
 800224c:	2308      	movs	r3, #8
 800224e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002266:	461a      	mov	r2, r3
 8002268:	2310      	movs	r3, #16
 800226a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002282:	461a      	mov	r2, r3
 8002284:	2340      	movs	r3, #64	; 0x40
 8002286:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d023      	beq.n	80022da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002294:	6a38      	ldr	r0, [r7, #32]
 8002296:	f003 f86b 	bl	8005370 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800229a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	3338      	adds	r3, #56	; 0x38
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	78db      	ldrb	r3, [r3, #3]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d108      	bne.n	80022c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2200      	movs	r2, #0
 80022ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	4619      	mov	r1, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f006 fcd2 	bl	8008c6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d4:	461a      	mov	r2, r3
 80022d6:	2302      	movs	r3, #2
 80022d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fcdb 	bl	8002ca2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	3301      	adds	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f47f af2e 	bne.w	800215c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f004 f855 	bl	80063b4 <USB_ReadInterrupts>
 800230a:	4603      	mov	r3, r0
 800230c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002314:	d122      	bne.n	800235c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002330:	2b01      	cmp	r3, #1
 8002332:	d108      	bne.n	8002346 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800233c:	2100      	movs	r1, #0
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fec2 	bl	80030c8 <HAL_PCDEx_LPM_Callback>
 8002344:	e002      	b.n	800234c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f006 fc70 	bl	8008c2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800235a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f004 f827 	bl	80063b4 <USB_ReadInterrupts>
 8002366:	4603      	mov	r3, r0
 8002368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002370:	d112      	bne.n	8002398 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f006 fc2c 	bl	8008be0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002396:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f004 f809 	bl	80063b4 <USB_ReadInterrupts>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ac:	f040 80b7 	bne.w	800251e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2110      	movs	r1, #16
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 ffd0 	bl	8005370 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d4:	e046      	b.n	8002464 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e2:	461a      	mov	r2, r3
 80023e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fa:	0151      	lsls	r1, r2, #5
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	440a      	add	r2, r1
 8002400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002404:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002408:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	4413      	add	r3, r2
 8002412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002416:	461a      	mov	r2, r3
 8002418:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800241c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800242e:	0151      	lsls	r1, r2, #5
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	440a      	add	r2, r1
 8002434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002438:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800243c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244e:	0151      	lsls	r1, r2, #5
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	440a      	add	r2, r1
 8002454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002458:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800245c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	3301      	adds	r3, #1
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246a:	429a      	cmp	r2, r3
 800246c:	d3b3      	bcc.n	80023d6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002480:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800249a:	f043 030b 	orr.w	r3, r3, #11
 800249e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b0:	f043 030b 	orr.w	r3, r3, #11
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	e015      	b.n	80024e4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024de:	f043 030b 	orr.w	r3, r3, #11
 80024e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002508:	461a      	mov	r2, r3
 800250a:	f004 f817 	bl	800653c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800251c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f003 ff46 	bl	80063b4 <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800252e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002532:	d124      	bne.n	800257e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f003 ffdc 	bl	80064f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f002 ff91 	bl	800546a <USB_GetDevSpeed>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681c      	ldr	r4, [r3, #0]
 8002554:	f001 f9e8 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8002558:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	4620      	mov	r0, r4
 8002564:	f002 fc90 	bl	8004e88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f006 fb1a 	bl	8008ba2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800257c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 ff16 	bl	80063b4 <USB_ReadInterrupts>
 8002588:	4603      	mov	r3, r0
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b08      	cmp	r3, #8
 8002590:	d10a      	bne.n	80025a8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f006 faf7 	bl	8008b86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f002 0208 	and.w	r2, r2, #8
 80025a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 ff01 	bl	80063b4 <USB_ReadInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	2b80      	cmp	r3, #128	; 0x80
 80025ba:	d122      	bne.n	8002602 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025c8:	2301      	movs	r3, #1
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
 80025cc:	e014      	b.n	80025f8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d105      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	4619      	mov	r1, r3
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fb27 	bl	8002c40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	3301      	adds	r3, #1
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fe:	429a      	cmp	r2, r3
 8002600:	d3e5      	bcc.n	80025ce <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fed4 	bl	80063b4 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002616:	d13b      	bne.n	8002690 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002618:	2301      	movs	r3, #1
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
 800261c:	e02b      	b.n	8002676 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	3340      	adds	r3, #64	; 0x40
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d115      	bne.n	8002670 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002644:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002646:	2b00      	cmp	r3, #0
 8002648:	da12      	bge.n	8002670 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	333f      	adds	r3, #63	; 0x3f
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4619      	mov	r1, r3
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fae8 	bl	8002c40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	3301      	adds	r3, #1
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267c:	429a      	cmp	r2, r3
 800267e:	d3ce      	bcc.n	800261e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800268e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f003 fe8d 	bl	80063b4 <USB_ReadInterrupts>
 800269a:	4603      	mov	r3, r0
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026a4:	d155      	bne.n	8002752 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026a6:	2301      	movs	r3, #1
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	e045      	b.n	8002738 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d12e      	bne.n	8002732 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da2b      	bge.n	8002732 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80026e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d121      	bne.n	8002732 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272e:	6053      	str	r3, [r2, #4]
            break;
 8002730:	e007      	b.n	8002742 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	3301      	adds	r3, #1
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273e:	429a      	cmp	r2, r3
 8002740:	d3b4      	bcc.n	80026ac <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fe2c 	bl	80063b4 <USB_ReadInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002766:	d10a      	bne.n	800277e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f006 fa91 	bl	8008c90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800277c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fe16 	bl	80063b4 <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b04      	cmp	r3, #4
 8002790:	d115      	bne.n	80027be <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f006 fa81 	bl	8008cac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	e000      	b.n	80027be <HAL_PCD_IRQHandler+0x938>
      return;
 80027bc:	bf00      	nop
    }
  }
}
 80027be:	3734      	adds	r7, #52	; 0x34
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd90      	pop	{r4, r7, pc}

080027c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_PCD_SetAddress+0x1a>
 80027da:	2302      	movs	r3, #2
 80027dc:	e013      	b.n	8002806 <HAL_PCD_SetAddress+0x42>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 fd74 	bl	80062e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	4608      	mov	r0, r1
 8002818:	4611      	mov	r1, r2
 800281a:	461a      	mov	r2, r3
 800281c:	4603      	mov	r3, r0
 800281e:	70fb      	strb	r3, [r7, #3]
 8002820:	460b      	mov	r3, r1
 8002822:	803b      	strh	r3, [r7, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800282c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002830:	2b00      	cmp	r3, #0
 8002832:	da0f      	bge.n	8002854 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 020f 	and.w	r2, r3, #15
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	3338      	adds	r3, #56	; 0x38
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	3304      	adds	r3, #4
 800284a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	705a      	strb	r2, [r3, #1]
 8002852:	e00f      	b.n	8002874 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	f003 020f 	and.w	r2, r3, #15
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	3304      	adds	r3, #4
 800286c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	b2da      	uxtb	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002880:	883a      	ldrh	r2, [r7, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	78ba      	ldrb	r2, [r7, #2]
 800288a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	785b      	ldrb	r3, [r3, #1]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d004      	beq.n	800289e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800289e:	78bb      	ldrb	r3, [r7, #2]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d102      	bne.n	80028aa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_PCD_EP_Open+0xaa>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e00e      	b.n	80028d6 <HAL_PCD_EP_Open+0xc8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68f9      	ldr	r1, [r7, #12]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 fdf4 	bl	80054b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80028d4:	7afb      	ldrb	r3, [r7, #11]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	da0f      	bge.n	8002912 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 020f 	and.w	r2, r3, #15
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	3338      	adds	r3, #56	; 0x38
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	3304      	adds	r3, #4
 8002908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	705a      	strb	r2, [r3, #1]
 8002910:	e00f      	b.n	8002932 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	3304      	adds	r3, #4
 800292a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_PCD_EP_Close+0x6e>
 8002948:	2302      	movs	r3, #2
 800294a:	e00e      	b.n	800296a <HAL_PCD_EP_Close+0x8c>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68f9      	ldr	r1, [r7, #12]
 800295a:	4618      	mov	r0, r3
 800295c:	f002 fe32 	bl	80055c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b086      	sub	sp, #24
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	460b      	mov	r3, r1
 8002980:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002982:	7afb      	ldrb	r3, [r7, #11]
 8002984:	f003 020f 	and.w	r2, r3, #15
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	3304      	adds	r3, #4
 800299a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2200      	movs	r2, #0
 80029ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2200      	movs	r2, #0
 80029b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b4:	7afb      	ldrb	r3, [r7, #11]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d102      	bne.n	80029ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ce:	7afb      	ldrb	r3, [r7, #11]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	6979      	ldr	r1, [r7, #20]
 80029e6:	f003 f911 	bl	8005c0c <USB_EP0StartXfer>
 80029ea:	e008      	b.n	80029fe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	6979      	ldr	r1, [r7, #20]
 80029fa:	f002 febf 	bl	800577c <USB_EPStartXfer>
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	f003 020f 	and.w	r2, r3, #15
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	460b      	mov	r3, r1
 8002a46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a48:	7afb      	ldrb	r3, [r7, #11]
 8002a4a:	f003 020f 	and.w	r2, r3, #15
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	3338      	adds	r3, #56	; 0x38
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2201      	movs	r2, #1
 8002a76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a78:	7afb      	ldrb	r3, [r7, #11]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d102      	bne.n	8002a92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a92:	7afb      	ldrb	r3, [r7, #11]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6979      	ldr	r1, [r7, #20]
 8002aaa:	f003 f8af 	bl	8005c0c <USB_EP0StartXfer>
 8002aae:	e008      	b.n	8002ac2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	6979      	ldr	r1, [r7, #20]
 8002abe:	f002 fe5d 	bl	800577c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	f003 020f 	and.w	r2, r3, #15
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d901      	bls.n	8002aea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e050      	b.n	8002b8c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	da0f      	bge.n	8002b12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	f003 020f 	and.w	r2, r3, #15
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	3338      	adds	r3, #56	; 0x38
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	3304      	adds	r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	705a      	strb	r2, [r3, #1]
 8002b10:	e00d      	b.n	8002b2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	3304      	adds	r3, #4
 8002b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_PCD_EP_SetStall+0x82>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e01e      	b.n	8002b8c <HAL_PCD_EP_SetStall+0xc0>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68f9      	ldr	r1, [r7, #12]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 faed 	bl	800613c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	b2d9      	uxtb	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f003 fcdd 	bl	800653c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f003 020f 	and.w	r2, r3, #15
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d901      	bls.n	8002bb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e042      	b.n	8002c38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	da0f      	bge.n	8002bda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	f003 020f 	and.w	r2, r3, #15
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	3338      	adds	r3, #56	; 0x38
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	3304      	adds	r3, #4
 8002bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	705a      	strb	r2, [r3, #1]
 8002bd8:	e00f      	b.n	8002bfa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	f003 020f 	and.w	r2, r3, #15
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_PCD_EP_ClrStall+0x86>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e00e      	b.n	8002c38 <HAL_PCD_EP_ClrStall+0xa4>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 faf5 	bl	8006218 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	da0c      	bge.n	8002c6e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	f003 020f 	and.w	r2, r3, #15
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3338      	adds	r3, #56	; 0x38
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	3304      	adds	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	e00c      	b.n	8002c88 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 020f 	and.w	r2, r3, #15
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	3304      	adds	r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68f9      	ldr	r1, [r7, #12]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 f914 	bl	8005ebc <USB_EPStopXfer>
 8002c94:	4603      	mov	r3, r0
 8002c96:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c98:	7afb      	ldrb	r3, [r7, #11]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b08a      	sub	sp, #40	; 0x28
 8002ca6:	af02      	add	r7, sp, #8
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	3338      	adds	r3, #56	; 0x38
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a1a      	ldr	r2, [r3, #32]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d901      	bls.n	8002cda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06c      	b.n	8002db4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d902      	bls.n	8002cf6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3303      	adds	r3, #3
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cfe:	e02b      	b.n	8002d58 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	699a      	ldr	r2, [r3, #24]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d902      	bls.n	8002d1c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	3303      	adds	r3, #3
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6919      	ldr	r1, [r3, #16]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	4603      	mov	r3, r0
 8002d3a:	6978      	ldr	r0, [r7, #20]
 8002d3c:	f003 f968 	bl	8006010 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	441a      	add	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	441a      	add	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d809      	bhi.n	8002d82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d203      	bcs.n	8002d82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1be      	bne.n	8002d00 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d811      	bhi.n	8002db2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	2201      	movs	r2, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	6939      	ldr	r1, [r7, #16]
 8002daa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dae:	4013      	ands	r3, r2
 8002db0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	333c      	adds	r3, #60	; 0x3c
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d17b      	bne.n	8002eea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d015      	beq.n	8002e28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	4a61      	ldr	r2, [pc, #388]	; (8002f84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	f240 80b9 	bls.w	8002f78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80b3 	beq.w	8002f78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e24:	6093      	str	r3, [r2, #8]
 8002e26:	e0a7      	b.n	8002f78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2320      	movs	r3, #32
 8002e42:	6093      	str	r3, [r2, #8]
 8002e44:	e098      	b.n	8002f78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f040 8093 	bne.w	8002f78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4a4b      	ldr	r2, [pc, #300]	; (8002f84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d90f      	bls.n	8002e7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e70:	461a      	mov	r2, r3
 8002e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e76:	6093      	str	r3, [r2, #8]
 8002e78:	e07e      	b.n	8002f78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	0159      	lsls	r1, r3, #5
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea6:	1ad2      	subs	r2, r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d114      	bne.n	8002edc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	f003 fb38 	bl	800653c <USB_EP0_OutStart>
 8002ecc:	e006      	b.n	8002edc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	441a      	add	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f005 fe1a 	bl	8008b1c <HAL_PCD_DataOutStageCallback>
 8002ee8:	e046      	b.n	8002f78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d124      	bne.n	8002f3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0e:	6093      	str	r3, [r2, #8]
 8002f10:	e032      	b.n	8002f78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	4619      	mov	r1, r3
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f005 fdf1 	bl	8008b1c <HAL_PCD_DataOutStageCallback>
 8002f3a:	e01d      	b.n	8002f78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d114      	bne.n	8002f6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d108      	bne.n	8002f6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f64:	461a      	mov	r2, r3
 8002f66:	2100      	movs	r1, #0
 8002f68:	f003 fae8 	bl	800653c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	4619      	mov	r1, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f005 fdd2 	bl	8008b1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	4f54300a 	.word	0x4f54300a
 8002f88:	4f54310a 	.word	0x4f54310a

08002f8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	333c      	adds	r3, #60	; 0x3c
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a15      	ldr	r2, [pc, #84]	; (8003014 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d90e      	bls.n	8002fe0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f005 fd89 	bl	8008af8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d90c      	bls.n	8003008 <PCD_EP_OutSetupPacket_int+0x7c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d108      	bne.n	8003008 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003000:	461a      	mov	r2, r3
 8003002:	2101      	movs	r1, #1
 8003004:	f003 fa9a 	bl	800653c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	4f54300a 	.word	0x4f54300a

08003018 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
 8003024:	4613      	mov	r3, r2
 8003026:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d107      	bne.n	8003046 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003036:	883b      	ldrh	r3, [r7, #0]
 8003038:	0419      	lsls	r1, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	430a      	orrs	r2, r1
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
 8003044:	e028      	b.n	8003098 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	4413      	add	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003054:	2300      	movs	r3, #0
 8003056:	73fb      	strb	r3, [r7, #15]
 8003058:	e00d      	b.n	8003076 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	3340      	adds	r3, #64	; 0x40
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	4413      	add	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	3301      	adds	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	3b01      	subs	r3, #1
 800307c:	429a      	cmp	r2, r3
 800307e:	d3ec      	bcc.n	800305a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003080:	883b      	ldrh	r3, [r7, #0]
 8003082:	0418      	lsls	r0, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6819      	ldr	r1, [r3, #0]
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	3b01      	subs	r3, #1
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	4302      	orrs	r2, r0
 8003090:	3340      	adds	r3, #64	; 0x40
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e267      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d075      	beq.n	80031ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fe:	4b88      	ldr	r3, [pc, #544]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d00c      	beq.n	8003124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003112:	2b08      	cmp	r3, #8
 8003114:	d112      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	4b82      	ldr	r3, [pc, #520]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003122:	d10b      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	4b7e      	ldr	r3, [pc, #504]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05b      	beq.n	80031e8 <HAL_RCC_OscConfig+0x108>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d157      	bne.n	80031e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e242      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d106      	bne.n	8003154 <HAL_RCC_OscConfig+0x74>
 8003146:	4b76      	ldr	r3, [pc, #472]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a75      	ldr	r2, [pc, #468]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e01d      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x98>
 800315e:	4b70      	ldr	r3, [pc, #448]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6f      	ldr	r2, [pc, #444]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6c      	ldr	r2, [pc, #432]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003178:	4b69      	ldr	r3, [pc, #420]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a68      	ldr	r2, [pc, #416]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800317e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b66      	ldr	r3, [pc, #408]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a65      	ldr	r2, [pc, #404]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800318a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fd fe44 	bl	8000e24 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fd fe40 	bl	8000e24 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e207      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b5b      	ldr	r3, [pc, #364]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0xc0>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fd fe30 	bl	8000e24 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fd fe2c 	bl	8000e24 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1f3      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	4b51      	ldr	r3, [pc, #324]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0xe8>
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d063      	beq.n	80032be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f6:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800320a:	2b08      	cmp	r3, #8
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b44      	ldr	r3, [pc, #272]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1c7      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003232:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4937      	ldr	r1, [pc, #220]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	e03a      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003250:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_RCC_OscConfig+0x244>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fd fde5 	bl	8000e24 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325e:	f7fd fde1 	bl	8000e24 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1a8      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4925      	ldr	r1, [pc, #148]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
 8003290:	e015      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_OscConfig+0x244>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd fdc4 	bl	8000e24 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a0:	f7fd fdc0 	bl	8000e24 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e187      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d036      	beq.n	8003338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_RCC_OscConfig+0x248>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fd fda4 	bl	8000e24 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e0:	f7fd fda0 	bl	8000e24 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e167      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x200>
 80032fe:	e01b      	b.n	8003338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_OscConfig+0x248>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003306:	f7fd fd8d 	bl	8000e24 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	e00e      	b.n	800332c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330e:	f7fd fd89 	bl	8000e24 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d907      	bls.n	800332c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e150      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
 8003320:	40023800 	.word	0x40023800
 8003324:	42470000 	.word	0x42470000
 8003328:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332c:	4b88      	ldr	r3, [pc, #544]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ea      	bne.n	800330e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8097 	beq.w	8003474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334a:	4b81      	ldr	r3, [pc, #516]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10f      	bne.n	8003376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	4b7d      	ldr	r3, [pc, #500]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a7c      	ldr	r2, [pc, #496]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b7a      	ldr	r3, [pc, #488]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003376:	4b77      	ldr	r3, [pc, #476]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d118      	bne.n	80033b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003382:	4b74      	ldr	r3, [pc, #464]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a73      	ldr	r2, [pc, #460]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338e:	f7fd fd49 	bl	8000e24 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7fd fd45 	bl	8000e24 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e10c      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x2ea>
 80033bc:	4b64      	ldr	r3, [pc, #400]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a63      	ldr	r2, [pc, #396]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	e01c      	b.n	8003404 <HAL_RCC_OscConfig+0x324>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x30c>
 80033d2:	4b5f      	ldr	r3, [pc, #380]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a5e      	ldr	r2, [pc, #376]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
 80033de:	4b5c      	ldr	r3, [pc, #368]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a5b      	ldr	r2, [pc, #364]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0x324>
 80033ec:	4b58      	ldr	r3, [pc, #352]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	4b55      	ldr	r3, [pc, #340]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a54      	ldr	r2, [pc, #336]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033fe:	f023 0304 	bic.w	r3, r3, #4
 8003402:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d015      	beq.n	8003438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fd fd0a 	bl	8000e24 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fd fd06 	bl	8000e24 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0cb      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	4b49      	ldr	r3, [pc, #292]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ee      	beq.n	8003414 <HAL_RCC_OscConfig+0x334>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7fd fcf4 	bl	8000e24 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343e:	e00a      	b.n	8003456 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7fd fcf0 	bl	8000e24 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0b5      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003456:	4b3e      	ldr	r3, [pc, #248]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ee      	bne.n	8003440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b39      	ldr	r3, [pc, #228]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	4a38      	ldr	r2, [pc, #224]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003472:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80a1 	beq.w	80035c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	d05c      	beq.n	8003544 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d141      	bne.n	8003516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	4b31      	ldr	r3, [pc, #196]	; (8003558 <HAL_RCC_OscConfig+0x478>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fd fcc4 	bl	8000e24 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fd fcc0 	bl	8000e24 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e087      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b2:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	3b01      	subs	r3, #1
 80034d8:	041b      	lsls	r3, r3, #16
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	491b      	ldr	r1, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_RCC_OscConfig+0x478>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fd fc99 	bl	8000e24 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f6:	f7fd fc95 	bl	8000e24 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e05c      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x416>
 8003514:	e054      	b.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_RCC_OscConfig+0x478>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fd fc82 	bl	8000e24 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003524:	f7fd fc7e 	bl	8000e24 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e045      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x444>
 8003542:	e03d      	b.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d107      	bne.n	800355c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e038      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
 8003550:	40023800 	.word	0x40023800
 8003554:	40007000 	.word	0x40007000
 8003558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x4ec>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d028      	beq.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d121      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d11a      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003594:	4293      	cmp	r3, r2
 8003596:	d111      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	3b01      	subs	r3, #1
 80035a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800

080035d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0cc      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b68      	ldr	r3, [pc, #416]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d90c      	bls.n	800360c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b65      	ldr	r3, [pc, #404]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b63      	ldr	r3, [pc, #396]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b8      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003624:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800362e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800363c:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b50      	ldr	r3, [pc, #320]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	494d      	ldr	r1, [pc, #308]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d044      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b47      	ldr	r3, [pc, #284]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d119      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e07f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d003      	beq.n	800368e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	2b03      	cmp	r3, #3
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b3f      	ldr	r3, [pc, #252]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3b      	ldr	r3, [pc, #236]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e067      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4934      	ldr	r1, [pc, #208]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c0:	f7fd fbb0 	bl	8000e24 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fd fbac 	bl	8000e24 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e04f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2b      	ldr	r3, [pc, #172]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d20c      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e032      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4916      	ldr	r1, [pc, #88]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003756:	f000 f821 	bl	800379c <HAL_RCC_GetSysClockFreq>
 800375a:	4602      	mov	r2, r0
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	490a      	ldr	r1, [pc, #40]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	5ccb      	ldrb	r3, [r1, r3]
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fb10 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023c00 	.word	0x40023c00
 800378c:	40023800 	.word	0x40023800
 8003790:	08009d1c 	.word	0x08009d1c
 8003794:	20000000 	.word	0x20000000
 8003798:	20000004 	.word	0x20000004

0800379c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800379c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a0:	b090      	sub	sp, #64	; 0x40
 80037a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
 80037a8:	2300      	movs	r3, #0
 80037aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ac:	2300      	movs	r3, #0
 80037ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b4:	4b59      	ldr	r3, [pc, #356]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d00d      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x40>
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	f200 80a1 	bhi.w	8003908 <HAL_RCC_GetSysClockFreq+0x16c>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ce:	e09b      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_GetSysClockFreq+0x184>)
 80037d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037d4:	e09b      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d6:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037da:	e098      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037dc:	4b4f      	ldr	r3, [pc, #316]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e6:	4b4d      	ldr	r3, [pc, #308]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d028      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f2:	4b4a      	ldr	r3, [pc, #296]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	2200      	movs	r2, #0
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	627a      	str	r2, [r7, #36]	; 0x24
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003804:	2100      	movs	r1, #0
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 8003808:	fb03 f201 	mul.w	r2, r3, r1
 800380c:	2300      	movs	r3, #0
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	4413      	add	r3, r2
 8003814:	4a43      	ldr	r2, [pc, #268]	; (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 8003816:	fba0 1202 	umull	r1, r2, r0, r2
 800381a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800381c:	460a      	mov	r2, r1
 800381e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003822:	4413      	add	r3, r2
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003828:	2200      	movs	r2, #0
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	61fa      	str	r2, [r7, #28]
 800382e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003832:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003836:	f7fc fd2b 	bl	8000290 <__aeabi_uldivmod>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4613      	mov	r3, r2
 8003840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003842:	e053      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003844:	4b35      	ldr	r3, [pc, #212]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	2200      	movs	r2, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	617a      	str	r2, [r7, #20]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003856:	f04f 0b00 	mov.w	fp, #0
 800385a:	4652      	mov	r2, sl
 800385c:	465b      	mov	r3, fp
 800385e:	f04f 0000 	mov.w	r0, #0
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	0159      	lsls	r1, r3, #5
 8003868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386c:	0150      	lsls	r0, r2, #5
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	ebb2 080a 	subs.w	r8, r2, sl
 8003876:	eb63 090b 	sbc.w	r9, r3, fp
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003886:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800388a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800388e:	ebb2 0408 	subs.w	r4, r2, r8
 8003892:	eb63 0509 	sbc.w	r5, r3, r9
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	00eb      	lsls	r3, r5, #3
 80038a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a4:	00e2      	lsls	r2, r4, #3
 80038a6:	4614      	mov	r4, r2
 80038a8:	461d      	mov	r5, r3
 80038aa:	eb14 030a 	adds.w	r3, r4, sl
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	eb45 030b 	adc.w	r3, r5, fp
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d6:	2200      	movs	r2, #0
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	60fa      	str	r2, [r7, #12]
 80038dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038e0:	f7fc fcd6 	bl	8000290 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetSysClockFreq+0x184>)
 800390a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003910:	4618      	mov	r0, r3
 8003912:	3740      	adds	r7, #64	; 0x40
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400
 8003924:	017d7840 	.word	0x017d7840

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	08009d2c 	.word	0x08009d2c

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800396c:	f7ff ffdc 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0b5b      	lsrs	r3, r3, #13
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	; (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	08009d2c 	.word	0x08009d2c

08003990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e03f      	b.n	8003a22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd f854 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 ff81 	bl	80048dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08c      	sub	sp, #48	; 0x30
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d165      	bne.n	8003b12 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_UART_Transmit_DMA+0x26>
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e05e      	b.n	8003b14 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_UART_Transmit_DMA+0x38>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e057      	b.n	8003b14 <HAL_UART_Transmit_DMA+0xe8>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	88fa      	ldrh	r2, [r7, #6]
 8003a76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2221      	movs	r2, #33	; 0x21
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a90:	4a22      	ldr	r2, [pc, #136]	; (8003b1c <HAL_UART_Transmit_DMA+0xf0>)
 8003a92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a98:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <HAL_UART_Transmit_DMA+0xf4>)
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa0:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <HAL_UART_Transmit_DMA+0xf8>)
 8003aa2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003aac:	f107 0308 	add.w	r3, r7, #8
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	6819      	ldr	r1, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	f7fd fb9e 	bl	8001204 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ad0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afa:	627a      	str	r2, [r7, #36]	; 0x24
 8003afc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6a39      	ldr	r1, [r7, #32]
 8003b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3730      	adds	r7, #48	; 0x30
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	08004175 	.word	0x08004175
 8003b20:	0800420f 	.word	0x0800420f
 8003b24:	08004387 	.word	0x08004387

08003b28 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08c      	sub	sp, #48	; 0x30
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	4613      	mov	r3, r2
 8003b34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d152      	bne.n	8003be8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e04b      	b.n	8003bea <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e044      	b.n	8003bea <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	461a      	mov	r2, r3
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fc51 	bl	800441c <UART_Start_Receive_DMA>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d12c      	bne.n	8003be2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d125      	bne.n	8003bdc <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f043 0310 	orr.w	r3, r3, #16
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc6:	627a      	str	r2, [r7, #36]	; 0x24
 8003bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	6a39      	ldr	r1, [r7, #32]
 8003bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e5      	bne.n	8003ba6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003bda:	e002      	b.n	8003be2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003be6:	e000      	b.n	8003bea <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3730      	adds	r7, #48	; 0x30
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b0ba      	sub	sp, #232	; 0xe8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10f      	bne.n	8003c5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_UART_IRQHandler+0x66>
 8003c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fd87 	bl	8004766 <UART_Receive_IT>
      return;
 8003c58:	e256      	b.n	8004108 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80de 	beq.w	8003e20 <HAL_UART_IRQHandler+0x22c>
 8003c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80d1 	beq.w	8003e20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xae>
 8003c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f043 0201 	orr.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_UART_IRQHandler+0xd2>
 8003cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f043 0202 	orr.w	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_UART_IRQHandler+0xf6>
 8003cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0204 	orr.w	r2, r3, #4
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d011      	beq.n	8003d1a <HAL_UART_IRQHandler+0x126>
 8003cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d105      	bne.n	8003d0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f043 0208 	orr.w	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 81ed 	beq.w	80040fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_UART_IRQHandler+0x14e>
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fd12 	bl	8004766 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <HAL_UART_IRQHandler+0x17a>
 8003d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d04f      	beq.n	8003e0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fc1a 	bl	80045a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d141      	bne.n	8003e06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3314      	adds	r3, #20
 8003d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1d9      	bne.n	8003d82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d013      	beq.n	8003dfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	4a7d      	ldr	r2, [pc, #500]	; (8003fd0 <HAL_UART_IRQHandler+0x3dc>)
 8003ddc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd fad6 	bl	8001394 <HAL_DMA_Abort_IT>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d016      	beq.n	8003e1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfc:	e00e      	b.n	8003e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f9ae 	bl	8004160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	e00a      	b.n	8003e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f9aa 	bl	8004160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	e006      	b.n	8003e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f9a6 	bl	8004160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e1a:	e170      	b.n	80040fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1c:	bf00      	nop
    return;
 8003e1e:	e16e      	b.n	80040fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	f040 814a 	bne.w	80040be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8143 	beq.w	80040be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 813c 	beq.w	80040be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	f040 80b4 	bne.w	8003fd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 8140 	beq.w	8004102 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	f080 8139 	bcs.w	8004102 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea2:	f000 8088 	beq.w	8003fb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ed2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1d9      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3314      	adds	r3, #20
 8003f12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e1      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e3      	bne.n	8003f2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f86:	f023 0310 	bic.w	r3, r3, #16
 8003f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f98:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e3      	bne.n	8003f74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fd f97f 	bl	80012b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fc fc28 	bl	800081c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fcc:	e099      	b.n	8004102 <HAL_UART_IRQHandler+0x50e>
 8003fce:	bf00      	nop
 8003fd0:	0800466f 	.word	0x0800466f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 808b 	beq.w	8004106 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ff0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8086 	beq.w	8004106 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800401e:	647a      	str	r2, [r7, #68]	; 0x44
 8004020:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800402c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e3      	bne.n	8003ffa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3314      	adds	r3, #20
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	623b      	str	r3, [r7, #32]
   return(result);
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3314      	adds	r3, #20
 8004052:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004056:	633a      	str	r2, [r7, #48]	; 0x30
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800405c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e3      	bne.n	8004032 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	60fb      	str	r3, [r7, #12]
   return(result);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0310 	bic.w	r3, r3, #16
 800408e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800409c:	61fa      	str	r2, [r7, #28]
 800409e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	617b      	str	r3, [r7, #20]
   return(result);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e3      	bne.n	8004078 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fc fbb0 	bl	800081c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040bc:	e023      	b.n	8004106 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_UART_IRQHandler+0x4ea>
 80040ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fadd 	bl	8004696 <UART_Transmit_IT>
    return;
 80040dc:	e014      	b.n	8004108 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00e      	beq.n	8004108 <HAL_UART_IRQHandler+0x514>
 80040ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fb1d 	bl	8004736 <UART_EndTransmit_IT>
    return;
 80040fc:	e004      	b.n	8004108 <HAL_UART_IRQHandler+0x514>
    return;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_UART_IRQHandler+0x514>
      return;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_UART_IRQHandler+0x514>
      return;
 8004106:	bf00      	nop
  }
}
 8004108:	37e8      	adds	r7, #232	; 0xe8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop

08004110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b090      	sub	sp, #64	; 0x40
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d137      	bne.n	8004200 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004192:	2200      	movs	r2, #0
 8004194:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3314      	adds	r3, #20
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	623b      	str	r3, [r7, #32]
   return(result);
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80041ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3314      	adds	r3, #20
 80041b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041b6:	633a      	str	r2, [r7, #48]	; 0x30
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e5      	bne.n	8004196 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	330c      	adds	r3, #12
 80041d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e0:	637b      	str	r3, [r7, #52]	; 0x34
 80041e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041ea:	61fa      	str	r2, [r7, #28]
 80041ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	69b9      	ldr	r1, [r7, #24]
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	617b      	str	r3, [r7, #20]
   return(result);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e5      	bne.n	80041ca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041fe:	e002      	b.n	8004206 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004200:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004202:	f7ff ff85 	bl	8004110 <HAL_UART_TxCpltCallback>
}
 8004206:	bf00      	nop
 8004208:	3740      	adds	r7, #64	; 0x40
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff ff81 	bl	8004124 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b09c      	sub	sp, #112	; 0x70
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d172      	bne.n	800432c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004248:	2200      	movs	r2, #0
 800424a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800424c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800425c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004262:	66bb      	str	r3, [r7, #104]	; 0x68
 8004264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800426c:	65ba      	str	r2, [r7, #88]	; 0x58
 800426e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800427a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e5      	bne.n	800424c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3314      	adds	r3, #20
 8004286:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	667b      	str	r3, [r7, #100]	; 0x64
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80042a0:	647a      	str	r2, [r7, #68]	; 0x44
 80042a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e5      	bne.n	8004280 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	623b      	str	r3, [r7, #32]
   return(result);
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ca:	663b      	str	r3, [r7, #96]	; 0x60
 80042cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3314      	adds	r3, #20
 80042d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042d4:	633a      	str	r2, [r7, #48]	; 0x30
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d119      	bne.n	800432c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	60fb      	str	r3, [r7, #12]
   return(result);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0310 	bic.w	r3, r3, #16
 800430e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004318:	61fa      	str	r2, [r7, #28]
 800431a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	69b9      	ldr	r1, [r7, #24]
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	617b      	str	r3, [r7, #20]
   return(result);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	2b01      	cmp	r3, #1
 8004332:	d106      	bne.n	8004342 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004336:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004338:	4619      	mov	r1, r3
 800433a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800433c:	f7fc fa6e 	bl	800081c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004340:	e002      	b.n	8004348 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004342:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004344:	f7ff fef8 	bl	8004138 <HAL_UART_RxCpltCallback>
}
 8004348:	bf00      	nop
 800434a:	3770      	adds	r7, #112	; 0x70
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	2b01      	cmp	r3, #1
 8004364:	d108      	bne.n	8004378 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800436a:	085b      	lsrs	r3, r3, #1
 800436c:	b29b      	uxth	r3, r3
 800436e:	4619      	mov	r1, r3
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7fc fa53 	bl	800081c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004376:	e002      	b.n	800437e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fee7 	bl	800414c <HAL_UART_RxHalfCpltCallback>
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b80      	cmp	r3, #128	; 0x80
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b21      	cmp	r3, #33	; 0x21
 80043b8:	d108      	bne.n	80043cc <UART_DMAError+0x46>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2200      	movs	r2, #0
 80043c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80043c6:	68b8      	ldr	r0, [r7, #8]
 80043c8:	f000 f8c6 	bl	8004558 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b22      	cmp	r3, #34	; 0x22
 80043ec:	d108      	bne.n	8004400 <UART_DMAError+0x7a>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2200      	movs	r2, #0
 80043f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80043fa:	68b8      	ldr	r0, [r7, #8]
 80043fc:	f000 f8d4 	bl	80045a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f043 0210 	orr.w	r2, r3, #16
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800440c:	68b8      	ldr	r0, [r7, #8]
 800440e:	f7ff fea7 	bl	8004160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b098      	sub	sp, #96	; 0x60
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2222      	movs	r2, #34	; 0x22
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	4a40      	ldr	r2, [pc, #256]	; (800454c <UART_Start_Receive_DMA+0x130>)
 800444a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	4a3f      	ldr	r2, [pc, #252]	; (8004550 <UART_Start_Receive_DMA+0x134>)
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	4a3e      	ldr	r2, [pc, #248]	; (8004554 <UART_Start_Receive_DMA+0x138>)
 800445a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	2200      	movs	r2, #0
 8004462:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004464:	f107 0308 	add.w	r3, r7, #8
 8004468:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	f7fc fec2 	bl	8001204 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d019      	beq.n	80044da <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	657b      	str	r3, [r7, #84]	; 0x54
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e5      	bne.n	80044da <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3314      	adds	r3, #20
 8004514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	617b      	str	r3, [r7, #20]
   return(result);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004524:	653b      	str	r3, [r7, #80]	; 0x50
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800452e:	627a      	str	r2, [r7, #36]	; 0x24
 8004530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6a39      	ldr	r1, [r7, #32]
 8004534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	61fb      	str	r3, [r7, #28]
   return(result);
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e5      	bne.n	800450e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3760      	adds	r7, #96	; 0x60
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	0800422b 	.word	0x0800422b
 8004550:	08004351 	.word	0x08004351
 8004554:	08004387 	.word	0x08004387

08004558 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	; 0x24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	61ba      	str	r2, [r7, #24]
 8004582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	613b      	str	r3, [r7, #16]
   return(result);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800459c:	bf00      	nop
 800459e:	3724      	adds	r7, #36	; 0x24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b095      	sub	sp, #84	; 0x54
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045d0:	643a      	str	r2, [r7, #64]	; 0x40
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e5      	bne.n	80045b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3314      	adds	r3, #20
 80045ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004604:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800460a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e5      	bne.n	80045e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	2b01      	cmp	r3, #1
 800461e:	d119      	bne.n	8004654 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f023 0310 	bic.w	r3, r3, #16
 8004636:	647b      	str	r3, [r7, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004640:	61ba      	str	r2, [r7, #24]
 8004642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6979      	ldr	r1, [r7, #20]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	613b      	str	r3, [r7, #16]
   return(result);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e5      	bne.n	8004620 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004662:	bf00      	nop
 8004664:	3754      	adds	r7, #84	; 0x54
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff fd69 	bl	8004160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b21      	cmp	r3, #33	; 0x21
 80046a8:	d13e      	bne.n	8004728 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b2:	d114      	bne.n	80046de <UART_Transmit_IT+0x48>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d110      	bne.n	80046de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	1c9a      	adds	r2, r3, #2
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	621a      	str	r2, [r3, #32]
 80046dc:	e008      	b.n	80046f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	1c59      	adds	r1, r3, #1
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6211      	str	r1, [r2, #32]
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4619      	mov	r1, r3
 80046fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10f      	bne.n	8004724 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004712:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004722:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff fcda 	bl	8004110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b08c      	sub	sp, #48	; 0x30
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b22      	cmp	r3, #34	; 0x22
 8004778:	f040 80ab 	bne.w	80048d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004784:	d117      	bne.n	80047b6 <UART_Receive_IT+0x50>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d113      	bne.n	80047b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	1c9a      	adds	r2, r3, #2
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28
 80047b4:	e026      	b.n	8004804 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c8:	d007      	beq.n	80047da <UART_Receive_IT+0x74>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <UART_Receive_IT+0x82>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e008      	b.n	80047fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29b      	uxth	r3, r3
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4619      	mov	r1, r3
 8004812:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004814:	2b00      	cmp	r3, #0
 8004816:	d15a      	bne.n	80048ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0220 	bic.w	r2, r2, #32
 8004826:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004836:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b01      	cmp	r3, #1
 8004856:	d135      	bne.n	80048c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	613b      	str	r3, [r7, #16]
   return(result);
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487e:	623a      	str	r2, [r7, #32]
 8004880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	69f9      	ldr	r1, [r7, #28]
 8004884:	6a3a      	ldr	r2, [r7, #32]
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	61bb      	str	r3, [r7, #24]
   return(result);
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e5      	bne.n	800485e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b10      	cmp	r3, #16
 800489e:	d10a      	bne.n	80048b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7fb ffad 	bl	800081c <HAL_UARTEx_RxEventCallback>
 80048c2:	e002      	b.n	80048ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fc37 	bl	8004138 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e002      	b.n	80048d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3730      	adds	r7, #48	; 0x30
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e0:	b0c0      	sub	sp, #256	; 0x100
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	68d9      	ldr	r1, [r3, #12]
 80048fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	ea40 0301 	orr.w	r3, r0, r1
 8004904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	431a      	orrs	r2, r3
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	431a      	orrs	r2, r3
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004934:	f021 010c 	bic.w	r1, r1, #12
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004942:	430b      	orrs	r3, r1
 8004944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	6999      	ldr	r1, [r3, #24]
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	ea40 0301 	orr.w	r3, r0, r1
 8004962:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b8f      	ldr	r3, [pc, #572]	; (8004ba8 <UART_SetConfig+0x2cc>)
 800496c:	429a      	cmp	r2, r3
 800496e:	d005      	beq.n	800497c <UART_SetConfig+0xa0>
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b8d      	ldr	r3, [pc, #564]	; (8004bac <UART_SetConfig+0x2d0>)
 8004978:	429a      	cmp	r2, r3
 800497a:	d104      	bne.n	8004986 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800497c:	f7fe fff4 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004980:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004984:	e003      	b.n	800498e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004986:	f7fe ffdb 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 800498a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004998:	f040 810c 	bne.w	8004bb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800499c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049ae:	4622      	mov	r2, r4
 80049b0:	462b      	mov	r3, r5
 80049b2:	1891      	adds	r1, r2, r2
 80049b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80049b6:	415b      	adcs	r3, r3
 80049b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049be:	4621      	mov	r1, r4
 80049c0:	eb12 0801 	adds.w	r8, r2, r1
 80049c4:	4629      	mov	r1, r5
 80049c6:	eb43 0901 	adc.w	r9, r3, r1
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049de:	4690      	mov	r8, r2
 80049e0:	4699      	mov	r9, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	eb18 0303 	adds.w	r3, r8, r3
 80049e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049ec:	462b      	mov	r3, r5
 80049ee:	eb49 0303 	adc.w	r3, r9, r3
 80049f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	18db      	adds	r3, r3, r3
 8004a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a10:	4613      	mov	r3, r2
 8004a12:	eb42 0303 	adc.w	r3, r2, r3
 8004a16:	657b      	str	r3, [r7, #84]	; 0x54
 8004a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a20:	f7fb fc36 	bl	8000290 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	011c      	lsls	r4, r3, #4
 8004a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a44:	4642      	mov	r2, r8
 8004a46:	464b      	mov	r3, r9
 8004a48:	1891      	adds	r1, r2, r2
 8004a4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a4c:	415b      	adcs	r3, r3
 8004a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a54:	4641      	mov	r1, r8
 8004a56:	eb12 0a01 	adds.w	sl, r2, r1
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a74:	4692      	mov	sl, r2
 8004a76:	469b      	mov	fp, r3
 8004a78:	4643      	mov	r3, r8
 8004a7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a82:	464b      	mov	r3, r9
 8004a84:	eb4b 0303 	adc.w	r3, fp, r3
 8004a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	18db      	adds	r3, r3, r3
 8004aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	eb42 0303 	adc.w	r3, r2, r3
 8004aac:	647b      	str	r3, [r7, #68]	; 0x44
 8004aae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ab2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ab6:	f7fb fbeb 	bl	8000290 <__aeabi_uldivmod>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	2264      	movs	r2, #100	; 0x64
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	1acb      	subs	r3, r1, r3
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ad6:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ae4:	441c      	add	r4, r3
 8004ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004af4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004af8:	4642      	mov	r2, r8
 8004afa:	464b      	mov	r3, r9
 8004afc:	1891      	adds	r1, r2, r2
 8004afe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b00:	415b      	adcs	r3, r3
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b08:	4641      	mov	r1, r8
 8004b0a:	1851      	adds	r1, r2, r1
 8004b0c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b0e:	4649      	mov	r1, r9
 8004b10:	414b      	adcs	r3, r1
 8004b12:	637b      	str	r3, [r7, #52]	; 0x34
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b20:	4659      	mov	r1, fp
 8004b22:	00cb      	lsls	r3, r1, #3
 8004b24:	4651      	mov	r1, sl
 8004b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b2a:	4651      	mov	r1, sl
 8004b2c:	00ca      	lsls	r2, r1, #3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	4642      	mov	r2, r8
 8004b36:	189b      	adds	r3, r3, r2
 8004b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	460a      	mov	r2, r1
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	18db      	adds	r3, r3, r3
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b62:	4613      	mov	r3, r2
 8004b64:	eb42 0303 	adc.w	r3, r2, r3
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b72:	f7fb fb8d 	bl	8000290 <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	2164      	movs	r1, #100	; 0x64
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	3332      	adds	r3, #50	; 0x32
 8004b8e:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	f003 0207 	and.w	r2, r3, #7
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4422      	add	r2, r4
 8004ba2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ba4:	e105      	b.n	8004db2 <UART_SetConfig+0x4d6>
 8004ba6:	bf00      	nop
 8004ba8:	40011000 	.word	0x40011000
 8004bac:	40011400 	.word	0x40011400
 8004bb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	464b      	mov	r3, r9
 8004bca:	1891      	adds	r1, r2, r2
 8004bcc:	6239      	str	r1, [r7, #32]
 8004bce:	415b      	adcs	r3, r3
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bd6:	4641      	mov	r1, r8
 8004bd8:	1854      	adds	r4, r2, r1
 8004bda:	4649      	mov	r1, r9
 8004bdc:	eb43 0501 	adc.w	r5, r3, r1
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	00eb      	lsls	r3, r5, #3
 8004bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bee:	00e2      	lsls	r2, r4, #3
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	461d      	mov	r5, r3
 8004bf4:	4643      	mov	r3, r8
 8004bf6:	18e3      	adds	r3, r4, r3
 8004bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	eb45 0303 	adc.w	r3, r5, r3
 8004c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c22:	4629      	mov	r1, r5
 8004c24:	008b      	lsls	r3, r1, #2
 8004c26:	4621      	mov	r1, r4
 8004c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	008a      	lsls	r2, r1, #2
 8004c30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c34:	f7fb fb2c 	bl	8000290 <__aeabi_uldivmod>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4b60      	ldr	r3, [pc, #384]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	011c      	lsls	r4, r3, #4
 8004c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c58:	4642      	mov	r2, r8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	1891      	adds	r1, r2, r2
 8004c5e:	61b9      	str	r1, [r7, #24]
 8004c60:	415b      	adcs	r3, r3
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c68:	4641      	mov	r1, r8
 8004c6a:	1851      	adds	r1, r2, r1
 8004c6c:	6139      	str	r1, [r7, #16]
 8004c6e:	4649      	mov	r1, r9
 8004c70:	414b      	adcs	r3, r1
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c80:	4659      	mov	r1, fp
 8004c82:	00cb      	lsls	r3, r1, #3
 8004c84:	4651      	mov	r1, sl
 8004c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	00ca      	lsls	r2, r1, #3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	4642      	mov	r2, r8
 8004c96:	189b      	adds	r3, r3, r2
 8004c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	008b      	lsls	r3, r1, #2
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cca:	4641      	mov	r1, r8
 8004ccc:	008a      	lsls	r2, r1, #2
 8004cce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cd2:	f7fb fadd 	bl	8000290 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	2164      	movs	r1, #100	; 0x64
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	3332      	adds	r3, #50	; 0x32
 8004cee:	4a34      	ldr	r2, [pc, #208]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cfa:	441c      	add	r4, r3
 8004cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d00:	2200      	movs	r2, #0
 8004d02:	673b      	str	r3, [r7, #112]	; 0x70
 8004d04:	677a      	str	r2, [r7, #116]	; 0x74
 8004d06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	1891      	adds	r1, r2, r2
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	415b      	adcs	r3, r3
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d1a:	4641      	mov	r1, r8
 8004d1c:	1851      	adds	r1, r2, r1
 8004d1e:	6039      	str	r1, [r7, #0]
 8004d20:	4649      	mov	r1, r9
 8004d22:	414b      	adcs	r3, r1
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d32:	4659      	mov	r1, fp
 8004d34:	00cb      	lsls	r3, r1, #3
 8004d36:	4651      	mov	r1, sl
 8004d38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	00ca      	lsls	r2, r1, #3
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	4603      	mov	r3, r0
 8004d46:	4642      	mov	r2, r8
 8004d48:	189b      	adds	r3, r3, r2
 8004d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d4c:	464b      	mov	r3, r9
 8004d4e:	460a      	mov	r2, r1
 8004d50:	eb42 0303 	adc.w	r3, r2, r3
 8004d54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d60:	667a      	str	r2, [r7, #100]	; 0x64
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d6e:	4649      	mov	r1, r9
 8004d70:	008b      	lsls	r3, r1, #2
 8004d72:	4641      	mov	r1, r8
 8004d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d78:	4641      	mov	r1, r8
 8004d7a:	008a      	lsls	r2, r1, #2
 8004d7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d80:	f7fb fa86 	bl	8000290 <__aeabi_uldivmod>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	2164      	movs	r1, #100	; 0x64
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	3332      	adds	r3, #50	; 0x32
 8004d9c:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	f003 020f 	and.w	r2, r3, #15
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4422      	add	r2, r4
 8004db0:	609a      	str	r2, [r3, #8]
}
 8004db2:	bf00      	nop
 8004db4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004db8:	46bd      	mov	sp, r7
 8004dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dbe:	bf00      	nop
 8004dc0:	51eb851f 	.word	0x51eb851f

08004dc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	f107 001c 	add.w	r0, r7, #28
 8004dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d122      	bne.n	8004e22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d105      	bne.n	8004e16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f001 fbee 	bl	80065f8 <USB_CoreReset>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	73fb      	strb	r3, [r7, #15]
 8004e20:	e01a      	b.n	8004e58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 fbe2 	bl	80065f8 <USB_CoreReset>
 8004e34:	4603      	mov	r3, r0
 8004e36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
 8004e4a:	e005      	b.n	8004e58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d10b      	bne.n	8004e76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f043 0206 	orr.w	r2, r3, #6
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e82:	b004      	add	sp, #16
 8004e84:	4770      	bx	lr
	...

08004e88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	4613      	mov	r3, r2
 8004e94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d165      	bne.n	8004f68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4a41      	ldr	r2, [pc, #260]	; (8004fa4 <USB_SetTurnaroundTime+0x11c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d906      	bls.n	8004eb2 <USB_SetTurnaroundTime+0x2a>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4a40      	ldr	r2, [pc, #256]	; (8004fa8 <USB_SetTurnaroundTime+0x120>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d202      	bcs.n	8004eb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004eac:	230f      	movs	r3, #15
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e062      	b.n	8004f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4a3c      	ldr	r2, [pc, #240]	; (8004fa8 <USB_SetTurnaroundTime+0x120>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d306      	bcc.n	8004ec8 <USB_SetTurnaroundTime+0x40>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4a3b      	ldr	r2, [pc, #236]	; (8004fac <USB_SetTurnaroundTime+0x124>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d202      	bcs.n	8004ec8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ec2:	230e      	movs	r3, #14
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	e057      	b.n	8004f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4a38      	ldr	r2, [pc, #224]	; (8004fac <USB_SetTurnaroundTime+0x124>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d306      	bcc.n	8004ede <USB_SetTurnaroundTime+0x56>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a37      	ldr	r2, [pc, #220]	; (8004fb0 <USB_SetTurnaroundTime+0x128>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d202      	bcs.n	8004ede <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ed8:	230d      	movs	r3, #13
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	e04c      	b.n	8004f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4a33      	ldr	r2, [pc, #204]	; (8004fb0 <USB_SetTurnaroundTime+0x128>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d306      	bcc.n	8004ef4 <USB_SetTurnaroundTime+0x6c>
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4a32      	ldr	r2, [pc, #200]	; (8004fb4 <USB_SetTurnaroundTime+0x12c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d802      	bhi.n	8004ef4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004eee:	230c      	movs	r3, #12
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e041      	b.n	8004f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4a2f      	ldr	r2, [pc, #188]	; (8004fb4 <USB_SetTurnaroundTime+0x12c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d906      	bls.n	8004f0a <USB_SetTurnaroundTime+0x82>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a2e      	ldr	r2, [pc, #184]	; (8004fb8 <USB_SetTurnaroundTime+0x130>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d802      	bhi.n	8004f0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f04:	230b      	movs	r3, #11
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e036      	b.n	8004f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4a2a      	ldr	r2, [pc, #168]	; (8004fb8 <USB_SetTurnaroundTime+0x130>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d906      	bls.n	8004f20 <USB_SetTurnaroundTime+0x98>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4a29      	ldr	r2, [pc, #164]	; (8004fbc <USB_SetTurnaroundTime+0x134>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d802      	bhi.n	8004f20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f1a:	230a      	movs	r3, #10
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e02b      	b.n	8004f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4a26      	ldr	r2, [pc, #152]	; (8004fbc <USB_SetTurnaroundTime+0x134>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d906      	bls.n	8004f36 <USB_SetTurnaroundTime+0xae>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a25      	ldr	r2, [pc, #148]	; (8004fc0 <USB_SetTurnaroundTime+0x138>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d202      	bcs.n	8004f36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f30:	2309      	movs	r3, #9
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e020      	b.n	8004f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4a21      	ldr	r2, [pc, #132]	; (8004fc0 <USB_SetTurnaroundTime+0x138>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d306      	bcc.n	8004f4c <USB_SetTurnaroundTime+0xc4>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4a20      	ldr	r2, [pc, #128]	; (8004fc4 <USB_SetTurnaroundTime+0x13c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d802      	bhi.n	8004f4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f46:	2308      	movs	r3, #8
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e015      	b.n	8004f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <USB_SetTurnaroundTime+0x13c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d906      	bls.n	8004f62 <USB_SetTurnaroundTime+0xda>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <USB_SetTurnaroundTime+0x140>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d202      	bcs.n	8004f62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f5c:	2307      	movs	r3, #7
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e00a      	b.n	8004f78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f62:	2306      	movs	r3, #6
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e007      	b.n	8004f78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d102      	bne.n	8004f74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f6e:	2309      	movs	r3, #9
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	e001      	b.n	8004f78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f74:	2309      	movs	r3, #9
 8004f76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	029b      	lsls	r3, r3, #10
 8004f8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f90:	431a      	orrs	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	00d8acbf 	.word	0x00d8acbf
 8004fa8:	00e4e1c0 	.word	0x00e4e1c0
 8004fac:	00f42400 	.word	0x00f42400
 8004fb0:	01067380 	.word	0x01067380
 8004fb4:	011a499f 	.word	0x011a499f
 8004fb8:	01312cff 	.word	0x01312cff
 8004fbc:	014ca43f 	.word	0x014ca43f
 8004fc0:	016e3600 	.word	0x016e3600
 8004fc4:	01a6ab1f 	.word	0x01a6ab1f
 8004fc8:	01e84800 	.word	0x01e84800

08004fcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f043 0201 	orr.w	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f023 0201 	bic.w	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d115      	bne.n	800505e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800503e:	2001      	movs	r0, #1
 8005040:	f7fb fefc 	bl	8000e3c <HAL_Delay>
      ms++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3301      	adds	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f001 fa45 	bl	80064da <USB_GetMode>
 8005050:	4603      	mov	r3, r0
 8005052:	2b01      	cmp	r3, #1
 8005054:	d01e      	beq.n	8005094 <USB_SetCurrentMode+0x84>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b31      	cmp	r3, #49	; 0x31
 800505a:	d9f0      	bls.n	800503e <USB_SetCurrentMode+0x2e>
 800505c:	e01a      	b.n	8005094 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d115      	bne.n	8005090 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005070:	2001      	movs	r0, #1
 8005072:	f7fb fee3 	bl	8000e3c <HAL_Delay>
      ms++;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3301      	adds	r3, #1
 800507a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 fa2c 	bl	80064da <USB_GetMode>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <USB_SetCurrentMode+0x84>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b31      	cmp	r3, #49	; 0x31
 800508c:	d9f0      	bls.n	8005070 <USB_SetCurrentMode+0x60>
 800508e:	e001      	b.n	8005094 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e005      	b.n	80050a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b32      	cmp	r3, #50	; 0x32
 8005098:	d101      	bne.n	800509e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050a8:	b084      	sub	sp, #16
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050c2:	2300      	movs	r3, #0
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	e009      	b.n	80050dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	3340      	adds	r3, #64	; 0x40
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	2200      	movs	r2, #0
 80050d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	3301      	adds	r3, #1
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b0e      	cmp	r3, #14
 80050e0:	d9f2      	bls.n	80050c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d11c      	bne.n	8005122 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f6:	f043 0302 	orr.w	r3, r3, #2
 80050fa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	639a      	str	r2, [r3, #56]	; 0x38
 8005120:	e00b      	b.n	800513a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005140:	461a      	mov	r2, r3
 8005142:	2300      	movs	r3, #0
 8005144:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514c:	4619      	mov	r1, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005154:	461a      	mov	r2, r3
 8005156:	680b      	ldr	r3, [r1, #0]
 8005158:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	2b01      	cmp	r3, #1
 800515e:	d10c      	bne.n	800517a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d104      	bne.n	8005170 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005166:	2100      	movs	r1, #0
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f965 	bl	8005438 <USB_SetDevSpeed>
 800516e:	e008      	b.n	8005182 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005170:	2101      	movs	r1, #1
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f960 	bl	8005438 <USB_SetDevSpeed>
 8005178:	e003      	b.n	8005182 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800517a:	2103      	movs	r1, #3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f95b 	bl	8005438 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005182:	2110      	movs	r1, #16
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f8f3 	bl	8005370 <USB_FlushTxFifo>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f91f 	bl	80053d8 <USB_FlushRxFifo>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051aa:	461a      	mov	r2, r3
 80051ac:	2300      	movs	r3, #0
 80051ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	461a      	mov	r2, r3
 80051b8:	2300      	movs	r3, #0
 80051ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	461a      	mov	r2, r3
 80051c4:	2300      	movs	r3, #0
 80051c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	e043      	b.n	8005256 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e4:	d118      	bne.n	8005218 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f8:	461a      	mov	r2, r3
 80051fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	e013      	b.n	800522a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	461a      	mov	r2, r3
 8005210:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	e008      	b.n	800522a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005224:	461a      	mov	r2, r3
 8005226:	2300      	movs	r3, #0
 8005228:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005236:	461a      	mov	r2, r3
 8005238:	2300      	movs	r3, #0
 800523a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	461a      	mov	r2, r3
 800524a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800524e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	3301      	adds	r3, #1
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	429a      	cmp	r2, r3
 800525c:	d3b7      	bcc.n	80051ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	e043      	b.n	80052ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800527a:	d118      	bne.n	80052ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528e:	461a      	mov	r2, r3
 8005290:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	e013      	b.n	80052c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	461a      	mov	r2, r3
 80052a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	e008      	b.n	80052c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	461a      	mov	r2, r3
 80052bc:	2300      	movs	r3, #0
 80052be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	461a      	mov	r2, r3
 80052ce:	2300      	movs	r3, #0
 80052d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	461a      	mov	r2, r3
 80052e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3301      	adds	r3, #1
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d3b7      	bcc.n	8005264 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005306:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005314:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	2b00      	cmp	r3, #0
 800531a:	d105      	bne.n	8005328 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f043 0210 	orr.w	r2, r3, #16
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	4b0f      	ldr	r3, [pc, #60]	; (800536c <USB_DevInit+0x2c4>)
 800532e:	4313      	orrs	r3, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f043 0208 	orr.w	r2, r3, #8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d107      	bne.n	800535c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005354:	f043 0304 	orr.w	r3, r3, #4
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005368:	b004      	add	sp, #16
 800536a:	4770      	bx	lr
 800536c:	803c3800 	.word	0x803c3800

08005370 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3301      	adds	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <USB_FlushTxFifo+0x64>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e01b      	b.n	80053c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	daf2      	bge.n	800537e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	019b      	lsls	r3, r3, #6
 80053a0:	f043 0220 	orr.w	r2, r3, #32
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <USB_FlushTxFifo+0x64>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e006      	b.n	80053c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d0f0      	beq.n	80053a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	00030d40 	.word	0x00030d40

080053d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3301      	adds	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4a11      	ldr	r2, [pc, #68]	; (8005434 <USB_FlushRxFifo+0x5c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e018      	b.n	8005428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	daf2      	bge.n	80053e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2210      	movs	r2, #16
 8005406:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3301      	adds	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4a08      	ldr	r2, [pc, #32]	; (8005434 <USB_FlushRxFifo+0x5c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d901      	bls.n	800541a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e006      	b.n	8005428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0310 	and.w	r3, r3, #16
 8005422:	2b10      	cmp	r3, #16
 8005424:	d0f0      	beq.n	8005408 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	00030d40 	.word	0x00030d40

08005438 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800546a:	b480      	push	{r7}
 800546c:	b087      	sub	sp, #28
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 0306 	and.w	r3, r3, #6
 8005482:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d102      	bne.n	8005490 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800548a:	2300      	movs	r3, #0
 800548c:	75fb      	strb	r3, [r7, #23]
 800548e:	e00a      	b.n	80054a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d002      	beq.n	800549c <USB_GetDevSpeed+0x32>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b06      	cmp	r3, #6
 800549a:	d102      	bne.n	80054a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800549c:	2302      	movs	r3, #2
 800549e:	75fb      	strb	r3, [r7, #23]
 80054a0:	e001      	b.n	80054a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054a2:	230f      	movs	r3, #15
 80054a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d13a      	bne.n	8005546 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	2101      	movs	r1, #1
 80054e2:	fa01 f303 	lsl.w	r3, r1, r3
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	68f9      	ldr	r1, [r7, #12]
 80054ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ee:	4313      	orrs	r3, r2
 80054f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d155      	bne.n	80055b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	791b      	ldrb	r3, [r3, #4]
 8005522:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005524:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	059b      	lsls	r3, r3, #22
 800552a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800552c:	4313      	orrs	r3, r2
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e036      	b.n	80055b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	69da      	ldr	r2, [r3, #28]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	2101      	movs	r1, #1
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005564:	4313      	orrs	r3, r2
 8005566:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d11a      	bne.n	80055b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	791b      	ldrb	r3, [r3, #4]
 8005598:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800559a:	430b      	orrs	r3, r1
 800559c:	4313      	orrs	r3, r2
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d161      	bne.n	80056a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f6:	d11f      	bne.n	8005638 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005612:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005616:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005636:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	2101      	movs	r1, #1
 800564a:	fa01 f303 	lsl.w	r3, r1, r3
 800564e:	b29b      	uxth	r3, r3
 8005650:	43db      	mvns	r3, r3
 8005652:	68f9      	ldr	r1, [r7, #12]
 8005654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005658:	4013      	ands	r3, r2
 800565a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	2101      	movs	r1, #1
 800566e:	fa01 f303 	lsl.w	r3, r1, r3
 8005672:	b29b      	uxth	r3, r3
 8005674:	43db      	mvns	r3, r3
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800567c:	4013      	ands	r3, r2
 800567e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	0159      	lsls	r1, r3, #5
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	440b      	add	r3, r1
 8005696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569a:	4619      	mov	r1, r3
 800569c:	4b35      	ldr	r3, [pc, #212]	; (8005774 <USB_DeactivateEndpoint+0x1b0>)
 800569e:	4013      	ands	r3, r2
 80056a0:	600b      	str	r3, [r1, #0]
 80056a2:	e060      	b.n	8005766 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ba:	d11f      	bne.n	80056fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	0151      	lsls	r1, r2, #5
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	440a      	add	r2, r1
 80056d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	2101      	movs	r1, #1
 800570e:	fa01 f303 	lsl.w	r3, r1, r3
 8005712:	041b      	lsls	r3, r3, #16
 8005714:	43db      	mvns	r3, r3
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800571c:	4013      	ands	r3, r2
 800571e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	2101      	movs	r1, #1
 8005732:	fa01 f303 	lsl.w	r3, r1, r3
 8005736:	041b      	lsls	r3, r3, #16
 8005738:	43db      	mvns	r3, r3
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005740:	4013      	ands	r3, r2
 8005742:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	0159      	lsls	r1, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	440b      	add	r3, r1
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	4619      	mov	r1, r3
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <USB_DeactivateEndpoint+0x1b4>)
 8005762:	4013      	ands	r3, r2
 8005764:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	ec337800 	.word	0xec337800
 8005778:	eff37800 	.word	0xeff37800

0800577c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	; 0x28
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b01      	cmp	r3, #1
 800579a:	f040 815c 	bne.w	8005a56 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d132      	bne.n	800580c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005804:	0cdb      	lsrs	r3, r3, #19
 8005806:	04db      	lsls	r3, r3, #19
 8005808:	6113      	str	r3, [r2, #16]
 800580a:	e074      	b.n	80058f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	0cdb      	lsrs	r3, r3, #19
 8005828:	04db      	lsls	r3, r3, #19
 800582a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	440a      	add	r2, r1
 8005842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005846:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800584a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800584e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6999      	ldr	r1, [r3, #24]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	440b      	add	r3, r1
 8005868:	1e59      	subs	r1, r3, #1
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005872:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005874:	4b9d      	ldr	r3, [pc, #628]	; (8005aec <USB_EPStartXfer+0x370>)
 8005876:	400b      	ands	r3, r1
 8005878:	69b9      	ldr	r1, [r7, #24]
 800587a:	0148      	lsls	r0, r1, #5
 800587c:	69f9      	ldr	r1, [r7, #28]
 800587e:	4401      	add	r1, r0
 8005880:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005884:	4313      	orrs	r3, r2
 8005886:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800589e:	69b9      	ldr	r1, [r7, #24]
 80058a0:	0148      	lsls	r0, r1, #5
 80058a2:	69f9      	ldr	r1, [r7, #28]
 80058a4:	4401      	add	r1, r0
 80058a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058aa:	4313      	orrs	r3, r2
 80058ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	791b      	ldrb	r3, [r3, #4]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d11f      	bne.n	80058f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	0151      	lsls	r1, r2, #5
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	440a      	add	r2, r1
 80058cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80058d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d14b      	bne.n	8005994 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005910:	461a      	mov	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	791b      	ldrb	r3, [r3, #4]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d128      	bne.n	8005972 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d110      	bne.n	8005952 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	440a      	add	r2, r1
 8005946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	e00f      	b.n	8005972 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005970:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e133      	b.n	8005bfc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	791b      	ldrb	r3, [r3, #4]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d015      	beq.n	80059e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 811b 	beq.w	8005bfc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	2101      	movs	r1, #1
 80059d8:	fa01 f303 	lsl.w	r3, r1, r3
 80059dc:	69f9      	ldr	r1, [r7, #28]
 80059de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e2:	4313      	orrs	r3, r2
 80059e4:	634b      	str	r3, [r1, #52]	; 0x34
 80059e6:	e109      	b.n	8005bfc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d110      	bne.n	8005a1a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	e00f      	b.n	8005a3a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6919      	ldr	r1, [r3, #16]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	781a      	ldrb	r2, [r3, #0]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	b298      	uxth	r0, r3
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fade 	bl	8006010 <USB_WritePacket>
 8005a54:	e0d2      	b.n	8005bfc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a70:	0cdb      	lsrs	r3, r3, #19
 8005a72:	04db      	lsls	r3, r3, #19
 8005a74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d126      	bne.n	8005af0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab8:	69b9      	ldr	r1, [r7, #24]
 8005aba:	0148      	lsls	r0, r1, #5
 8005abc:	69f9      	ldr	r1, [r7, #28]
 8005abe:	4401      	add	r1, r0
 8005ac0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ae6:	6113      	str	r3, [r2, #16]
 8005ae8:	e03a      	b.n	8005b60 <USB_EPStartXfer+0x3e4>
 8005aea:	bf00      	nop
 8005aec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	699a      	ldr	r2, [r3, #24]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	1e5a      	subs	r2, r3, #1
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b04:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	8afa      	ldrh	r2, [r7, #22]
 8005b0c:	fb03 f202 	mul.w	r2, r3, r2
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	8afb      	ldrh	r3, [r7, #22]
 8005b24:	04d9      	lsls	r1, r3, #19
 8005b26:	4b38      	ldr	r3, [pc, #224]	; (8005c08 <USB_EPStartXfer+0x48c>)
 8005b28:	400b      	ands	r3, r1
 8005b2a:	69b9      	ldr	r1, [r7, #24]
 8005b2c:	0148      	lsls	r0, r1, #5
 8005b2e:	69f9      	ldr	r1, [r7, #28]
 8005b30:	4401      	add	r1, r0
 8005b32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b36:	4313      	orrs	r3, r2
 8005b38:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b50:	69b9      	ldr	r1, [r7, #24]
 8005b52:	0148      	lsls	r0, r1, #5
 8005b54:	69f9      	ldr	r1, [r7, #28]
 8005b56:	4401      	add	r1, r0
 8005b58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d10d      	bne.n	8005b82 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6919      	ldr	r1, [r3, #16]
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	460a      	mov	r2, r1
 8005b80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	791b      	ldrb	r3, [r3, #4]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d128      	bne.n	8005bdc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d110      	bne.n	8005bbc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	e00f      	b.n	8005bdc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bda:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3720      	adds	r7, #32
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	1ff80000 	.word	0x1ff80000

08005c0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	4613      	mov	r3, r2
 8005c18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	f040 80ce 	bne.w	8005dca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d132      	bne.n	8005c9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c94:	0cdb      	lsrs	r3, r3, #19
 8005c96:	04db      	lsls	r3, r3, #19
 8005c98:	6113      	str	r3, [r2, #16]
 8005c9a:	e04e      	b.n	8005d3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb6:	0cdb      	lsrs	r3, r3, #19
 8005cb8:	04db      	lsls	r3, r3, #19
 8005cba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cde:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	699a      	ldr	r2, [r3, #24]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d903      	bls.n	8005cf4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d2a:	6939      	ldr	r1, [r7, #16]
 8005d2c:	0148      	lsls	r0, r1, #5
 8005d2e:	6979      	ldr	r1, [r7, #20]
 8005d30:	4401      	add	r1, r0
 8005d32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d36:	4313      	orrs	r3, r2
 8005d38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d11e      	bne.n	8005d7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d009      	beq.n	8005d5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d54:	461a      	mov	r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	e097      	b.n	8005eae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8083 	beq.w	8005eae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	2101      	movs	r1, #1
 8005dba:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbe:	6979      	ldr	r1, [r7, #20]
 8005dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	634b      	str	r3, [r1, #52]	; 0x34
 8005dc8:	e071      	b.n	8005eae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de4:	0cdb      	lsrs	r3, r3, #19
 8005de6:	04db      	lsls	r3, r3, #19
 8005de8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e5c:	6939      	ldr	r1, [r7, #16]
 8005e5e:	0148      	lsls	r0, r1, #5
 8005e60:	6979      	ldr	r1, [r7, #20]
 8005e62:	4401      	add	r1, r0
 8005e64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d10d      	bne.n	8005e8e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6919      	ldr	r1, [r3, #16]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	460a      	mov	r2, r1
 8005e8c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d14a      	bne.n	8005f70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef2:	f040 8086 	bne.w	8006002 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	7812      	ldrb	r2, [r2, #0]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	7812      	ldrb	r2, [r2, #0]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3301      	adds	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d902      	bls.n	8005f54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	75fb      	strb	r3, [r7, #23]
          break;
 8005f52:	e056      	b.n	8006002 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f6c:	d0e7      	beq.n	8005f3e <USB_EPStopXfer+0x82>
 8005f6e:	e048      	b.n	8006002 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f88:	d13b      	bne.n	8006002 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	7812      	ldrb	r2, [r2, #0]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	7812      	ldrb	r2, [r2, #0]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d902      	bls.n	8005fe8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fe6:	e00c      	b.n	8006002 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006000:	d0e7      	beq.n	8005fd2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006002:	7dfb      	ldrb	r3, [r7, #23]
}
 8006004:	4618      	mov	r0, r3
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006010:	b480      	push	{r7}
 8006012:	b089      	sub	sp, #36	; 0x24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	4611      	mov	r1, r2
 800601c:	461a      	mov	r2, r3
 800601e:	460b      	mov	r3, r1
 8006020:	71fb      	strb	r3, [r7, #7]
 8006022:	4613      	mov	r3, r2
 8006024:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800602e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006032:	2b00      	cmp	r3, #0
 8006034:	d123      	bne.n	800607e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006036:	88bb      	ldrh	r3, [r7, #4]
 8006038:	3303      	adds	r3, #3
 800603a:	089b      	lsrs	r3, r3, #2
 800603c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800603e:	2300      	movs	r3, #0
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	e018      	b.n	8006076 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	031a      	lsls	r2, r3, #12
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	4413      	add	r3, r2
 800604c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006050:	461a      	mov	r2, r3
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	3301      	adds	r3, #1
 800605c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	3301      	adds	r3, #1
 8006062:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	3301      	adds	r3, #1
 8006068:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3301      	adds	r3, #1
 800606e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	3301      	adds	r3, #1
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	429a      	cmp	r2, r3
 800607c:	d3e2      	bcc.n	8006044 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3724      	adds	r7, #36	; 0x24
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800608c:	b480      	push	{r7}
 800608e:	b08b      	sub	sp, #44	; 0x2c
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	089b      	lsrs	r3, r3, #2
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060b2:	2300      	movs	r3, #0
 80060b4:	623b      	str	r3, [r7, #32]
 80060b6:	e014      	b.n	80060e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	3301      	adds	r3, #1
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	3301      	adds	r3, #1
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	3301      	adds	r3, #1
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	3301      	adds	r3, #1
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	3301      	adds	r3, #1
 80060e0:	623b      	str	r3, [r7, #32]
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d3e6      	bcc.n	80060b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060ea:	8bfb      	ldrh	r3, [r7, #30]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01e      	beq.n	800612e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060fa:	461a      	mov	r2, r3
 80060fc:	f107 0310 	add.w	r3, r7, #16
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
 8006110:	b2da      	uxtb	r2, r3
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	701a      	strb	r2, [r3, #0]
      i++;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	3301      	adds	r3, #1
 800611a:	623b      	str	r3, [r7, #32]
      pDest++;
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	3301      	adds	r3, #1
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006122:	8bfb      	ldrh	r3, [r7, #30]
 8006124:	3b01      	subs	r3, #1
 8006126:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006128:	8bfb      	ldrh	r3, [r7, #30]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1ea      	bne.n	8006104 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006130:	4618      	mov	r0, r3
 8006132:	372c      	adds	r7, #44	; 0x2c
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d12c      	bne.n	80061b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	db12      	blt.n	8006190 <USB_EPSetStall+0x54>
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00f      	beq.n	8006190 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	440a      	add	r2, r1
 8006186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800618e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	e02b      	b.n	800620a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	db12      	blt.n	80061ea <USB_EPSetStall+0xae>
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00f      	beq.n	80061ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006204:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006208:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d128      	bne.n	8006286 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	440a      	add	r2, r1
 800624a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006252:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	791b      	ldrb	r3, [r3, #4]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d003      	beq.n	8006264 <USB_EPClearStall+0x4c>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	791b      	ldrb	r3, [r3, #4]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d138      	bne.n	80062d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	440a      	add	r2, r1
 800627a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e027      	b.n	80062d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	791b      	ldrb	r3, [r3, #4]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d003      	beq.n	80062b6 <USB_EPClearStall+0x9e>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	791b      	ldrb	r3, [r3, #4]
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d10f      	bne.n	80062d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006302:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006306:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006318:	68f9      	ldr	r1, [r7, #12]
 800631a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800631e:	4313      	orrs	r3, r2
 8006320:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800634a:	f023 0303 	bic.w	r3, r3, #3
 800634e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800635e:	f023 0302 	bic.w	r3, r3, #2
 8006362:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800638c:	f023 0303 	bic.w	r3, r3, #3
 8006390:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063a0:	f043 0302 	orr.w	r3, r3, #2
 80063a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4013      	ands	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063cc:	68fb      	ldr	r3, [r7, #12]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	4013      	ands	r3, r2
 80063fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	0c1b      	lsrs	r3, r3, #16
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	4013      	ands	r3, r2
 8006430:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	b29b      	uxth	r3, r3
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	460b      	mov	r3, r1
 800644c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	4013      	ands	r3, r2
 800646e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006470:	68bb      	ldr	r3, [r7, #8]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800647e:	b480      	push	{r7}
 8006480:	b087      	sub	sp, #28
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	fa22 f303 	lsr.w	r3, r2, r3
 80064ae:	01db      	lsls	r3, r3, #7
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4013      	ands	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064cc:	68bb      	ldr	r3, [r7, #8]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f003 0301 	and.w	r3, r3, #1
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006510:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006514:	f023 0307 	bic.w	r3, r3, #7
 8006518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	460b      	mov	r3, r1
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	333c      	adds	r3, #60	; 0x3c
 8006552:	3304      	adds	r3, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <USB_EP0_OutStart+0xb8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d90a      	bls.n	8006576 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800656c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006570:	d101      	bne.n	8006576 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	e037      	b.n	80065e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	461a      	mov	r2, r3
 800657e:	2300      	movs	r3, #0
 8006580:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006594:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a4:	f043 0318 	orr.w	r3, r3, #24
 80065a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065be:	7afb      	ldrb	r3, [r7, #11]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10f      	bne.n	80065e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ca:	461a      	mov	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	4f54300a 	.word	0x4f54300a

080065f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4a13      	ldr	r2, [pc, #76]	; (800665c <USB_CoreReset+0x64>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d901      	bls.n	8006616 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e01b      	b.n	800664e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	daf2      	bge.n	8006604 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f043 0201 	orr.w	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4a09      	ldr	r2, [pc, #36]	; (800665c <USB_CoreReset+0x64>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d901      	bls.n	8006640 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e006      	b.n	800664e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b01      	cmp	r3, #1
 800664a:	d0f0      	beq.n	800662e <USB_CoreReset+0x36>

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	00030d40 	.word	0x00030d40

08006660 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800666c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006670:	f002 fcb4 	bl	8008fdc <USBD_static_malloc>
 8006674:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d109      	bne.n	8006690 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	32b0      	adds	r2, #176	; 0xb0
 8006686:	2100      	movs	r1, #0
 8006688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800668c:	2302      	movs	r3, #2
 800668e:	e0d4      	b.n	800683a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006690:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006694:	2100      	movs	r1, #0
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f002 fe74 	bl	8009384 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	32b0      	adds	r2, #176	; 0xb0
 80066a6:	68f9      	ldr	r1, [r7, #12]
 80066a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	32b0      	adds	r2, #176	; 0xb0
 80066b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	7c1b      	ldrb	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d138      	bne.n	800673a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066c8:	4b5e      	ldr	r3, [pc, #376]	; (8006844 <USBD_CDC_Init+0x1e4>)
 80066ca:	7819      	ldrb	r1, [r3, #0]
 80066cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066d0:	2202      	movs	r2, #2
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f002 fb5f 	bl	8008d96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066d8:	4b5a      	ldr	r3, [pc, #360]	; (8006844 <USBD_CDC_Init+0x1e4>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f003 020f 	and.w	r2, r3, #15
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	440b      	add	r3, r1
 80066ec:	3324      	adds	r3, #36	; 0x24
 80066ee:	2201      	movs	r2, #1
 80066f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066f2:	4b55      	ldr	r3, [pc, #340]	; (8006848 <USBD_CDC_Init+0x1e8>)
 80066f4:	7819      	ldrb	r1, [r3, #0]
 80066f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066fa:	2202      	movs	r2, #2
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f002 fb4a 	bl	8008d96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006702:	4b51      	ldr	r3, [pc, #324]	; (8006848 <USBD_CDC_Init+0x1e8>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	f003 020f 	and.w	r2, r3, #15
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800671a:	2201      	movs	r2, #1
 800671c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800671e:	4b4b      	ldr	r3, [pc, #300]	; (800684c <USBD_CDC_Init+0x1ec>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	f003 020f 	and.w	r2, r3, #15
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	3326      	adds	r3, #38	; 0x26
 8006734:	2210      	movs	r2, #16
 8006736:	801a      	strh	r2, [r3, #0]
 8006738:	e035      	b.n	80067a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800673a:	4b42      	ldr	r3, [pc, #264]	; (8006844 <USBD_CDC_Init+0x1e4>)
 800673c:	7819      	ldrb	r1, [r3, #0]
 800673e:	2340      	movs	r3, #64	; 0x40
 8006740:	2202      	movs	r2, #2
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f002 fb27 	bl	8008d96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006748:	4b3e      	ldr	r3, [pc, #248]	; (8006844 <USBD_CDC_Init+0x1e4>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3324      	adds	r3, #36	; 0x24
 800675e:	2201      	movs	r2, #1
 8006760:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006762:	4b39      	ldr	r3, [pc, #228]	; (8006848 <USBD_CDC_Init+0x1e8>)
 8006764:	7819      	ldrb	r1, [r3, #0]
 8006766:	2340      	movs	r3, #64	; 0x40
 8006768:	2202      	movs	r2, #2
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f002 fb13 	bl	8008d96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006770:	4b35      	ldr	r3, [pc, #212]	; (8006848 <USBD_CDC_Init+0x1e8>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f003 020f 	and.w	r2, r3, #15
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006788:	2201      	movs	r2, #1
 800678a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800678c:	4b2f      	ldr	r3, [pc, #188]	; (800684c <USBD_CDC_Init+0x1ec>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	f003 020f 	and.w	r2, r3, #15
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	3326      	adds	r3, #38	; 0x26
 80067a2:	2210      	movs	r2, #16
 80067a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067a6:	4b29      	ldr	r3, [pc, #164]	; (800684c <USBD_CDC_Init+0x1ec>)
 80067a8:	7819      	ldrb	r1, [r3, #0]
 80067aa:	2308      	movs	r3, #8
 80067ac:	2203      	movs	r2, #3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f002 faf1 	bl	8008d96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067b4:	4b25      	ldr	r3, [pc, #148]	; (800684c <USBD_CDC_Init+0x1ec>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	f003 020f 	and.w	r2, r3, #15
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	3324      	adds	r3, #36	; 0x24
 80067ca:	2201      	movs	r2, #1
 80067cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	33b0      	adds	r3, #176	; 0xb0
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006804:	2302      	movs	r3, #2
 8006806:	e018      	b.n	800683a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	7c1b      	ldrb	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006810:	4b0d      	ldr	r3, [pc, #52]	; (8006848 <USBD_CDC_Init+0x1e8>)
 8006812:	7819      	ldrb	r1, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800681a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f002 fba8 	bl	8008f74 <USBD_LL_PrepareReceive>
 8006824:	e008      	b.n	8006838 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006826:	4b08      	ldr	r3, [pc, #32]	; (8006848 <USBD_CDC_Init+0x1e8>)
 8006828:	7819      	ldrb	r1, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006830:	2340      	movs	r3, #64	; 0x40
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f002 fb9e 	bl	8008f74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20000093 	.word	0x20000093
 8006848:	20000094 	.word	0x20000094
 800684c:	20000095 	.word	0x20000095

08006850 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800685c:	4b3a      	ldr	r3, [pc, #232]	; (8006948 <USBD_CDC_DeInit+0xf8>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f002 fabd 	bl	8008de2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006868:	4b37      	ldr	r3, [pc, #220]	; (8006948 <USBD_CDC_DeInit+0xf8>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 020f 	and.w	r2, r3, #15
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	3324      	adds	r3, #36	; 0x24
 800687e:	2200      	movs	r2, #0
 8006880:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006882:	4b32      	ldr	r3, [pc, #200]	; (800694c <USBD_CDC_DeInit+0xfc>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f002 faaa 	bl	8008de2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800688e:	4b2f      	ldr	r3, [pc, #188]	; (800694c <USBD_CDC_DeInit+0xfc>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	f003 020f 	and.w	r2, r3, #15
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068a6:	2200      	movs	r2, #0
 80068a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80068aa:	4b29      	ldr	r3, [pc, #164]	; (8006950 <USBD_CDC_DeInit+0x100>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f002 fa96 	bl	8008de2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80068b6:	4b26      	ldr	r3, [pc, #152]	; (8006950 <USBD_CDC_DeInit+0x100>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f003 020f 	and.w	r2, r3, #15
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	3324      	adds	r3, #36	; 0x24
 80068cc:	2200      	movs	r2, #0
 80068ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80068d0:	4b1f      	ldr	r3, [pc, #124]	; (8006950 <USBD_CDC_DeInit+0x100>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	f003 020f 	and.w	r2, r3, #15
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	3326      	adds	r3, #38	; 0x26
 80068e6:	2200      	movs	r2, #0
 80068e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	32b0      	adds	r2, #176	; 0xb0
 80068f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01f      	beq.n	800693c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	33b0      	adds	r3, #176	; 0xb0
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	32b0      	adds	r2, #176	; 0xb0
 800691a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691e:	4618      	mov	r0, r3
 8006920:	f002 fb6a 	bl	8008ff8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	32b0      	adds	r2, #176	; 0xb0
 800692e:	2100      	movs	r1, #0
 8006930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000093 	.word	0x20000093
 800694c:	20000094 	.word	0x20000094
 8006950:	20000095 	.word	0x20000095

08006954 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	32b0      	adds	r2, #176	; 0xb0
 8006968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006980:	2303      	movs	r3, #3
 8006982:	e0bf      	b.n	8006b04 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800698c:	2b00      	cmp	r3, #0
 800698e:	d050      	beq.n	8006a32 <USBD_CDC_Setup+0xde>
 8006990:	2b20      	cmp	r3, #32
 8006992:	f040 80af 	bne.w	8006af4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	88db      	ldrh	r3, [r3, #6]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d03a      	beq.n	8006a14 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	b25b      	sxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	da1b      	bge.n	80069e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	33b0      	adds	r3, #176	; 0xb0
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80069be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	88d2      	ldrh	r2, [r2, #6]
 80069c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	88db      	ldrh	r3, [r3, #6]
 80069ca:	2b07      	cmp	r3, #7
 80069cc:	bf28      	it	cs
 80069ce:	2307      	movcs	r3, #7
 80069d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	89fa      	ldrh	r2, [r7, #14]
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 fd89 	bl	80084f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80069de:	e090      	b.n	8006b02 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	785a      	ldrb	r2, [r3, #1]
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	88db      	ldrh	r3, [r3, #6]
 80069ee:	2b3f      	cmp	r3, #63	; 0x3f
 80069f0:	d803      	bhi.n	80069fa <USBD_CDC_Setup+0xa6>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	88db      	ldrh	r3, [r3, #6]
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	e000      	b.n	80069fc <USBD_CDC_Setup+0xa8>
 80069fa:	2240      	movs	r2, #64	; 0x40
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006a02:	6939      	ldr	r1, [r7, #16]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 fd9b 	bl	8008548 <USBD_CtlPrepareRx>
      break;
 8006a12:	e076      	b.n	8006b02 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	33b0      	adds	r3, #176	; 0xb0
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	7850      	ldrb	r0, [r2, #1]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	4798      	blx	r3
      break;
 8006a30:	e067      	b.n	8006b02 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b0b      	cmp	r3, #11
 8006a38:	d851      	bhi.n	8006ade <USBD_CDC_Setup+0x18a>
 8006a3a:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <USBD_CDC_Setup+0xec>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a71 	.word	0x08006a71
 8006a44:	08006aed 	.word	0x08006aed
 8006a48:	08006adf 	.word	0x08006adf
 8006a4c:	08006adf 	.word	0x08006adf
 8006a50:	08006adf 	.word	0x08006adf
 8006a54:	08006adf 	.word	0x08006adf
 8006a58:	08006adf 	.word	0x08006adf
 8006a5c:	08006adf 	.word	0x08006adf
 8006a60:	08006adf 	.word	0x08006adf
 8006a64:	08006adf 	.word	0x08006adf
 8006a68:	08006a9b 	.word	0x08006a9b
 8006a6c:	08006ac5 	.word	0x08006ac5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d107      	bne.n	8006a8c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a7c:	f107 030a 	add.w	r3, r7, #10
 8006a80:	2202      	movs	r2, #2
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fd33 	bl	80084f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a8a:	e032      	b.n	8006af2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fcbd 	bl	800840e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a94:	2303      	movs	r3, #3
 8006a96:	75fb      	strb	r3, [r7, #23]
          break;
 8006a98:	e02b      	b.n	8006af2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d107      	bne.n	8006ab6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006aa6:	f107 030d 	add.w	r3, r7, #13
 8006aaa:	2201      	movs	r2, #1
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 fd1e 	bl	80084f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ab4:	e01d      	b.n	8006af2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fca8 	bl	800840e <USBD_CtlError>
            ret = USBD_FAIL;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ac2:	e016      	b.n	8006af2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d00f      	beq.n	8006af0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fc9b 	bl	800840e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006adc:	e008      	b.n	8006af0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 fc94 	bl	800840e <USBD_CtlError>
          ret = USBD_FAIL;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8006aea:	e002      	b.n	8006af2 <USBD_CDC_Setup+0x19e>
          break;
 8006aec:	bf00      	nop
 8006aee:	e008      	b.n	8006b02 <USBD_CDC_Setup+0x1ae>
          break;
 8006af0:	bf00      	nop
      }
      break;
 8006af2:	e006      	b.n	8006b02 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 fc89 	bl	800840e <USBD_CtlError>
      ret = USBD_FAIL;
 8006afc:	2303      	movs	r3, #3
 8006afe:	75fb      	strb	r3, [r7, #23]
      break;
 8006b00:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	32b0      	adds	r2, #176	; 0xb0
 8006b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e065      	b.n	8006c02 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	32b0      	adds	r2, #176	; 0xb0
 8006b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	f003 020f 	and.w	r2, r3, #15
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	3318      	adds	r3, #24
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d02f      	beq.n	8006bc0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	f003 020f 	and.w	r2, r3, #15
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	440b      	add	r3, r1
 8006b72:	3318      	adds	r3, #24
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	f003 010f 	and.w	r1, r3, #15
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	440b      	add	r3, r1
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4403      	add	r3, r0
 8006b88:	3348      	adds	r3, #72	; 0x48
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d112      	bne.n	8006bc0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	f003 020f 	and.w	r2, r3, #15
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	440b      	add	r3, r1
 8006bac:	3318      	adds	r3, #24
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bb2:	78f9      	ldrb	r1, [r7, #3]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f002 f9ba 	bl	8008f32 <USBD_LL_Transmit>
 8006bbe:	e01f      	b.n	8006c00 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	33b0      	adds	r3, #176	; 0xb0
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d010      	beq.n	8006c00 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	33b0      	adds	r3, #176	; 0xb0
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006bfc:	78fa      	ldrb	r2, [r7, #3]
 8006bfe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	32b0      	adds	r2, #176	; 0xb0
 8006c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	32b0      	adds	r2, #176	; 0xb0
 8006c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e01a      	b.n	8006c72 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f002 f9b8 	bl	8008fb6 <USBD_LL_GetRxDataSize>
 8006c46:	4602      	mov	r2, r0
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	33b0      	adds	r3, #176	; 0xb0
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	32b0      	adds	r2, #176	; 0xb0
 8006c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e025      	b.n	8006ce8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	33b0      	adds	r3, #176	; 0xb0
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01a      	beq.n	8006ce6 <USBD_CDC_EP0_RxReady+0x6c>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006cb6:	2bff      	cmp	r3, #255	; 0xff
 8006cb8:	d015      	beq.n	8006ce6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	33b0      	adds	r3, #176	; 0xb0
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006cd2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cda:	b292      	uxth	r2, r2
 8006cdc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	22ff      	movs	r2, #255	; 0xff
 8006ce2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cf8:	2182      	movs	r1, #130	; 0x82
 8006cfa:	4818      	ldr	r0, [pc, #96]	; (8006d5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cfc:	f000 fd4f 	bl	800779e <USBD_GetEpDesc>
 8006d00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d02:	2101      	movs	r1, #1
 8006d04:	4815      	ldr	r0, [pc, #84]	; (8006d5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d06:	f000 fd4a 	bl	800779e <USBD_GetEpDesc>
 8006d0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d0c:	2181      	movs	r1, #129	; 0x81
 8006d0e:	4813      	ldr	r0, [pc, #76]	; (8006d5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d10:	f000 fd45 	bl	800779e <USBD_GetEpDesc>
 8006d14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2210      	movs	r2, #16
 8006d20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d006      	beq.n	8006d36 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d30:	711a      	strb	r2, [r3, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d006      	beq.n	8006d4a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d44:	711a      	strb	r2, [r3, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2243      	movs	r2, #67	; 0x43
 8006d4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d50:	4b02      	ldr	r3, [pc, #8]	; (8006d5c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000050 	.word	0x20000050

08006d60 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d68:	2182      	movs	r1, #130	; 0x82
 8006d6a:	4818      	ldr	r0, [pc, #96]	; (8006dcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d6c:	f000 fd17 	bl	800779e <USBD_GetEpDesc>
 8006d70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d72:	2101      	movs	r1, #1
 8006d74:	4815      	ldr	r0, [pc, #84]	; (8006dcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d76:	f000 fd12 	bl	800779e <USBD_GetEpDesc>
 8006d7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d7c:	2181      	movs	r1, #129	; 0x81
 8006d7e:	4813      	ldr	r0, [pc, #76]	; (8006dcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d80:	f000 fd0d 	bl	800779e <USBD_GetEpDesc>
 8006d84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2210      	movs	r2, #16
 8006d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	711a      	strb	r2, [r3, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f042 0202 	orr.w	r2, r2, #2
 8006da4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d006      	beq.n	8006dba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	711a      	strb	r2, [r3, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f042 0202 	orr.w	r2, r2, #2
 8006db8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2243      	movs	r2, #67	; 0x43
 8006dbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dc0:	4b02      	ldr	r3, [pc, #8]	; (8006dcc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000050 	.word	0x20000050

08006dd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006dd8:	2182      	movs	r1, #130	; 0x82
 8006dda:	4818      	ldr	r0, [pc, #96]	; (8006e3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ddc:	f000 fcdf 	bl	800779e <USBD_GetEpDesc>
 8006de0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006de2:	2101      	movs	r1, #1
 8006de4:	4815      	ldr	r0, [pc, #84]	; (8006e3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006de6:	f000 fcda 	bl	800779e <USBD_GetEpDesc>
 8006dea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006dec:	2181      	movs	r1, #129	; 0x81
 8006dee:	4813      	ldr	r0, [pc, #76]	; (8006e3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006df0:	f000 fcd5 	bl	800779e <USBD_GetEpDesc>
 8006df4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2210      	movs	r2, #16
 8006e00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d006      	beq.n	8006e16 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e10:	711a      	strb	r2, [r3, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d006      	beq.n	8006e2a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e24:	711a      	strb	r2, [r3, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2243      	movs	r2, #67	; 0x43
 8006e2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e30:	4b02      	ldr	r3, [pc, #8]	; (8006e3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000050 	.word	0x20000050

08006e40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	220a      	movs	r2, #10
 8006e4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e4e:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	2000000c 	.word	0x2000000c

08006e60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e009      	b.n	8006e88 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	33b0      	adds	r3, #176	; 0xb0
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	32b0      	adds	r2, #176	; 0xb0
 8006eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e008      	b.n	8006ecc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	32b0      	adds	r2, #176	; 0xb0
 8006eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e004      	b.n	8006f06 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
	...

08006f14 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	32b0      	adds	r2, #176	; 0xb0
 8006f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	32b0      	adds	r2, #176	; 0xb0
 8006f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e025      	b.n	8006f92 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d11f      	bne.n	8006f90 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f58:	4b10      	ldr	r3, [pc, #64]	; (8006f9c <USBD_CDC_TransmitPacket+0x88>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	f003 020f 	and.w	r2, r3, #15
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4403      	add	r3, r0
 8006f72:	3318      	adds	r3, #24
 8006f74:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f76:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <USBD_CDC_TransmitPacket+0x88>)
 8006f78:	7819      	ldrb	r1, [r3, #0]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 ffd3 	bl	8008f32 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000093 	.word	0x20000093

08006fa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	32b0      	adds	r2, #176	; 0xb0
 8006fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	32b0      	adds	r2, #176	; 0xb0
 8006fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e018      	b.n	8007000 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	7c1b      	ldrb	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fd6:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <USBD_CDC_ReceivePacket+0x68>)
 8006fd8:	7819      	ldrb	r1, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 ffc5 	bl	8008f74 <USBD_LL_PrepareReceive>
 8006fea:	e008      	b.n	8006ffe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fec:	4b06      	ldr	r3, [pc, #24]	; (8007008 <USBD_CDC_ReceivePacket+0x68>)
 8006fee:	7819      	ldrb	r1, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ff6:	2340      	movs	r3, #64	; 0x40
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 ffbb 	bl	8008f74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	20000094 	.word	0x20000094

0800700c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007020:	2303      	movs	r3, #3
 8007022:	e01f      	b.n	8007064 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	79fa      	ldrb	r2, [r7, #7]
 8007056:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f001 fe35 	bl	8008cc8 <USBD_LL_Init>
 800705e:	4603      	mov	r3, r0
 8007060:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	e025      	b.n	80070d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	32ae      	adds	r2, #174	; 0xae
 8007096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00f      	beq.n	80070c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	32ae      	adds	r2, #174	; 0xae
 80070aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	f107 020e 	add.w	r2, r7, #14
 80070b4:	4610      	mov	r0, r2
 80070b6:	4798      	blx	r3
 80070b8:	4602      	mov	r2, r0
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fe3d 	bl	8008d60 <USBD_LL_Start>
 80070e6:	4603      	mov	r3, r0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	460b      	mov	r3, r1
 8007110:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	78fa      	ldrb	r2, [r7, #3]
 800712a:	4611      	mov	r1, r2
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	4798      	blx	r3
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	460b      	mov	r3, r1
 8007148:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	78fa      	ldrb	r2, [r7, #3]
 8007158:	4611      	mov	r1, r2
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007168:	7bfb      	ldrb	r3, [r7, #15]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	4618      	mov	r0, r3
 8007186:	f001 f908 	bl	800839a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007198:	461a      	mov	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071a6:	f003 031f 	and.w	r3, r3, #31
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d01a      	beq.n	80071e4 <USBD_LL_SetupStage+0x72>
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d822      	bhi.n	80071f8 <USBD_LL_SetupStage+0x86>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <USBD_LL_SetupStage+0x4a>
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d00a      	beq.n	80071d0 <USBD_LL_SetupStage+0x5e>
 80071ba:	e01d      	b.n	80071f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fb5f 	bl	8007888 <USBD_StdDevReq>
 80071ca:	4603      	mov	r3, r0
 80071cc:	73fb      	strb	r3, [r7, #15]
      break;
 80071ce:	e020      	b.n	8007212 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fbc7 	bl	800796c <USBD_StdItfReq>
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
      break;
 80071e2:	e016      	b.n	8007212 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fc29 	bl	8007a44 <USBD_StdEPReq>
 80071f2:	4603      	mov	r3, r0
 80071f4:	73fb      	strb	r3, [r7, #15]
      break;
 80071f6:	e00c      	b.n	8007212 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007202:	b2db      	uxtb	r3, r3
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 fe0a 	bl	8008e20 <USBD_LL_StallEP>
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]
      break;
 8007210:	bf00      	nop
  }

  return ret;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	460b      	mov	r3, r1
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800722e:	7afb      	ldrb	r3, [r7, #11]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d16e      	bne.n	8007312 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800723a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007242:	2b03      	cmp	r3, #3
 8007244:	f040 8098 	bne.w	8007378 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	429a      	cmp	r2, r3
 8007252:	d913      	bls.n	800727c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	1ad2      	subs	r2, r2, r3
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	4293      	cmp	r3, r2
 800726c:	bf28      	it	cs
 800726e:	4613      	movcs	r3, r2
 8007270:	461a      	mov	r2, r3
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f001 f984 	bl	8008582 <USBD_CtlContinueRx>
 800727a:	e07d      	b.n	8007378 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	2b02      	cmp	r3, #2
 8007288:	d014      	beq.n	80072b4 <USBD_LL_DataOutStage+0x98>
 800728a:	2b02      	cmp	r3, #2
 800728c:	d81d      	bhi.n	80072ca <USBD_LL_DataOutStage+0xae>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <USBD_LL_DataOutStage+0x7c>
 8007292:	2b01      	cmp	r3, #1
 8007294:	d003      	beq.n	800729e <USBD_LL_DataOutStage+0x82>
 8007296:	e018      	b.n	80072ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	75bb      	strb	r3, [r7, #22]
            break;
 800729c:	e018      	b.n	80072d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	4619      	mov	r1, r3
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fa5e 	bl	800776a <USBD_CoreFindIF>
 80072ae:	4603      	mov	r3, r0
 80072b0:	75bb      	strb	r3, [r7, #22]
            break;
 80072b2:	e00d      	b.n	80072d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	4619      	mov	r1, r3
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fa60 	bl	8007784 <USBD_CoreFindEP>
 80072c4:	4603      	mov	r3, r0
 80072c6:	75bb      	strb	r3, [r7, #22]
            break;
 80072c8:	e002      	b.n	80072d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	75bb      	strb	r3, [r7, #22]
            break;
 80072ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80072d0:	7dbb      	ldrb	r3, [r7, #22]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d119      	bne.n	800730a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d113      	bne.n	800730a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072e2:	7dba      	ldrb	r2, [r7, #22]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	32ae      	adds	r2, #174	; 0xae
 80072e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00b      	beq.n	800730a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072f2:	7dba      	ldrb	r2, [r7, #22]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072fa:	7dba      	ldrb	r2, [r7, #22]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	32ae      	adds	r2, #174	; 0xae
 8007300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f001 f94a 	bl	80085a4 <USBD_CtlSendStatus>
 8007310:	e032      	b.n	8007378 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007312:	7afb      	ldrb	r3, [r7, #11]
 8007314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007318:	b2db      	uxtb	r3, r3
 800731a:	4619      	mov	r1, r3
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 fa31 	bl	8007784 <USBD_CoreFindEP>
 8007322:	4603      	mov	r3, r0
 8007324:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007326:	7dbb      	ldrb	r3, [r7, #22]
 8007328:	2bff      	cmp	r3, #255	; 0xff
 800732a:	d025      	beq.n	8007378 <USBD_LL_DataOutStage+0x15c>
 800732c:	7dbb      	ldrb	r3, [r7, #22]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d122      	bne.n	8007378 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d117      	bne.n	800736e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800733e:	7dba      	ldrb	r2, [r7, #22]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	32ae      	adds	r2, #174	; 0xae
 8007344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00f      	beq.n	800736e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800734e:	7dba      	ldrb	r2, [r7, #22]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007356:	7dba      	ldrb	r2, [r7, #22]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	32ae      	adds	r2, #174	; 0xae
 800735c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	7afa      	ldrb	r2, [r7, #11]
 8007364:	4611      	mov	r1, r2
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	4798      	blx	r3
 800736a:	4603      	mov	r3, r0
 800736c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	e000      	b.n	800737a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b086      	sub	sp, #24
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	460b      	mov	r3, r1
 800738c:	607a      	str	r2, [r7, #4]
 800738e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d16f      	bne.n	8007476 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3314      	adds	r3, #20
 800739a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d15a      	bne.n	800745c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d914      	bls.n	80073dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	1ad2      	subs	r2, r2, r3
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f001 f8ac 	bl	8008526 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073ce:	2300      	movs	r3, #0
 80073d0:	2200      	movs	r2, #0
 80073d2:	2100      	movs	r1, #0
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f001 fdcd 	bl	8008f74 <USBD_LL_PrepareReceive>
 80073da:	e03f      	b.n	800745c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d11c      	bne.n	8007422 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d316      	bcc.n	8007422 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073fe:	429a      	cmp	r2, r3
 8007400:	d20f      	bcs.n	8007422 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007402:	2200      	movs	r2, #0
 8007404:	2100      	movs	r1, #0
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f001 f88d 	bl	8008526 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007414:	2300      	movs	r3, #0
 8007416:	2200      	movs	r2, #0
 8007418:	2100      	movs	r1, #0
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f001 fdaa 	bl	8008f74 <USBD_LL_PrepareReceive>
 8007420:	e01c      	b.n	800745c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b03      	cmp	r3, #3
 800742c:	d10f      	bne.n	800744e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800744e:	2180      	movs	r1, #128	; 0x80
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f001 fce5 	bl	8008e20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f001 f8b7 	bl	80085ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d03a      	beq.n	80074dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f7ff fe42 	bl	80070f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007474:	e032      	b.n	80074dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800747c:	b2db      	uxtb	r3, r3
 800747e:	4619      	mov	r1, r3
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 f97f 	bl	8007784 <USBD_CoreFindEP>
 8007486:	4603      	mov	r3, r0
 8007488:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	2bff      	cmp	r3, #255	; 0xff
 800748e:	d025      	beq.n	80074dc <USBD_LL_DataInStage+0x15a>
 8007490:	7dfb      	ldrb	r3, [r7, #23]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d122      	bne.n	80074dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d11c      	bne.n	80074dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80074a2:	7dfa      	ldrb	r2, [r7, #23]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	32ae      	adds	r2, #174	; 0xae
 80074a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d014      	beq.n	80074dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80074b2:	7dfa      	ldrb	r2, [r7, #23]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80074ba:	7dfa      	ldrb	r2, [r7, #23]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	32ae      	adds	r2, #174	; 0xae
 80074c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	7afa      	ldrb	r2, [r7, #11]
 80074c8:	4611      	mov	r1, r2
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	4798      	blx	r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80074d2:	7dbb      	ldrb	r3, [r7, #22]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80074d8:	7dbb      	ldrb	r3, [r7, #22]
 80074da:	e000      	b.n	80074de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d014      	beq.n	800754c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00e      	beq.n	800754c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6852      	ldr	r2, [r2, #4]
 800753a:	b2d2      	uxtb	r2, r2
 800753c:	4611      	mov	r1, r2
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007548:	2303      	movs	r3, #3
 800754a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800754c:	2340      	movs	r3, #64	; 0x40
 800754e:	2200      	movs	r2, #0
 8007550:	2100      	movs	r1, #0
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 fc1f 	bl	8008d96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2240      	movs	r2, #64	; 0x40
 8007564:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007568:	2340      	movs	r3, #64	; 0x40
 800756a:	2200      	movs	r2, #0
 800756c:	2180      	movs	r1, #128	; 0x80
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 fc11 	bl	8008d96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2240      	movs	r2, #64	; 0x40
 800757e:	621a      	str	r2, [r3, #32]

  return ret;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2204      	movs	r2, #4
 80075c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	d106      	bne.n	80075f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b082      	sub	sp, #8
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b03      	cmp	r3, #3
 8007618:	d110      	bne.n	800763c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	32ae      	adds	r2, #174	; 0xae
 800765c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007664:	2303      	movs	r3, #3
 8007666:	e01c      	b.n	80076a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b03      	cmp	r3, #3
 8007672:	d115      	bne.n	80076a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	32ae      	adds	r2, #174	; 0xae
 800767e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	32ae      	adds	r2, #174	; 0xae
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	78fa      	ldrb	r2, [r7, #3]
 800769a:	4611      	mov	r1, r2
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	32ae      	adds	r2, #174	; 0xae
 80076c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e01c      	b.n	8007706 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d115      	bne.n	8007704 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32ae      	adds	r2, #174	; 0xae
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	32ae      	adds	r2, #174	; 0xae
 80076f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	78fa      	ldrb	r2, [r7, #3]
 80076fe:	4611      	mov	r1, r2
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00e      	beq.n	8007760 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6852      	ldr	r2, [r2, #4]
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	4611      	mov	r1, r2
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	4798      	blx	r3
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800775c:	2303      	movs	r3, #3
 800775e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007776:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007790:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b086      	sub	sp, #24
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	885b      	ldrh	r3, [r3, #2]
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d920      	bls.n	8007808 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077ce:	e013      	b.n	80077f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077d0:	f107 030a 	add.w	r3, r7, #10
 80077d4:	4619      	mov	r1, r3
 80077d6:	6978      	ldr	r0, [r7, #20]
 80077d8:	f000 f81b 	bl	8007812 <USBD_GetNextDesc>
 80077dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b05      	cmp	r3, #5
 80077e4:	d108      	bne.n	80077f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	789b      	ldrb	r3, [r3, #2]
 80077ee:	78fa      	ldrb	r2, [r7, #3]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d008      	beq.n	8007806 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	885b      	ldrh	r3, [r3, #2]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	897b      	ldrh	r3, [r7, #10]
 8007800:	429a      	cmp	r2, r3
 8007802:	d8e5      	bhi.n	80077d0 <USBD_GetEpDesc+0x32>
 8007804:	e000      	b.n	8007808 <USBD_GetEpDesc+0x6a>
          break;
 8007806:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007808:	693b      	ldr	r3, [r7, #16]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007812:	b480      	push	{r7}
 8007814:	b085      	sub	sp, #20
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	881a      	ldrh	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	4413      	add	r3, r2
 800782c:	b29a      	uxth	r2, r3
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4413      	add	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800783e:	68fb      	ldr	r3, [r7, #12]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	3301      	adds	r3, #1
 8007862:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800786a:	8a3b      	ldrh	r3, [r7, #16]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	b21a      	sxth	r2, r3
 8007870:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007874:	4313      	orrs	r3, r2
 8007876:	b21b      	sxth	r3, r3
 8007878:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800787a:	89fb      	ldrh	r3, [r7, #14]
}
 800787c:	4618      	mov	r0, r3
 800787e:	371c      	adds	r7, #28
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d005      	beq.n	80078ae <USBD_StdDevReq+0x26>
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d857      	bhi.n	8007956 <USBD_StdDevReq+0xce>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00f      	beq.n	80078ca <USBD_StdDevReq+0x42>
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d153      	bne.n	8007956 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	32ae      	adds	r2, #174	; 0xae
 80078b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	4798      	blx	r3
 80078c4:	4603      	mov	r3, r0
 80078c6:	73fb      	strb	r3, [r7, #15]
      break;
 80078c8:	e04a      	b.n	8007960 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	785b      	ldrb	r3, [r3, #1]
 80078ce:	2b09      	cmp	r3, #9
 80078d0:	d83b      	bhi.n	800794a <USBD_StdDevReq+0xc2>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <USBD_StdDevReq+0x50>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	0800792d 	.word	0x0800792d
 80078dc:	08007941 	.word	0x08007941
 80078e0:	0800794b 	.word	0x0800794b
 80078e4:	08007937 	.word	0x08007937
 80078e8:	0800794b 	.word	0x0800794b
 80078ec:	0800790b 	.word	0x0800790b
 80078f0:	08007901 	.word	0x08007901
 80078f4:	0800794b 	.word	0x0800794b
 80078f8:	08007923 	.word	0x08007923
 80078fc:	08007915 	.word	0x08007915
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa3c 	bl	8007d80 <USBD_GetDescriptor>
          break;
 8007908:	e024      	b.n	8007954 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fba1 	bl	8008054 <USBD_SetAddress>
          break;
 8007912:	e01f      	b.n	8007954 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fbe0 	bl	80080dc <USBD_SetConfig>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
          break;
 8007920:	e018      	b.n	8007954 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fc83 	bl	8008230 <USBD_GetConfig>
          break;
 800792a:	e013      	b.n	8007954 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fcb4 	bl	800829c <USBD_GetStatus>
          break;
 8007934:	e00e      	b.n	8007954 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fce3 	bl	8008304 <USBD_SetFeature>
          break;
 800793e:	e009      	b.n	8007954 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fd07 	bl	8008356 <USBD_ClrFeature>
          break;
 8007948:	e004      	b.n	8007954 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fd5e 	bl	800840e <USBD_CtlError>
          break;
 8007952:	bf00      	nop
      }
      break;
 8007954:	e004      	b.n	8007960 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fd58 	bl	800840e <USBD_CtlError>
      break;
 800795e:	bf00      	nop
  }

  return ret;
 8007960:	7bfb      	ldrb	r3, [r7, #15]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop

0800796c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	d005      	beq.n	8007992 <USBD_StdItfReq+0x26>
 8007986:	2b40      	cmp	r3, #64	; 0x40
 8007988:	d852      	bhi.n	8007a30 <USBD_StdItfReq+0xc4>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <USBD_StdItfReq+0x26>
 800798e:	2b20      	cmp	r3, #32
 8007990:	d14e      	bne.n	8007a30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007998:	b2db      	uxtb	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	2b02      	cmp	r3, #2
 800799e:	d840      	bhi.n	8007a22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	889b      	ldrh	r3, [r3, #4]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d836      	bhi.n	8007a18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	889b      	ldrh	r3, [r3, #4]
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff fed9 	bl	800776a <USBD_CoreFindIF>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2bff      	cmp	r3, #255	; 0xff
 80079c0:	d01d      	beq.n	80079fe <USBD_StdItfReq+0x92>
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d11a      	bne.n	80079fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80079c8:	7bba      	ldrb	r2, [r7, #14]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	32ae      	adds	r2, #174	; 0xae
 80079ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00f      	beq.n	80079f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079d8:	7bba      	ldrb	r2, [r7, #14]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079e0:	7bba      	ldrb	r2, [r7, #14]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	32ae      	adds	r2, #174	; 0xae
 80079e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079f6:	e004      	b.n	8007a02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079fc:	e001      	b.n	8007a02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079fe:	2303      	movs	r3, #3
 8007a00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	88db      	ldrh	r3, [r3, #6]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d110      	bne.n	8007a2c <USBD_StdItfReq+0xc0>
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10d      	bne.n	8007a2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fdc7 	bl	80085a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a16:	e009      	b.n	8007a2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fcf7 	bl	800840e <USBD_CtlError>
          break;
 8007a20:	e004      	b.n	8007a2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fcf2 	bl	800840e <USBD_CtlError>
          break;
 8007a2a:	e000      	b.n	8007a2e <USBD_StdItfReq+0xc2>
          break;
 8007a2c:	bf00      	nop
      }
      break;
 8007a2e:	e004      	b.n	8007a3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fceb 	bl	800840e <USBD_CtlError>
      break;
 8007a38:	bf00      	nop
  }

  return ret;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	889b      	ldrh	r3, [r3, #4]
 8007a56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a60:	2b40      	cmp	r3, #64	; 0x40
 8007a62:	d007      	beq.n	8007a74 <USBD_StdEPReq+0x30>
 8007a64:	2b40      	cmp	r3, #64	; 0x40
 8007a66:	f200 817f 	bhi.w	8007d68 <USBD_StdEPReq+0x324>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d02a      	beq.n	8007ac4 <USBD_StdEPReq+0x80>
 8007a6e:	2b20      	cmp	r3, #32
 8007a70:	f040 817a 	bne.w	8007d68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7ff fe83 	bl	8007784 <USBD_CoreFindEP>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a82:	7b7b      	ldrb	r3, [r7, #13]
 8007a84:	2bff      	cmp	r3, #255	; 0xff
 8007a86:	f000 8174 	beq.w	8007d72 <USBD_StdEPReq+0x32e>
 8007a8a:	7b7b      	ldrb	r3, [r7, #13]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 8170 	bne.w	8007d72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a92:	7b7a      	ldrb	r2, [r7, #13]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a9a:	7b7a      	ldrb	r2, [r7, #13]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	32ae      	adds	r2, #174	; 0xae
 8007aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 8163 	beq.w	8007d72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007aac:	7b7a      	ldrb	r2, [r7, #13]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	32ae      	adds	r2, #174	; 0xae
 8007ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	4798      	blx	r3
 8007abe:	4603      	mov	r3, r0
 8007ac0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ac2:	e156      	b.n	8007d72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d008      	beq.n	8007ade <USBD_StdEPReq+0x9a>
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	f300 8145 	bgt.w	8007d5c <USBD_StdEPReq+0x318>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 809b 	beq.w	8007c0e <USBD_StdEPReq+0x1ca>
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d03c      	beq.n	8007b56 <USBD_StdEPReq+0x112>
 8007adc:	e13e      	b.n	8007d5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d002      	beq.n	8007af0 <USBD_StdEPReq+0xac>
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d016      	beq.n	8007b1c <USBD_StdEPReq+0xd8>
 8007aee:	e02c      	b.n	8007b4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00d      	beq.n	8007b12 <USBD_StdEPReq+0xce>
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	2b80      	cmp	r3, #128	; 0x80
 8007afa:	d00a      	beq.n	8007b12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 f98d 	bl	8008e20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b06:	2180      	movs	r1, #128	; 0x80
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 f989 	bl	8008e20 <USBD_LL_StallEP>
 8007b0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b10:	e020      	b.n	8007b54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fc7a 	bl	800840e <USBD_CtlError>
              break;
 8007b1a:	e01b      	b.n	8007b54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	885b      	ldrh	r3, [r3, #2]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10e      	bne.n	8007b42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00b      	beq.n	8007b42 <USBD_StdEPReq+0xfe>
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b80      	cmp	r3, #128	; 0x80
 8007b2e:	d008      	beq.n	8007b42 <USBD_StdEPReq+0xfe>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	88db      	ldrh	r3, [r3, #6]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d104      	bne.n	8007b42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f96f 	bl	8008e20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fd2e 	bl	80085a4 <USBD_CtlSendStatus>

              break;
 8007b48:	e004      	b.n	8007b54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fc5e 	bl	800840e <USBD_CtlError>
              break;
 8007b52:	bf00      	nop
          }
          break;
 8007b54:	e107      	b.n	8007d66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d002      	beq.n	8007b68 <USBD_StdEPReq+0x124>
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d016      	beq.n	8007b94 <USBD_StdEPReq+0x150>
 8007b66:	e04b      	b.n	8007c00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00d      	beq.n	8007b8a <USBD_StdEPReq+0x146>
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b80      	cmp	r3, #128	; 0x80
 8007b72:	d00a      	beq.n	8007b8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 f951 	bl	8008e20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b7e:	2180      	movs	r1, #128	; 0x80
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 f94d 	bl	8008e20 <USBD_LL_StallEP>
 8007b86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b88:	e040      	b.n	8007c0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fc3e 	bl	800840e <USBD_CtlError>
              break;
 8007b92:	e03b      	b.n	8007c0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	885b      	ldrh	r3, [r3, #2]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d136      	bne.n	8007c0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d004      	beq.n	8007bb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 f957 	bl	8008e5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fcf7 	bl	80085a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7ff fde2 	bl	8007784 <USBD_CoreFindEP>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bc4:	7b7b      	ldrb	r3, [r7, #13]
 8007bc6:	2bff      	cmp	r3, #255	; 0xff
 8007bc8:	d01f      	beq.n	8007c0a <USBD_StdEPReq+0x1c6>
 8007bca:	7b7b      	ldrb	r3, [r7, #13]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d11c      	bne.n	8007c0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007bd0:	7b7a      	ldrb	r2, [r7, #13]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007bd8:	7b7a      	ldrb	r2, [r7, #13]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	32ae      	adds	r2, #174	; 0xae
 8007bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d010      	beq.n	8007c0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007be8:	7b7a      	ldrb	r2, [r7, #13]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	32ae      	adds	r2, #174	; 0xae
 8007bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	4798      	blx	r3
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bfe:	e004      	b.n	8007c0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fc03 	bl	800840e <USBD_CtlError>
              break;
 8007c08:	e000      	b.n	8007c0c <USBD_StdEPReq+0x1c8>
              break;
 8007c0a:	bf00      	nop
          }
          break;
 8007c0c:	e0ab      	b.n	8007d66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d002      	beq.n	8007c20 <USBD_StdEPReq+0x1dc>
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d032      	beq.n	8007c84 <USBD_StdEPReq+0x240>
 8007c1e:	e097      	b.n	8007d50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d007      	beq.n	8007c36 <USBD_StdEPReq+0x1f2>
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	2b80      	cmp	r3, #128	; 0x80
 8007c2a:	d004      	beq.n	8007c36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fbed 	bl	800840e <USBD_CtlError>
                break;
 8007c34:	e091      	b.n	8007d5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	da0b      	bge.n	8007c56 <USBD_StdEPReq+0x212>
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	3310      	adds	r3, #16
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	4413      	add	r3, r2
 8007c52:	3304      	adds	r3, #4
 8007c54:	e00b      	b.n	8007c6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fc37 	bl	80084f0 <USBD_CtlSendData>
              break;
 8007c82:	e06a      	b.n	8007d5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	da11      	bge.n	8007cb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	f003 020f 	and.w	r2, r3, #15
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	3324      	adds	r3, #36	; 0x24
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d117      	bne.n	8007cd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fbb0 	bl	800840e <USBD_CtlError>
                  break;
 8007cae:	e054      	b.n	8007d5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	f003 020f 	and.w	r2, r3, #15
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d104      	bne.n	8007cd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fb9d 	bl	800840e <USBD_CtlError>
                  break;
 8007cd4:	e041      	b.n	8007d5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	da0b      	bge.n	8007cf6 <USBD_StdEPReq+0x2b2>
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	3310      	adds	r3, #16
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	e00b      	b.n	8007d0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <USBD_StdEPReq+0x2d8>
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b80      	cmp	r3, #128	; 0x80
 8007d1a:	d103      	bne.n	8007d24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	e00e      	b.n	8007d42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 f8b7 	bl	8008e9c <USBD_LL_IsStallEP>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	e002      	b.n	8007d42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2202      	movs	r2, #2
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fbd1 	bl	80084f0 <USBD_CtlSendData>
              break;
 8007d4e:	e004      	b.n	8007d5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fb5b 	bl	800840e <USBD_CtlError>
              break;
 8007d58:	bf00      	nop
          }
          break;
 8007d5a:	e004      	b.n	8007d66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fb55 	bl	800840e <USBD_CtlError>
          break;
 8007d64:	bf00      	nop
      }
      break;
 8007d66:	e005      	b.n	8007d74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fb4f 	bl	800840e <USBD_CtlError>
      break;
 8007d70:	e000      	b.n	8007d74 <USBD_StdEPReq+0x330>
      break;
 8007d72:	bf00      	nop
  }

  return ret;
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	885b      	ldrh	r3, [r3, #2]
 8007d9a:	0a1b      	lsrs	r3, r3, #8
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	2b06      	cmp	r3, #6
 8007da2:	f200 8128 	bhi.w	8007ff6 <USBD_GetDescriptor+0x276>
 8007da6:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <USBD_GetDescriptor+0x2c>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007dc9 	.word	0x08007dc9
 8007db0:	08007de1 	.word	0x08007de1
 8007db4:	08007e21 	.word	0x08007e21
 8007db8:	08007ff7 	.word	0x08007ff7
 8007dbc:	08007ff7 	.word	0x08007ff7
 8007dc0:	08007f97 	.word	0x08007f97
 8007dc4:	08007fc3 	.word	0x08007fc3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	f107 0108 	add.w	r1, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
      break;
 8007dde:	e112      	b.n	8008006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	7c1b      	ldrb	r3, [r3, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10d      	bne.n	8007e04 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df0:	f107 0208 	add.w	r2, r7, #8
 8007df4:	4610      	mov	r0, r2
 8007df6:	4798      	blx	r3
 8007df8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	2202      	movs	r2, #2
 8007e00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e02:	e100      	b.n	8008006 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	f107 0208 	add.w	r2, r7, #8
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	701a      	strb	r2, [r3, #0]
      break;
 8007e1e:	e0f2      	b.n	8008006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	885b      	ldrh	r3, [r3, #2]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b05      	cmp	r3, #5
 8007e28:	f200 80ac 	bhi.w	8007f84 <USBD_GetDescriptor+0x204>
 8007e2c:	a201      	add	r2, pc, #4	; (adr r2, 8007e34 <USBD_GetDescriptor+0xb4>)
 8007e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e32:	bf00      	nop
 8007e34:	08007e4d 	.word	0x08007e4d
 8007e38:	08007e81 	.word	0x08007e81
 8007e3c:	08007eb5 	.word	0x08007eb5
 8007e40:	08007ee9 	.word	0x08007ee9
 8007e44:	08007f1d 	.word	0x08007f1d
 8007e48:	08007f51 	.word	0x08007f51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	7c12      	ldrb	r2, [r2, #16]
 8007e64:	f107 0108 	add.w	r1, r7, #8
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e6e:	e091      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 facb 	bl	800840e <USBD_CtlError>
            err++;
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e7e:	e089      	b.n	8007f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00b      	beq.n	8007ea4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	7c12      	ldrb	r2, [r2, #16]
 8007e98:	f107 0108 	add.w	r1, r7, #8
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
 8007ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ea2:	e077      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fab1 	bl	800840e <USBD_CtlError>
            err++;
 8007eac:	7afb      	ldrb	r3, [r7, #11]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007eb2:	e06f      	b.n	8007f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	7c12      	ldrb	r2, [r2, #16]
 8007ecc:	f107 0108 	add.w	r1, r7, #8
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
 8007ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ed6:	e05d      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fa97 	bl	800840e <USBD_CtlError>
            err++;
 8007ee0:	7afb      	ldrb	r3, [r7, #11]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ee6:	e055      	b.n	8007f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	7c12      	ldrb	r2, [r2, #16]
 8007f00:	f107 0108 	add.w	r1, r7, #8
 8007f04:	4610      	mov	r0, r2
 8007f06:	4798      	blx	r3
 8007f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f0a:	e043      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fa7d 	bl	800840e <USBD_CtlError>
            err++;
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	3301      	adds	r3, #1
 8007f18:	72fb      	strb	r3, [r7, #11]
          break;
 8007f1a:	e03b      	b.n	8007f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	7c12      	ldrb	r2, [r2, #16]
 8007f34:	f107 0108 	add.w	r1, r7, #8
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4798      	blx	r3
 8007f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f3e:	e029      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa63 	bl	800840e <USBD_CtlError>
            err++;
 8007f48:	7afb      	ldrb	r3, [r7, #11]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f4e:	e021      	b.n	8007f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	7c12      	ldrb	r2, [r2, #16]
 8007f68:	f107 0108 	add.w	r1, r7, #8
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	4798      	blx	r3
 8007f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f72:	e00f      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa49 	bl	800840e <USBD_CtlError>
            err++;
 8007f7c:	7afb      	ldrb	r3, [r7, #11]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	72fb      	strb	r3, [r7, #11]
          break;
 8007f82:	e007      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa41 	bl	800840e <USBD_CtlError>
          err++;
 8007f8c:	7afb      	ldrb	r3, [r7, #11]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f92:	bf00      	nop
      }
      break;
 8007f94:	e037      	b.n	8008006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	7c1b      	ldrb	r3, [r3, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d109      	bne.n	8007fb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa6:	f107 0208 	add.w	r2, r7, #8
 8007faa:	4610      	mov	r0, r2
 8007fac:	4798      	blx	r3
 8007fae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fb0:	e029      	b.n	8008006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fa2a 	bl	800840e <USBD_CtlError>
        err++;
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007fc0:	e021      	b.n	8008006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	7c1b      	ldrb	r3, [r3, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10d      	bne.n	8007fe6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd2:	f107 0208 	add.w	r2, r7, #8
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	4798      	blx	r3
 8007fda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	2207      	movs	r2, #7
 8007fe2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fe4:	e00f      	b.n	8008006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fa10 	bl	800840e <USBD_CtlError>
        err++;
 8007fee:	7afb      	ldrb	r3, [r7, #11]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ff4:	e007      	b.n	8008006 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fa08 	bl	800840e <USBD_CtlError>
      err++;
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	3301      	adds	r3, #1
 8008002:	72fb      	strb	r3, [r7, #11]
      break;
 8008004:	bf00      	nop
  }

  if (err != 0U)
 8008006:	7afb      	ldrb	r3, [r7, #11]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d11e      	bne.n	800804a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	88db      	ldrh	r3, [r3, #6]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d016      	beq.n	8008042 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008014:	893b      	ldrh	r3, [r7, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00e      	beq.n	8008038 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	88da      	ldrh	r2, [r3, #6]
 800801e:	893b      	ldrh	r3, [r7, #8]
 8008020:	4293      	cmp	r3, r2
 8008022:	bf28      	it	cs
 8008024:	4613      	movcs	r3, r2
 8008026:	b29b      	uxth	r3, r3
 8008028:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800802a:	893b      	ldrh	r3, [r7, #8]
 800802c:	461a      	mov	r2, r3
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fa5d 	bl	80084f0 <USBD_CtlSendData>
 8008036:	e009      	b.n	800804c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f9e7 	bl	800840e <USBD_CtlError>
 8008040:	e004      	b.n	800804c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 faae 	bl	80085a4 <USBD_CtlSendStatus>
 8008048:	e000      	b.n	800804c <USBD_GetDescriptor+0x2cc>
    return;
 800804a:	bf00      	nop
  }
}
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop

08008054 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	889b      	ldrh	r3, [r3, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d131      	bne.n	80080ca <USBD_SetAddress+0x76>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	88db      	ldrh	r3, [r3, #6]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d12d      	bne.n	80080ca <USBD_SetAddress+0x76>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	885b      	ldrh	r3, [r3, #2]
 8008072:	2b7f      	cmp	r3, #127	; 0x7f
 8008074:	d829      	bhi.n	80080ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	885b      	ldrh	r3, [r3, #2]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008080:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b03      	cmp	r3, #3
 800808c:	d104      	bne.n	8008098 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f9bc 	bl	800840e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008096:	e01d      	b.n	80080d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	7bfa      	ldrb	r2, [r7, #15]
 800809c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 ff25 	bl	8008ef4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa7a 	bl	80085a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2202      	movs	r2, #2
 80080ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080be:	e009      	b.n	80080d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c8:	e004      	b.n	80080d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f99e 	bl	800840e <USBD_CtlError>
  }
}
 80080d2:	bf00      	nop
 80080d4:	bf00      	nop
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	885b      	ldrh	r3, [r3, #2]
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	4b4e      	ldr	r3, [pc, #312]	; (800822c <USBD_SetConfig+0x150>)
 80080f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080f4:	4b4d      	ldr	r3, [pc, #308]	; (800822c <USBD_SetConfig+0x150>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d905      	bls.n	8008108 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f985 	bl	800840e <USBD_CtlError>
    return USBD_FAIL;
 8008104:	2303      	movs	r3, #3
 8008106:	e08c      	b.n	8008222 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b02      	cmp	r3, #2
 8008112:	d002      	beq.n	800811a <USBD_SetConfig+0x3e>
 8008114:	2b03      	cmp	r3, #3
 8008116:	d029      	beq.n	800816c <USBD_SetConfig+0x90>
 8008118:	e075      	b.n	8008206 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800811a:	4b44      	ldr	r3, [pc, #272]	; (800822c <USBD_SetConfig+0x150>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d020      	beq.n	8008164 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008122:	4b42      	ldr	r3, [pc, #264]	; (800822c <USBD_SetConfig+0x150>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800812c:	4b3f      	ldr	r3, [pc, #252]	; (800822c <USBD_SetConfig+0x150>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fe ffe7 	bl	8007106 <USBD_SetClassConfig>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d008      	beq.n	8008154 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f962 	bl	800840e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2202      	movs	r2, #2
 800814e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008152:	e065      	b.n	8008220 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fa25 	bl	80085a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2203      	movs	r2, #3
 800815e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008162:	e05d      	b.n	8008220 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fa1d 	bl	80085a4 <USBD_CtlSendStatus>
      break;
 800816a:	e059      	b.n	8008220 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800816c:	4b2f      	ldr	r3, [pc, #188]	; (800822c <USBD_SetConfig+0x150>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d112      	bne.n	800819a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800817c:	4b2b      	ldr	r3, [pc, #172]	; (800822c <USBD_SetConfig+0x150>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008186:	4b29      	ldr	r3, [pc, #164]	; (800822c <USBD_SetConfig+0x150>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7fe ffd6 	bl	800713e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa06 	bl	80085a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008198:	e042      	b.n	8008220 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800819a:	4b24      	ldr	r3, [pc, #144]	; (800822c <USBD_SetConfig+0x150>)
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d02a      	beq.n	80081fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7fe ffc4 	bl	800713e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081b6:	4b1d      	ldr	r3, [pc, #116]	; (800822c <USBD_SetConfig+0x150>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081c0:	4b1a      	ldr	r3, [pc, #104]	; (800822c <USBD_SetConfig+0x150>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7fe ff9d 	bl	8007106 <USBD_SetClassConfig>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00f      	beq.n	80081f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f918 	bl	800840e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fe ffa9 	bl	800713e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081f4:	e014      	b.n	8008220 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f9d4 	bl	80085a4 <USBD_CtlSendStatus>
      break;
 80081fc:	e010      	b.n	8008220 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f9d0 	bl	80085a4 <USBD_CtlSendStatus>
      break;
 8008204:	e00c      	b.n	8008220 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f900 	bl	800840e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800820e:	4b07      	ldr	r3, [pc, #28]	; (800822c <USBD_SetConfig+0x150>)
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7fe ff92 	bl	800713e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800821a:	2303      	movs	r3, #3
 800821c:	73fb      	strb	r3, [r7, #15]
      break;
 800821e:	bf00      	nop
  }

  return ret;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000494 	.word	0x20000494

08008230 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	88db      	ldrh	r3, [r3, #6]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d004      	beq.n	800824c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f8e2 	bl	800840e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800824a:	e023      	b.n	8008294 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b02      	cmp	r3, #2
 8008256:	dc02      	bgt.n	800825e <USBD_GetConfig+0x2e>
 8008258:	2b00      	cmp	r3, #0
 800825a:	dc03      	bgt.n	8008264 <USBD_GetConfig+0x34>
 800825c:	e015      	b.n	800828a <USBD_GetConfig+0x5a>
 800825e:	2b03      	cmp	r3, #3
 8008260:	d00b      	beq.n	800827a <USBD_GetConfig+0x4a>
 8008262:	e012      	b.n	800828a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	3308      	adds	r3, #8
 800826e:	2201      	movs	r2, #1
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f93c 	bl	80084f0 <USBD_CtlSendData>
        break;
 8008278:	e00c      	b.n	8008294 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3304      	adds	r3, #4
 800827e:	2201      	movs	r2, #1
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f934 	bl	80084f0 <USBD_CtlSendData>
        break;
 8008288:	e004      	b.n	8008294 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f8be 	bl	800840e <USBD_CtlError>
        break;
 8008292:	bf00      	nop
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d81e      	bhi.n	80082f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	88db      	ldrh	r3, [r3, #6]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d004      	beq.n	80082c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f8a5 	bl	800840e <USBD_CtlError>
        break;
 80082c4:	e01a      	b.n	80082fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d005      	beq.n	80082e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f043 0202 	orr.w	r2, r3, #2
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	330c      	adds	r3, #12
 80082e6:	2202      	movs	r2, #2
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f900 	bl	80084f0 <USBD_CtlSendData>
      break;
 80082f0:	e004      	b.n	80082fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f88a 	bl	800840e <USBD_CtlError>
      break;
 80082fa:	bf00      	nop
  }
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	885b      	ldrh	r3, [r3, #2]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d107      	bne.n	8008326 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f940 	bl	80085a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008324:	e013      	b.n	800834e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	885b      	ldrh	r3, [r3, #2]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d10b      	bne.n	8008346 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	889b      	ldrh	r3, [r3, #4]
 8008332:	0a1b      	lsrs	r3, r3, #8
 8008334:	b29b      	uxth	r3, r3
 8008336:	b2da      	uxtb	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f930 	bl	80085a4 <USBD_CtlSendStatus>
}
 8008344:	e003      	b.n	800834e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f860 	bl	800840e <USBD_CtlError>
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008366:	b2db      	uxtb	r3, r3
 8008368:	3b01      	subs	r3, #1
 800836a:	2b02      	cmp	r3, #2
 800836c:	d80b      	bhi.n	8008386 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	885b      	ldrh	r3, [r3, #2]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d10c      	bne.n	8008390 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f910 	bl	80085a4 <USBD_CtlSendStatus>
      }
      break;
 8008384:	e004      	b.n	8008390 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f840 	bl	800840e <USBD_CtlError>
      break;
 800838e:	e000      	b.n	8008392 <USBD_ClrFeature+0x3c>
      break;
 8008390:	bf00      	nop
  }
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	781a      	ldrb	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3301      	adds	r3, #1
 80083b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	781a      	ldrb	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3301      	adds	r3, #1
 80083c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7ff fa41 	bl	800784c <SWAPBYTE>
 80083ca:	4603      	mov	r3, r0
 80083cc:	461a      	mov	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3301      	adds	r3, #1
 80083d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3301      	adds	r3, #1
 80083dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff fa34 	bl	800784c <SWAPBYTE>
 80083e4:	4603      	mov	r3, r0
 80083e6:	461a      	mov	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3301      	adds	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3301      	adds	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f7ff fa27 	bl	800784c <SWAPBYTE>
 80083fe:	4603      	mov	r3, r0
 8008400:	461a      	mov	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	80da      	strh	r2, [r3, #6]
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008418:	2180      	movs	r1, #128	; 0x80
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fd00 	bl	8008e20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008420:	2100      	movs	r1, #0
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fcfc 	bl	8008e20 <USBD_LL_StallEP>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d036      	beq.n	80084b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800844a:	6938      	ldr	r0, [r7, #16]
 800844c:	f000 f836 	bl	80084bc <USBD_GetLen>
 8008450:	4603      	mov	r3, r0
 8008452:	3301      	adds	r3, #1
 8008454:	b29b      	uxth	r3, r3
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	b29a      	uxth	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	4413      	add	r3, r2
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	7812      	ldrb	r2, [r2, #0]
 8008468:	701a      	strb	r2, [r3, #0]
  idx++;
 800846a:	7dfb      	ldrb	r3, [r7, #23]
 800846c:	3301      	adds	r3, #1
 800846e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	4413      	add	r3, r2
 8008476:	2203      	movs	r2, #3
 8008478:	701a      	strb	r2, [r3, #0]
  idx++;
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	3301      	adds	r3, #1
 800847e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008480:	e013      	b.n	80084aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008482:	7dfb      	ldrb	r3, [r7, #23]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	4413      	add	r3, r2
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	7812      	ldrb	r2, [r2, #0]
 800848c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	3301      	adds	r3, #1
 8008492:	613b      	str	r3, [r7, #16]
    idx++;
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	3301      	adds	r3, #1
 8008498:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800849a:	7dfb      	ldrb	r3, [r7, #23]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	4413      	add	r3, r2
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	3301      	adds	r3, #1
 80084a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e7      	bne.n	8008482 <USBD_GetString+0x52>
 80084b2:	e000      	b.n	80084b6 <USBD_GetString+0x86>
    return;
 80084b4:	bf00      	nop
  }
}
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084cc:	e005      	b.n	80084da <USBD_GetLen+0x1e>
  {
    len++;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	3301      	adds	r3, #1
 80084d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	3301      	adds	r3, #1
 80084d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1f5      	bne.n	80084ce <USBD_GetLen+0x12>
  }

  return len;
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2202      	movs	r2, #2
 8008500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	2100      	movs	r1, #0
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 fd0b 	bl	8008f32 <USBD_LL_Transmit>

  return USBD_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	60f8      	str	r0, [r7, #12]
 800852e:	60b9      	str	r1, [r7, #8]
 8008530:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	2100      	movs	r1, #0
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 fcfa 	bl	8008f32 <USBD_LL_Transmit>

  return USBD_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2203      	movs	r2, #3
 8008558:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	2100      	movs	r1, #0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fcfe 	bl	8008f74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	2100      	movs	r1, #0
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 fced 	bl	8008f74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2204      	movs	r2, #4
 80085b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085b4:	2300      	movs	r3, #0
 80085b6:	2200      	movs	r2, #0
 80085b8:	2100      	movs	r1, #0
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fcb9 	bl	8008f32 <USBD_LL_Transmit>

  return USBD_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2205      	movs	r2, #5
 80085d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085da:	2300      	movs	r3, #0
 80085dc:	2200      	movs	r2, #0
 80085de:	2100      	movs	r1, #0
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fcc7 	bl	8008f74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085f4:	2200      	movs	r2, #0
 80085f6:	4912      	ldr	r1, [pc, #72]	; (8008640 <MX_USB_DEVICE_Init+0x50>)
 80085f8:	4812      	ldr	r0, [pc, #72]	; (8008644 <MX_USB_DEVICE_Init+0x54>)
 80085fa:	f7fe fd07 	bl	800700c <USBD_Init>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008604:	f7f8 fa00 	bl	8000a08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008608:	490f      	ldr	r1, [pc, #60]	; (8008648 <MX_USB_DEVICE_Init+0x58>)
 800860a:	480e      	ldr	r0, [pc, #56]	; (8008644 <MX_USB_DEVICE_Init+0x54>)
 800860c:	f7fe fd2e 	bl	800706c <USBD_RegisterClass>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008616:	f7f8 f9f7 	bl	8000a08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800861a:	490c      	ldr	r1, [pc, #48]	; (800864c <MX_USB_DEVICE_Init+0x5c>)
 800861c:	4809      	ldr	r0, [pc, #36]	; (8008644 <MX_USB_DEVICE_Init+0x54>)
 800861e:	f7fe fc1f 	bl	8006e60 <USBD_CDC_RegisterInterface>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008628:	f7f8 f9ee 	bl	8000a08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800862c:	4805      	ldr	r0, [pc, #20]	; (8008644 <MX_USB_DEVICE_Init+0x54>)
 800862e:	f7fe fd53 	bl	80070d8 <USBD_Start>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008638:	f7f8 f9e6 	bl	8000a08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800863c:	bf00      	nop
 800863e:	bd80      	pop	{r7, pc}
 8008640:	200000ac 	.word	0x200000ac
 8008644:	20000498 	.word	0x20000498
 8008648:	20000018 	.word	0x20000018
 800864c:	20000098 	.word	0x20000098

08008650 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008654:	2200      	movs	r2, #0
 8008656:	4905      	ldr	r1, [pc, #20]	; (800866c <CDC_Init_FS+0x1c>)
 8008658:	4805      	ldr	r0, [pc, #20]	; (8008670 <CDC_Init_FS+0x20>)
 800865a:	f7fe fc1b 	bl	8006e94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800865e:	4905      	ldr	r1, [pc, #20]	; (8008674 <CDC_Init_FS+0x24>)
 8008660:	4803      	ldr	r0, [pc, #12]	; (8008670 <CDC_Init_FS+0x20>)
 8008662:	f7fe fc39 	bl	8006ed8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008666:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008668:	4618      	mov	r0, r3
 800866a:	bd80      	pop	{r7, pc}
 800866c:	20000f74 	.word	0x20000f74
 8008670:	20000498 	.word	0x20000498
 8008674:	20000774 	.word	0x20000774

08008678 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800867c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800867e:	4618      	mov	r0, r3
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	6039      	str	r1, [r7, #0]
 8008692:	71fb      	strb	r3, [r7, #7]
 8008694:	4613      	mov	r3, r2
 8008696:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	2b23      	cmp	r3, #35	; 0x23
 800869c:	d84a      	bhi.n	8008734 <CDC_Control_FS+0xac>
 800869e:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <CDC_Control_FS+0x1c>)
 80086a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a4:	08008735 	.word	0x08008735
 80086a8:	08008735 	.word	0x08008735
 80086ac:	08008735 	.word	0x08008735
 80086b0:	08008735 	.word	0x08008735
 80086b4:	08008735 	.word	0x08008735
 80086b8:	08008735 	.word	0x08008735
 80086bc:	08008735 	.word	0x08008735
 80086c0:	08008735 	.word	0x08008735
 80086c4:	08008735 	.word	0x08008735
 80086c8:	08008735 	.word	0x08008735
 80086cc:	08008735 	.word	0x08008735
 80086d0:	08008735 	.word	0x08008735
 80086d4:	08008735 	.word	0x08008735
 80086d8:	08008735 	.word	0x08008735
 80086dc:	08008735 	.word	0x08008735
 80086e0:	08008735 	.word	0x08008735
 80086e4:	08008735 	.word	0x08008735
 80086e8:	08008735 	.word	0x08008735
 80086ec:	08008735 	.word	0x08008735
 80086f0:	08008735 	.word	0x08008735
 80086f4:	08008735 	.word	0x08008735
 80086f8:	08008735 	.word	0x08008735
 80086fc:	08008735 	.word	0x08008735
 8008700:	08008735 	.word	0x08008735
 8008704:	08008735 	.word	0x08008735
 8008708:	08008735 	.word	0x08008735
 800870c:	08008735 	.word	0x08008735
 8008710:	08008735 	.word	0x08008735
 8008714:	08008735 	.word	0x08008735
 8008718:	08008735 	.word	0x08008735
 800871c:	08008735 	.word	0x08008735
 8008720:	08008735 	.word	0x08008735
 8008724:	08008735 	.word	0x08008735
 8008728:	08008735 	.word	0x08008735
 800872c:	08008735 	.word	0x08008735
 8008730:	08008735 	.word	0x08008735
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008734:	bf00      	nop
  }

  return (USBD_OK);
 8008736:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	480b      	ldr	r0, [pc, #44]	; (8008780 <CDC_Receive_FS+0x3c>)
 8008752:	f7fe fbc1 	bl	8006ed8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008756:	480a      	ldr	r0, [pc, #40]	; (8008780 <CDC_Receive_FS+0x3c>)
 8008758:	f7fe fc22 	bl	8006fa0 <USBD_CDC_ReceivePacket>
	//Set the received packet length
	cdcHandeler.cdcRxPacketSize = *Len;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	b29a      	uxth	r2, r3
 8008762:	4b08      	ldr	r3, [pc, #32]	; (8008784 <CDC_Receive_FS+0x40>)
 8008764:	811a      	strh	r2, [r3, #8]

	cdcHandeler.cbCdcRxPacket((char*)cdcHandeler.pCdcRxBuffer, cdcHandeler.cdcRxPacketSize);
 8008766:	4b07      	ldr	r3, [pc, #28]	; (8008784 <CDC_Receive_FS+0x40>)
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	4a06      	ldr	r2, [pc, #24]	; (8008784 <CDC_Receive_FS+0x40>)
 800876c:	6812      	ldr	r2, [r2, #0]
 800876e:	4905      	ldr	r1, [pc, #20]	; (8008784 <CDC_Receive_FS+0x40>)
 8008770:	8909      	ldrh	r1, [r1, #8]
 8008772:	4610      	mov	r0, r2
 8008774:	4798      	blx	r3

	return (USBD_OK);
 8008776:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008778:	4618      	mov	r0, r3
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20000498 	.word	0x20000498
 8008784:	20001774 	.word	0x20001774

08008788 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008798:	4b0d      	ldr	r3, [pc, #52]	; (80087d0 <CDC_Transmit_FS+0x48>)
 800879a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800879e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e00b      	b.n	80087c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80087ae:	887b      	ldrh	r3, [r7, #2]
 80087b0:	461a      	mov	r2, r3
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	4806      	ldr	r0, [pc, #24]	; (80087d0 <CDC_Transmit_FS+0x48>)
 80087b6:	f7fe fb6d 	bl	8006e94 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80087ba:	4805      	ldr	r0, [pc, #20]	; (80087d0 <CDC_Transmit_FS+0x48>)
 80087bc:	f7fe fbaa 	bl	8006f14 <USBD_CDC_TransmitPacket>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000498 	.word	0x20000498

080087d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	4613      	mov	r3, r2
 80087e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80087e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
	...

080087f8 <CDC_Handler_Init_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Handler_Init_FS	(void* cdcRxCallback)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
	memset(&cdcHandeler, 0, sizeof(hCdcBuffer_t));
 8008800:	2210      	movs	r2, #16
 8008802:	2100      	movs	r1, #0
 8008804:	4807      	ldr	r0, [pc, #28]	; (8008824 <CDC_Handler_Init_FS+0x2c>)
 8008806:	f000 fdbd 	bl	8009384 <memset>

	cdcHandeler.cbCdcRxPacket = cdcRxCallback;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a05      	ldr	r2, [pc, #20]	; (8008824 <CDC_Handler_Init_FS+0x2c>)
 800880e:	60d3      	str	r3, [r2, #12]

	cdcHandeler.pCdcRxBuffer = UserRxBufferFS;
 8008810:	4b04      	ldr	r3, [pc, #16]	; (8008824 <CDC_Handler_Init_FS+0x2c>)
 8008812:	4a05      	ldr	r2, [pc, #20]	; (8008828 <CDC_Handler_Init_FS+0x30>)
 8008814:	601a      	str	r2, [r3, #0]

	cdcHandeler.pCdcTxBuffer = UserTxBufferFS;
 8008816:	4b03      	ldr	r3, [pc, #12]	; (8008824 <CDC_Handler_Init_FS+0x2c>)
 8008818:	4a04      	ldr	r2, [pc, #16]	; (800882c <CDC_Handler_Init_FS+0x34>)
 800881a:	605a      	str	r2, [r3, #4]
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	20001774 	.word	0x20001774
 8008828:	20000774 	.word	0x20000774
 800882c:	20000f74 	.word	0x20000f74

08008830 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	6039      	str	r1, [r7, #0]
 800883a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2212      	movs	r2, #18
 8008840:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008842:	4b03      	ldr	r3, [pc, #12]	; (8008850 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	200000c8 	.word	0x200000c8

08008854 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	6039      	str	r1, [r7, #0]
 800885e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2204      	movs	r2, #4
 8008864:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008866:	4b03      	ldr	r3, [pc, #12]	; (8008874 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	200000dc 	.word	0x200000dc

08008878 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	6039      	str	r1, [r7, #0]
 8008882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008884:	79fb      	ldrb	r3, [r7, #7]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d105      	bne.n	8008896 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	4907      	ldr	r1, [pc, #28]	; (80088ac <USBD_FS_ProductStrDescriptor+0x34>)
 800888e:	4808      	ldr	r0, [pc, #32]	; (80088b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008890:	f7ff fdce 	bl	8008430 <USBD_GetString>
 8008894:	e004      	b.n	80088a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	4904      	ldr	r1, [pc, #16]	; (80088ac <USBD_FS_ProductStrDescriptor+0x34>)
 800889a:	4805      	ldr	r0, [pc, #20]	; (80088b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800889c:	f7ff fdc8 	bl	8008430 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088a0:	4b02      	ldr	r3, [pc, #8]	; (80088ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20001784 	.word	0x20001784
 80088b0:	08009c8c 	.word	0x08009c8c

080088b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	6039      	str	r1, [r7, #0]
 80088be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	4904      	ldr	r1, [pc, #16]	; (80088d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80088c4:	4804      	ldr	r0, [pc, #16]	; (80088d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80088c6:	f7ff fdb3 	bl	8008430 <USBD_GetString>
  return USBD_StrDesc;
 80088ca:	4b02      	ldr	r3, [pc, #8]	; (80088d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20001784 	.word	0x20001784
 80088d8:	08009c98 	.word	0x08009c98

080088dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	6039      	str	r1, [r7, #0]
 80088e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	221a      	movs	r2, #26
 80088ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088ee:	f000 f843 	bl	8008978 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088f2:	4b02      	ldr	r3, [pc, #8]	; (80088fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	200000e0 	.word	0x200000e0

08008900 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	6039      	str	r1, [r7, #0]
 800890a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800890c:	79fb      	ldrb	r3, [r7, #7]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d105      	bne.n	800891e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	4907      	ldr	r1, [pc, #28]	; (8008934 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008916:	4808      	ldr	r0, [pc, #32]	; (8008938 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008918:	f7ff fd8a 	bl	8008430 <USBD_GetString>
 800891c:	e004      	b.n	8008928 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	4904      	ldr	r1, [pc, #16]	; (8008934 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008922:	4805      	ldr	r0, [pc, #20]	; (8008938 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008924:	f7ff fd84 	bl	8008430 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20001784 	.word	0x20001784
 8008938:	08009cac 	.word	0x08009cac

0800893c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	6039      	str	r1, [r7, #0]
 8008946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008948:	79fb      	ldrb	r3, [r7, #7]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d105      	bne.n	800895a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	4907      	ldr	r1, [pc, #28]	; (8008970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008952:	4808      	ldr	r0, [pc, #32]	; (8008974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008954:	f7ff fd6c 	bl	8008430 <USBD_GetString>
 8008958:	e004      	b.n	8008964 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	4904      	ldr	r1, [pc, #16]	; (8008970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800895e:	4805      	ldr	r0, [pc, #20]	; (8008974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008960:	f7ff fd66 	bl	8008430 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008964:	4b02      	ldr	r3, [pc, #8]	; (8008970 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20001784 	.word	0x20001784
 8008974:	08009cb8 	.word	0x08009cb8

08008978 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800897e:	4b0f      	ldr	r3, [pc, #60]	; (80089bc <Get_SerialNum+0x44>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008984:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <Get_SerialNum+0x48>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800898a:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <Get_SerialNum+0x4c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4413      	add	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d009      	beq.n	80089b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800899e:	2208      	movs	r2, #8
 80089a0:	4909      	ldr	r1, [pc, #36]	; (80089c8 <Get_SerialNum+0x50>)
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 f814 	bl	80089d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089a8:	2204      	movs	r2, #4
 80089aa:	4908      	ldr	r1, [pc, #32]	; (80089cc <Get_SerialNum+0x54>)
 80089ac:	68b8      	ldr	r0, [r7, #8]
 80089ae:	f000 f80f 	bl	80089d0 <IntToUnicode>
  }
}
 80089b2:	bf00      	nop
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	1fff7a10 	.word	0x1fff7a10
 80089c0:	1fff7a14 	.word	0x1fff7a14
 80089c4:	1fff7a18 	.word	0x1fff7a18
 80089c8:	200000e2 	.word	0x200000e2
 80089cc:	200000f2 	.word	0x200000f2

080089d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	4613      	mov	r3, r2
 80089dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089e2:	2300      	movs	r3, #0
 80089e4:	75fb      	strb	r3, [r7, #23]
 80089e6:	e027      	b.n	8008a38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	0f1b      	lsrs	r3, r3, #28
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	d80b      	bhi.n	8008a08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	0f1b      	lsrs	r3, r3, #28
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	4619      	mov	r1, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	440b      	add	r3, r1
 8008a00:	3230      	adds	r2, #48	; 0x30
 8008a02:	b2d2      	uxtb	r2, r2
 8008a04:	701a      	strb	r2, [r3, #0]
 8008a06:	e00a      	b.n	8008a1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	0f1b      	lsrs	r3, r3, #28
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	4619      	mov	r1, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	440b      	add	r3, r1
 8008a18:	3237      	adds	r2, #55	; 0x37
 8008a1a:	b2d2      	uxtb	r2, r2
 8008a1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	3301      	adds	r3, #1
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	2200      	movs	r2, #0
 8008a30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	3301      	adds	r3, #1
 8008a36:	75fb      	strb	r3, [r7, #23]
 8008a38:	7dfa      	ldrb	r2, [r7, #23]
 8008a3a:	79fb      	ldrb	r3, [r7, #7]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d3d3      	bcc.n	80089e8 <IntToUnicode+0x18>
  }
}
 8008a40:	bf00      	nop
 8008a42:	bf00      	nop
 8008a44:	371c      	adds	r7, #28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
	...

08008a50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	; 0x28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a58:	f107 0314 	add.w	r3, r7, #20
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	605a      	str	r2, [r3, #4]
 8008a62:	609a      	str	r2, [r3, #8]
 8008a64:	60da      	str	r2, [r3, #12]
 8008a66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a70:	d13a      	bne.n	8008ae8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a72:	2300      	movs	r3, #0
 8008a74:	613b      	str	r3, [r7, #16]
 8008a76:	4b1e      	ldr	r3, [pc, #120]	; (8008af0 <HAL_PCD_MspInit+0xa0>)
 8008a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7a:	4a1d      	ldr	r2, [pc, #116]	; (8008af0 <HAL_PCD_MspInit+0xa0>)
 8008a7c:	f043 0301 	orr.w	r3, r3, #1
 8008a80:	6313      	str	r3, [r2, #48]	; 0x30
 8008a82:	4b1b      	ldr	r3, [pc, #108]	; (8008af0 <HAL_PCD_MspInit+0xa0>)
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	613b      	str	r3, [r7, #16]
 8008a8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a94:	2302      	movs	r3, #2
 8008a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008aa0:	230a      	movs	r3, #10
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aa4:	f107 0314 	add.w	r3, r7, #20
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4812      	ldr	r0, [pc, #72]	; (8008af4 <HAL_PCD_MspInit+0xa4>)
 8008aac:	f7f8 fefe 	bl	80018ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ab0:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <HAL_PCD_MspInit+0xa0>)
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab4:	4a0e      	ldr	r2, [pc, #56]	; (8008af0 <HAL_PCD_MspInit+0xa0>)
 8008ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aba:	6353      	str	r3, [r2, #52]	; 0x34
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	4b0b      	ldr	r3, [pc, #44]	; (8008af0 <HAL_PCD_MspInit+0xa0>)
 8008ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac4:	4a0a      	ldr	r2, [pc, #40]	; (8008af0 <HAL_PCD_MspInit+0xa0>)
 8008ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008aca:	6453      	str	r3, [r2, #68]	; 0x44
 8008acc:	4b08      	ldr	r3, [pc, #32]	; (8008af0 <HAL_PCD_MspInit+0xa0>)
 8008ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2100      	movs	r1, #0
 8008adc:	2043      	movs	r0, #67	; 0x43
 8008ade:	f7f8 faac 	bl	800103a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ae2:	2043      	movs	r0, #67	; 0x43
 8008ae4:	f7f8 fac5 	bl	8001072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ae8:	bf00      	nop
 8008aea:	3728      	adds	r7, #40	; 0x28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	40023800 	.word	0x40023800
 8008af4:	40020000 	.word	0x40020000

08008af8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	f7fe fb2f 	bl	8007172 <USBD_LL_SetupStage>
}
 8008b14:	bf00      	nop
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	4613      	mov	r3, r2
 8008b34:	00db      	lsls	r3, r3, #3
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	440b      	add	r3, r1
 8008b3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	4619      	mov	r1, r3
 8008b46:	f7fe fb69 	bl	800721c <USBD_LL_DataOutStage>
}
 8008b4a:	bf00      	nop
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b082      	sub	sp, #8
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008b64:	78fa      	ldrb	r2, [r7, #3]
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	334c      	adds	r3, #76	; 0x4c
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	78fb      	ldrb	r3, [r7, #3]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	f7fe fc02 	bl	8007382 <USBD_LL_DataInStage>
}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b082      	sub	sp, #8
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe fd36 	bl	8007606 <USBD_LL_SOF>
}
 8008b9a:	bf00      	nop
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008baa:	2301      	movs	r3, #1
 8008bac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d001      	beq.n	8008bba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008bb6:	f7f7 ff27 	bl	8000a08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bc0:	7bfa      	ldrb	r2, [r7, #15]
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe fce0 	bl	800758a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe fc88 	bl	80074e6 <USBD_LL_Reset>
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fcdb 	bl	80075aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	6812      	ldr	r2, [r2, #0]
 8008c02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c06:	f043 0301 	orr.w	r3, r3, #1
 8008c0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c14:	4b04      	ldr	r3, [pc, #16]	; (8008c28 <HAL_PCD_SuspendCallback+0x48>)
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	4a03      	ldr	r2, [pc, #12]	; (8008c28 <HAL_PCD_SuspendCallback+0x48>)
 8008c1a:	f043 0306 	orr.w	r3, r3, #6
 8008c1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	e000ed00 	.word	0xe000ed00

08008c2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe fccb 	bl	80075d6 <USBD_LL_Resume>
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fe fd23 	bl	80076aa <USBD_LL_IsoOUTIncomplete>
}
 8008c64:	bf00      	nop
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c7e:	78fa      	ldrb	r2, [r7, #3]
 8008c80:	4611      	mov	r1, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fcdf 	bl	8007646 <USBD_LL_IsoINIncomplete>
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe fd35 	bl	800770e <USBD_LL_DevConnected>
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe fd32 	bl	8007724 <USBD_LL_DevDisconnected>
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d13c      	bne.n	8008d52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008cd8:	4a20      	ldr	r2, [pc, #128]	; (8008d5c <USBD_LL_Init+0x94>)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a1e      	ldr	r2, [pc, #120]	; (8008d5c <USBD_LL_Init+0x94>)
 8008ce4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ce8:	4b1c      	ldr	r3, [pc, #112]	; (8008d5c <USBD_LL_Init+0x94>)
 8008cea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008cee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008cf0:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <USBD_LL_Init+0x94>)
 8008cf2:	2204      	movs	r2, #4
 8008cf4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008cf6:	4b19      	ldr	r3, [pc, #100]	; (8008d5c <USBD_LL_Init+0x94>)
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008cfc:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <USBD_LL_Init+0x94>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d02:	4b16      	ldr	r3, [pc, #88]	; (8008d5c <USBD_LL_Init+0x94>)
 8008d04:	2202      	movs	r2, #2
 8008d06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d08:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <USBD_LL_Init+0x94>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d0e:	4b13      	ldr	r3, [pc, #76]	; (8008d5c <USBD_LL_Init+0x94>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d14:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <USBD_LL_Init+0x94>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d1a:	4b10      	ldr	r3, [pc, #64]	; (8008d5c <USBD_LL_Init+0x94>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d20:	4b0e      	ldr	r3, [pc, #56]	; (8008d5c <USBD_LL_Init+0x94>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d26:	480d      	ldr	r0, [pc, #52]	; (8008d5c <USBD_LL_Init+0x94>)
 8008d28:	f7f8 ff5d 	bl	8001be6 <HAL_PCD_Init>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d32:	f7f7 fe69 	bl	8000a08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d36:	2180      	movs	r1, #128	; 0x80
 8008d38:	4808      	ldr	r0, [pc, #32]	; (8008d5c <USBD_LL_Init+0x94>)
 8008d3a:	f7fa f9b4 	bl	80030a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d3e:	2240      	movs	r2, #64	; 0x40
 8008d40:	2100      	movs	r1, #0
 8008d42:	4806      	ldr	r0, [pc, #24]	; (8008d5c <USBD_LL_Init+0x94>)
 8008d44:	f7fa f968 	bl	8003018 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d48:	2280      	movs	r2, #128	; 0x80
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	4803      	ldr	r0, [pc, #12]	; (8008d5c <USBD_LL_Init+0x94>)
 8008d4e:	f7fa f963 	bl	8003018 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20001984 	.word	0x20001984

08008d60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7f9 f852 	bl	8001e20 <HAL_PCD_Start>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 f942 	bl	800900c <USBD_Get_USB_Status>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	4608      	mov	r0, r1
 8008da0:	4611      	mov	r1, r2
 8008da2:	461a      	mov	r2, r3
 8008da4:	4603      	mov	r3, r0
 8008da6:	70fb      	strb	r3, [r7, #3]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70bb      	strb	r3, [r7, #2]
 8008dac:	4613      	mov	r3, r2
 8008dae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008dbe:	78bb      	ldrb	r3, [r7, #2]
 8008dc0:	883a      	ldrh	r2, [r7, #0]
 8008dc2:	78f9      	ldrb	r1, [r7, #3]
 8008dc4:	f7f9 fd23 	bl	800280e <HAL_PCD_EP_Open>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 f91c 	bl	800900c <USBD_Get_USB_Status>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dfc:	78fa      	ldrb	r2, [r7, #3]
 8008dfe:	4611      	mov	r1, r2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7f9 fd6c 	bl	80028de <HAL_PCD_EP_Close>
 8008e06:	4603      	mov	r3, r0
 8008e08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 f8fd 	bl	800900c <USBD_Get_USB_Status>
 8008e12:	4603      	mov	r3, r0
 8008e14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e3a:	78fa      	ldrb	r2, [r7, #3]
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7f9 fe44 	bl	8002acc <HAL_PCD_EP_SetStall>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 f8de 	bl	800900c <USBD_Get_USB_Status>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b084      	sub	sp, #16
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	460b      	mov	r3, r1
 8008e68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7f9 fe89 	bl	8002b94 <HAL_PCD_EP_ClrStall>
 8008e82:	4603      	mov	r3, r0
 8008e84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 f8bf 	bl	800900c <USBD_Get_USB_Status>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e92:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008eae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	da0b      	bge.n	8008ed0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ebe:	68f9      	ldr	r1, [r7, #12]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	440b      	add	r3, r1
 8008eca:	333e      	adds	r3, #62	; 0x3e
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	e00b      	b.n	8008ee8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ed6:	68f9      	ldr	r1, [r7, #12]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	4413      	add	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	440b      	add	r3, r1
 8008ee2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008ee6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	4611      	mov	r1, r2
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7f9 fc56 	bl	80027c4 <HAL_PCD_SetAddress>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 f874 	bl	800900c <USBD_Get_USB_Status>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b086      	sub	sp, #24
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	603b      	str	r3, [r7, #0]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f50:	7af9      	ldrb	r1, [r7, #11]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	f7f9 fd6f 	bl	8002a38 <HAL_PCD_EP_Transmit>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 f853 	bl	800900c <USBD_Get_USB_Status>
 8008f66:	4603      	mov	r3, r0
 8008f68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	607a      	str	r2, [r7, #4]
 8008f7e:	603b      	str	r3, [r7, #0]
 8008f80:	460b      	mov	r3, r1
 8008f82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f92:	7af9      	ldrb	r1, [r7, #11]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	f7f9 fceb 	bl	8002972 <HAL_PCD_EP_Receive>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 f832 	bl	800900c <USBD_Get_USB_Status>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fac:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fc8:	78fa      	ldrb	r2, [r7, #3]
 8008fca:	4611      	mov	r1, r2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7f9 fd1b 	bl	8002a08 <HAL_PCD_EP_GetRxCount>
 8008fd2:	4603      	mov	r3, r0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fe4:	4b03      	ldr	r3, [pc, #12]	; (8008ff4 <USBD_static_malloc+0x18>)
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20001e90 	.word	0x20001e90

08008ff8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]

}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	2b03      	cmp	r3, #3
 800901e:	d817      	bhi.n	8009050 <USBD_Get_USB_Status+0x44>
 8009020:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <USBD_Get_USB_Status+0x1c>)
 8009022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009026:	bf00      	nop
 8009028:	08009039 	.word	0x08009039
 800902c:	0800903f 	.word	0x0800903f
 8009030:	08009045 	.word	0x08009045
 8009034:	0800904b 	.word	0x0800904b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	73fb      	strb	r3, [r7, #15]
    break;
 800903c:	e00b      	b.n	8009056 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800903e:	2303      	movs	r3, #3
 8009040:	73fb      	strb	r3, [r7, #15]
    break;
 8009042:	e008      	b.n	8009056 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009044:	2301      	movs	r3, #1
 8009046:	73fb      	strb	r3, [r7, #15]
    break;
 8009048:	e005      	b.n	8009056 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800904a:	2303      	movs	r3, #3
 800904c:	73fb      	strb	r3, [r7, #15]
    break;
 800904e:	e002      	b.n	8009056 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009050:	2303      	movs	r3, #3
 8009052:	73fb      	strb	r3, [r7, #15]
    break;
 8009054:	bf00      	nop
  }
  return usb_status;
 8009056:	7bfb      	ldrb	r3, [r7, #15]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <rybg211_bleModuleInit>:

/* PRIVATE FUNCTIONS DECLARATION ---------------------------------------------*/

/* FUNCTION PROTOTYPES -------------------------------------------------------*/
void rybg211_bleModuleInit(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
	memset(&hBleModule, 0, sizeof(hBleModule_t));
 8009068:	f44f 7206 	mov.w	r2, #536	; 0x218
 800906c:	2100      	movs	r1, #0
 800906e:	4805      	ldr	r0, [pc, #20]	; (8009084 <rybg211_bleModuleInit+0x20>)
 8009070:	f000 f988 	bl	8009384 <memset>

	HAL_GPIO_WritePin(BLE_MODULE_RESET_GPIO_PORT, BLE_MODULE_RESET_PIN, ENABLE);
 8009074:	2201      	movs	r2, #1
 8009076:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800907a:	4803      	ldr	r0, [pc, #12]	; (8009088 <rybg211_bleModuleInit+0x24>)
 800907c:	f7f8 fd9a 	bl	8001bb4 <HAL_GPIO_WritePin>
}
 8009080:	bf00      	nop
 8009082:	bd80      	pop	{r7, pc}
 8009084:	200020b0 	.word	0x200020b0
 8009088:	40020400 	.word	0x40020400

0800908c <rybg211_setDeviceName>:

void rybg211_setDeviceName(char* moduleBuffer, char* nameString)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af04      	add	r7, sp, #16
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
	uint8_t nameStringSize = strlen(nameString);
 8009096:	6838      	ldr	r0, [r7, #0]
 8009098:	f7f7 f8a2 	bl	80001e0 <strlen>
 800909c:	4603      	mov	r3, r0
 800909e:	73fb      	strb	r3, [r7, #15]

	memcpy(moduleBuffer ,BLE_NAME_SET, sizeof(BLE_NAME_SET));
 80090a0:	2209      	movs	r2, #9
 80090a2:	4910      	ldr	r1, [pc, #64]	; (80090e4 <rybg211_setDeviceName+0x58>)
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f95f 	bl	8009368 <memcpy>

	sprintf((char*)moduleBuffer, "%s%d%s%s%s",BLE_NAME_SET,
 80090aa:	7bfa      	ldrb	r2, [r7, #15]
 80090ac:	4b0e      	ldr	r3, [pc, #56]	; (80090e8 <rybg211_setDeviceName+0x5c>)
 80090ae:	9302      	str	r3, [sp, #8]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	4b0d      	ldr	r3, [pc, #52]	; (80090ec <rybg211_setDeviceName+0x60>)
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	4613      	mov	r3, r2
 80090ba:	4a0a      	ldr	r2, [pc, #40]	; (80090e4 <rybg211_setDeviceName+0x58>)
 80090bc:	490c      	ldr	r1, [pc, #48]	; (80090f0 <rybg211_setDeviceName+0x64>)
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f968 	bl	8009394 <siprintf>
										BLE_NEW_FIELD,
										nameString,
										BLE_CMD_TERM);


	hBleModule.txPacketSize = strlen((char*)moduleBuffer);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7f7 f88b 	bl	80001e0 <strlen>
 80090ca:	4603      	mov	r3, r0
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <rybg211_setDeviceName+0x68>)
 80090d0:	805a      	strh	r2, [r3, #2]

	hBleModule.controlFlags.flag.packetToTransmit = ENABLE;
 80090d2:	4a08      	ldr	r2, [pc, #32]	; (80090f4 <rybg211_setDeviceName+0x68>)
 80090d4:	7813      	ldrb	r3, [r2, #0]
 80090d6:	f043 0302 	orr.w	r3, r3, #2
 80090da:	7013      	strb	r3, [r2, #0]
}
 80090dc:	bf00      	nop
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	08009cc8 	.word	0x08009cc8
 80090e8:	08009ce0 	.word	0x08009ce0
 80090ec:	08009ce4 	.word	0x08009ce4
 80090f0:	08009cd4 	.word	0x08009cd4
 80090f4:	200020b0 	.word	0x200020b0

080090f8 <rybg211_rxPacketParser>:

uint8_t rybg211_rxPacketParser(char* moduleBuffer, uint8_t packetSize)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	460b      	mov	r3, r1
 8009102:	70fb      	strb	r3, [r7, #3]
	uint8_t packetToRead = false;
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]

	if(0 == memcmp(moduleBuffer, BLE_DATA_RX, BLE_PARSER_CHAR_COUNT))
 8009108:	2204      	movs	r2, #4
 800910a:	4919      	ldr	r1, [pc, #100]	; (8009170 <rybg211_rxPacketParser+0x78>)
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f91b 	bl	8009348 <memcmp>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d102      	bne.n	800911e <rybg211_rxPacketParser+0x26>
	{
		//Activation to read the data part of the received packet.
		packetToRead = true;
 8009118:	2301      	movs	r3, #1
 800911a:	73fb      	strb	r3, [r7, #15]
 800911c:	e023      	b.n	8009166 <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_CONNECTION,BLE_PARSER_CHAR_COUNT))
 800911e:	2204      	movs	r2, #4
 8009120:	4914      	ldr	r1, [pc, #80]	; (8009174 <rybg211_rxPacketParser+0x7c>)
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f910 	bl	8009348 <memcmp>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10a      	bne.n	8009144 <rybg211_rxPacketParser+0x4c>
	{
		hBleModule.ConnectedDevice = moduleBuffer[6];
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	799a      	ldrb	r2, [r3, #6]
 8009132:	4b11      	ldr	r3, [pc, #68]	; (8009178 <rybg211_rxPacketParser+0x80>)
 8009134:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 8009136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800913a:	2100      	movs	r1, #0
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f921 	bl	8009384 <memset>
 8009142:	e010      	b.n	8009166 <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_DISCONNECTION, BLE_PARSER_CHAR_COUNT))
 8009144:	2204      	movs	r2, #4
 8009146:	490d      	ldr	r1, [pc, #52]	; (800917c <rybg211_rxPacketParser+0x84>)
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f8fd 	bl	8009348 <memcmp>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d108      	bne.n	8009166 <rybg211_rxPacketParser+0x6e>
	{
		hBleModule.ConnectedDevice = 0;
 8009154:	4b08      	ldr	r3, [pc, #32]	; (8009178 <rybg211_rxPacketParser+0x80>)
 8009156:	2200      	movs	r2, #0
 8009158:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 800915a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800915e:	2100      	movs	r1, #0
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f90f 	bl	8009384 <memset>
	}

	return packetToRead;
 8009166:	7bfb      	ldrb	r3, [r7, #15]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	08009ce8 	.word	0x08009ce8
 8009174:	08009cf0 	.word	0x08009cf0
 8009178:	200020b0 	.word	0x200020b0
 800917c:	08009cf8 	.word	0x08009cf8

08009180 <asciiToValue>:
 * 						  stored in targetValue. the value stored in String won't be changed.
 *
 * @return	This function will return the number of found digits in the passed String.
 */
uint8_t asciiToValue(uint32_t* targetValue, uint8_t* String)
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
	uint8_t 	digitCount  = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	75fb      	strb	r3, [r7, #23]
	uint32_t 	tempValue 	= 0;
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]
	uint16_t 	tens 		= 0;
 8009192:	2300      	movs	r3, #0
 8009194:	81fb      	strh	r3, [r7, #14]
	//Count the number of digits in the string
	while(isdigit(String[digitCount]))
 8009196:	e002      	b.n	800919e <asciiToValue+0x1e>
	{
		++digitCount;
 8009198:	7dfb      	ldrb	r3, [r7, #23]
 800919a:	3301      	adds	r3, #1
 800919c:	75fb      	strb	r3, [r7, #23]
	while(isdigit(String[digitCount]))
 800919e:	7dfb      	ldrb	r3, [r7, #23]
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	4413      	add	r3, r2
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	3301      	adds	r3, #1
 80091a8:	4a26      	ldr	r2, [pc, #152]	; (8009244 <asciiToValue+0xc4>)
 80091aa:	4413      	add	r3, r2
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1f0      	bne.n	8009198 <asciiToValue+0x18>
	}
	//This check is done to prevent this function from execution if non alphanumeric string is passed to this function.
	if(0 != digitCount)
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d03c      	beq.n	8009236 <asciiToValue+0xb6>
	{
		//Operation fix
		digitCount -= 1;
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	3b01      	subs	r3, #1
 80091c0:	75fb      	strb	r3, [r7, #23]
		//determines the multiplications of tens
		tens = digitCount == ONE_DIGIT   ? 1   : tens;
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <asciiToValue+0x4c>
 80091c8:	89fb      	ldrh	r3, [r7, #14]
 80091ca:	e000      	b.n	80091ce <asciiToValue+0x4e>
 80091cc:	2301      	movs	r3, #1
 80091ce:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == TWO_DIGIT   ? 10  : tens;
 80091d0:	7dfb      	ldrb	r3, [r7, #23]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d001      	beq.n	80091da <asciiToValue+0x5a>
 80091d6:	89fb      	ldrh	r3, [r7, #14]
 80091d8:	e000      	b.n	80091dc <asciiToValue+0x5c>
 80091da:	230a      	movs	r3, #10
 80091dc:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == THREE_DIGIT ? 100 : tens;
 80091de:	7dfb      	ldrb	r3, [r7, #23]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d001      	beq.n	80091e8 <asciiToValue+0x68>
 80091e4:	89fb      	ldrh	r3, [r7, #14]
 80091e6:	e000      	b.n	80091ea <asciiToValue+0x6a>
 80091e8:	2364      	movs	r3, #100	; 0x64
 80091ea:	81fb      	strh	r3, [r7, #14]
		//Start calculating the integer value out of the passed digits
		for(int8_t i = 0; i <= digitCount; ++i)
 80091ec:	2300      	movs	r3, #0
 80091ee:	737b      	strb	r3, [r7, #13]
 80091f0:	e016      	b.n	8009220 <asciiToValue+0xa0>
		{
			tempValue = tempValue + ((String[i] - ASCII_STARTING_VALUE) * tens);
 80091f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	4413      	add	r3, r2
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	3b30      	subs	r3, #48	; 0x30
 80091fe:	89fa      	ldrh	r2, [r7, #14]
 8009200:	fb02 f303 	mul.w	r3, r2, r3
 8009204:	461a      	mov	r2, r3
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	4413      	add	r3, r2
 800920a:	613b      	str	r3, [r7, #16]
			tens = tens / 10;
 800920c:	89fb      	ldrh	r3, [r7, #14]
 800920e:	4a0e      	ldr	r2, [pc, #56]	; (8009248 <asciiToValue+0xc8>)
 8009210:	fba2 2303 	umull	r2, r3, r2, r3
 8009214:	08db      	lsrs	r3, r3, #3
 8009216:	81fb      	strh	r3, [r7, #14]
		for(int8_t i = 0; i <= digitCount; ++i)
 8009218:	7b7b      	ldrb	r3, [r7, #13]
 800921a:	3301      	adds	r3, #1
 800921c:	b2db      	uxtb	r3, r3
 800921e:	737b      	strb	r3, [r7, #13]
 8009220:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	429a      	cmp	r2, r3
 8009228:	dde3      	ble.n	80091f2 <asciiToValue+0x72>
		}
		//Pass the obtained integer value to targetValue that will be returned
		*targetValue = tempValue;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	601a      	str	r2, [r3, #0]
		//digitCount will carry the number of found digits in the String
		++digitCount;
 8009230:	7dfb      	ldrb	r3, [r7, #23]
 8009232:	3301      	adds	r3, #1
 8009234:	75fb      	strb	r3, [r7, #23]
	}
	return digitCount;
 8009236:	7dfb      	ldrb	r3, [r7, #23]
}
 8009238:	4618      	mov	r0, r3
 800923a:	371c      	adds	r7, #28
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	08009d3c 	.word	0x08009d3c
 8009248:	cccccccd 	.word	0xcccccccd

0800924c <rybg211_rxDataRead>:
 * @param moduleBuffer
 * @param targertBuffer
 * @return
 */
uint32_t rybg211_rxDataRead(char* moduleBuffer, char* targertBuffer)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
	//+1 is used to ignore the ',' from the received packet and jump directly to the data field.
	uint8_t dataPositionOffset = BLE_RX_SIZE_BYTE_POSITION + 1;
 8009256:	2308      	movs	r3, #8
 8009258:	73fb      	strb	r3, [r7, #15]

	uint32_t length = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	60bb      	str	r3, [r7, #8]
	//Convert the size from ASCII to integer format and obtain the number of digits to adjust the correct data positio.
	dataPositionOffset += asciiToValue(&length, (uint8_t*)moduleBuffer + BLE_RX_SIZE_BYTE_POSITION);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	1dda      	adds	r2, r3, #7
 8009262:	f107 0308 	add.w	r3, r7, #8
 8009266:	4611      	mov	r1, r2
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff ff89 	bl	8009180 <asciiToValue>
 800926e:	4603      	mov	r3, r0
 8009270:	461a      	mov	r2, r3
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	4413      	add	r3, r2
 8009276:	73fb      	strb	r3, [r7, #15]

	memcpy(targertBuffer, moduleBuffer + dataPositionOffset, length);
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	4413      	add	r3, r2
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	4619      	mov	r1, r3
 8009282:	6838      	ldr	r0, [r7, #0]
 8009284:	f000 f870 	bl	8009368 <memcpy>

	return length;
 8009288:	68bb      	ldr	r3, [r7, #8]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
	...

08009294 <rybg211_txDataSend>:

void  rybg211_txDataSend			(char* sourceBuffer, uint16_t packetSize)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af06      	add	r7, sp, #24
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	807b      	strh	r3, [r7, #2]

	sprintf((char*)hBleModule.txBuffer, "%s%c%s%d%s%s%s",BLE_DATA_SEND,
													hBleModule.ConnectedDevice,
 80092a0:	4b0e      	ldr	r3, [pc, #56]	; (80092dc <rybg211_txDataSend+0x48>)
 80092a2:	7d1b      	ldrb	r3, [r3, #20]
	sprintf((char*)hBleModule.txBuffer, "%s%c%s%d%s%s%s",BLE_DATA_SEND,
 80092a4:	4619      	mov	r1, r3
 80092a6:	887b      	ldrh	r3, [r7, #2]
 80092a8:	4a0d      	ldr	r2, [pc, #52]	; (80092e0 <rybg211_txDataSend+0x4c>)
 80092aa:	9204      	str	r2, [sp, #16]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	9203      	str	r2, [sp, #12]
 80092b0:	4a0c      	ldr	r2, [pc, #48]	; (80092e4 <rybg211_txDataSend+0x50>)
 80092b2:	9202      	str	r2, [sp, #8]
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	4b0b      	ldr	r3, [pc, #44]	; (80092e4 <rybg211_txDataSend+0x50>)
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	460b      	mov	r3, r1
 80092bc:	4a0a      	ldr	r2, [pc, #40]	; (80092e8 <rybg211_txDataSend+0x54>)
 80092be:	490b      	ldr	r1, [pc, #44]	; (80092ec <rybg211_txDataSend+0x58>)
 80092c0:	480b      	ldr	r0, [pc, #44]	; (80092f0 <rybg211_txDataSend+0x5c>)
 80092c2:	f000 f867 	bl	8009394 <siprintf>
													packetSize,
													BLE_NEW_FIELD,
													sourceBuffer,
													BLE_CMD_TERM);

	hBleModule.txPacketSize = strlen(hBleModule.txBuffer);
 80092c6:	480a      	ldr	r0, [pc, #40]	; (80092f0 <rybg211_txDataSend+0x5c>)
 80092c8:	f7f6 ff8a 	bl	80001e0 <strlen>
 80092cc:	4603      	mov	r3, r0
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	4b02      	ldr	r3, [pc, #8]	; (80092dc <rybg211_txDataSend+0x48>)
 80092d2:	805a      	strh	r2, [r3, #2]
}
 80092d4:	bf00      	nop
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	200020b0 	.word	0x200020b0
 80092e0:	08009ce0 	.word	0x08009ce0
 80092e4:	08009ce4 	.word	0x08009ce4
 80092e8:	08009d00 	.word	0x08009d00
 80092ec:	08009d0c 	.word	0x08009d0c
 80092f0:	200020c5 	.word	0x200020c5

080092f4 <__errno>:
 80092f4:	4b01      	ldr	r3, [pc, #4]	; (80092fc <__errno+0x8>)
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	200000fc 	.word	0x200000fc

08009300 <__libc_init_array>:
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	4d0d      	ldr	r5, [pc, #52]	; (8009338 <__libc_init_array+0x38>)
 8009304:	4c0d      	ldr	r4, [pc, #52]	; (800933c <__libc_init_array+0x3c>)
 8009306:	1b64      	subs	r4, r4, r5
 8009308:	10a4      	asrs	r4, r4, #2
 800930a:	2600      	movs	r6, #0
 800930c:	42a6      	cmp	r6, r4
 800930e:	d109      	bne.n	8009324 <__libc_init_array+0x24>
 8009310:	4d0b      	ldr	r5, [pc, #44]	; (8009340 <__libc_init_array+0x40>)
 8009312:	4c0c      	ldr	r4, [pc, #48]	; (8009344 <__libc_init_array+0x44>)
 8009314:	f000 fc9e 	bl	8009c54 <_init>
 8009318:	1b64      	subs	r4, r4, r5
 800931a:	10a4      	asrs	r4, r4, #2
 800931c:	2600      	movs	r6, #0
 800931e:	42a6      	cmp	r6, r4
 8009320:	d105      	bne.n	800932e <__libc_init_array+0x2e>
 8009322:	bd70      	pop	{r4, r5, r6, pc}
 8009324:	f855 3b04 	ldr.w	r3, [r5], #4
 8009328:	4798      	blx	r3
 800932a:	3601      	adds	r6, #1
 800932c:	e7ee      	b.n	800930c <__libc_init_array+0xc>
 800932e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009332:	4798      	blx	r3
 8009334:	3601      	adds	r6, #1
 8009336:	e7f2      	b.n	800931e <__libc_init_array+0x1e>
 8009338:	08009e78 	.word	0x08009e78
 800933c:	08009e78 	.word	0x08009e78
 8009340:	08009e78 	.word	0x08009e78
 8009344:	08009e7c 	.word	0x08009e7c

08009348 <memcmp>:
 8009348:	b510      	push	{r4, lr}
 800934a:	3901      	subs	r1, #1
 800934c:	4402      	add	r2, r0
 800934e:	4290      	cmp	r0, r2
 8009350:	d101      	bne.n	8009356 <memcmp+0xe>
 8009352:	2000      	movs	r0, #0
 8009354:	e005      	b.n	8009362 <memcmp+0x1a>
 8009356:	7803      	ldrb	r3, [r0, #0]
 8009358:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800935c:	42a3      	cmp	r3, r4
 800935e:	d001      	beq.n	8009364 <memcmp+0x1c>
 8009360:	1b18      	subs	r0, r3, r4
 8009362:	bd10      	pop	{r4, pc}
 8009364:	3001      	adds	r0, #1
 8009366:	e7f2      	b.n	800934e <memcmp+0x6>

08009368 <memcpy>:
 8009368:	440a      	add	r2, r1
 800936a:	4291      	cmp	r1, r2
 800936c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009370:	d100      	bne.n	8009374 <memcpy+0xc>
 8009372:	4770      	bx	lr
 8009374:	b510      	push	{r4, lr}
 8009376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800937e:	4291      	cmp	r1, r2
 8009380:	d1f9      	bne.n	8009376 <memcpy+0xe>
 8009382:	bd10      	pop	{r4, pc}

08009384 <memset>:
 8009384:	4402      	add	r2, r0
 8009386:	4603      	mov	r3, r0
 8009388:	4293      	cmp	r3, r2
 800938a:	d100      	bne.n	800938e <memset+0xa>
 800938c:	4770      	bx	lr
 800938e:	f803 1b01 	strb.w	r1, [r3], #1
 8009392:	e7f9      	b.n	8009388 <memset+0x4>

08009394 <siprintf>:
 8009394:	b40e      	push	{r1, r2, r3}
 8009396:	b500      	push	{lr}
 8009398:	b09c      	sub	sp, #112	; 0x70
 800939a:	ab1d      	add	r3, sp, #116	; 0x74
 800939c:	9002      	str	r0, [sp, #8]
 800939e:	9006      	str	r0, [sp, #24]
 80093a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093a4:	4809      	ldr	r0, [pc, #36]	; (80093cc <siprintf+0x38>)
 80093a6:	9107      	str	r1, [sp, #28]
 80093a8:	9104      	str	r1, [sp, #16]
 80093aa:	4909      	ldr	r1, [pc, #36]	; (80093d0 <siprintf+0x3c>)
 80093ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b0:	9105      	str	r1, [sp, #20]
 80093b2:	6800      	ldr	r0, [r0, #0]
 80093b4:	9301      	str	r3, [sp, #4]
 80093b6:	a902      	add	r1, sp, #8
 80093b8:	f000 f868 	bl	800948c <_svfiprintf_r>
 80093bc:	9b02      	ldr	r3, [sp, #8]
 80093be:	2200      	movs	r2, #0
 80093c0:	701a      	strb	r2, [r3, #0]
 80093c2:	b01c      	add	sp, #112	; 0x70
 80093c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093c8:	b003      	add	sp, #12
 80093ca:	4770      	bx	lr
 80093cc:	200000fc 	.word	0x200000fc
 80093d0:	ffff0208 	.word	0xffff0208

080093d4 <__ssputs_r>:
 80093d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	688e      	ldr	r6, [r1, #8]
 80093da:	429e      	cmp	r6, r3
 80093dc:	4682      	mov	sl, r0
 80093de:	460c      	mov	r4, r1
 80093e0:	4690      	mov	r8, r2
 80093e2:	461f      	mov	r7, r3
 80093e4:	d838      	bhi.n	8009458 <__ssputs_r+0x84>
 80093e6:	898a      	ldrh	r2, [r1, #12]
 80093e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093ec:	d032      	beq.n	8009454 <__ssputs_r+0x80>
 80093ee:	6825      	ldr	r5, [r4, #0]
 80093f0:	6909      	ldr	r1, [r1, #16]
 80093f2:	eba5 0901 	sub.w	r9, r5, r1
 80093f6:	6965      	ldr	r5, [r4, #20]
 80093f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009400:	3301      	adds	r3, #1
 8009402:	444b      	add	r3, r9
 8009404:	106d      	asrs	r5, r5, #1
 8009406:	429d      	cmp	r5, r3
 8009408:	bf38      	it	cc
 800940a:	461d      	movcc	r5, r3
 800940c:	0553      	lsls	r3, r2, #21
 800940e:	d531      	bpl.n	8009474 <__ssputs_r+0xa0>
 8009410:	4629      	mov	r1, r5
 8009412:	f000 fb55 	bl	8009ac0 <_malloc_r>
 8009416:	4606      	mov	r6, r0
 8009418:	b950      	cbnz	r0, 8009430 <__ssputs_r+0x5c>
 800941a:	230c      	movs	r3, #12
 800941c:	f8ca 3000 	str.w	r3, [sl]
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009426:	81a3      	strh	r3, [r4, #12]
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009430:	6921      	ldr	r1, [r4, #16]
 8009432:	464a      	mov	r2, r9
 8009434:	f7ff ff98 	bl	8009368 <memcpy>
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800943e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009442:	81a3      	strh	r3, [r4, #12]
 8009444:	6126      	str	r6, [r4, #16]
 8009446:	6165      	str	r5, [r4, #20]
 8009448:	444e      	add	r6, r9
 800944a:	eba5 0509 	sub.w	r5, r5, r9
 800944e:	6026      	str	r6, [r4, #0]
 8009450:	60a5      	str	r5, [r4, #8]
 8009452:	463e      	mov	r6, r7
 8009454:	42be      	cmp	r6, r7
 8009456:	d900      	bls.n	800945a <__ssputs_r+0x86>
 8009458:	463e      	mov	r6, r7
 800945a:	6820      	ldr	r0, [r4, #0]
 800945c:	4632      	mov	r2, r6
 800945e:	4641      	mov	r1, r8
 8009460:	f000 faa8 	bl	80099b4 <memmove>
 8009464:	68a3      	ldr	r3, [r4, #8]
 8009466:	1b9b      	subs	r3, r3, r6
 8009468:	60a3      	str	r3, [r4, #8]
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	4433      	add	r3, r6
 800946e:	6023      	str	r3, [r4, #0]
 8009470:	2000      	movs	r0, #0
 8009472:	e7db      	b.n	800942c <__ssputs_r+0x58>
 8009474:	462a      	mov	r2, r5
 8009476:	f000 fb97 	bl	8009ba8 <_realloc_r>
 800947a:	4606      	mov	r6, r0
 800947c:	2800      	cmp	r0, #0
 800947e:	d1e1      	bne.n	8009444 <__ssputs_r+0x70>
 8009480:	6921      	ldr	r1, [r4, #16]
 8009482:	4650      	mov	r0, sl
 8009484:	f000 fab0 	bl	80099e8 <_free_r>
 8009488:	e7c7      	b.n	800941a <__ssputs_r+0x46>
	...

0800948c <_svfiprintf_r>:
 800948c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009490:	4698      	mov	r8, r3
 8009492:	898b      	ldrh	r3, [r1, #12]
 8009494:	061b      	lsls	r3, r3, #24
 8009496:	b09d      	sub	sp, #116	; 0x74
 8009498:	4607      	mov	r7, r0
 800949a:	460d      	mov	r5, r1
 800949c:	4614      	mov	r4, r2
 800949e:	d50e      	bpl.n	80094be <_svfiprintf_r+0x32>
 80094a0:	690b      	ldr	r3, [r1, #16]
 80094a2:	b963      	cbnz	r3, 80094be <_svfiprintf_r+0x32>
 80094a4:	2140      	movs	r1, #64	; 0x40
 80094a6:	f000 fb0b 	bl	8009ac0 <_malloc_r>
 80094aa:	6028      	str	r0, [r5, #0]
 80094ac:	6128      	str	r0, [r5, #16]
 80094ae:	b920      	cbnz	r0, 80094ba <_svfiprintf_r+0x2e>
 80094b0:	230c      	movs	r3, #12
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295
 80094b8:	e0d1      	b.n	800965e <_svfiprintf_r+0x1d2>
 80094ba:	2340      	movs	r3, #64	; 0x40
 80094bc:	616b      	str	r3, [r5, #20]
 80094be:	2300      	movs	r3, #0
 80094c0:	9309      	str	r3, [sp, #36]	; 0x24
 80094c2:	2320      	movs	r3, #32
 80094c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80094cc:	2330      	movs	r3, #48	; 0x30
 80094ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009678 <_svfiprintf_r+0x1ec>
 80094d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094d6:	f04f 0901 	mov.w	r9, #1
 80094da:	4623      	mov	r3, r4
 80094dc:	469a      	mov	sl, r3
 80094de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094e2:	b10a      	cbz	r2, 80094e8 <_svfiprintf_r+0x5c>
 80094e4:	2a25      	cmp	r2, #37	; 0x25
 80094e6:	d1f9      	bne.n	80094dc <_svfiprintf_r+0x50>
 80094e8:	ebba 0b04 	subs.w	fp, sl, r4
 80094ec:	d00b      	beq.n	8009506 <_svfiprintf_r+0x7a>
 80094ee:	465b      	mov	r3, fp
 80094f0:	4622      	mov	r2, r4
 80094f2:	4629      	mov	r1, r5
 80094f4:	4638      	mov	r0, r7
 80094f6:	f7ff ff6d 	bl	80093d4 <__ssputs_r>
 80094fa:	3001      	adds	r0, #1
 80094fc:	f000 80aa 	beq.w	8009654 <_svfiprintf_r+0x1c8>
 8009500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009502:	445a      	add	r2, fp
 8009504:	9209      	str	r2, [sp, #36]	; 0x24
 8009506:	f89a 3000 	ldrb.w	r3, [sl]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 80a2 	beq.w	8009654 <_svfiprintf_r+0x1c8>
 8009510:	2300      	movs	r3, #0
 8009512:	f04f 32ff 	mov.w	r2, #4294967295
 8009516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800951a:	f10a 0a01 	add.w	sl, sl, #1
 800951e:	9304      	str	r3, [sp, #16]
 8009520:	9307      	str	r3, [sp, #28]
 8009522:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009526:	931a      	str	r3, [sp, #104]	; 0x68
 8009528:	4654      	mov	r4, sl
 800952a:	2205      	movs	r2, #5
 800952c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009530:	4851      	ldr	r0, [pc, #324]	; (8009678 <_svfiprintf_r+0x1ec>)
 8009532:	f7f6 fe5d 	bl	80001f0 <memchr>
 8009536:	9a04      	ldr	r2, [sp, #16]
 8009538:	b9d8      	cbnz	r0, 8009572 <_svfiprintf_r+0xe6>
 800953a:	06d0      	lsls	r0, r2, #27
 800953c:	bf44      	itt	mi
 800953e:	2320      	movmi	r3, #32
 8009540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009544:	0711      	lsls	r1, r2, #28
 8009546:	bf44      	itt	mi
 8009548:	232b      	movmi	r3, #43	; 0x2b
 800954a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800954e:	f89a 3000 	ldrb.w	r3, [sl]
 8009552:	2b2a      	cmp	r3, #42	; 0x2a
 8009554:	d015      	beq.n	8009582 <_svfiprintf_r+0xf6>
 8009556:	9a07      	ldr	r2, [sp, #28]
 8009558:	4654      	mov	r4, sl
 800955a:	2000      	movs	r0, #0
 800955c:	f04f 0c0a 	mov.w	ip, #10
 8009560:	4621      	mov	r1, r4
 8009562:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009566:	3b30      	subs	r3, #48	; 0x30
 8009568:	2b09      	cmp	r3, #9
 800956a:	d94e      	bls.n	800960a <_svfiprintf_r+0x17e>
 800956c:	b1b0      	cbz	r0, 800959c <_svfiprintf_r+0x110>
 800956e:	9207      	str	r2, [sp, #28]
 8009570:	e014      	b.n	800959c <_svfiprintf_r+0x110>
 8009572:	eba0 0308 	sub.w	r3, r0, r8
 8009576:	fa09 f303 	lsl.w	r3, r9, r3
 800957a:	4313      	orrs	r3, r2
 800957c:	9304      	str	r3, [sp, #16]
 800957e:	46a2      	mov	sl, r4
 8009580:	e7d2      	b.n	8009528 <_svfiprintf_r+0x9c>
 8009582:	9b03      	ldr	r3, [sp, #12]
 8009584:	1d19      	adds	r1, r3, #4
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	9103      	str	r1, [sp, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	bfbb      	ittet	lt
 800958e:	425b      	neglt	r3, r3
 8009590:	f042 0202 	orrlt.w	r2, r2, #2
 8009594:	9307      	strge	r3, [sp, #28]
 8009596:	9307      	strlt	r3, [sp, #28]
 8009598:	bfb8      	it	lt
 800959a:	9204      	strlt	r2, [sp, #16]
 800959c:	7823      	ldrb	r3, [r4, #0]
 800959e:	2b2e      	cmp	r3, #46	; 0x2e
 80095a0:	d10c      	bne.n	80095bc <_svfiprintf_r+0x130>
 80095a2:	7863      	ldrb	r3, [r4, #1]
 80095a4:	2b2a      	cmp	r3, #42	; 0x2a
 80095a6:	d135      	bne.n	8009614 <_svfiprintf_r+0x188>
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	1d1a      	adds	r2, r3, #4
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	9203      	str	r2, [sp, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	bfb8      	it	lt
 80095b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80095b8:	3402      	adds	r4, #2
 80095ba:	9305      	str	r3, [sp, #20]
 80095bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009688 <_svfiprintf_r+0x1fc>
 80095c0:	7821      	ldrb	r1, [r4, #0]
 80095c2:	2203      	movs	r2, #3
 80095c4:	4650      	mov	r0, sl
 80095c6:	f7f6 fe13 	bl	80001f0 <memchr>
 80095ca:	b140      	cbz	r0, 80095de <_svfiprintf_r+0x152>
 80095cc:	2340      	movs	r3, #64	; 0x40
 80095ce:	eba0 000a 	sub.w	r0, r0, sl
 80095d2:	fa03 f000 	lsl.w	r0, r3, r0
 80095d6:	9b04      	ldr	r3, [sp, #16]
 80095d8:	4303      	orrs	r3, r0
 80095da:	3401      	adds	r4, #1
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e2:	4826      	ldr	r0, [pc, #152]	; (800967c <_svfiprintf_r+0x1f0>)
 80095e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095e8:	2206      	movs	r2, #6
 80095ea:	f7f6 fe01 	bl	80001f0 <memchr>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d038      	beq.n	8009664 <_svfiprintf_r+0x1d8>
 80095f2:	4b23      	ldr	r3, [pc, #140]	; (8009680 <_svfiprintf_r+0x1f4>)
 80095f4:	bb1b      	cbnz	r3, 800963e <_svfiprintf_r+0x1b2>
 80095f6:	9b03      	ldr	r3, [sp, #12]
 80095f8:	3307      	adds	r3, #7
 80095fa:	f023 0307 	bic.w	r3, r3, #7
 80095fe:	3308      	adds	r3, #8
 8009600:	9303      	str	r3, [sp, #12]
 8009602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009604:	4433      	add	r3, r6
 8009606:	9309      	str	r3, [sp, #36]	; 0x24
 8009608:	e767      	b.n	80094da <_svfiprintf_r+0x4e>
 800960a:	fb0c 3202 	mla	r2, ip, r2, r3
 800960e:	460c      	mov	r4, r1
 8009610:	2001      	movs	r0, #1
 8009612:	e7a5      	b.n	8009560 <_svfiprintf_r+0xd4>
 8009614:	2300      	movs	r3, #0
 8009616:	3401      	adds	r4, #1
 8009618:	9305      	str	r3, [sp, #20]
 800961a:	4619      	mov	r1, r3
 800961c:	f04f 0c0a 	mov.w	ip, #10
 8009620:	4620      	mov	r0, r4
 8009622:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009626:	3a30      	subs	r2, #48	; 0x30
 8009628:	2a09      	cmp	r2, #9
 800962a:	d903      	bls.n	8009634 <_svfiprintf_r+0x1a8>
 800962c:	2b00      	cmp	r3, #0
 800962e:	d0c5      	beq.n	80095bc <_svfiprintf_r+0x130>
 8009630:	9105      	str	r1, [sp, #20]
 8009632:	e7c3      	b.n	80095bc <_svfiprintf_r+0x130>
 8009634:	fb0c 2101 	mla	r1, ip, r1, r2
 8009638:	4604      	mov	r4, r0
 800963a:	2301      	movs	r3, #1
 800963c:	e7f0      	b.n	8009620 <_svfiprintf_r+0x194>
 800963e:	ab03      	add	r3, sp, #12
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	462a      	mov	r2, r5
 8009644:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <_svfiprintf_r+0x1f8>)
 8009646:	a904      	add	r1, sp, #16
 8009648:	4638      	mov	r0, r7
 800964a:	f3af 8000 	nop.w
 800964e:	1c42      	adds	r2, r0, #1
 8009650:	4606      	mov	r6, r0
 8009652:	d1d6      	bne.n	8009602 <_svfiprintf_r+0x176>
 8009654:	89ab      	ldrh	r3, [r5, #12]
 8009656:	065b      	lsls	r3, r3, #25
 8009658:	f53f af2c 	bmi.w	80094b4 <_svfiprintf_r+0x28>
 800965c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800965e:	b01d      	add	sp, #116	; 0x74
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	ab03      	add	r3, sp, #12
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	462a      	mov	r2, r5
 800966a:	4b06      	ldr	r3, [pc, #24]	; (8009684 <_svfiprintf_r+0x1f8>)
 800966c:	a904      	add	r1, sp, #16
 800966e:	4638      	mov	r0, r7
 8009670:	f000 f87a 	bl	8009768 <_printf_i>
 8009674:	e7eb      	b.n	800964e <_svfiprintf_r+0x1c2>
 8009676:	bf00      	nop
 8009678:	08009e3d 	.word	0x08009e3d
 800967c:	08009e47 	.word	0x08009e47
 8009680:	00000000 	.word	0x00000000
 8009684:	080093d5 	.word	0x080093d5
 8009688:	08009e43 	.word	0x08009e43

0800968c <_printf_common>:
 800968c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009690:	4616      	mov	r6, r2
 8009692:	4699      	mov	r9, r3
 8009694:	688a      	ldr	r2, [r1, #8]
 8009696:	690b      	ldr	r3, [r1, #16]
 8009698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800969c:	4293      	cmp	r3, r2
 800969e:	bfb8      	it	lt
 80096a0:	4613      	movlt	r3, r2
 80096a2:	6033      	str	r3, [r6, #0]
 80096a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096a8:	4607      	mov	r7, r0
 80096aa:	460c      	mov	r4, r1
 80096ac:	b10a      	cbz	r2, 80096b2 <_printf_common+0x26>
 80096ae:	3301      	adds	r3, #1
 80096b0:	6033      	str	r3, [r6, #0]
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	0699      	lsls	r1, r3, #26
 80096b6:	bf42      	ittt	mi
 80096b8:	6833      	ldrmi	r3, [r6, #0]
 80096ba:	3302      	addmi	r3, #2
 80096bc:	6033      	strmi	r3, [r6, #0]
 80096be:	6825      	ldr	r5, [r4, #0]
 80096c0:	f015 0506 	ands.w	r5, r5, #6
 80096c4:	d106      	bne.n	80096d4 <_printf_common+0x48>
 80096c6:	f104 0a19 	add.w	sl, r4, #25
 80096ca:	68e3      	ldr	r3, [r4, #12]
 80096cc:	6832      	ldr	r2, [r6, #0]
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	dc26      	bgt.n	8009722 <_printf_common+0x96>
 80096d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096d8:	1e13      	subs	r3, r2, #0
 80096da:	6822      	ldr	r2, [r4, #0]
 80096dc:	bf18      	it	ne
 80096de:	2301      	movne	r3, #1
 80096e0:	0692      	lsls	r2, r2, #26
 80096e2:	d42b      	bmi.n	800973c <_printf_common+0xb0>
 80096e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096e8:	4649      	mov	r1, r9
 80096ea:	4638      	mov	r0, r7
 80096ec:	47c0      	blx	r8
 80096ee:	3001      	adds	r0, #1
 80096f0:	d01e      	beq.n	8009730 <_printf_common+0xa4>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	68e5      	ldr	r5, [r4, #12]
 80096f6:	6832      	ldr	r2, [r6, #0]
 80096f8:	f003 0306 	and.w	r3, r3, #6
 80096fc:	2b04      	cmp	r3, #4
 80096fe:	bf08      	it	eq
 8009700:	1aad      	subeq	r5, r5, r2
 8009702:	68a3      	ldr	r3, [r4, #8]
 8009704:	6922      	ldr	r2, [r4, #16]
 8009706:	bf0c      	ite	eq
 8009708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800970c:	2500      	movne	r5, #0
 800970e:	4293      	cmp	r3, r2
 8009710:	bfc4      	itt	gt
 8009712:	1a9b      	subgt	r3, r3, r2
 8009714:	18ed      	addgt	r5, r5, r3
 8009716:	2600      	movs	r6, #0
 8009718:	341a      	adds	r4, #26
 800971a:	42b5      	cmp	r5, r6
 800971c:	d11a      	bne.n	8009754 <_printf_common+0xc8>
 800971e:	2000      	movs	r0, #0
 8009720:	e008      	b.n	8009734 <_printf_common+0xa8>
 8009722:	2301      	movs	r3, #1
 8009724:	4652      	mov	r2, sl
 8009726:	4649      	mov	r1, r9
 8009728:	4638      	mov	r0, r7
 800972a:	47c0      	blx	r8
 800972c:	3001      	adds	r0, #1
 800972e:	d103      	bne.n	8009738 <_printf_common+0xac>
 8009730:	f04f 30ff 	mov.w	r0, #4294967295
 8009734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009738:	3501      	adds	r5, #1
 800973a:	e7c6      	b.n	80096ca <_printf_common+0x3e>
 800973c:	18e1      	adds	r1, r4, r3
 800973e:	1c5a      	adds	r2, r3, #1
 8009740:	2030      	movs	r0, #48	; 0x30
 8009742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009746:	4422      	add	r2, r4
 8009748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800974c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009750:	3302      	adds	r3, #2
 8009752:	e7c7      	b.n	80096e4 <_printf_common+0x58>
 8009754:	2301      	movs	r3, #1
 8009756:	4622      	mov	r2, r4
 8009758:	4649      	mov	r1, r9
 800975a:	4638      	mov	r0, r7
 800975c:	47c0      	blx	r8
 800975e:	3001      	adds	r0, #1
 8009760:	d0e6      	beq.n	8009730 <_printf_common+0xa4>
 8009762:	3601      	adds	r6, #1
 8009764:	e7d9      	b.n	800971a <_printf_common+0x8e>
	...

08009768 <_printf_i>:
 8009768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800976c:	7e0f      	ldrb	r7, [r1, #24]
 800976e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009770:	2f78      	cmp	r7, #120	; 0x78
 8009772:	4691      	mov	r9, r2
 8009774:	4680      	mov	r8, r0
 8009776:	460c      	mov	r4, r1
 8009778:	469a      	mov	sl, r3
 800977a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800977e:	d807      	bhi.n	8009790 <_printf_i+0x28>
 8009780:	2f62      	cmp	r7, #98	; 0x62
 8009782:	d80a      	bhi.n	800979a <_printf_i+0x32>
 8009784:	2f00      	cmp	r7, #0
 8009786:	f000 80d8 	beq.w	800993a <_printf_i+0x1d2>
 800978a:	2f58      	cmp	r7, #88	; 0x58
 800978c:	f000 80a3 	beq.w	80098d6 <_printf_i+0x16e>
 8009790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009798:	e03a      	b.n	8009810 <_printf_i+0xa8>
 800979a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800979e:	2b15      	cmp	r3, #21
 80097a0:	d8f6      	bhi.n	8009790 <_printf_i+0x28>
 80097a2:	a101      	add	r1, pc, #4	; (adr r1, 80097a8 <_printf_i+0x40>)
 80097a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097a8:	08009801 	.word	0x08009801
 80097ac:	08009815 	.word	0x08009815
 80097b0:	08009791 	.word	0x08009791
 80097b4:	08009791 	.word	0x08009791
 80097b8:	08009791 	.word	0x08009791
 80097bc:	08009791 	.word	0x08009791
 80097c0:	08009815 	.word	0x08009815
 80097c4:	08009791 	.word	0x08009791
 80097c8:	08009791 	.word	0x08009791
 80097cc:	08009791 	.word	0x08009791
 80097d0:	08009791 	.word	0x08009791
 80097d4:	08009921 	.word	0x08009921
 80097d8:	08009845 	.word	0x08009845
 80097dc:	08009903 	.word	0x08009903
 80097e0:	08009791 	.word	0x08009791
 80097e4:	08009791 	.word	0x08009791
 80097e8:	08009943 	.word	0x08009943
 80097ec:	08009791 	.word	0x08009791
 80097f0:	08009845 	.word	0x08009845
 80097f4:	08009791 	.word	0x08009791
 80097f8:	08009791 	.word	0x08009791
 80097fc:	0800990b 	.word	0x0800990b
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	1d1a      	adds	r2, r3, #4
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	602a      	str	r2, [r5, #0]
 8009808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800980c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009810:	2301      	movs	r3, #1
 8009812:	e0a3      	b.n	800995c <_printf_i+0x1f4>
 8009814:	6820      	ldr	r0, [r4, #0]
 8009816:	6829      	ldr	r1, [r5, #0]
 8009818:	0606      	lsls	r6, r0, #24
 800981a:	f101 0304 	add.w	r3, r1, #4
 800981e:	d50a      	bpl.n	8009836 <_printf_i+0xce>
 8009820:	680e      	ldr	r6, [r1, #0]
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	2e00      	cmp	r6, #0
 8009826:	da03      	bge.n	8009830 <_printf_i+0xc8>
 8009828:	232d      	movs	r3, #45	; 0x2d
 800982a:	4276      	negs	r6, r6
 800982c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009830:	485e      	ldr	r0, [pc, #376]	; (80099ac <_printf_i+0x244>)
 8009832:	230a      	movs	r3, #10
 8009834:	e019      	b.n	800986a <_printf_i+0x102>
 8009836:	680e      	ldr	r6, [r1, #0]
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800983e:	bf18      	it	ne
 8009840:	b236      	sxthne	r6, r6
 8009842:	e7ef      	b.n	8009824 <_printf_i+0xbc>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	6820      	ldr	r0, [r4, #0]
 8009848:	1d19      	adds	r1, r3, #4
 800984a:	6029      	str	r1, [r5, #0]
 800984c:	0601      	lsls	r1, r0, #24
 800984e:	d501      	bpl.n	8009854 <_printf_i+0xec>
 8009850:	681e      	ldr	r6, [r3, #0]
 8009852:	e002      	b.n	800985a <_printf_i+0xf2>
 8009854:	0646      	lsls	r6, r0, #25
 8009856:	d5fb      	bpl.n	8009850 <_printf_i+0xe8>
 8009858:	881e      	ldrh	r6, [r3, #0]
 800985a:	4854      	ldr	r0, [pc, #336]	; (80099ac <_printf_i+0x244>)
 800985c:	2f6f      	cmp	r7, #111	; 0x6f
 800985e:	bf0c      	ite	eq
 8009860:	2308      	moveq	r3, #8
 8009862:	230a      	movne	r3, #10
 8009864:	2100      	movs	r1, #0
 8009866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800986a:	6865      	ldr	r5, [r4, #4]
 800986c:	60a5      	str	r5, [r4, #8]
 800986e:	2d00      	cmp	r5, #0
 8009870:	bfa2      	ittt	ge
 8009872:	6821      	ldrge	r1, [r4, #0]
 8009874:	f021 0104 	bicge.w	r1, r1, #4
 8009878:	6021      	strge	r1, [r4, #0]
 800987a:	b90e      	cbnz	r6, 8009880 <_printf_i+0x118>
 800987c:	2d00      	cmp	r5, #0
 800987e:	d04d      	beq.n	800991c <_printf_i+0x1b4>
 8009880:	4615      	mov	r5, r2
 8009882:	fbb6 f1f3 	udiv	r1, r6, r3
 8009886:	fb03 6711 	mls	r7, r3, r1, r6
 800988a:	5dc7      	ldrb	r7, [r0, r7]
 800988c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009890:	4637      	mov	r7, r6
 8009892:	42bb      	cmp	r3, r7
 8009894:	460e      	mov	r6, r1
 8009896:	d9f4      	bls.n	8009882 <_printf_i+0x11a>
 8009898:	2b08      	cmp	r3, #8
 800989a:	d10b      	bne.n	80098b4 <_printf_i+0x14c>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	07de      	lsls	r6, r3, #31
 80098a0:	d508      	bpl.n	80098b4 <_printf_i+0x14c>
 80098a2:	6923      	ldr	r3, [r4, #16]
 80098a4:	6861      	ldr	r1, [r4, #4]
 80098a6:	4299      	cmp	r1, r3
 80098a8:	bfde      	ittt	le
 80098aa:	2330      	movle	r3, #48	; 0x30
 80098ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098b4:	1b52      	subs	r2, r2, r5
 80098b6:	6122      	str	r2, [r4, #16]
 80098b8:	f8cd a000 	str.w	sl, [sp]
 80098bc:	464b      	mov	r3, r9
 80098be:	aa03      	add	r2, sp, #12
 80098c0:	4621      	mov	r1, r4
 80098c2:	4640      	mov	r0, r8
 80098c4:	f7ff fee2 	bl	800968c <_printf_common>
 80098c8:	3001      	adds	r0, #1
 80098ca:	d14c      	bne.n	8009966 <_printf_i+0x1fe>
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295
 80098d0:	b004      	add	sp, #16
 80098d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d6:	4835      	ldr	r0, [pc, #212]	; (80099ac <_printf_i+0x244>)
 80098d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098dc:	6829      	ldr	r1, [r5, #0]
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80098e4:	6029      	str	r1, [r5, #0]
 80098e6:	061d      	lsls	r5, r3, #24
 80098e8:	d514      	bpl.n	8009914 <_printf_i+0x1ac>
 80098ea:	07df      	lsls	r7, r3, #31
 80098ec:	bf44      	itt	mi
 80098ee:	f043 0320 	orrmi.w	r3, r3, #32
 80098f2:	6023      	strmi	r3, [r4, #0]
 80098f4:	b91e      	cbnz	r6, 80098fe <_printf_i+0x196>
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	f023 0320 	bic.w	r3, r3, #32
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	2310      	movs	r3, #16
 8009900:	e7b0      	b.n	8009864 <_printf_i+0xfc>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	f043 0320 	orr.w	r3, r3, #32
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	2378      	movs	r3, #120	; 0x78
 800990c:	4828      	ldr	r0, [pc, #160]	; (80099b0 <_printf_i+0x248>)
 800990e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009912:	e7e3      	b.n	80098dc <_printf_i+0x174>
 8009914:	0659      	lsls	r1, r3, #25
 8009916:	bf48      	it	mi
 8009918:	b2b6      	uxthmi	r6, r6
 800991a:	e7e6      	b.n	80098ea <_printf_i+0x182>
 800991c:	4615      	mov	r5, r2
 800991e:	e7bb      	b.n	8009898 <_printf_i+0x130>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	6826      	ldr	r6, [r4, #0]
 8009924:	6961      	ldr	r1, [r4, #20]
 8009926:	1d18      	adds	r0, r3, #4
 8009928:	6028      	str	r0, [r5, #0]
 800992a:	0635      	lsls	r5, r6, #24
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	d501      	bpl.n	8009934 <_printf_i+0x1cc>
 8009930:	6019      	str	r1, [r3, #0]
 8009932:	e002      	b.n	800993a <_printf_i+0x1d2>
 8009934:	0670      	lsls	r0, r6, #25
 8009936:	d5fb      	bpl.n	8009930 <_printf_i+0x1c8>
 8009938:	8019      	strh	r1, [r3, #0]
 800993a:	2300      	movs	r3, #0
 800993c:	6123      	str	r3, [r4, #16]
 800993e:	4615      	mov	r5, r2
 8009940:	e7ba      	b.n	80098b8 <_printf_i+0x150>
 8009942:	682b      	ldr	r3, [r5, #0]
 8009944:	1d1a      	adds	r2, r3, #4
 8009946:	602a      	str	r2, [r5, #0]
 8009948:	681d      	ldr	r5, [r3, #0]
 800994a:	6862      	ldr	r2, [r4, #4]
 800994c:	2100      	movs	r1, #0
 800994e:	4628      	mov	r0, r5
 8009950:	f7f6 fc4e 	bl	80001f0 <memchr>
 8009954:	b108      	cbz	r0, 800995a <_printf_i+0x1f2>
 8009956:	1b40      	subs	r0, r0, r5
 8009958:	6060      	str	r0, [r4, #4]
 800995a:	6863      	ldr	r3, [r4, #4]
 800995c:	6123      	str	r3, [r4, #16]
 800995e:	2300      	movs	r3, #0
 8009960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009964:	e7a8      	b.n	80098b8 <_printf_i+0x150>
 8009966:	6923      	ldr	r3, [r4, #16]
 8009968:	462a      	mov	r2, r5
 800996a:	4649      	mov	r1, r9
 800996c:	4640      	mov	r0, r8
 800996e:	47d0      	blx	sl
 8009970:	3001      	adds	r0, #1
 8009972:	d0ab      	beq.n	80098cc <_printf_i+0x164>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	079b      	lsls	r3, r3, #30
 8009978:	d413      	bmi.n	80099a2 <_printf_i+0x23a>
 800997a:	68e0      	ldr	r0, [r4, #12]
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	4298      	cmp	r0, r3
 8009980:	bfb8      	it	lt
 8009982:	4618      	movlt	r0, r3
 8009984:	e7a4      	b.n	80098d0 <_printf_i+0x168>
 8009986:	2301      	movs	r3, #1
 8009988:	4632      	mov	r2, r6
 800998a:	4649      	mov	r1, r9
 800998c:	4640      	mov	r0, r8
 800998e:	47d0      	blx	sl
 8009990:	3001      	adds	r0, #1
 8009992:	d09b      	beq.n	80098cc <_printf_i+0x164>
 8009994:	3501      	adds	r5, #1
 8009996:	68e3      	ldr	r3, [r4, #12]
 8009998:	9903      	ldr	r1, [sp, #12]
 800999a:	1a5b      	subs	r3, r3, r1
 800999c:	42ab      	cmp	r3, r5
 800999e:	dcf2      	bgt.n	8009986 <_printf_i+0x21e>
 80099a0:	e7eb      	b.n	800997a <_printf_i+0x212>
 80099a2:	2500      	movs	r5, #0
 80099a4:	f104 0619 	add.w	r6, r4, #25
 80099a8:	e7f5      	b.n	8009996 <_printf_i+0x22e>
 80099aa:	bf00      	nop
 80099ac:	08009e4e 	.word	0x08009e4e
 80099b0:	08009e5f 	.word	0x08009e5f

080099b4 <memmove>:
 80099b4:	4288      	cmp	r0, r1
 80099b6:	b510      	push	{r4, lr}
 80099b8:	eb01 0402 	add.w	r4, r1, r2
 80099bc:	d902      	bls.n	80099c4 <memmove+0x10>
 80099be:	4284      	cmp	r4, r0
 80099c0:	4623      	mov	r3, r4
 80099c2:	d807      	bhi.n	80099d4 <memmove+0x20>
 80099c4:	1e43      	subs	r3, r0, #1
 80099c6:	42a1      	cmp	r1, r4
 80099c8:	d008      	beq.n	80099dc <memmove+0x28>
 80099ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099d2:	e7f8      	b.n	80099c6 <memmove+0x12>
 80099d4:	4402      	add	r2, r0
 80099d6:	4601      	mov	r1, r0
 80099d8:	428a      	cmp	r2, r1
 80099da:	d100      	bne.n	80099de <memmove+0x2a>
 80099dc:	bd10      	pop	{r4, pc}
 80099de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099e6:	e7f7      	b.n	80099d8 <memmove+0x24>

080099e8 <_free_r>:
 80099e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ea:	2900      	cmp	r1, #0
 80099ec:	d044      	beq.n	8009a78 <_free_r+0x90>
 80099ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f2:	9001      	str	r0, [sp, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f1a1 0404 	sub.w	r4, r1, #4
 80099fa:	bfb8      	it	lt
 80099fc:	18e4      	addlt	r4, r4, r3
 80099fe:	f000 f913 	bl	8009c28 <__malloc_lock>
 8009a02:	4a1e      	ldr	r2, [pc, #120]	; (8009a7c <_free_r+0x94>)
 8009a04:	9801      	ldr	r0, [sp, #4]
 8009a06:	6813      	ldr	r3, [r2, #0]
 8009a08:	b933      	cbnz	r3, 8009a18 <_free_r+0x30>
 8009a0a:	6063      	str	r3, [r4, #4]
 8009a0c:	6014      	str	r4, [r2, #0]
 8009a0e:	b003      	add	sp, #12
 8009a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a14:	f000 b90e 	b.w	8009c34 <__malloc_unlock>
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	d908      	bls.n	8009a2e <_free_r+0x46>
 8009a1c:	6825      	ldr	r5, [r4, #0]
 8009a1e:	1961      	adds	r1, r4, r5
 8009a20:	428b      	cmp	r3, r1
 8009a22:	bf01      	itttt	eq
 8009a24:	6819      	ldreq	r1, [r3, #0]
 8009a26:	685b      	ldreq	r3, [r3, #4]
 8009a28:	1949      	addeq	r1, r1, r5
 8009a2a:	6021      	streq	r1, [r4, #0]
 8009a2c:	e7ed      	b.n	8009a0a <_free_r+0x22>
 8009a2e:	461a      	mov	r2, r3
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	b10b      	cbz	r3, 8009a38 <_free_r+0x50>
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	d9fa      	bls.n	8009a2e <_free_r+0x46>
 8009a38:	6811      	ldr	r1, [r2, #0]
 8009a3a:	1855      	adds	r5, r2, r1
 8009a3c:	42a5      	cmp	r5, r4
 8009a3e:	d10b      	bne.n	8009a58 <_free_r+0x70>
 8009a40:	6824      	ldr	r4, [r4, #0]
 8009a42:	4421      	add	r1, r4
 8009a44:	1854      	adds	r4, r2, r1
 8009a46:	42a3      	cmp	r3, r4
 8009a48:	6011      	str	r1, [r2, #0]
 8009a4a:	d1e0      	bne.n	8009a0e <_free_r+0x26>
 8009a4c:	681c      	ldr	r4, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	6053      	str	r3, [r2, #4]
 8009a52:	4421      	add	r1, r4
 8009a54:	6011      	str	r1, [r2, #0]
 8009a56:	e7da      	b.n	8009a0e <_free_r+0x26>
 8009a58:	d902      	bls.n	8009a60 <_free_r+0x78>
 8009a5a:	230c      	movs	r3, #12
 8009a5c:	6003      	str	r3, [r0, #0]
 8009a5e:	e7d6      	b.n	8009a0e <_free_r+0x26>
 8009a60:	6825      	ldr	r5, [r4, #0]
 8009a62:	1961      	adds	r1, r4, r5
 8009a64:	428b      	cmp	r3, r1
 8009a66:	bf04      	itt	eq
 8009a68:	6819      	ldreq	r1, [r3, #0]
 8009a6a:	685b      	ldreq	r3, [r3, #4]
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	bf04      	itt	eq
 8009a70:	1949      	addeq	r1, r1, r5
 8009a72:	6021      	streq	r1, [r4, #0]
 8009a74:	6054      	str	r4, [r2, #4]
 8009a76:	e7ca      	b.n	8009a0e <_free_r+0x26>
 8009a78:	b003      	add	sp, #12
 8009a7a:	bd30      	pop	{r4, r5, pc}
 8009a7c:	200022c8 	.word	0x200022c8

08009a80 <sbrk_aligned>:
 8009a80:	b570      	push	{r4, r5, r6, lr}
 8009a82:	4e0e      	ldr	r6, [pc, #56]	; (8009abc <sbrk_aligned+0x3c>)
 8009a84:	460c      	mov	r4, r1
 8009a86:	6831      	ldr	r1, [r6, #0]
 8009a88:	4605      	mov	r5, r0
 8009a8a:	b911      	cbnz	r1, 8009a92 <sbrk_aligned+0x12>
 8009a8c:	f000 f8bc 	bl	8009c08 <_sbrk_r>
 8009a90:	6030      	str	r0, [r6, #0]
 8009a92:	4621      	mov	r1, r4
 8009a94:	4628      	mov	r0, r5
 8009a96:	f000 f8b7 	bl	8009c08 <_sbrk_r>
 8009a9a:	1c43      	adds	r3, r0, #1
 8009a9c:	d00a      	beq.n	8009ab4 <sbrk_aligned+0x34>
 8009a9e:	1cc4      	adds	r4, r0, #3
 8009aa0:	f024 0403 	bic.w	r4, r4, #3
 8009aa4:	42a0      	cmp	r0, r4
 8009aa6:	d007      	beq.n	8009ab8 <sbrk_aligned+0x38>
 8009aa8:	1a21      	subs	r1, r4, r0
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 f8ac 	bl	8009c08 <_sbrk_r>
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d101      	bne.n	8009ab8 <sbrk_aligned+0x38>
 8009ab4:	f04f 34ff 	mov.w	r4, #4294967295
 8009ab8:	4620      	mov	r0, r4
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	200022cc 	.word	0x200022cc

08009ac0 <_malloc_r>:
 8009ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac4:	1ccd      	adds	r5, r1, #3
 8009ac6:	f025 0503 	bic.w	r5, r5, #3
 8009aca:	3508      	adds	r5, #8
 8009acc:	2d0c      	cmp	r5, #12
 8009ace:	bf38      	it	cc
 8009ad0:	250c      	movcc	r5, #12
 8009ad2:	2d00      	cmp	r5, #0
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	db01      	blt.n	8009adc <_malloc_r+0x1c>
 8009ad8:	42a9      	cmp	r1, r5
 8009ada:	d905      	bls.n	8009ae8 <_malloc_r+0x28>
 8009adc:	230c      	movs	r3, #12
 8009ade:	603b      	str	r3, [r7, #0]
 8009ae0:	2600      	movs	r6, #0
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae8:	4e2e      	ldr	r6, [pc, #184]	; (8009ba4 <_malloc_r+0xe4>)
 8009aea:	f000 f89d 	bl	8009c28 <__malloc_lock>
 8009aee:	6833      	ldr	r3, [r6, #0]
 8009af0:	461c      	mov	r4, r3
 8009af2:	bb34      	cbnz	r4, 8009b42 <_malloc_r+0x82>
 8009af4:	4629      	mov	r1, r5
 8009af6:	4638      	mov	r0, r7
 8009af8:	f7ff ffc2 	bl	8009a80 <sbrk_aligned>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	4604      	mov	r4, r0
 8009b00:	d14d      	bne.n	8009b9e <_malloc_r+0xde>
 8009b02:	6834      	ldr	r4, [r6, #0]
 8009b04:	4626      	mov	r6, r4
 8009b06:	2e00      	cmp	r6, #0
 8009b08:	d140      	bne.n	8009b8c <_malloc_r+0xcc>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4638      	mov	r0, r7
 8009b10:	eb04 0803 	add.w	r8, r4, r3
 8009b14:	f000 f878 	bl	8009c08 <_sbrk_r>
 8009b18:	4580      	cmp	r8, r0
 8009b1a:	d13a      	bne.n	8009b92 <_malloc_r+0xd2>
 8009b1c:	6821      	ldr	r1, [r4, #0]
 8009b1e:	3503      	adds	r5, #3
 8009b20:	1a6d      	subs	r5, r5, r1
 8009b22:	f025 0503 	bic.w	r5, r5, #3
 8009b26:	3508      	adds	r5, #8
 8009b28:	2d0c      	cmp	r5, #12
 8009b2a:	bf38      	it	cc
 8009b2c:	250c      	movcc	r5, #12
 8009b2e:	4629      	mov	r1, r5
 8009b30:	4638      	mov	r0, r7
 8009b32:	f7ff ffa5 	bl	8009a80 <sbrk_aligned>
 8009b36:	3001      	adds	r0, #1
 8009b38:	d02b      	beq.n	8009b92 <_malloc_r+0xd2>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	442b      	add	r3, r5
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	e00e      	b.n	8009b60 <_malloc_r+0xa0>
 8009b42:	6822      	ldr	r2, [r4, #0]
 8009b44:	1b52      	subs	r2, r2, r5
 8009b46:	d41e      	bmi.n	8009b86 <_malloc_r+0xc6>
 8009b48:	2a0b      	cmp	r2, #11
 8009b4a:	d916      	bls.n	8009b7a <_malloc_r+0xba>
 8009b4c:	1961      	adds	r1, r4, r5
 8009b4e:	42a3      	cmp	r3, r4
 8009b50:	6025      	str	r5, [r4, #0]
 8009b52:	bf18      	it	ne
 8009b54:	6059      	strne	r1, [r3, #4]
 8009b56:	6863      	ldr	r3, [r4, #4]
 8009b58:	bf08      	it	eq
 8009b5a:	6031      	streq	r1, [r6, #0]
 8009b5c:	5162      	str	r2, [r4, r5]
 8009b5e:	604b      	str	r3, [r1, #4]
 8009b60:	4638      	mov	r0, r7
 8009b62:	f104 060b 	add.w	r6, r4, #11
 8009b66:	f000 f865 	bl	8009c34 <__malloc_unlock>
 8009b6a:	f026 0607 	bic.w	r6, r6, #7
 8009b6e:	1d23      	adds	r3, r4, #4
 8009b70:	1af2      	subs	r2, r6, r3
 8009b72:	d0b6      	beq.n	8009ae2 <_malloc_r+0x22>
 8009b74:	1b9b      	subs	r3, r3, r6
 8009b76:	50a3      	str	r3, [r4, r2]
 8009b78:	e7b3      	b.n	8009ae2 <_malloc_r+0x22>
 8009b7a:	6862      	ldr	r2, [r4, #4]
 8009b7c:	42a3      	cmp	r3, r4
 8009b7e:	bf0c      	ite	eq
 8009b80:	6032      	streq	r2, [r6, #0]
 8009b82:	605a      	strne	r2, [r3, #4]
 8009b84:	e7ec      	b.n	8009b60 <_malloc_r+0xa0>
 8009b86:	4623      	mov	r3, r4
 8009b88:	6864      	ldr	r4, [r4, #4]
 8009b8a:	e7b2      	b.n	8009af2 <_malloc_r+0x32>
 8009b8c:	4634      	mov	r4, r6
 8009b8e:	6876      	ldr	r6, [r6, #4]
 8009b90:	e7b9      	b.n	8009b06 <_malloc_r+0x46>
 8009b92:	230c      	movs	r3, #12
 8009b94:	603b      	str	r3, [r7, #0]
 8009b96:	4638      	mov	r0, r7
 8009b98:	f000 f84c 	bl	8009c34 <__malloc_unlock>
 8009b9c:	e7a1      	b.n	8009ae2 <_malloc_r+0x22>
 8009b9e:	6025      	str	r5, [r4, #0]
 8009ba0:	e7de      	b.n	8009b60 <_malloc_r+0xa0>
 8009ba2:	bf00      	nop
 8009ba4:	200022c8 	.word	0x200022c8

08009ba8 <_realloc_r>:
 8009ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bac:	4680      	mov	r8, r0
 8009bae:	4614      	mov	r4, r2
 8009bb0:	460e      	mov	r6, r1
 8009bb2:	b921      	cbnz	r1, 8009bbe <_realloc_r+0x16>
 8009bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	4611      	mov	r1, r2
 8009bba:	f7ff bf81 	b.w	8009ac0 <_malloc_r>
 8009bbe:	b92a      	cbnz	r2, 8009bcc <_realloc_r+0x24>
 8009bc0:	f7ff ff12 	bl	80099e8 <_free_r>
 8009bc4:	4625      	mov	r5, r4
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bcc:	f000 f838 	bl	8009c40 <_malloc_usable_size_r>
 8009bd0:	4284      	cmp	r4, r0
 8009bd2:	4607      	mov	r7, r0
 8009bd4:	d802      	bhi.n	8009bdc <_realloc_r+0x34>
 8009bd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bda:	d812      	bhi.n	8009c02 <_realloc_r+0x5a>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4640      	mov	r0, r8
 8009be0:	f7ff ff6e 	bl	8009ac0 <_malloc_r>
 8009be4:	4605      	mov	r5, r0
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d0ed      	beq.n	8009bc6 <_realloc_r+0x1e>
 8009bea:	42bc      	cmp	r4, r7
 8009bec:	4622      	mov	r2, r4
 8009bee:	4631      	mov	r1, r6
 8009bf0:	bf28      	it	cs
 8009bf2:	463a      	movcs	r2, r7
 8009bf4:	f7ff fbb8 	bl	8009368 <memcpy>
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	f7ff fef4 	bl	80099e8 <_free_r>
 8009c00:	e7e1      	b.n	8009bc6 <_realloc_r+0x1e>
 8009c02:	4635      	mov	r5, r6
 8009c04:	e7df      	b.n	8009bc6 <_realloc_r+0x1e>
	...

08009c08 <_sbrk_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d06      	ldr	r5, [pc, #24]	; (8009c24 <_sbrk_r+0x1c>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4604      	mov	r4, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	602b      	str	r3, [r5, #0]
 8009c14:	f7f7 f82e 	bl	8000c74 <_sbrk>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_sbrk_r+0x1a>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_sbrk_r+0x1a>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	200022d0 	.word	0x200022d0

08009c28 <__malloc_lock>:
 8009c28:	4801      	ldr	r0, [pc, #4]	; (8009c30 <__malloc_lock+0x8>)
 8009c2a:	f000 b811 	b.w	8009c50 <__retarget_lock_acquire_recursive>
 8009c2e:	bf00      	nop
 8009c30:	200022d4 	.word	0x200022d4

08009c34 <__malloc_unlock>:
 8009c34:	4801      	ldr	r0, [pc, #4]	; (8009c3c <__malloc_unlock+0x8>)
 8009c36:	f000 b80c 	b.w	8009c52 <__retarget_lock_release_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	200022d4 	.word	0x200022d4

08009c40 <_malloc_usable_size_r>:
 8009c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c44:	1f18      	subs	r0, r3, #4
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bfbc      	itt	lt
 8009c4a:	580b      	ldrlt	r3, [r1, r0]
 8009c4c:	18c0      	addlt	r0, r0, r3
 8009c4e:	4770      	bx	lr

08009c50 <__retarget_lock_acquire_recursive>:
 8009c50:	4770      	bx	lr

08009c52 <__retarget_lock_release_recursive>:
 8009c52:	4770      	bx	lr

08009c54 <_init>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr

08009c60 <_fini>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	bf00      	nop
 8009c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c66:	bc08      	pop	{r3}
 8009c68:	469e      	mov	lr, r3
 8009c6a:	4770      	bx	lr
