
rybg211_ble5.1_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a610  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800a7b0  0800a7b0  0001a7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9bc  0800a9bc  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9bc  0800a9bc  0001a9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9c4  0800a9c4  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9c4  0800a9c4  0001a9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9c8  0800a9c8  0001a9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800a9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021c4  20000160  0800ab2c  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002324  0800ab2c  00022324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018540  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039a9  00000000  00000000  000386d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  0003c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a294  00000000  00000000  0003e758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018dd2  00000000  00000000  000589ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093448  00000000  00000000  000717be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005834  00000000  00000000  00104c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a798 	.word	0x0800a798

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800a798 	.word	0x0800a798

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fcfc 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f838 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f94a 	bl	8000838 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f920 	bl	80007e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f8f4 	bl	8000794 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005ac:	f008 fdba 	bl	8009124 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80005b0:	f000 f896 	bl	80006e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  CDC_Handler_Init_FS	(main_UsbRxTask);
 80005b4:	4810      	ldr	r0, [pc, #64]	; (80005f8 <main+0x64>)
 80005b6:	f008 febf 	bl	8009338 <CDC_Handler_Init_FS>

  rybg211_bleModuleInit();
 80005ba:	f009 fb03 	bl	8009bc4 <rybg211_bleModuleInit>

  rybg211_setOutputPower(hBleModule.txBuffer, 20);
 80005be:	2114      	movs	r1, #20
 80005c0:	480e      	ldr	r0, [pc, #56]	; (80005fc <main+0x68>)
 80005c2:	f009 fb13 	bl	8009bec <rybg211_setOutputPower>
//  rybg211_setDeviceName(hBleModule.txBuffer, "BLE Bridge");

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	490d      	ldr	r1, [pc, #52]	; (8000600 <main+0x6c>)
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <main+0x70>)
 80005ce:	f004 f845 	bl	800465c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <main+0x74>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <main+0x74>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f022 0208 	bic.w	r2, r2, #8
 80005e0:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80005e2:	2108      	movs	r1, #8
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <main+0x78>)
 80005e6:	f003 fb5b 	bl	8003ca0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  main_UartTxTask();
 80005ea:	f000 f99f 	bl	800092c <main_UartTxTask>

	  main_UartRxTask();
 80005ee:	f000 f9c9 	bl	8000984 <main_UartRxTask>

	  main_bridgeDataTransfare();
 80005f2:	f000 fa29 	bl	8000a48 <main_bridgeDataTransfare>
	  main_UartTxTask();
 80005f6:	e7f8      	b.n	80005ea <main+0x56>
 80005f8:	080009f5 	.word	0x080009f5
 80005fc:	20002111 	.word	0x20002111
 8000600:	20002211 	.word	0x20002211
 8000604:	200001c4 	.word	0x200001c4
 8000608:	20000208 	.word	0x20000208
 800060c:	2000017c 	.word	0x2000017c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f009 fc52 	bl	8009ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemClock_Config+0xc8>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <SystemClock_Config+0xc8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a20      	ldr	r2, [pc, #128]	; (80006dc <SystemClock_Config+0xcc>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <SystemClock_Config+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000680:	230f      	movs	r3, #15
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000684:	2390      	movs	r3, #144	; 0x90
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000688:	2304      	movs	r3, #4
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800068c:	2305      	movs	r3, #5
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fe5b 	bl	8003350 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 fa74 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2101      	movs	r1, #1
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 f8bd 	bl	8003840 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006cc:	f000 fa5e 	bl	8000b8c <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
 80006fe:	615a      	str	r2, [r3, #20]
 8000700:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_TIM3_Init+0xac>)
 8000704:	4a22      	ldr	r2, [pc, #136]	; (8000790 <MX_TIM3_Init+0xb0>)
 8000706:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_TIM3_Init+0xac>)
 800070a:	f242 720f 	movw	r2, #9999	; 0x270f
 800070e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_TIM3_Init+0xac>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_TIM3_Init+0xac>)
 8000718:	2263      	movs	r2, #99	; 0x63
 800071a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_TIM3_Init+0xac>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_TIM3_Init+0xac>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000728:	4818      	ldr	r0, [pc, #96]	; (800078c <MX_TIM3_Init+0xac>)
 800072a:	f003 fa69 	bl	8003c00 <HAL_TIM_PWM_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000734:	f000 fa2a 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4619      	mov	r1, r3
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <MX_TIM3_Init+0xac>)
 8000748:	f003 fe4e 	bl	80043e8 <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000752:	f000 fa1b 	bl	8000b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000756:	2360      	movs	r3, #96	; 0x60
 8000758:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2208      	movs	r2, #8
 800076a:	4619      	mov	r1, r3
 800076c:	4807      	ldr	r0, [pc, #28]	; (800078c <MX_TIM3_Init+0xac>)
 800076e:	f003 fb47 	bl	8003e00 <HAL_TIM_PWM_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000778:	f000 fa08 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <MX_TIM3_Init+0xac>)
 800077e:	f000 fa55 	bl	8000c2c <HAL_TIM_MspPostInit>

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	; 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000017c 	.word	0x2000017c
 8000790:	40000400 	.word	0x40000400

08000794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_USART1_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007cc:	f003 fe7a 	bl	80044c4 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f9d9 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200001c4 	.word	0x200001c4
 80007e4:	40011000 	.word	0x40011000

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_DMA_Init+0x4c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <MX_DMA_Init+0x4c>)
 80007f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <MX_DMA_Init+0x4c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	203a      	movs	r0, #58	; 0x3a
 8000810:	f000 fd31 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000814:	203a      	movs	r0, #58	; 0x3a
 8000816:	f000 fd4a 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2046      	movs	r0, #70	; 0x46
 8000820:	f000 fd29 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000824:	2046      	movs	r0, #70	; 0x46
 8000826:	f000 fd42 	bl	80012ae <HAL_NVIC_EnableIRQ>

}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_GPIO_Init+0x9c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_GPIO_Init+0x9c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin|LED1_Pin|MODULE_RESET_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f244 4106 	movw	r1, #17414	; 0x4406
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <MX_GPIO_Init+0xa0>)
 80008aa:	f001 faa1 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin MODULE_RESET_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin|MODULE_RESET_Pin;
 80008ae:	f244 4306 	movw	r3, #17414	; 0x4406
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0xa0>)
 80008c8:	f001 f90e 	bl	8001ae8 <HAL_GPIO_Init>

}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020400 	.word	0x40020400

080008dc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	807b      	strh	r3, [r7, #2]
	hBleModule.controlFlags.flag.packetReceived = ENABLE;
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <HAL_UARTEx_RxEventCallback+0x40>)
 80008ea:	7813      	ldrb	r3, [r2, #0]
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	7013      	strb	r3, [r2, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80008f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f6:	490a      	ldr	r1, [pc, #40]	; (8000920 <HAL_UARTEx_RxEventCallback+0x44>)
 80008f8:	480a      	ldr	r0, [pc, #40]	; (8000924 <HAL_UARTEx_RxEventCallback+0x48>)
 80008fa:	f003 feaf 	bl	800465c <HAL_UARTEx_ReceiveToIdle_DMA>

	hBleModule.rxPacketSize = Size;
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_UARTEx_RxEventCallback+0x40>)
 8000900:	887b      	ldrh	r3, [r7, #2]
 8000902:	8093      	strh	r3, [r2, #4]

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <HAL_UARTEx_RxEventCallback+0x4c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f022 0208 	bic.w	r2, r2, #8
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200020fc 	.word	0x200020fc
 8000920:	20002211 	.word	0x20002211
 8000924:	200001c4 	.word	0x200001c4
 8000928:	20000208 	.word	0x20000208

0800092c <main_UartTxTask>:
/**
 * @brief Module AT UART command transmission task
 *
 */
static void main_UartTxTask()
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hBleModule.txTimer > 1000))
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <main_UartTxTask+0x4c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d019      	beq.n	8000972 <main_UartTxTask+0x46>
 800093e:	f000 fb8f 	bl	8001060 <HAL_GetTick>
 8000942:	4602      	mov	r2, r0
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <main_UartTxTask+0x4c>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800094e:	d910      	bls.n	8000972 <main_UartTxTask+0x46>
	{
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <main_UartTxTask+0x4c>)
 8000952:	885b      	ldrh	r3, [r3, #2]
 8000954:	461a      	mov	r2, r3
 8000956:	4909      	ldr	r1, [pc, #36]	; (800097c <main_UartTxTask+0x50>)
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <main_UartTxTask+0x54>)
 800095a:	f003 fe01 	bl	8004560 <HAL_UART_Transmit_DMA>

		hBleModule.controlFlags.flag.packetToTransmit = DISABLE;
 800095e:	4a06      	ldr	r2, [pc, #24]	; (8000978 <main_UartTxTask+0x4c>)
 8000960:	7813      	ldrb	r3, [r2, #0]
 8000962:	f36f 0341 	bfc	r3, #1, #1
 8000966:	7013      	strb	r3, [r2, #0]

		hBleModule.txTimer = HAL_GetTick();
 8000968:	f000 fb7a 	bl	8001060 <HAL_GetTick>
 800096c:	4603      	mov	r3, r0
 800096e:	4a02      	ldr	r2, [pc, #8]	; (8000978 <main_UartTxTask+0x4c>)
 8000970:	60d3      	str	r3, [r2, #12]
	}
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200020fc 	.word	0x200020fc
 800097c:	20002111 	.word	0x20002111
 8000980:	200001c4 	.word	0x200001c4

08000984 <main_UartRxTask>:
/**
 * @brief Module AT UART reception task
 *
 */
static void main_UartRxTask()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetReceived)
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <main_UartRxTask+0x60>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d024      	beq.n	80009e0 <main_UartRxTask+0x5c>
	{
		if(rybg211_rxPacketParser(hBleModule.rxBuffer, hBleModule.rxPacketSize))
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <main_UartRxTask+0x60>)
 8000998:	889b      	ldrh	r3, [r3, #4]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4619      	mov	r1, r3
 800099e:	4812      	ldr	r0, [pc, #72]	; (80009e8 <main_UartRxTask+0x64>)
 80009a0:	f009 f94c 	bl	8009c3c <rybg211_rxPacketParser>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d015      	beq.n	80009d6 <main_UartRxTask+0x52>
		{
			hBridge.blePacketSize = (uint16_t)rybg211_rxDataRead(hBleModule.rxBuffer, hBridge.bleBuffer);
 80009aa:	4910      	ldr	r1, [pc, #64]	; (80009ec <main_UartRxTask+0x68>)
 80009ac:	480e      	ldr	r0, [pc, #56]	; (80009e8 <main_UartRxTask+0x64>)
 80009ae:	f009 f9ef 	bl	8009d90 <rybg211_rxDataRead>
 80009b2:	4603      	mov	r3, r0
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <main_UartRxTask+0x6c>)
 80009b8:	805a      	strh	r2, [r3, #2]

			if(CDC_UsbConnectionCheck())
 80009ba:	f008 fcd9 	bl	8009370 <CDC_UsbConnectionCheck>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d005      	beq.n	80009d0 <main_UartRxTask+0x4c>
			{
				hBridge.controlFlags.flag.bleToUsb = ENABLE;
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <main_UartRxTask+0x6c>)
 80009c6:	7813      	ldrb	r3, [r2, #0]
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	7013      	strb	r3, [r2, #0]
 80009ce:	e002      	b.n	80009d6 <main_UartRxTask+0x52>
			}
			else
			{
				main_bleCommandControl((uint8_t*) hBridge.bleBuffer);
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <main_UartRxTask+0x68>)
 80009d2:	f000 f881 	bl	8000ad8 <main_bleCommandControl>
			}

		}

		hBleModule.controlFlags.flag.packetReceived = DISABLE;
 80009d6:	4a03      	ldr	r2, [pc, #12]	; (80009e4 <main_UartRxTask+0x60>)
 80009d8:	7813      	ldrb	r3, [r2, #0]
 80009da:	f36f 0300 	bfc	r3, #0, #1
 80009de:	7013      	strb	r3, [r2, #0]

	}
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200020fc 	.word	0x200020fc
 80009e8:	20002211 	.word	0x20002211
 80009ec:	200002d4 	.word	0x200002d4
 80009f0:	200002c8 	.word	0x200002c8

080009f4 <main_UsbRxTask>:
 * @param 	cdcRxBuffer	:	Buffer will carry the data received over USB.
 *
 * @param 	packetSize	:	The size of the received packet.
 */
static void main_UsbRxTask(char* cdcRxBuffer, uint16_t packetSize)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]
	if(hBleModule.ConnectedDevice)
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <main_UsbRxTask+0x44>)
 8000a02:	7d1b      	ldrb	r3, [r3, #20]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d00e      	beq.n	8000a26 <main_UsbRxTask+0x32>
	{
		memcpy(hBridge.usbBuffer, cdcRxBuffer, packetSize);
 8000a08:	887b      	ldrh	r3, [r7, #2]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	480b      	ldr	r0, [pc, #44]	; (8000a3c <main_UsbRxTask+0x48>)
 8000a10:	f009 fa4c 	bl	8009eac <memcpy>

		hBridge.usbPacketSize = packetSize;
 8000a14:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <main_UsbRxTask+0x4c>)
 8000a16:	887b      	ldrh	r3, [r7, #2]
 8000a18:	8093      	strh	r3, [r2, #4]

		hBridge.controlFlags.flag.usbToBle = ENABLE;
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <main_UsbRxTask+0x4c>)
 8000a1c:	7813      	ldrb	r3, [r2, #0]
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	7013      	strb	r3, [r2, #0]
	}
	else
	{
		CDC_Transmit_FS(BLE_NO_CONNECTION_MESSAGE, strlen(BLE_NO_CONNECTION_MESSAGE));
	}
}
 8000a24:	e003      	b.n	8000a2e <main_UsbRxTask+0x3a>
		CDC_Transmit_FS(BLE_NO_CONNECTION_MESSAGE, strlen(BLE_NO_CONNECTION_MESSAGE));
 8000a26:	2112      	movs	r1, #18
 8000a28:	4806      	ldr	r0, [pc, #24]	; (8000a44 <main_UsbRxTask+0x50>)
 8000a2a:	f008 fc4d 	bl	80092c8 <CDC_Transmit_FS>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200020fc 	.word	0x200020fc
 8000a3c:	200003d4 	.word	0x200003d4
 8000a40:	200002c8 	.word	0x200002c8
 8000a44:	0800a7b0 	.word	0x0800a7b0

08000a48 <main_bridgeDataTransfare>:

static void main_bridgeDataTransfare()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	if(hBridge.controlFlags.flag.bleToUsb)
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <main_bridgeDataTransfare+0x78>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d016      	beq.n	8000a88 <main_bridgeDataTransfare+0x40>
	{
		hBridge.controlFlags.flag.bleToUsb = DISABLE;
 8000a5a:	4a19      	ldr	r2, [pc, #100]	; (8000ac0 <main_bridgeDataTransfare+0x78>)
 8000a5c:	7813      	ldrb	r3, [r2, #0]
 8000a5e:	f36f 0300 	bfc	r3, #0, #1
 8000a62:	7013      	strb	r3, [r2, #0]

		//Place feedline character at the end of the packet and increment the size by 1.
		hBridge.bleBuffer[hBridge.blePacketSize++] = '\n';
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <main_bridgeDataTransfare+0x78>)
 8000a66:	885b      	ldrh	r3, [r3, #2]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	b291      	uxth	r1, r2
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <main_bridgeDataTransfare+0x78>)
 8000a6e:	8051      	strh	r1, [r2, #2]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <main_bridgeDataTransfare+0x78>)
 8000a74:	4413      	add	r3, r2
 8000a76:	220a      	movs	r2, #10
 8000a78:	731a      	strb	r2, [r3, #12]

		CDC_Transmit_FS((uint8_t*) hBridge.bleBuffer, (uint16_t)hBridge.blePacketSize);
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <main_bridgeDataTransfare+0x78>)
 8000a7c:	885b      	ldrh	r3, [r3, #2]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <main_bridgeDataTransfare+0x7c>)
 8000a82:	f008 fc21 	bl	80092c8 <CDC_Transmit_FS>

		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);

		hBridge.controlFlags.flag.usbToBle = DISABLE;
	}
}
 8000a86:	e018      	b.n	8000aba <main_bridgeDataTransfare+0x72>
	else if(hBridge.controlFlags.flag.usbToBle)
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <main_bridgeDataTransfare+0x78>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d011      	beq.n	8000aba <main_bridgeDataTransfare+0x72>
		rybg211_txDataSend(hBridge.usbBuffer, hBridge.usbPacketSize);
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <main_bridgeDataTransfare+0x78>)
 8000a98:	889b      	ldrh	r3, [r3, #4]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <main_bridgeDataTransfare+0x80>)
 8000a9e:	f009 f99b 	bl	8009dd8 <rybg211_txDataSend>
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <main_bridgeDataTransfare+0x84>)
 8000aa4:	885b      	ldrh	r3, [r3, #2]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4909      	ldr	r1, [pc, #36]	; (8000ad0 <main_bridgeDataTransfare+0x88>)
 8000aaa:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <main_bridgeDataTransfare+0x8c>)
 8000aac:	f003 fd58 	bl	8004560 <HAL_UART_Transmit_DMA>
		hBridge.controlFlags.flag.usbToBle = DISABLE;
 8000ab0:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <main_bridgeDataTransfare+0x78>)
 8000ab2:	7813      	ldrb	r3, [r2, #0]
 8000ab4:	f36f 0341 	bfc	r3, #1, #1
 8000ab8:	7013      	strb	r3, [r2, #0]
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200002c8 	.word	0x200002c8
 8000ac4:	200002d4 	.word	0x200002d4
 8000ac8:	200003d4 	.word	0x200003d4
 8000acc:	200020fc 	.word	0x200020fc
 8000ad0:	20002111 	.word	0x20002111
 8000ad4:	200001c4 	.word	0x200001c4

08000ad8 <main_bleCommandControl>:


static void main_bleCommandControl(uint8_t* cmd)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	uint8_t bleCommand = cmd[0];
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	73fb      	strb	r3, [r7, #15]
	switch (bleCommand)
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d835      	bhi.n	8000b58 <main_bleCommandControl+0x80>
 8000aec:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <main_bleCommandControl+0x1c>)
 8000aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af2:	bf00      	nop
 8000af4:	08000b09 	.word	0x08000b09
 8000af8:	08000b2b 	.word	0x08000b2b
 8000afc:	08000b37 	.word	0x08000b37
 8000b00:	08000b41 	.word	0x08000b41
 8000b04:	08000b4b 	.word	0x08000b4b
	{
		case BLE_CMD_0:
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0e:	4815      	ldr	r0, [pc, #84]	; (8000b64 <main_bleCommandControl+0x8c>)
 8000b10:	f001 f96e 	bl	8001df0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2104      	movs	r1, #4
 8000b18:	4812      	ldr	r0, [pc, #72]	; (8000b64 <main_bleCommandControl+0x8c>)
 8000b1a:	f001 f969 	bl	8001df0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2102      	movs	r1, #2
 8000b22:	4810      	ldr	r0, [pc, #64]	; (8000b64 <main_bleCommandControl+0x8c>)
 8000b24:	f001 f964 	bl	8001df0 <HAL_GPIO_WritePin>
			break;
 8000b28:	e017      	b.n	8000b5a <main_bleCommandControl+0x82>
		case BLE_CMD_1:
			HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 8000b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <main_bleCommandControl+0x8c>)
 8000b30:	f001 f977 	bl	8001e22 <HAL_GPIO_TogglePin>
			break;
 8000b34:	e011      	b.n	8000b5a <main_bleCommandControl+0x82>
		case BLE_CMD_2:
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000b36:	2104      	movs	r1, #4
 8000b38:	480a      	ldr	r0, [pc, #40]	; (8000b64 <main_bleCommandControl+0x8c>)
 8000b3a:	f001 f972 	bl	8001e22 <HAL_GPIO_TogglePin>
			break;
 8000b3e:	e00c      	b.n	8000b5a <main_bleCommandControl+0x82>
		case BLE_CMD_3:
			HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 8000b40:	2102      	movs	r1, #2
 8000b42:	4808      	ldr	r0, [pc, #32]	; (8000b64 <main_bleCommandControl+0x8c>)
 8000b44:	f001 f96d 	bl	8001e22 <HAL_GPIO_TogglePin>
			break;
 8000b48:	e007      	b.n	8000b5a <main_bleCommandControl+0x82>
		case BLE_CMD_4:
			main_setLedBrightness(cmd[1]);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f809 	bl	8000b68 <main_setLedBrightness>
			break;
 8000b56:	e000      	b.n	8000b5a <main_bleCommandControl+0x82>
		default:
			break;
 8000b58:	bf00      	nop
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40020400 	.word	0x40020400

08000b68 <main_setLedBrightness>:

static void main_setLedBrightness(uint8_t dutyValue)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	htim3.Instance->CCR3 = dutyValue;
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <main_setLedBrightness+0x20>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000017c 	.word	0x2000017c

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d10d      	bne.n	8000c16 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_TIM_PWM_MspInit+0x40>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <HAL_TIM_PWM_MspInit+0x40>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <HAL_TIM_PWM_MspInit+0x40>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40000400 	.word	0x40000400
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <HAL_TIM_MspPostInit+0x68>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d11d      	bne.n	8000c8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_TIM_MspPostInit+0x6c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_TIM_MspPostInit+0x6c>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_TIM_MspPostInit+0x6c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_TIM_MspPostInit+0x70>)
 8000c86:	f000 ff2f 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40000400 	.word	0x40000400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020400 	.word	0x40020400

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a4c      	ldr	r2, [pc, #304]	; (8000df0 <HAL_UART_MspInit+0x150>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	f040 8091 	bne.w	8000de6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <HAL_UART_MspInit+0x154>)
 8000cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ccc:	4a49      	ldr	r2, [pc, #292]	; (8000df4 <HAL_UART_MspInit+0x154>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd4:	4b47      	ldr	r3, [pc, #284]	; (8000df4 <HAL_UART_MspInit+0x154>)
 8000cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	4b43      	ldr	r3, [pc, #268]	; (8000df4 <HAL_UART_MspInit+0x154>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a42      	ldr	r2, [pc, #264]	; (8000df4 <HAL_UART_MspInit+0x154>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b40      	ldr	r3, [pc, #256]	; (8000df4 <HAL_UART_MspInit+0x154>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cfc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4837      	ldr	r0, [pc, #220]	; (8000df8 <HAL_UART_MspInit+0x158>)
 8000d1a:	f000 fee5 	bl	8001ae8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d1e:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d20:	4a37      	ldr	r2, [pc, #220]	; (8000e00 <HAL_UART_MspInit+0x160>)
 8000d22:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d24:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2c:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d32:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d38:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d3e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d40:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d5e:	4827      	ldr	r0, [pc, #156]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d60:	f000 fac0 	bl	80012e4 <HAL_DMA_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d6a:	f7ff ff0f 	bl	8000b8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d72:	639a      	str	r2, [r3, #56]	; 0x38
 8000d74:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <HAL_UART_MspInit+0x15c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000d7c:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000d7e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d86:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000d8a:	2240      	movs	r2, #64	; 0x40
 8000d8c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d9a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000dba:	4812      	ldr	r0, [pc, #72]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000dbc:	f000 fa92 	bl	80012e4 <HAL_DMA_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000dc6:	f7ff fee1 	bl	8000b8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2025      	movs	r0, #37	; 0x25
 8000ddc:	f000 fa4b 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000de0:	2025      	movs	r0, #37	; 0x25
 8000de2:	f000 fa64 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40011000 	.word	0x40011000
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	20000208 	.word	0x20000208
 8000e00:	40026440 	.word	0x40026440
 8000e04:	20000268 	.word	0x20000268
 8000e08:	400264b8 	.word	0x400264b8

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler+0x4>

08000e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <MemManage_Handler+0x4>

08000e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 f8ee 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <USART1_IRQHandler+0x10>)
 8000e66:	f003 fc5f 	bl	8004728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200001c4 	.word	0x200001c4

08000e74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <DMA2_Stream2_IRQHandler+0x10>)
 8000e7a:	f000 fbcb 	bl	8001614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000208 	.word	0x20000208

08000e88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <OTG_FS_IRQHandler+0x10>)
 8000e8e:	f001 f932 	bl	80020f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200019d0 	.word	0x200019d0

08000e9c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <DMA2_Stream7_IRQHandler+0x10>)
 8000ea2:	f000 fbb7 	bl	8001614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000268 	.word	0x20000268

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f008 ffaa 	bl	8009e38 <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20020000 	.word	0x20020000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	200004d4 	.word	0x200004d4
 8000f18:	20002328 	.word	0x20002328

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f46:	490e      	ldr	r1, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f5c:	4c0b      	ldr	r4, [pc, #44]	; (8000f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6a:	f7ff ffd7 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f008 ff69 	bl	8009e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fb0f 	bl	8000594 <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000f84:	0800a9cc 	.word	0x0800a9cc
  ldr r2, =_sbss
 8000f88:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000f8c:	20002324 	.word	0x20002324

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f94f 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f000 f808 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fde6 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f967 	bl	80012ca <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f000 f92f 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000000 	.word	0x20000000
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	200004d8 	.word	0x200004d8

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200004d8 	.word	0x200004d8

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffde 	bl	8001060 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff3e 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff8e 	bl	80011b4 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5d 	bl	8001160 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff31 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa2 	bl	800121c <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff feb6 	bl	8001060 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e099      	b.n	8001434 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2202      	movs	r2, #2
 8001304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001320:	e00f      	b.n	8001342 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001322:	f7ff fe9d 	bl	8001060 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b05      	cmp	r3, #5
 800132e:	d908      	bls.n	8001342 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2220      	movs	r2, #32
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2203      	movs	r2, #3
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e078      	b.n	8001434 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1e8      	bne.n	8001322 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <HAL_DMA_Init+0x158>)
 800135c:	4013      	ands	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4313      	orrs	r3, r2
 8001392:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	2b04      	cmp	r3, #4
 800139a:	d107      	bne.n	80013ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4313      	orrs	r3, r2
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f023 0307 	bic.w	r3, r3, #7
 80013c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d117      	bne.n	8001406 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4313      	orrs	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00e      	beq.n	8001406 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 fb01 	bl	80019f0 <DMA_CheckFifoParam>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2240      	movs	r2, #64	; 0x40
 80013f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001402:	2301      	movs	r3, #1
 8001404:	e016      	b.n	8001434 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fab8 	bl	8001984 <DMA_CalcBaseAndBitshift>
 8001414:	4603      	mov	r3, r0
 8001416:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141c:	223f      	movs	r2, #63	; 0x3f
 800141e:	409a      	lsls	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	f010803f 	.word	0xf010803f

08001440 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_DMA_Start_IT+0x26>
 8001462:	2302      	movs	r3, #2
 8001464:	e040      	b.n	80014e8 <HAL_DMA_Start_IT+0xa8>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d12f      	bne.n	80014da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2202      	movs	r2, #2
 800147e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 fa4a 	bl	8001928 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001498:	223f      	movs	r2, #63	; 0x3f
 800149a:	409a      	lsls	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0216 	orr.w	r2, r2, #22
 80014ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d007      	beq.n	80014c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0208 	orr.w	r2, r2, #8
 80014c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e005      	b.n	80014e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014e2:	2302      	movs	r3, #2
 80014e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014fe:	f7ff fdaf 	bl	8001060 <HAL_GetTick>
 8001502:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d008      	beq.n	8001522 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e052      	b.n	80015c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0216 	bic.w	r2, r2, #22
 8001530:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001540:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	d103      	bne.n	8001552 <HAL_DMA_Abort+0x62>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0208 	bic.w	r2, r2, #8
 8001560:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0201 	bic.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001572:	e013      	b.n	800159c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001574:	f7ff fd74 	bl	8001060 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b05      	cmp	r3, #5
 8001580:	d90c      	bls.n	800159c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2220      	movs	r2, #32
 8001586:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2203      	movs	r2, #3
 800158c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e015      	b.n	80015c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1e4      	bne.n	8001574 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ae:	223f      	movs	r2, #63	; 0x3f
 80015b0:	409a      	lsls	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d004      	beq.n	80015ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00c      	b.n	8001608 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2205      	movs	r2, #5
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0201 	bic.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001620:	4b8e      	ldr	r3, [pc, #568]	; (800185c <HAL_DMA_IRQHandler+0x248>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a8e      	ldr	r2, [pc, #568]	; (8001860 <HAL_DMA_IRQHandler+0x24c>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0a9b      	lsrs	r3, r3, #10
 800162c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163e:	2208      	movs	r2, #8
 8001640:	409a      	lsls	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d01a      	beq.n	8001680 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0204 	bic.w	r2, r2, #4
 8001666:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166c:	2208      	movs	r2, #8
 800166e:	409a      	lsls	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	2201      	movs	r2, #1
 8001686:	409a      	lsls	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d012      	beq.n	80016b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	2201      	movs	r2, #1
 80016a4:	409a      	lsls	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ae:	f043 0202 	orr.w	r2, r3, #2
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	2204      	movs	r2, #4
 80016bc:	409a      	lsls	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d012      	beq.n	80016ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00b      	beq.n	80016ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	2204      	movs	r2, #4
 80016da:	409a      	lsls	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e4:	f043 0204 	orr.w	r2, r3, #4
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f0:	2210      	movs	r2, #16
 80016f2:	409a      	lsls	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d043      	beq.n	8001784 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d03c      	beq.n	8001784 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170e:	2210      	movs	r2, #16
 8001710:	409a      	lsls	r2, r3
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d018      	beq.n	8001756 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d108      	bne.n	8001744 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	2b00      	cmp	r3, #0
 8001738:	d024      	beq.n	8001784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	4798      	blx	r3
 8001742:	e01f      	b.n	8001784 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01b      	beq.n	8001784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
 8001754:	e016      	b.n	8001784 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0208 	bic.w	r2, r2, #8
 8001772:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	2220      	movs	r2, #32
 800178a:	409a      	lsls	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 808f 	beq.w	80018b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 8087 	beq.w	80018b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017aa:	2220      	movs	r2, #32
 80017ac:	409a      	lsls	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d136      	bne.n	800182c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0216 	bic.w	r2, r2, #22
 80017cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <HAL_DMA_IRQHandler+0x1da>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0208 	bic.w	r2, r2, #8
 80017fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001802:	223f      	movs	r2, #63	; 0x3f
 8001804:	409a      	lsls	r2, r3
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800181e:	2b00      	cmp	r3, #0
 8001820:	d07e      	beq.n	8001920 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
        }
        return;
 800182a:	e079      	b.n	8001920 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01d      	beq.n	8001876 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10d      	bne.n	8001864 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184c:	2b00      	cmp	r3, #0
 800184e:	d031      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
 8001858:	e02c      	b.n	80018b4 <HAL_DMA_IRQHandler+0x2a0>
 800185a:	bf00      	nop
 800185c:	20000000 	.word	0x20000000
 8001860:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001868:	2b00      	cmp	r3, #0
 800186a:	d023      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
 8001874:	e01e      	b.n	80018b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10f      	bne.n	80018a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0210 	bic.w	r2, r2, #16
 8001892:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d032      	beq.n	8001922 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d022      	beq.n	800190e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2205      	movs	r2, #5
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d307      	bcc.n	80018fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f2      	bne.n	80018e0 <HAL_DMA_IRQHandler+0x2cc>
 80018fa:	e000      	b.n	80018fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	4798      	blx	r3
 800191e:	e000      	b.n	8001922 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001920:	bf00      	nop
    }
  }
}
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001944:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b40      	cmp	r3, #64	; 0x40
 8001954:	d108      	bne.n	8001968 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001966:	e007      	b.n	8001978 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	60da      	str	r2, [r3, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	3b10      	subs	r3, #16
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <DMA_CalcBaseAndBitshift+0x64>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <DMA_CalcBaseAndBitshift+0x68>)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d909      	bls.n	80019c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ba:	f023 0303 	bic.w	r3, r3, #3
 80019be:	1d1a      	adds	r2, r3, #4
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	659a      	str	r2, [r3, #88]	; 0x58
 80019c4:	e007      	b.n	80019d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	aaaaaaab 	.word	0xaaaaaaab
 80019ec:	0800a880 	.word	0x0800a880

080019f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d11f      	bne.n	8001a4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d856      	bhi.n	8001abe <DMA_CheckFifoParam+0xce>
 8001a10:	a201      	add	r2, pc, #4	; (adr r2, 8001a18 <DMA_CheckFifoParam+0x28>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001a3b 	.word	0x08001a3b
 8001a20:	08001a29 	.word	0x08001a29
 8001a24:	08001abf 	.word	0x08001abf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d046      	beq.n	8001ac2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a38:	e043      	b.n	8001ac2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a42:	d140      	bne.n	8001ac6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a48:	e03d      	b.n	8001ac6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a52:	d121      	bne.n	8001a98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d837      	bhi.n	8001aca <DMA_CheckFifoParam+0xda>
 8001a5a:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <DMA_CheckFifoParam+0x70>)
 8001a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a60:	08001a71 	.word	0x08001a71
 8001a64:	08001a77 	.word	0x08001a77
 8001a68:	08001a71 	.word	0x08001a71
 8001a6c:	08001a89 	.word	0x08001a89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
      break;
 8001a74:	e030      	b.n	8001ad8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d025      	beq.n	8001ace <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a86:	e022      	b.n	8001ace <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a90:	d11f      	bne.n	8001ad2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a96:	e01c      	b.n	8001ad2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d903      	bls.n	8001aa6 <DMA_CheckFifoParam+0xb6>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d003      	beq.n	8001aac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001aa4:	e018      	b.n	8001ad8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8001aaa:	e015      	b.n	8001ad8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00e      	beq.n	8001ad6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
      break;
 8001abc:	e00b      	b.n	8001ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8001abe:	bf00      	nop
 8001ac0:	e00a      	b.n	8001ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ac2:	bf00      	nop
 8001ac4:	e008      	b.n	8001ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ac6:	bf00      	nop
 8001ac8:	e006      	b.n	8001ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8001aca:	bf00      	nop
 8001acc:	e004      	b.n	8001ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ace:	bf00      	nop
 8001ad0:	e002      	b.n	8001ad8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ad2:	bf00      	nop
 8001ad4:	e000      	b.n	8001ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ad6:	bf00      	nop
    }
  } 
  
  return status; 
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	e159      	b.n	8001db8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f040 8148 	bne.w	8001db2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d005      	beq.n	8001b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d130      	bne.n	8001b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	2203      	movs	r2, #3
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b70:	2201      	movs	r2, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 0201 	and.w	r2, r3, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d017      	beq.n	8001bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d123      	bne.n	8001c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	08da      	lsrs	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3208      	adds	r2, #8
 8001bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3208      	adds	r2, #8
 8001c26:	69b9      	ldr	r1, [r7, #24]
 8001c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0203 	and.w	r2, r3, #3
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80a2 	beq.w	8001db2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b57      	ldr	r3, [pc, #348]	; (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a56      	ldr	r2, [pc, #344]	; (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b54      	ldr	r3, [pc, #336]	; (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8a:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a49      	ldr	r2, [pc, #292]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x202>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a48      	ldr	r2, [pc, #288]	; (8001ddc <HAL_GPIO_Init+0x2f4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x1fe>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a47      	ldr	r2, [pc, #284]	; (8001de0 <HAL_GPIO_Init+0x2f8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a46      	ldr	r2, [pc, #280]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x1f6>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a45      	ldr	r2, [pc, #276]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x1f2>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e008      	b.n	8001cec <HAL_GPIO_Init+0x204>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x204>
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e004      	b.n	8001cec <HAL_GPIO_Init+0x204>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_Init+0x204>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_GPIO_Init+0x204>
 8001cea:	2300      	movs	r3, #0
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	f002 0203 	and.w	r2, r2, #3
 8001cf2:	0092      	lsls	r2, r2, #2
 8001cf4:	4093      	lsls	r3, r2
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cfc:	4935      	ldr	r1, [pc, #212]	; (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0a:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d2e:	4a2f      	ldr	r2, [pc, #188]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d34:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d58:	4a24      	ldr	r2, [pc, #144]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d82:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dac:	4a0f      	ldr	r2, [pc, #60]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3301      	adds	r3, #1
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	2b0f      	cmp	r3, #15
 8001dbc:	f67f aea2 	bls.w	8001b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40020c00 	.word	0x40020c00
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40013c00 	.word	0x40013c00

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e0c:	e003      	b.n	8001e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	041a      	lsls	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e34:	887a      	ldrh	r2, [r7, #2]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	041a      	lsls	r2, r3, #16
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	400b      	ands	r3, r1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	619a      	str	r2, [r3, #24]
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e58:	b08f      	sub	sp, #60	; 0x3c
 8001e5a:	af0a      	add	r7, sp, #40	; 0x28
 8001e5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e10f      	b.n	8002088 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f007 fb94 	bl	80095b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 fe3b 	bl	8005b22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	687e      	ldr	r6, [r7, #4]
 8001eb4:	466d      	mov	r5, sp
 8001eb6:	f106 0410 	add.w	r4, r6, #16
 8001eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eca:	1d33      	adds	r3, r6, #4
 8001ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ece:	6838      	ldr	r0, [r7, #0]
 8001ed0:	f003 fd12 	bl	80058f8 <USB_CoreInit>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0d0      	b.n	8002088 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 fe29 	bl	8005b44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e04a      	b.n	8001f8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	333d      	adds	r3, #61	; 0x3d
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	333c      	adds	r3, #60	; 0x3c
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	b298      	uxth	r0, r3
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	3344      	adds	r3, #68	; 0x44
 8001f34:	4602      	mov	r2, r0
 8001f36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	3340      	adds	r3, #64	; 0x40
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	3348      	adds	r3, #72	; 0x48
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	334c      	adds	r3, #76	; 0x4c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	3354      	adds	r3, #84	; 0x54
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3af      	bcc.n	8001ef8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e044      	b.n	8002028 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	3301      	adds	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	d3b5      	bcc.n	8001f9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	687e      	ldr	r6, [r7, #4]
 800203a:	466d      	mov	r5, sp
 800203c:	f106 0410 	add.w	r4, r6, #16
 8002040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002048:	e894 0003 	ldmia.w	r4, {r0, r1}
 800204c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002050:	1d33      	adds	r3, r6, #4
 8002052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002054:	6838      	ldr	r0, [r7, #0]
 8002056:	f003 fdc1 	bl	8005bdc <USB_DevInit>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e00d      	b.n	8002088 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f004 ff10 	bl	8006ea6 <USB_DevDisconnect>

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002090 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_PCD_Start+0x1c>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e020      	b.n	80020ee <HAL_PCD_Start+0x5e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d109      	bne.n	80020d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d005      	beq.n	80020d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 fd13 	bl	8005b00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 fec0 	bl	8006e64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020f6:	b590      	push	{r4, r7, lr}
 80020f8:	b08d      	sub	sp, #52	; 0x34
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f004 ff7e 	bl	800700e <USB_GetMode>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 848a 	bne.w	8002a2e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f004 fee2 	bl	8006ee8 <USB_ReadInterrupts>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8480 	beq.w	8002a2c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f004 fecf 	bl	8006ee8 <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b02      	cmp	r3, #2
 8002152:	d107      	bne.n	8002164 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f002 0202 	and.w	r2, r2, #2
 8002162:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f004 febd 	bl	8006ee8 <USB_ReadInterrupts>
 800216e:	4603      	mov	r3, r0
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b10      	cmp	r3, #16
 8002176:	d161      	bne.n	800223c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0210 	bic.w	r2, r2, #16
 8002186:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	3304      	adds	r3, #4
 80021a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	0c5b      	lsrs	r3, r3, #17
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d124      	bne.n	80021fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d035      	beq.n	800222c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	6a38      	ldr	r0, [r7, #32]
 80021d4:	f004 fcf4 	bl	8006bc0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e4:	441a      	add	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	6a1a      	ldr	r2, [r3, #32]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021f6:	441a      	add	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	621a      	str	r2, [r3, #32]
 80021fc:	e016      	b.n	800222c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	0c5b      	lsrs	r3, r3, #17
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	2b06      	cmp	r3, #6
 8002208:	d110      	bne.n	800222c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002210:	2208      	movs	r2, #8
 8002212:	4619      	mov	r1, r3
 8002214:	6a38      	ldr	r0, [r7, #32]
 8002216:	f004 fcd3 	bl	8006bc0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	6a1a      	ldr	r2, [r3, #32]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002226:	441a      	add	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0210 	orr.w	r2, r2, #16
 800223a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f004 fe51 	bl	8006ee8 <USB_ReadInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002250:	f040 80a7 	bne.w	80023a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f004 fe56 	bl	8006f0e <USB_ReadDevAllOutEpInterrupt>
 8002262:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002264:	e099      	b.n	800239a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 808e 	beq.w	800238e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f004 fe7a 	bl	8006f76 <USB_ReadDevOutEPInterrupt>
 8002282:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229a:	461a      	mov	r2, r3
 800229c:	2301      	movs	r3, #1
 800229e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fec2 	bl	800302c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00c      	beq.n	80022cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022be:	461a      	mov	r2, r3
 80022c0:	2308      	movs	r3, #8
 80022c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 ff98 	bl	80031fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e2:	461a      	mov	r2, r3
 80022e4:	2310      	movs	r3, #16
 80022e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d030      	beq.n	8002354 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fa:	2b80      	cmp	r3, #128	; 0x80
 80022fc:	d109      	bne.n	8002312 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800230c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002310:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	3304      	adds	r3, #4
 8002326:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	78db      	ldrb	r3, [r3, #3]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d108      	bne.n	8002342 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2200      	movs	r2, #0
 8002334:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	b2db      	uxtb	r3, r3
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f007 fa33 	bl	80097a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234e:	461a      	mov	r2, r3
 8002350:	2302      	movs	r3, #2
 8002352:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236a:	461a      	mov	r2, r3
 800236c:	2320      	movs	r3, #32
 800236e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002386:	461a      	mov	r2, r3
 8002388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800238c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	3301      	adds	r3, #1
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	085b      	lsrs	r3, r3, #1
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	f47f af62 	bne.w	8002266 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 fd9e 	bl	8006ee8 <USB_ReadInterrupts>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023b6:	f040 80db 	bne.w	8002570 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 fdbf 	bl	8006f42 <USB_ReadDevAllInEpInterrupt>
 80023c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023ca:	e0cd      	b.n	8002568 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80c2 	beq.w	800255c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f004 fde5 	bl	8006fb2 <USB_ReadDevInEPInterrupt>
 80023e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d057      	beq.n	80024a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	2201      	movs	r2, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	43db      	mvns	r3, r3
 800240e:	69f9      	ldr	r1, [r7, #28]
 8002410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002414:	4013      	ands	r3, r2
 8002416:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	4413      	add	r3, r2
 8002420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002424:	461a      	mov	r2, r3
 8002426:	2301      	movs	r3, #1
 8002428:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d132      	bne.n	8002498 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	334c      	adds	r3, #76	; 0x4c
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4403      	add	r3, r0
 8002452:	3348      	adds	r3, #72	; 0x48
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4419      	add	r1, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4403      	add	r3, r0
 8002466:	334c      	adds	r3, #76	; 0x4c
 8002468:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	2b00      	cmp	r3, #0
 800246e:	d113      	bne.n	8002498 <HAL_PCD_IRQHandler+0x3a2>
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3354      	adds	r3, #84	; 0x54
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d108      	bne.n	8002498 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002490:	461a      	mov	r2, r3
 8002492:	2101      	movs	r1, #1
 8002494:	f004 fdec 	bl	8007070 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f007 f907 	bl	80096b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ba:	461a      	mov	r2, r3
 80024bc:	2308      	movs	r3, #8
 80024be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d6:	461a      	mov	r2, r3
 80024d8:	2310      	movs	r3, #16
 80024da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024f2:	461a      	mov	r2, r3
 80024f4:	2340      	movs	r3, #64	; 0x40
 80024f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d023      	beq.n	800254a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002504:	6a38      	ldr	r0, [r7, #32]
 8002506:	f003 fccd 	bl	8005ea4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	3338      	adds	r3, #56	; 0x38
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	3304      	adds	r3, #4
 800251c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	78db      	ldrb	r3, [r3, #3]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d108      	bne.n	8002538 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2200      	movs	r2, #0
 800252a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f007 f94a 	bl	80097cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002544:	461a      	mov	r2, r3
 8002546:	2302      	movs	r3, #2
 8002548:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fcdb 	bl	8002f12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	3301      	adds	r3, #1
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256a:	2b00      	cmp	r3, #0
 800256c:	f47f af2e 	bne.w	80023cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f004 fcb7 	bl	8006ee8 <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002584:	d122      	bne.n	80025cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d108      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025ac:	2100      	movs	r1, #0
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fec2 	bl	8003338 <HAL_PCDEx_LPM_Callback>
 80025b4:	e002      	b.n	80025bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f007 f8e8 	bl	800978c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f004 fc89 	bl	8006ee8 <USB_ReadInterrupts>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025e0:	d112      	bne.n	8002608 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d102      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f007 f8a4 	bl	8009740 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002606:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f004 fc6b 	bl	8006ee8 <USB_ReadInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261c:	f040 80b7 	bne.w	800278e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2110      	movs	r1, #16
 800263a:	4618      	mov	r0, r3
 800263c:	f003 fc32 	bl	8005ea4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002640:	2300      	movs	r3, #0
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002644:	e046      	b.n	80026d4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	4413      	add	r3, r2
 800264e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002652:	461a      	mov	r2, r3
 8002654:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002658:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266a:	0151      	lsls	r1, r2, #5
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	440a      	add	r2, r1
 8002670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002674:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002678:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002686:	461a      	mov	r2, r3
 8002688:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800268c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269e:	0151      	lsls	r1, r2, #5
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	440a      	add	r2, r1
 80026a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026be:	0151      	lsls	r1, r2, #5
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	440a      	add	r2, r1
 80026c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	3301      	adds	r3, #1
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026da:	429a      	cmp	r2, r3
 80026dc:	d3b3      	bcc.n	8002646 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800270a:	f043 030b 	orr.w	r3, r3, #11
 800270e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002720:	f043 030b 	orr.w	r3, r3, #11
 8002724:	6453      	str	r3, [r2, #68]	; 0x44
 8002726:	e015      	b.n	8002754 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002736:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800273a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800273e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800274e:	f043 030b 	orr.w	r3, r3, #11
 8002752:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002762:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002766:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002778:	461a      	mov	r2, r3
 800277a:	f004 fc79 	bl	8007070 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800278c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f004 fba8 	bl	8006ee8 <USB_ReadInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800279e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a2:	d124      	bne.n	80027ee <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f004 fc3e 	bl	800702a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 fbf3 	bl	8005f9e <USB_GetDevSpeed>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681c      	ldr	r4, [r3, #0]
 80027c4:	f001 f9e8 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 80027c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	4620      	mov	r0, r4
 80027d4:	f003 f8f2 	bl	80059bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f006 ff92 	bl	8009702 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f004 fb78 	bl	8006ee8 <USB_ReadInterrupts>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d10a      	bne.n	8002818 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f006 ff6f 	bl	80096e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f002 0208 	and.w	r2, r2, #8
 8002816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f004 fb63 	bl	8006ee8 <USB_ReadInterrupts>
 8002822:	4603      	mov	r3, r0
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d122      	bne.n	8002872 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002838:	2301      	movs	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
 800283c:	e014      	b.n	8002868 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	b2db      	uxtb	r3, r3
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fb27 	bl	8002eb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	3301      	adds	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	429a      	cmp	r2, r3
 8002870:	d3e5      	bcc.n	800283e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f004 fb36 	bl	8006ee8 <USB_ReadInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002886:	d13b      	bne.n	8002900 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002888:	2301      	movs	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	e02b      	b.n	80028e6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	3340      	adds	r3, #64	; 0x40
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d115      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80028b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da12      	bge.n	80028e0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	333f      	adds	r3, #63	; 0x3f
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	4619      	mov	r1, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fae8 	bl	8002eb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	3301      	adds	r3, #1
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d3ce      	bcc.n	800288e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f004 faef 	bl	8006ee8 <USB_ReadInterrupts>
 800290a:	4603      	mov	r3, r0
 800290c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002914:	d155      	bne.n	80029c2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002916:	2301      	movs	r3, #1
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	e045      	b.n	80029a8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d12e      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002944:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002946:	2b00      	cmp	r3, #0
 8002948:	da2b      	bge.n	80029a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002956:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800295a:	429a      	cmp	r2, r3
 800295c:	d121      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800299a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299e:	6053      	str	r3, [r2, #4]
            break;
 80029a0:	e007      	b.n	80029b2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	3301      	adds	r3, #1
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d3b4      	bcc.n	800291c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f004 fa8e 	bl	8006ee8 <USB_ReadInterrupts>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d6:	d10a      	bne.n	80029ee <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f006 ff09 	bl	80097f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 fa78 	bl	8006ee8 <USB_ReadInterrupts>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d115      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f006 fef9 	bl	800980c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	e000      	b.n	8002a2e <HAL_PCD_IRQHandler+0x938>
      return;
 8002a2c:	bf00      	nop
    }
  }
}
 8002a2e:	3734      	adds	r7, #52	; 0x34
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd90      	pop	{r4, r7, pc}

08002a34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_PCD_SetAddress+0x1a>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e013      	b.n	8002a76 <HAL_PCD_SetAddress+0x42>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 f9d6 	bl	8006e18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	4608      	mov	r0, r1
 8002a88:	4611      	mov	r1, r2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	70fb      	strb	r3, [r7, #3]
 8002a90:	460b      	mov	r3, r1
 8002a92:	803b      	strh	r3, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	da0f      	bge.n	8002ac4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	f003 020f 	and.w	r2, r3, #15
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	3338      	adds	r3, #56	; 0x38
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3304      	adds	r3, #4
 8002aba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	705a      	strb	r2, [r3, #1]
 8002ac2:	e00f      	b.n	8002ae4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	3304      	adds	r3, #4
 8002adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002af0:	883a      	ldrh	r2, [r7, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	78ba      	ldrb	r2, [r7, #2]
 8002afa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	785b      	ldrb	r3, [r3, #1]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b0e:	78bb      	ldrb	r3, [r7, #2]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d102      	bne.n	8002b1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_PCD_EP_Open+0xaa>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e00e      	b.n	8002b46 <HAL_PCD_EP_Open+0xc8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68f9      	ldr	r1, [r7, #12]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 fa56 	bl	8005fe8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b44:	7afb      	ldrb	r3, [r7, #11]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	da0f      	bge.n	8002b82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	f003 020f 	and.w	r2, r3, #15
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	3338      	adds	r3, #56	; 0x38
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	3304      	adds	r3, #4
 8002b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	705a      	strb	r2, [r3, #1]
 8002b80:	e00f      	b.n	8002ba2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	f003 020f 	and.w	r2, r3, #15
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	3304      	adds	r3, #4
 8002b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_PCD_EP_Close+0x6e>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e00e      	b.n	8002bda <HAL_PCD_EP_Close+0x8c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68f9      	ldr	r1, [r7, #12]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 fa94 	bl	80060f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf2:	7afb      	ldrb	r3, [r7, #11]
 8002bf4:	f003 020f 	and.w	r2, r3, #15
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	3304      	adds	r3, #4
 8002c0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2200      	movs	r2, #0
 8002c22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c24:	7afb      	ldrb	r3, [r7, #11]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d102      	bne.n	8002c3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c3e:	7afb      	ldrb	r3, [r7, #11]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	6979      	ldr	r1, [r7, #20]
 8002c56:	f003 fd73 	bl	8006740 <USB_EP0StartXfer>
 8002c5a:	e008      	b.n	8002c6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	6979      	ldr	r1, [r7, #20]
 8002c6a:	f003 fb21 	bl	80062b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	f003 020f 	and.w	r2, r3, #15
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	f003 020f 	and.w	r2, r3, #15
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	3338      	adds	r3, #56	; 0x38
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4413      	add	r3, r2
 8002ccc:	3304      	adds	r3, #4
 8002cce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce8:	7afb      	ldrb	r3, [r7, #11]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d102      	bne.n	8002d02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d109      	bne.n	8002d20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	6979      	ldr	r1, [r7, #20]
 8002d1a:	f003 fd11 	bl	8006740 <USB_EP0StartXfer>
 8002d1e:	e008      	b.n	8002d32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6979      	ldr	r1, [r7, #20]
 8002d2e:	f003 fabf 	bl	80062b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	f003 020f 	and.w	r2, r3, #15
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d901      	bls.n	8002d5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e050      	b.n	8002dfc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	da0f      	bge.n	8002d82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 020f 	and.w	r2, r3, #15
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	3338      	adds	r3, #56	; 0x38
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	3304      	adds	r3, #4
 8002d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	705a      	strb	r2, [r3, #1]
 8002d80:	e00d      	b.n	8002d9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	3304      	adds	r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_PCD_EP_SetStall+0x82>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e01e      	b.n	8002dfc <HAL_PCD_EP_SetStall+0xc0>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68f9      	ldr	r1, [r7, #12]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 ff4f 	bl	8006c70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	b2d9      	uxtb	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dec:	461a      	mov	r2, r3
 8002dee:	f004 f93f 	bl	8007070 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d901      	bls.n	8002e22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e042      	b.n	8002ea8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	da0f      	bge.n	8002e4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	3338      	adds	r3, #56	; 0x38
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3304      	adds	r3, #4
 8002e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	705a      	strb	r2, [r3, #1]
 8002e48:	e00f      	b.n	8002e6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 020f 	and.w	r2, r3, #15
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	3304      	adds	r3, #4
 8002e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_PCD_EP_ClrStall+0x86>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e00e      	b.n	8002ea8 <HAL_PCD_EP_ClrStall+0xa4>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 ff57 	bl	8006d4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da0c      	bge.n	8002ede <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	f003 020f 	and.w	r2, r3, #15
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	3338      	adds	r3, #56	; 0x38
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3304      	adds	r3, #4
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	e00c      	b.n	8002ef8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	f003 020f 	and.w	r2, r3, #15
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f003 fd76 	bl	80069f0 <USB_EPStopXfer>
 8002f04:	4603      	mov	r3, r0
 8002f06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f08:	7afb      	ldrb	r3, [r7, #11]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b08a      	sub	sp, #40	; 0x28
 8002f16:	af02      	add	r7, sp, #8
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	3338      	adds	r3, #56	; 0x38
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	3304      	adds	r3, #4
 8002f38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d901      	bls.n	8002f4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e06c      	b.n	8003024 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d902      	bls.n	8002f66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3303      	adds	r3, #3
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f6e:	e02b      	b.n	8002fc8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d902      	bls.n	8002f8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3303      	adds	r3, #3
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6919      	ldr	r1, [r3, #16]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	4603      	mov	r3, r0
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f003 fdca 	bl	8006b44 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	441a      	add	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1a      	ldr	r2, [r3, #32]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	441a      	add	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d809      	bhi.n	8002ff2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d203      	bcs.n	8002ff2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1be      	bne.n	8002f70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d811      	bhi.n	8003022 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	2201      	movs	r2, #1
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	43db      	mvns	r3, r3
 8003018:	6939      	ldr	r1, [r7, #16]
 800301a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800301e:	4013      	ands	r3, r2
 8003020:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	333c      	adds	r3, #60	; 0x3c
 8003044:	3304      	adds	r3, #4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d17b      	bne.n	800315a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d015      	beq.n	8003098 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	4a61      	ldr	r2, [pc, #388]	; (80031f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	f240 80b9 	bls.w	80031e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80b3 	beq.w	80031e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308e:	461a      	mov	r2, r3
 8003090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003094:	6093      	str	r3, [r2, #8]
 8003096:	e0a7      	b.n	80031e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	461a      	mov	r2, r3
 80030b0:	2320      	movs	r3, #32
 80030b2:	6093      	str	r3, [r2, #8]
 80030b4:	e098      	b.n	80031e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f040 8093 	bne.w	80031e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d90f      	bls.n	80030ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e0:	461a      	mov	r2, r3
 80030e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030e6:	6093      	str	r3, [r2, #8]
 80030e8:	e07e      	b.n	80031e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	3304      	adds	r3, #4
 80030fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	0159      	lsls	r1, r3, #5
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	440b      	add	r3, r1
 800310c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003116:	1ad2      	subs	r2, r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d114      	bne.n	800314c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003134:	461a      	mov	r2, r3
 8003136:	2101      	movs	r1, #1
 8003138:	f003 ff9a 	bl	8007070 <USB_EP0_OutStart>
 800313c:	e006      	b.n	800314c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	441a      	add	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f006 fa92 	bl	800967c <HAL_PCD_DataOutStageCallback>
 8003158:	e046      	b.n	80031e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d124      	bne.n	80031ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003178:	461a      	mov	r2, r3
 800317a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317e:	6093      	str	r3, [r2, #8]
 8003180:	e032      	b.n	80031e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	461a      	mov	r2, r3
 800319a:	2320      	movs	r3, #32
 800319c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f006 fa69 	bl	800967c <HAL_PCD_DataOutStageCallback>
 80031aa:	e01d      	b.n	80031e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d114      	bne.n	80031dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d108      	bne.n	80031dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031d4:	461a      	mov	r2, r3
 80031d6:	2100      	movs	r1, #0
 80031d8:	f003 ff4a 	bl	8007070 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	4619      	mov	r1, r3
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f006 fa4a 	bl	800967c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	4f54300a 	.word	0x4f54300a
 80031f8:	4f54310a 	.word	0x4f54310a

080031fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	333c      	adds	r3, #60	; 0x3c
 8003214:	3304      	adds	r3, #4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a15      	ldr	r2, [pc, #84]	; (8003284 <PCD_EP_OutSetupPacket_int+0x88>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d90e      	bls.n	8003250 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003248:	461a      	mov	r2, r3
 800324a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800324e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f006 fa01 	bl	8009658 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <PCD_EP_OutSetupPacket_int+0x88>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d90c      	bls.n	8003278 <PCD_EP_OutSetupPacket_int+0x7c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003270:	461a      	mov	r2, r3
 8003272:	2101      	movs	r1, #1
 8003274:	f003 fefc 	bl	8007070 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	4f54300a 	.word	0x4f54300a

08003288 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	70fb      	strb	r3, [r7, #3]
 8003294:	4613      	mov	r3, r2
 8003296:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032a6:	883b      	ldrh	r3, [r7, #0]
 80032a8:	0419      	lsls	r1, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28
 80032b4:	e028      	b.n	8003308 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	4413      	add	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e00d      	b.n	80032e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	3340      	adds	r3, #64	; 0x40
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	0c1b      	lsrs	r3, r3, #16
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	4413      	add	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	3301      	adds	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d3ec      	bcc.n	80032ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032f0:	883b      	ldrh	r3, [r7, #0]
 80032f2:	0418      	lsls	r0, r3, #16
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6819      	ldr	r1, [r3, #0]
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	4302      	orrs	r2, r0
 8003300:	3340      	adds	r3, #64	; 0x40
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e267      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d075      	beq.n	800345a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336e:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b04      	cmp	r3, #4
 8003378:	d00c      	beq.n	8003394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b85      	ldr	r3, [pc, #532]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d112      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003386:	4b82      	ldr	r3, [pc, #520]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003392:	d10b      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	4b7e      	ldr	r3, [pc, #504]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05b      	beq.n	8003458 <HAL_RCC_OscConfig+0x108>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d157      	bne.n	8003458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e242      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x74>
 80033b6:	4b76      	ldr	r3, [pc, #472]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a75      	ldr	r2, [pc, #468]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e01d      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b70      	ldr	r3, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6f      	ldr	r2, [pc, #444]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b6d      	ldr	r3, [pc, #436]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a6c      	ldr	r2, [pc, #432]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033e8:	4b69      	ldr	r3, [pc, #420]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a68      	ldr	r2, [pc, #416]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b66      	ldr	r3, [pc, #408]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a65      	ldr	r2, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fd fe2a 	bl	8001060 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003410:	f7fd fe26 	bl	8001060 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e207      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0xc0>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fd fe16 	bl	8001060 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7fd fe12 	bl	8001060 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1f3      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0xe8>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d063      	beq.n	800352e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003466:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b47      	ldr	r3, [pc, #284]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347a:	2b08      	cmp	r3, #8
 800347c:	d11c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347e:	4b44      	ldr	r3, [pc, #272]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d116      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e1c7      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a2:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4937      	ldr	r1, [pc, #220]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	e03a      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <HAL_RCC_OscConfig+0x244>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fd fdcb 	bl	8001060 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fd fdc7 	bl	8001060 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e1a8      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b28      	ldr	r3, [pc, #160]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4925      	ldr	r1, [pc, #148]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
 8003500:	e015      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_OscConfig+0x244>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fd fdaa 	bl	8001060 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003510:	f7fd fda6 	bl	8001060 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e187      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d036      	beq.n	80035a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_RCC_OscConfig+0x248>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fd fd8a 	bl	8001060 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003550:	f7fd fd86 	bl	8001060 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e167      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x200>
 800356e:	e01b      	b.n	80035a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCC_OscConfig+0x248>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003576:	f7fd fd73 	bl	8001060 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357c:	e00e      	b.n	800359c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357e:	f7fd fd6f 	bl	8001060 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d907      	bls.n	800359c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e150      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
 8003590:	40023800 	.word	0x40023800
 8003594:	42470000 	.word	0x42470000
 8003598:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359c:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800359e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ea      	bne.n	800357e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8097 	beq.w	80036e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ba:	4b81      	ldr	r3, [pc, #516]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10f      	bne.n	80035e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	4b7d      	ldr	r3, [pc, #500]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	4a7c      	ldr	r2, [pc, #496]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6413      	str	r3, [r2, #64]	; 0x40
 80035d6:	4b7a      	ldr	r3, [pc, #488]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b77      	ldr	r3, [pc, #476]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d118      	bne.n	8003624 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f2:	4b74      	ldr	r3, [pc, #464]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a73      	ldr	r2, [pc, #460]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fe:	f7fd fd2f 	bl	8001060 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003606:	f7fd fd2b 	bl	8001060 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e10c      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x2ea>
 800362c:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	4a63      	ldr	r2, [pc, #396]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6713      	str	r3, [r2, #112]	; 0x70
 8003638:	e01c      	b.n	8003674 <HAL_RCC_OscConfig+0x324>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b05      	cmp	r3, #5
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x30c>
 8003642:	4b5f      	ldr	r3, [pc, #380]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a5e      	ldr	r2, [pc, #376]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
 800364e:	4b5c      	ldr	r3, [pc, #368]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	4a5b      	ldr	r2, [pc, #364]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6713      	str	r3, [r2, #112]	; 0x70
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0x324>
 800365c:	4b58      	ldr	r3, [pc, #352]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a57      	ldr	r2, [pc, #348]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	4b55      	ldr	r3, [pc, #340]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a54      	ldr	r2, [pc, #336]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800366e:	f023 0304 	bic.w	r3, r3, #4
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fd fcf0 	bl	8001060 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fd fcec 	bl	8001060 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0cb      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0ee      	beq.n	8003684 <HAL_RCC_OscConfig+0x334>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a8:	f7fd fcda 	bl	8001060 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fd fcd6 	bl	8001060 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0b5      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ee      	bne.n	80036b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d105      	bne.n	80036e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d8:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	4a38      	ldr	r2, [pc, #224]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80a1 	beq.w	8003830 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ee:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d05c      	beq.n	80037b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d141      	bne.n	8003786 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fd fcaa 	bl	8001060 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fd fca6 	bl	8001060 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e087      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	019b      	lsls	r3, r3, #6
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	3b01      	subs	r3, #1
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	491b      	ldr	r1, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fd fc7f 	bl	8001060 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003766:	f7fd fc7b 	bl	8001060 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e05c      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x416>
 8003784:	e054      	b.n	8003830 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fd fc68 	bl	8001060 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fd fc64 	bl	8001060 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e045      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x444>
 80037b2:	e03d      	b.n	8003830 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e038      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40007000 	.word	0x40007000
 80037c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x4ec>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d028      	beq.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d121      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d11a      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003804:	4293      	cmp	r3, r2
 8003806:	d111      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	3b01      	subs	r3, #1
 8003816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800

08003840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0cc      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003854:	4b68      	ldr	r3, [pc, #416]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d90c      	bls.n	800387c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b65      	ldr	r3, [pc, #404]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0b8      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a58      	ldr	r2, [pc, #352]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800389e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	494d      	ldr	r1, [pc, #308]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d044      	beq.n	8003960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d119      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	4b3f      	ldr	r3, [pc, #252]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390e:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e067      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 0203 	bic.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4934      	ldr	r1, [pc, #208]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003930:	f7fd fb96 	bl	8001060 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fd fb92 	bl	8001060 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e04f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 020c 	and.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	429a      	cmp	r2, r3
 800395e:	d1eb      	bne.n	8003938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d20c      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e032      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4916      	ldr	r1, [pc, #88]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490e      	ldr	r1, [pc, #56]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039c6:	f000 f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	490a      	ldr	r1, [pc, #40]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd faf6 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023c00 	.word	0x40023c00
 80039fc:	40023800 	.word	0x40023800
 8003a00:	0800a868 	.word	0x0800a868
 8003a04:	20000000 	.word	0x20000000
 8003a08:	20000004 	.word	0x20000004

08003a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a10:	b090      	sub	sp, #64	; 0x40
 8003a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
 8003a18:	2300      	movs	r3, #0
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a24:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d00d      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x40>
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	f200 80a1 	bhi.w	8003b78 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x34>
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a3e:	e09b      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a44:	e09b      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a46:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a4a:	e098      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4c:	4b4f      	ldr	r3, [pc, #316]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a56:	4b4d      	ldr	r3, [pc, #308]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d028      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a62:	4b4a      	ldr	r3, [pc, #296]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	2200      	movs	r2, #0
 8003a6a:	623b      	str	r3, [r7, #32]
 8003a6c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a74:	2100      	movs	r1, #0
 8003a76:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a78:	fb03 f201 	mul.w	r2, r3, r1
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	fb00 f303 	mul.w	r3, r0, r3
 8003a82:	4413      	add	r3, r2
 8003a84:	4a43      	ldr	r2, [pc, #268]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a86:	fba0 1202 	umull	r1, r2, r0, r2
 8003a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a8c:	460a      	mov	r2, r1
 8003a8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a92:	4413      	add	r3, r2
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a98:	2200      	movs	r2, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	61fa      	str	r2, [r7, #28]
 8003a9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003aa6:	f7fc fbf3 	bl	8000290 <__aeabi_uldivmod>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4613      	mov	r3, r2
 8003ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab2:	e053      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab4:	4b35      	ldr	r3, [pc, #212]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	099b      	lsrs	r3, r3, #6
 8003aba:	2200      	movs	r2, #0
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	617a      	str	r2, [r7, #20]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ac6:	f04f 0b00 	mov.w	fp, #0
 8003aca:	4652      	mov	r2, sl
 8003acc:	465b      	mov	r3, fp
 8003ace:	f04f 0000 	mov.w	r0, #0
 8003ad2:	f04f 0100 	mov.w	r1, #0
 8003ad6:	0159      	lsls	r1, r3, #5
 8003ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003adc:	0150      	lsls	r0, r2, #5
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	ebb2 080a 	subs.w	r8, r2, sl
 8003ae6:	eb63 090b 	sbc.w	r9, r3, fp
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003af6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003afa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003afe:	ebb2 0408 	subs.w	r4, r2, r8
 8003b02:	eb63 0509 	sbc.w	r5, r3, r9
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	00eb      	lsls	r3, r5, #3
 8003b10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b14:	00e2      	lsls	r2, r4, #3
 8003b16:	4614      	mov	r4, r2
 8003b18:	461d      	mov	r5, r3
 8003b1a:	eb14 030a 	adds.w	r3, r4, sl
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	eb45 030b 	adc.w	r3, r5, fp
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b32:	4629      	mov	r1, r5
 8003b34:	028b      	lsls	r3, r1, #10
 8003b36:	4621      	mov	r1, r4
 8003b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	028a      	lsls	r2, r1, #10
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b46:	2200      	movs	r2, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	60fa      	str	r2, [r7, #12]
 8003b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b50:	f7fc fb9e 	bl	8000290 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	3301      	adds	r3, #1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3740      	adds	r7, #64	; 0x40
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	017d7840 	.word	0x017d7840

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000000 	.word	0x20000000

08003bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bb4:	f7ff fff0 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0a9b      	lsrs	r3, r3, #10
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4903      	ldr	r1, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	0800a878 	.word	0x0800a878

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bdc:	f7ff ffdc 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0b5b      	lsrs	r3, r3, #13
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	0800a878 	.word	0x0800a878

08003c00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e041      	b.n	8003c96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fc ffde 	bl	8000be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f000 f9a0 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_TIM_PWM_Start+0x24>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e022      	b.n	8003d0a <HAL_TIM_PWM_Start+0x6a>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d109      	bne.n	8003cde <HAL_TIM_PWM_Start+0x3e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	bf14      	ite	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	2300      	moveq	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	e015      	b.n	8003d0a <HAL_TIM_PWM_Start+0x6a>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d109      	bne.n	8003cf8 <HAL_TIM_PWM_Start+0x58>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e008      	b.n	8003d0a <HAL_TIM_PWM_Start+0x6a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e068      	b.n	8003de4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <HAL_TIM_PWM_Start+0x82>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d20:	e013      	b.n	8003d4a <HAL_TIM_PWM_Start+0xaa>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start+0x92>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d30:	e00b      	b.n	8003d4a <HAL_TIM_PWM_Start+0xaa>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_PWM_Start+0xa2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d40:	e003      	b.n	8003d4a <HAL_TIM_PWM_Start+0xaa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	6839      	ldr	r1, [r7, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fb22 	bl	800439c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <HAL_TIM_PWM_Start+0x14c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d107      	bne.n	8003d72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1d      	ldr	r2, [pc, #116]	; (8003dec <HAL_TIM_PWM_Start+0x14c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_TIM_PWM_Start+0x10e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d013      	beq.n	8003dae <HAL_TIM_PWM_Start+0x10e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <HAL_TIM_PWM_Start+0x150>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <HAL_TIM_PWM_Start+0x10e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <HAL_TIM_PWM_Start+0x154>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_TIM_PWM_Start+0x10e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a16      	ldr	r2, [pc, #88]	; (8003df8 <HAL_TIM_PWM_Start+0x158>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_TIM_PWM_Start+0x10e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <HAL_TIM_PWM_Start+0x15c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d111      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b06      	cmp	r3, #6
 8003dbe:	d010      	beq.n	8003de2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd0:	e007      	b.n	8003de2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800
 8003df8:	40000c00 	.word	0x40000c00
 8003dfc:	40014000 	.word	0x40014000

08003e00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e0ae      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b0c      	cmp	r3, #12
 8003e2a:	f200 809f 	bhi.w	8003f6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08003f6d 	.word	0x08003f6d
 8003e3c:	08003f6d 	.word	0x08003f6d
 8003e40:	08003f6d 	.word	0x08003f6d
 8003e44:	08003ea9 	.word	0x08003ea9
 8003e48:	08003f6d 	.word	0x08003f6d
 8003e4c:	08003f6d 	.word	0x08003f6d
 8003e50:	08003f6d 	.word	0x08003f6d
 8003e54:	08003eeb 	.word	0x08003eeb
 8003e58:	08003f6d 	.word	0x08003f6d
 8003e5c:	08003f6d 	.word	0x08003f6d
 8003e60:	08003f6d 	.word	0x08003f6d
 8003e64:	08003f2b 	.word	0x08003f2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f908 	bl	8004084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0208 	orr.w	r2, r2, #8
 8003e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0204 	bic.w	r2, r2, #4
 8003e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6999      	ldr	r1, [r3, #24]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	619a      	str	r2, [r3, #24]
      break;
 8003ea6:	e064      	b.n	8003f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f94e 	bl	8004150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6999      	ldr	r1, [r3, #24]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	619a      	str	r2, [r3, #24]
      break;
 8003ee8:	e043      	b.n	8003f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 f999 	bl	8004228 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0208 	orr.w	r2, r2, #8
 8003f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0204 	bic.w	r2, r2, #4
 8003f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69d9      	ldr	r1, [r3, #28]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	61da      	str	r2, [r3, #28]
      break;
 8003f28:	e023      	b.n	8003f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 f9e3 	bl	80042fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69d9      	ldr	r1, [r3, #28]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	021a      	lsls	r2, r3, #8
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	61da      	str	r2, [r3, #28]
      break;
 8003f6a:	e002      	b.n	8003f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a34      	ldr	r2, [pc, #208]	; (8004068 <TIM_Base_SetConfig+0xe4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00f      	beq.n	8003fbc <TIM_Base_SetConfig+0x38>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d00b      	beq.n	8003fbc <TIM_Base_SetConfig+0x38>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a31      	ldr	r2, [pc, #196]	; (800406c <TIM_Base_SetConfig+0xe8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d007      	beq.n	8003fbc <TIM_Base_SetConfig+0x38>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a30      	ldr	r2, [pc, #192]	; (8004070 <TIM_Base_SetConfig+0xec>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_Base_SetConfig+0x38>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a2f      	ldr	r2, [pc, #188]	; (8004074 <TIM_Base_SetConfig+0xf0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d108      	bne.n	8003fce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a25      	ldr	r2, [pc, #148]	; (8004068 <TIM_Base_SetConfig+0xe4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01b      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d017      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	; (800406c <TIM_Base_SetConfig+0xe8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a21      	ldr	r2, [pc, #132]	; (8004070 <TIM_Base_SetConfig+0xec>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00f      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a20      	ldr	r2, [pc, #128]	; (8004074 <TIM_Base_SetConfig+0xf0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00b      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <TIM_Base_SetConfig+0xf4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d007      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a1e      	ldr	r2, [pc, #120]	; (800407c <TIM_Base_SetConfig+0xf8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d003      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <TIM_Base_SetConfig+0xfc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d108      	bne.n	8004020 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a08      	ldr	r2, [pc, #32]	; (8004068 <TIM_Base_SetConfig+0xe4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d103      	bne.n	8004054 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	615a      	str	r2, [r3, #20]
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	40014800 	.word	0x40014800

08004084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f023 0201 	bic.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f023 0302 	bic.w	r3, r3, #2
 80040cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a1c      	ldr	r2, [pc, #112]	; (800414c <TIM_OC1_SetConfig+0xc8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d10c      	bne.n	80040fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0308 	bic.w	r3, r3, #8
 80040e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a13      	ldr	r2, [pc, #76]	; (800414c <TIM_OC1_SetConfig+0xc8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d111      	bne.n	8004126 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	621a      	str	r2, [r3, #32]
}
 8004140:	bf00      	nop
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40010000 	.word	0x40010000

08004150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0210 	bic.w	r2, r3, #16
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0320 	bic.w	r3, r3, #32
 800419a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a1e      	ldr	r2, [pc, #120]	; (8004224 <TIM_OC2_SetConfig+0xd4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10d      	bne.n	80041cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a15      	ldr	r2, [pc, #84]	; (8004224 <TIM_OC2_SetConfig+0xd4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d113      	bne.n	80041fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40010000 	.word	0x40010000

08004228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <TIM_OC3_SetConfig+0xd0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10d      	bne.n	80042a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800428c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <TIM_OC3_SetConfig+0xd0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d113      	bne.n	80042d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	621a      	str	r2, [r3, #32]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40010000 	.word	0x40010000

080042fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	031b      	lsls	r3, r3, #12
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a10      	ldr	r2, [pc, #64]	; (8004398 <TIM_OC4_SetConfig+0x9c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d109      	bne.n	8004370 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004362:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40010000 	.word	0x40010000

0800439c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2201      	movs	r2, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1a      	ldr	r2, [r3, #32]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	43db      	mvns	r3, r3
 80043be:	401a      	ands	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e050      	b.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444c:	d013      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a15      	ldr	r2, [pc, #84]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a13      	ldr	r2, [pc, #76]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10c      	bne.n	8004490 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4313      	orrs	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	40014000 	.word	0x40014000

080044c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e03f      	b.n	8004556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc fbd8 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2224      	movs	r2, #36	; 0x24
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 ff81 	bl	8005410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800451c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800452c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800453c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08c      	sub	sp, #48	; 0x30
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b20      	cmp	r3, #32
 8004578:	d165      	bne.n	8004646 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_UART_Transmit_DMA+0x26>
 8004580:	88fb      	ldrh	r3, [r7, #6]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e05e      	b.n	8004648 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_UART_Transmit_DMA+0x38>
 8004594:	2302      	movs	r3, #2
 8004596:	e057      	b.n	8004648 <HAL_UART_Transmit_DMA+0xe8>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	88fa      	ldrh	r2, [r7, #6]
 80045aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2221      	movs	r2, #33	; 0x21
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	4a22      	ldr	r2, [pc, #136]	; (8004650 <HAL_UART_Transmit_DMA+0xf0>)
 80045c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045cc:	4a21      	ldr	r2, [pc, #132]	; (8004654 <HAL_UART_Transmit_DMA+0xf4>)
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d4:	4a20      	ldr	r2, [pc, #128]	; (8004658 <HAL_UART_Transmit_DMA+0xf8>)
 80045d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	2200      	movs	r2, #0
 80045de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80045e0:	f107 0308 	add.w	r3, r7, #8
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	6819      	ldr	r1, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3304      	adds	r3, #4
 80045f4:	461a      	mov	r2, r3
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	f7fc ff22 	bl	8001440 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004604:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	617b      	str	r3, [r7, #20]
   return(result);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800462e:	627a      	str	r2, [r7, #36]	; 0x24
 8004630:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6a39      	ldr	r1, [r7, #32]
 8004634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	61fb      	str	r3, [r7, #28]
   return(result);
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e000      	b.n	8004648 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004646:	2302      	movs	r3, #2
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	3730      	adds	r7, #48	; 0x30
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	08004ca9 	.word	0x08004ca9
 8004654:	08004d43 	.word	0x08004d43
 8004658:	08004ebb 	.word	0x08004ebb

0800465c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08c      	sub	sp, #48	; 0x30
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b20      	cmp	r3, #32
 8004674:	d152      	bne.n	800471c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e04b      	b.n	800471e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004690:	2302      	movs	r3, #2
 8004692:	e044      	b.n	800471e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	461a      	mov	r2, r3
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fc51 	bl	8004f50 <UART_Start_Receive_DMA>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80046b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d12c      	bne.n	8004716 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d125      	bne.n	8004710 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046c4:	2300      	movs	r3, #0
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f043 0310 	orr.w	r3, r3, #16
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046fa:	627a      	str	r2, [r7, #36]	; 0x24
 80046fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	6a39      	ldr	r1, [r7, #32]
 8004700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	61fb      	str	r3, [r7, #28]
   return(result);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e5      	bne.n	80046da <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800470e:	e002      	b.n	8004716 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800471a:	e000      	b.n	800471e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800471c:	2302      	movs	r3, #2
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3730      	adds	r7, #48	; 0x30
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b0ba      	sub	sp, #232	; 0xe8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800474e:	2300      	movs	r3, #0
 8004750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004754:	2300      	movs	r3, #0
 8004756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004766:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_UART_IRQHandler+0x66>
 800477a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fd87 	bl	800529a <UART_Receive_IT>
      return;
 800478c:	e256      	b.n	8004c3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800478e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80de 	beq.w	8004954 <HAL_UART_IRQHandler+0x22c>
 8004798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80d1 	beq.w	8004954 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_UART_IRQHandler+0xae>
 80047be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f043 0201 	orr.w	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_UART_IRQHandler+0xd2>
 80047e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f043 0202 	orr.w	r2, r3, #2
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <HAL_UART_IRQHandler+0xf6>
 8004806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0204 	orr.w	r2, r3, #4
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d011      	beq.n	800484e <HAL_UART_IRQHandler+0x126>
 800482a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d105      	bne.n	8004842 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f043 0208 	orr.w	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 81ed 	beq.w	8004c32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_UART_IRQHandler+0x14e>
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fd12 	bl	800529a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <HAL_UART_IRQHandler+0x17a>
 800489a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d04f      	beq.n	8004942 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fc1a 	bl	80050dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d141      	bne.n	800493a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3314      	adds	r3, #20
 80048bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3314      	adds	r3, #20
 80048de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1d9      	bne.n	80048b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	2b00      	cmp	r3, #0
 8004908:	d013      	beq.n	8004932 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	4a7d      	ldr	r2, [pc, #500]	; (8004b04 <HAL_UART_IRQHandler+0x3dc>)
 8004910:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	4618      	mov	r0, r3
 8004918:	f7fc fe5a 	bl	80015d0 <HAL_DMA_Abort_IT>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d016      	beq.n	8004950 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800492c:	4610      	mov	r0, r2
 800492e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	e00e      	b.n	8004950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9ae 	bl	8004c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	e00a      	b.n	8004950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9aa 	bl	8004c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004940:	e006      	b.n	8004950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f9a6 	bl	8004c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800494e:	e170      	b.n	8004c32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	bf00      	nop
    return;
 8004952:	e16e      	b.n	8004c32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	2b01      	cmp	r3, #1
 800495a:	f040 814a 	bne.w	8004bf2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800495e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8143 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800496c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 813c 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	f040 80b4 	bne.w	8004b08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8140 	beq.w	8004c36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049be:	429a      	cmp	r2, r3
 80049c0:	f080 8139 	bcs.w	8004c36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d6:	f000 8088 	beq.w	8004aea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1d9      	bne.n	80049da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3314      	adds	r3, #20
 8004a2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3314      	adds	r3, #20
 8004a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e1      	bne.n	8004a26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3314      	adds	r3, #20
 8004a68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3314      	adds	r3, #20
 8004a82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e3      	bne.n	8004a62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aba:	f023 0310 	bic.w	r3, r3, #16
 8004abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004acc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ace:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e3      	bne.n	8004aa8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fc fd03 	bl	80014f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	4619      	mov	r1, r3
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fb feee 	bl	80008dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b00:	e099      	b.n	8004c36 <HAL_UART_IRQHandler+0x50e>
 8004b02:	bf00      	nop
 8004b04:	080051a3 	.word	0x080051a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 808b 	beq.w	8004c3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8086 	beq.w	8004c3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b52:	647a      	str	r2, [r7, #68]	; 0x44
 8004b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e3      	bne.n	8004b2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3314      	adds	r3, #20
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	623b      	str	r3, [r7, #32]
   return(result);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b8a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e3      	bne.n	8004b66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0310 	bic.w	r3, r3, #16
 8004bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	330c      	adds	r3, #12
 8004bcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bd0:	61fa      	str	r2, [r7, #28]
 8004bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e3      	bne.n	8004bac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fb fe76 	bl	80008dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bf0:	e023      	b.n	8004c3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_UART_IRQHandler+0x4ea>
 8004bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fadd 	bl	80051ca <UART_Transmit_IT>
    return;
 8004c10:	e014      	b.n	8004c3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00e      	beq.n	8004c3c <HAL_UART_IRQHandler+0x514>
 8004c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fb1d 	bl	800526a <UART_EndTransmit_IT>
    return;
 8004c30:	e004      	b.n	8004c3c <HAL_UART_IRQHandler+0x514>
    return;
 8004c32:	bf00      	nop
 8004c34:	e002      	b.n	8004c3c <HAL_UART_IRQHandler+0x514>
      return;
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <HAL_UART_IRQHandler+0x514>
      return;
 8004c3a:	bf00      	nop
  }
}
 8004c3c:	37e8      	adds	r7, #232	; 0xe8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop

08004c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b090      	sub	sp, #64	; 0x40
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d137      	bne.n	8004d34 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3314      	adds	r3, #20
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3314      	adds	r3, #20
 8004ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cea:	633a      	str	r2, [r7, #48]	; 0x30
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e5      	bne.n	8004cca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	330c      	adds	r3, #12
 8004d04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d1e:	61fa      	str	r2, [r7, #28]
 8004d20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	69b9      	ldr	r1, [r7, #24]
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e5      	bne.n	8004cfe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d32:	e002      	b.n	8004d3a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004d34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d36:	f7ff ff85 	bl	8004c44 <HAL_UART_TxCpltCallback>
}
 8004d3a:	bf00      	nop
 8004d3c:	3740      	adds	r7, #64	; 0x40
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff ff81 	bl	8004c58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b09c      	sub	sp, #112	; 0x70
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d172      	bne.n	8004e60 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d96:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004da0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004da2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3314      	adds	r3, #20
 8004dba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	667b      	str	r3, [r7, #100]	; 0x64
 8004dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004dd4:	647a      	str	r2, [r7, #68]	; 0x44
 8004dd6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e5      	bne.n	8004db4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3314      	adds	r3, #20
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	623b      	str	r3, [r7, #32]
   return(result);
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8004e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3314      	adds	r3, #20
 8004e06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e08:	633a      	str	r2, [r7, #48]	; 0x30
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e5      	bne.n	8004de8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d119      	bne.n	8004e60 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0310 	bic.w	r3, r3, #16
 8004e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e4c:	61fa      	str	r2, [r7, #28]
 8004e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	69b9      	ldr	r1, [r7, #24]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	617b      	str	r3, [r7, #20]
   return(result);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d106      	bne.n	8004e76 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e70:	f7fb fd34 	bl	80008dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e74:	e002      	b.n	8004e7c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004e76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e78:	f7ff fef8 	bl	8004c6c <HAL_UART_RxCpltCallback>
}
 8004e7c:	bf00      	nop
 8004e7e:	3770      	adds	r7, #112	; 0x70
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d108      	bne.n	8004eac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7fb fd19 	bl	80008dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004eaa:	e002      	b.n	8004eb2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff fee7 	bl	8004c80 <HAL_UART_RxHalfCpltCallback>
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	bf0c      	ite	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	2300      	movne	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b21      	cmp	r3, #33	; 0x21
 8004eec:	d108      	bne.n	8004f00 <UART_DMAError+0x46>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004efa:	68b8      	ldr	r0, [r7, #8]
 8004efc:	f000 f8c6 	bl	800508c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b22      	cmp	r3, #34	; 0x22
 8004f20:	d108      	bne.n	8004f34 <UART_DMAError+0x7a>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f2e:	68b8      	ldr	r0, [r7, #8]
 8004f30:	f000 f8d4 	bl	80050dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f043 0210 	orr.w	r2, r3, #16
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f40:	68b8      	ldr	r0, [r7, #8]
 8004f42:	f7ff fea7 	bl	8004c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b098      	sub	sp, #96	; 0x60
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	88fa      	ldrh	r2, [r7, #6]
 8004f68:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2222      	movs	r2, #34	; 0x22
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	4a40      	ldr	r2, [pc, #256]	; (8005080 <UART_Start_Receive_DMA+0x130>)
 8004f7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	4a3f      	ldr	r2, [pc, #252]	; (8005084 <UART_Start_Receive_DMA+0x134>)
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	4a3e      	ldr	r2, [pc, #248]	; (8005088 <UART_Start_Receive_DMA+0x138>)
 8004f8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	2200      	movs	r2, #0
 8004f96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004f98:	f107 0308 	add.w	r3, r7, #8
 8004f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	f7fc fa46 	bl	8001440 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d019      	beq.n	800500e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ffa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004ffc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e5      	bne.n	8004fda <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3314      	adds	r3, #20
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	657b      	str	r3, [r7, #84]	; 0x54
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3314      	adds	r3, #20
 800502c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800502e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e5      	bne.n	800500e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	617b      	str	r3, [r7, #20]
   return(result);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005058:	653b      	str	r3, [r7, #80]	; 0x50
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3314      	adds	r3, #20
 8005060:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005062:	627a      	str	r2, [r7, #36]	; 0x24
 8005064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6a39      	ldr	r1, [r7, #32]
 8005068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e5      	bne.n	8005042 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3760      	adds	r7, #96	; 0x60
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	08004d5f 	.word	0x08004d5f
 8005084:	08004e85 	.word	0x08004e85
 8005088:	08004ebb 	.word	0x08004ebb

0800508c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800508c:	b480      	push	{r7}
 800508e:	b089      	sub	sp, #36	; 0x24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	61ba      	str	r2, [r7, #24]
 80050b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6979      	ldr	r1, [r7, #20]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	613b      	str	r3, [r7, #16]
   return(result);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e5      	bne.n	8005094 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80050d0:	bf00      	nop
 80050d2:	3724      	adds	r7, #36	; 0x24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b095      	sub	sp, #84	; 0x54
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005104:	643a      	str	r2, [r7, #64]	; 0x40
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800510a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	61fb      	str	r3, [r7, #28]
   return(result);
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800513e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e5      	bne.n	8005118 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	2b01      	cmp	r3, #1
 8005152:	d119      	bne.n	8005188 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	60bb      	str	r3, [r7, #8]
   return(result);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f023 0310 	bic.w	r3, r3, #16
 800516a:	647b      	str	r3, [r7, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005174:	61ba      	str	r2, [r7, #24]
 8005176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6979      	ldr	r1, [r7, #20]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	613b      	str	r3, [r7, #16]
   return(result);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e5      	bne.n	8005154 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005196:	bf00      	nop
 8005198:	3754      	adds	r7, #84	; 0x54
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fd69 	bl	8004c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b21      	cmp	r3, #33	; 0x21
 80051dc:	d13e      	bne.n	800525c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e6:	d114      	bne.n	8005212 <UART_Transmit_IT+0x48>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d110      	bne.n	8005212 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005204:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	1c9a      	adds	r2, r3, #2
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	621a      	str	r2, [r3, #32]
 8005210:	e008      	b.n	8005224 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	1c59      	adds	r1, r3, #1
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6211      	str	r1, [r2, #32]
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29b      	uxth	r3, r3
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4619      	mov	r1, r3
 8005232:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10f      	bne.n	8005258 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005246:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005256:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	e000      	b.n	800525e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
  }
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005280:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff fcda 	bl	8004c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b08c      	sub	sp, #48	; 0x30
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b22      	cmp	r3, #34	; 0x22
 80052ac:	f040 80ab 	bne.w	8005406 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b8:	d117      	bne.n	80052ea <UART_Receive_IT+0x50>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d113      	bne.n	80052ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d8:	b29a      	uxth	r2, r3
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	1c9a      	adds	r2, r3, #2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	629a      	str	r2, [r3, #40]	; 0x28
 80052e8:	e026      	b.n	8005338 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fc:	d007      	beq.n	800530e <UART_Receive_IT+0x74>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <UART_Receive_IT+0x82>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	b2da      	uxtb	r2, r3
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e008      	b.n	800532e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005328:	b2da      	uxtb	r2, r3
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29b      	uxth	r3, r3
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4619      	mov	r1, r3
 8005346:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005348:	2b00      	cmp	r3, #0
 800534a:	d15a      	bne.n	8005402 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0220 	bic.w	r2, r2, #32
 800535a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800536a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695a      	ldr	r2, [r3, #20]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0201 	bic.w	r2, r2, #1
 800537a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	2b01      	cmp	r3, #1
 800538a:	d135      	bne.n	80053f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	613b      	str	r3, [r7, #16]
   return(result);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f023 0310 	bic.w	r3, r3, #16
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b2:	623a      	str	r2, [r7, #32]
 80053b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	69f9      	ldr	r1, [r7, #28]
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	61bb      	str	r3, [r7, #24]
   return(result);
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d10a      	bne.n	80053ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fb fa73 	bl	80008dc <HAL_UARTEx_RxEventCallback>
 80053f6:	e002      	b.n	80053fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff fc37 	bl	8004c6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	e002      	b.n	8005408 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	e000      	b.n	8005408 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005406:	2302      	movs	r3, #2
  }
}
 8005408:	4618      	mov	r0, r3
 800540a:	3730      	adds	r7, #48	; 0x30
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005414:	b0c0      	sub	sp, #256	; 0x100
 8005416:	af00      	add	r7, sp, #0
 8005418:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542c:	68d9      	ldr	r1, [r3, #12]
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	ea40 0301 	orr.w	r3, r0, r1
 8005438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800543a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	431a      	orrs	r2, r3
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	431a      	orrs	r2, r3
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005468:	f021 010c 	bic.w	r1, r1, #12
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005476:	430b      	orrs	r3, r1
 8005478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548a:	6999      	ldr	r1, [r3, #24]
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	ea40 0301 	orr.w	r3, r0, r1
 8005496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b8f      	ldr	r3, [pc, #572]	; (80056dc <UART_SetConfig+0x2cc>)
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d005      	beq.n	80054b0 <UART_SetConfig+0xa0>
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b8d      	ldr	r3, [pc, #564]	; (80056e0 <UART_SetConfig+0x2d0>)
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d104      	bne.n	80054ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054b0:	f7fe fb92 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 80054b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054b8:	e003      	b.n	80054c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ba:	f7fe fb79 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 80054be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054cc:	f040 810c 	bne.w	80056e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054e2:	4622      	mov	r2, r4
 80054e4:	462b      	mov	r3, r5
 80054e6:	1891      	adds	r1, r2, r2
 80054e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80054ea:	415b      	adcs	r3, r3
 80054ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054f2:	4621      	mov	r1, r4
 80054f4:	eb12 0801 	adds.w	r8, r2, r1
 80054f8:	4629      	mov	r1, r5
 80054fa:	eb43 0901 	adc.w	r9, r3, r1
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800550a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800550e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005512:	4690      	mov	r8, r2
 8005514:	4699      	mov	r9, r3
 8005516:	4623      	mov	r3, r4
 8005518:	eb18 0303 	adds.w	r3, r8, r3
 800551c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005520:	462b      	mov	r3, r5
 8005522:	eb49 0303 	adc.w	r3, r9, r3
 8005526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005536:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800553a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800553e:	460b      	mov	r3, r1
 8005540:	18db      	adds	r3, r3, r3
 8005542:	653b      	str	r3, [r7, #80]	; 0x50
 8005544:	4613      	mov	r3, r2
 8005546:	eb42 0303 	adc.w	r3, r2, r3
 800554a:	657b      	str	r3, [r7, #84]	; 0x54
 800554c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005554:	f7fa fe9c 	bl	8000290 <__aeabi_uldivmod>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4b61      	ldr	r3, [pc, #388]	; (80056e4 <UART_SetConfig+0x2d4>)
 800555e:	fba3 2302 	umull	r2, r3, r3, r2
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	011c      	lsls	r4, r3, #4
 8005566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556a:	2200      	movs	r2, #0
 800556c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005570:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	1891      	adds	r1, r2, r2
 800557e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005580:	415b      	adcs	r3, r3
 8005582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005588:	4641      	mov	r1, r8
 800558a:	eb12 0a01 	adds.w	sl, r2, r1
 800558e:	4649      	mov	r1, r9
 8005590:	eb43 0b01 	adc.w	fp, r3, r1
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a8:	4692      	mov	sl, r2
 80055aa:	469b      	mov	fp, r3
 80055ac:	4643      	mov	r3, r8
 80055ae:	eb1a 0303 	adds.w	r3, sl, r3
 80055b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055b6:	464b      	mov	r3, r9
 80055b8:	eb4b 0303 	adc.w	r3, fp, r3
 80055bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055d4:	460b      	mov	r3, r1
 80055d6:	18db      	adds	r3, r3, r3
 80055d8:	643b      	str	r3, [r7, #64]	; 0x40
 80055da:	4613      	mov	r3, r2
 80055dc:	eb42 0303 	adc.w	r3, r2, r3
 80055e0:	647b      	str	r3, [r7, #68]	; 0x44
 80055e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055ea:	f7fa fe51 	bl	8000290 <__aeabi_uldivmod>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	4b3b      	ldr	r3, [pc, #236]	; (80056e4 <UART_SetConfig+0x2d4>)
 80055f6:	fba3 2301 	umull	r2, r3, r3, r1
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2264      	movs	r2, #100	; 0x64
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	1acb      	subs	r3, r1, r3
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800560a:	4b36      	ldr	r3, [pc, #216]	; (80056e4 <UART_SetConfig+0x2d4>)
 800560c:	fba3 2302 	umull	r2, r3, r3, r2
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005618:	441c      	add	r4, r3
 800561a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800561e:	2200      	movs	r2, #0
 8005620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005624:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800562c:	4642      	mov	r2, r8
 800562e:	464b      	mov	r3, r9
 8005630:	1891      	adds	r1, r2, r2
 8005632:	63b9      	str	r1, [r7, #56]	; 0x38
 8005634:	415b      	adcs	r3, r3
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800563c:	4641      	mov	r1, r8
 800563e:	1851      	adds	r1, r2, r1
 8005640:	6339      	str	r1, [r7, #48]	; 0x30
 8005642:	4649      	mov	r1, r9
 8005644:	414b      	adcs	r3, r1
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005654:	4659      	mov	r1, fp
 8005656:	00cb      	lsls	r3, r1, #3
 8005658:	4651      	mov	r1, sl
 800565a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800565e:	4651      	mov	r1, sl
 8005660:	00ca      	lsls	r2, r1, #3
 8005662:	4610      	mov	r0, r2
 8005664:	4619      	mov	r1, r3
 8005666:	4603      	mov	r3, r0
 8005668:	4642      	mov	r2, r8
 800566a:	189b      	adds	r3, r3, r2
 800566c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005670:	464b      	mov	r3, r9
 8005672:	460a      	mov	r2, r1
 8005674:	eb42 0303 	adc.w	r3, r2, r3
 8005678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005688:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800568c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005690:	460b      	mov	r3, r1
 8005692:	18db      	adds	r3, r3, r3
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
 8005696:	4613      	mov	r3, r2
 8005698:	eb42 0303 	adc.w	r3, r2, r3
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800569e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056a6:	f7fa fdf3 	bl	8000290 <__aeabi_uldivmod>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <UART_SetConfig+0x2d4>)
 80056b0:	fba3 1302 	umull	r1, r3, r3, r2
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	2164      	movs	r1, #100	; 0x64
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	3332      	adds	r3, #50	; 0x32
 80056c2:	4a08      	ldr	r2, [pc, #32]	; (80056e4 <UART_SetConfig+0x2d4>)
 80056c4:	fba2 2303 	umull	r2, r3, r2, r3
 80056c8:	095b      	lsrs	r3, r3, #5
 80056ca:	f003 0207 	and.w	r2, r3, #7
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4422      	add	r2, r4
 80056d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056d8:	e105      	b.n	80058e6 <UART_SetConfig+0x4d6>
 80056da:	bf00      	nop
 80056dc:	40011000 	.word	0x40011000
 80056e0:	40011400 	.word	0x40011400
 80056e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ec:	2200      	movs	r2, #0
 80056ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056fa:	4642      	mov	r2, r8
 80056fc:	464b      	mov	r3, r9
 80056fe:	1891      	adds	r1, r2, r2
 8005700:	6239      	str	r1, [r7, #32]
 8005702:	415b      	adcs	r3, r3
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800570a:	4641      	mov	r1, r8
 800570c:	1854      	adds	r4, r2, r1
 800570e:	4649      	mov	r1, r9
 8005710:	eb43 0501 	adc.w	r5, r3, r1
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	00eb      	lsls	r3, r5, #3
 800571e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005722:	00e2      	lsls	r2, r4, #3
 8005724:	4614      	mov	r4, r2
 8005726:	461d      	mov	r5, r3
 8005728:	4643      	mov	r3, r8
 800572a:	18e3      	adds	r3, r4, r3
 800572c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005730:	464b      	mov	r3, r9
 8005732:	eb45 0303 	adc.w	r3, r5, r3
 8005736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005746:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005756:	4629      	mov	r1, r5
 8005758:	008b      	lsls	r3, r1, #2
 800575a:	4621      	mov	r1, r4
 800575c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005760:	4621      	mov	r1, r4
 8005762:	008a      	lsls	r2, r1, #2
 8005764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005768:	f7fa fd92 	bl	8000290 <__aeabi_uldivmod>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4b60      	ldr	r3, [pc, #384]	; (80058f4 <UART_SetConfig+0x4e4>)
 8005772:	fba3 2302 	umull	r2, r3, r3, r2
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	011c      	lsls	r4, r3, #4
 800577a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800577e:	2200      	movs	r2, #0
 8005780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005784:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	1891      	adds	r1, r2, r2
 8005792:	61b9      	str	r1, [r7, #24]
 8005794:	415b      	adcs	r3, r3
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800579c:	4641      	mov	r1, r8
 800579e:	1851      	adds	r1, r2, r1
 80057a0:	6139      	str	r1, [r7, #16]
 80057a2:	4649      	mov	r1, r9
 80057a4:	414b      	adcs	r3, r1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057b4:	4659      	mov	r1, fp
 80057b6:	00cb      	lsls	r3, r1, #3
 80057b8:	4651      	mov	r1, sl
 80057ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057be:	4651      	mov	r1, sl
 80057c0:	00ca      	lsls	r2, r1, #3
 80057c2:	4610      	mov	r0, r2
 80057c4:	4619      	mov	r1, r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	4642      	mov	r2, r8
 80057ca:	189b      	adds	r3, r3, r2
 80057cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057d0:	464b      	mov	r3, r9
 80057d2:	460a      	mov	r2, r1
 80057d4:	eb42 0303 	adc.w	r3, r2, r3
 80057d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80057e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057f4:	4649      	mov	r1, r9
 80057f6:	008b      	lsls	r3, r1, #2
 80057f8:	4641      	mov	r1, r8
 80057fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057fe:	4641      	mov	r1, r8
 8005800:	008a      	lsls	r2, r1, #2
 8005802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005806:	f7fa fd43 	bl	8000290 <__aeabi_uldivmod>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4b39      	ldr	r3, [pc, #228]	; (80058f4 <UART_SetConfig+0x4e4>)
 8005810:	fba3 1302 	umull	r1, r3, r3, r2
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	2164      	movs	r1, #100	; 0x64
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	3332      	adds	r3, #50	; 0x32
 8005822:	4a34      	ldr	r2, [pc, #208]	; (80058f4 <UART_SetConfig+0x4e4>)
 8005824:	fba2 2303 	umull	r2, r3, r2, r3
 8005828:	095b      	lsrs	r3, r3, #5
 800582a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800582e:	441c      	add	r4, r3
 8005830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005834:	2200      	movs	r2, #0
 8005836:	673b      	str	r3, [r7, #112]	; 0x70
 8005838:	677a      	str	r2, [r7, #116]	; 0x74
 800583a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800583e:	4642      	mov	r2, r8
 8005840:	464b      	mov	r3, r9
 8005842:	1891      	adds	r1, r2, r2
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	415b      	adcs	r3, r3
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800584e:	4641      	mov	r1, r8
 8005850:	1851      	adds	r1, r2, r1
 8005852:	6039      	str	r1, [r7, #0]
 8005854:	4649      	mov	r1, r9
 8005856:	414b      	adcs	r3, r1
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005866:	4659      	mov	r1, fp
 8005868:	00cb      	lsls	r3, r1, #3
 800586a:	4651      	mov	r1, sl
 800586c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005870:	4651      	mov	r1, sl
 8005872:	00ca      	lsls	r2, r1, #3
 8005874:	4610      	mov	r0, r2
 8005876:	4619      	mov	r1, r3
 8005878:	4603      	mov	r3, r0
 800587a:	4642      	mov	r2, r8
 800587c:	189b      	adds	r3, r3, r2
 800587e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005880:	464b      	mov	r3, r9
 8005882:	460a      	mov	r2, r1
 8005884:	eb42 0303 	adc.w	r3, r2, r3
 8005888:	66fb      	str	r3, [r7, #108]	; 0x6c
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	663b      	str	r3, [r7, #96]	; 0x60
 8005894:	667a      	str	r2, [r7, #100]	; 0x64
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058a2:	4649      	mov	r1, r9
 80058a4:	008b      	lsls	r3, r1, #2
 80058a6:	4641      	mov	r1, r8
 80058a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ac:	4641      	mov	r1, r8
 80058ae:	008a      	lsls	r2, r1, #2
 80058b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058b4:	f7fa fcec 	bl	8000290 <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <UART_SetConfig+0x4e4>)
 80058be:	fba3 1302 	umull	r1, r3, r3, r2
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	2164      	movs	r1, #100	; 0x64
 80058c6:	fb01 f303 	mul.w	r3, r1, r3
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	3332      	adds	r3, #50	; 0x32
 80058d0:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <UART_SetConfig+0x4e4>)
 80058d2:	fba2 2303 	umull	r2, r3, r2, r3
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	f003 020f 	and.w	r2, r3, #15
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4422      	add	r2, r4
 80058e4:	609a      	str	r2, [r3, #8]
}
 80058e6:	bf00      	nop
 80058e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058ec:	46bd      	mov	sp, r7
 80058ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058f2:	bf00      	nop
 80058f4:	51eb851f 	.word	0x51eb851f

080058f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058f8:	b084      	sub	sp, #16
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	f107 001c 	add.w	r0, r7, #28
 8005906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	2b01      	cmp	r3, #1
 800590e:	d122      	bne.n	8005956 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d105      	bne.n	800594a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f001 fbee 	bl	800712c <USB_CoreReset>
 8005950:	4603      	mov	r3, r0
 8005952:	73fb      	strb	r3, [r7, #15]
 8005954:	e01a      	b.n	800598c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 fbe2 	bl	800712c <USB_CoreReset>
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800596c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	639a      	str	r2, [r3, #56]	; 0x38
 800597e:	e005      	b.n	800598c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	2b01      	cmp	r3, #1
 8005990:	d10b      	bne.n	80059aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f043 0206 	orr.w	r2, r3, #6
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f043 0220 	orr.w	r2, r3, #32
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059b6:	b004      	add	sp, #16
 80059b8:	4770      	bx	lr
	...

080059bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d165      	bne.n	8005a9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4a41      	ldr	r2, [pc, #260]	; (8005ad8 <USB_SetTurnaroundTime+0x11c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d906      	bls.n	80059e6 <USB_SetTurnaroundTime+0x2a>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4a40      	ldr	r2, [pc, #256]	; (8005adc <USB_SetTurnaroundTime+0x120>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d202      	bcs.n	80059e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80059e0:	230f      	movs	r3, #15
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	e062      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4a3c      	ldr	r2, [pc, #240]	; (8005adc <USB_SetTurnaroundTime+0x120>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d306      	bcc.n	80059fc <USB_SetTurnaroundTime+0x40>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4a3b      	ldr	r2, [pc, #236]	; (8005ae0 <USB_SetTurnaroundTime+0x124>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d202      	bcs.n	80059fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80059f6:	230e      	movs	r3, #14
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	e057      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a38      	ldr	r2, [pc, #224]	; (8005ae0 <USB_SetTurnaroundTime+0x124>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d306      	bcc.n	8005a12 <USB_SetTurnaroundTime+0x56>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4a37      	ldr	r2, [pc, #220]	; (8005ae4 <USB_SetTurnaroundTime+0x128>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d202      	bcs.n	8005a12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a0c:	230d      	movs	r3, #13
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e04c      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	4a33      	ldr	r2, [pc, #204]	; (8005ae4 <USB_SetTurnaroundTime+0x128>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d306      	bcc.n	8005a28 <USB_SetTurnaroundTime+0x6c>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	4a32      	ldr	r2, [pc, #200]	; (8005ae8 <USB_SetTurnaroundTime+0x12c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d802      	bhi.n	8005a28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a22:	230c      	movs	r3, #12
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e041      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4a2f      	ldr	r2, [pc, #188]	; (8005ae8 <USB_SetTurnaroundTime+0x12c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d906      	bls.n	8005a3e <USB_SetTurnaroundTime+0x82>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4a2e      	ldr	r2, [pc, #184]	; (8005aec <USB_SetTurnaroundTime+0x130>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d802      	bhi.n	8005a3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a38:	230b      	movs	r3, #11
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e036      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <USB_SetTurnaroundTime+0x130>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d906      	bls.n	8005a54 <USB_SetTurnaroundTime+0x98>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4a29      	ldr	r2, [pc, #164]	; (8005af0 <USB_SetTurnaroundTime+0x134>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d802      	bhi.n	8005a54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a4e:	230a      	movs	r3, #10
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	e02b      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <USB_SetTurnaroundTime+0x134>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d906      	bls.n	8005a6a <USB_SetTurnaroundTime+0xae>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4a25      	ldr	r2, [pc, #148]	; (8005af4 <USB_SetTurnaroundTime+0x138>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d202      	bcs.n	8005a6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a64:	2309      	movs	r3, #9
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	e020      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	4a21      	ldr	r2, [pc, #132]	; (8005af4 <USB_SetTurnaroundTime+0x138>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d306      	bcc.n	8005a80 <USB_SetTurnaroundTime+0xc4>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	4a20      	ldr	r2, [pc, #128]	; (8005af8 <USB_SetTurnaroundTime+0x13c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d802      	bhi.n	8005a80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	e015      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4a1d      	ldr	r2, [pc, #116]	; (8005af8 <USB_SetTurnaroundTime+0x13c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d906      	bls.n	8005a96 <USB_SetTurnaroundTime+0xda>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4a1c      	ldr	r2, [pc, #112]	; (8005afc <USB_SetTurnaroundTime+0x140>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d202      	bcs.n	8005a96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a90:	2307      	movs	r3, #7
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e00a      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a96:	2306      	movs	r3, #6
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e007      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005aa2:	2309      	movs	r3, #9
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	e001      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005aa8:	2309      	movs	r3, #9
 8005aaa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	00d8acbf 	.word	0x00d8acbf
 8005adc:	00e4e1c0 	.word	0x00e4e1c0
 8005ae0:	00f42400 	.word	0x00f42400
 8005ae4:	01067380 	.word	0x01067380
 8005ae8:	011a499f 	.word	0x011a499f
 8005aec:	01312cff 	.word	0x01312cff
 8005af0:	014ca43f 	.word	0x014ca43f
 8005af4:	016e3600 	.word	0x016e3600
 8005af8:	01a6ab1f 	.word	0x01a6ab1f
 8005afc:	01e84800 	.word	0x01e84800

08005b00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f043 0201 	orr.w	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f023 0201 	bic.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d115      	bne.n	8005b92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b72:	2001      	movs	r0, #1
 8005b74:	f7fb fa80 	bl	8001078 <HAL_Delay>
      ms++;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 fa45 	bl	800700e <USB_GetMode>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d01e      	beq.n	8005bc8 <USB_SetCurrentMode+0x84>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b31      	cmp	r3, #49	; 0x31
 8005b8e:	d9f0      	bls.n	8005b72 <USB_SetCurrentMode+0x2e>
 8005b90:	e01a      	b.n	8005bc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d115      	bne.n	8005bc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	f7fb fa67 	bl	8001078 <HAL_Delay>
      ms++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f001 fa2c 	bl	800700e <USB_GetMode>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <USB_SetCurrentMode+0x84>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b31      	cmp	r3, #49	; 0x31
 8005bc0:	d9f0      	bls.n	8005ba4 <USB_SetCurrentMode+0x60>
 8005bc2:	e001      	b.n	8005bc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e005      	b.n	8005bd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b32      	cmp	r3, #50	; 0x32
 8005bcc:	d101      	bne.n	8005bd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bdc:	b084      	sub	sp, #16
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b086      	sub	sp, #24
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	e009      	b.n	8005c10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	3340      	adds	r3, #64	; 0x40
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b0e      	cmp	r3, #14
 8005c14:	d9f2      	bls.n	8005bfc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d11c      	bne.n	8005c56 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c2a:	f043 0302 	orr.w	r3, r3, #2
 8005c2e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
 8005c54:	e00b      	b.n	8005c6e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c74:	461a      	mov	r2, r3
 8005c76:	2300      	movs	r3, #0
 8005c78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c80:	4619      	mov	r1, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c88:	461a      	mov	r2, r3
 8005c8a:	680b      	ldr	r3, [r1, #0]
 8005c8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10c      	bne.n	8005cae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d104      	bne.n	8005ca4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f965 	bl	8005f6c <USB_SetDevSpeed>
 8005ca2:	e008      	b.n	8005cb6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f960 	bl	8005f6c <USB_SetDevSpeed>
 8005cac:	e003      	b.n	8005cb6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cae:	2103      	movs	r1, #3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f95b 	bl	8005f6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cb6:	2110      	movs	r1, #16
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f8f3 	bl	8005ea4 <USB_FlushTxFifo>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f91f 	bl	8005f0c <USB_FlushRxFifo>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cde:	461a      	mov	r2, r3
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	461a      	mov	r2, r3
 8005cec:	2300      	movs	r3, #0
 8005cee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	e043      	b.n	8005d8a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d18:	d118      	bne.n	8005d4c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	e013      	b.n	8005d5e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	461a      	mov	r2, r3
 8005d44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	e008      	b.n	8005d5e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	3301      	adds	r3, #1
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d3b7      	bcc.n	8005d02 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d92:	2300      	movs	r3, #0
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	e043      	b.n	8005e20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dae:	d118      	bne.n	8005de2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10a      	bne.n	8005dcc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	e013      	b.n	8005df4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	e008      	b.n	8005df4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	461a      	mov	r2, r3
 8005df0:	2300      	movs	r3, #0
 8005df2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	461a      	mov	r2, r3
 8005e02:	2300      	movs	r3, #0
 8005e04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	461a      	mov	r2, r3
 8005e14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d3b7      	bcc.n	8005d98 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d105      	bne.n	8005e5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f043 0210 	orr.w	r2, r3, #16
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <USB_DevInit+0x2c4>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f043 0208 	orr.w	r2, r3, #8
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d107      	bne.n	8005e90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e88:	f043 0304 	orr.w	r3, r3, #4
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e9c:	b004      	add	sp, #16
 8005e9e:	4770      	bx	lr
 8005ea0:	803c3800 	.word	0x803c3800

08005ea4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4a13      	ldr	r2, [pc, #76]	; (8005f08 <USB_FlushTxFifo+0x64>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d901      	bls.n	8005ec4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e01b      	b.n	8005efc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	daf2      	bge.n	8005eb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	019b      	lsls	r3, r3, #6
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a08      	ldr	r2, [pc, #32]	; (8005f08 <USB_FlushTxFifo+0x64>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e006      	b.n	8005efc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d0f0      	beq.n	8005edc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	00030d40 	.word	0x00030d40

08005f0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4a11      	ldr	r2, [pc, #68]	; (8005f68 <USB_FlushRxFifo+0x5c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d901      	bls.n	8005f2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e018      	b.n	8005f5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	daf2      	bge.n	8005f18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2210      	movs	r2, #16
 8005f3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <USB_FlushRxFifo+0x5c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d901      	bls.n	8005f4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e006      	b.n	8005f5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b10      	cmp	r3, #16
 8005f58:	d0f0      	beq.n	8005f3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	00030d40 	.word	0x00030d40

08005f6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b087      	sub	sp, #28
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 0306 	and.w	r3, r3, #6
 8005fb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75fb      	strb	r3, [r7, #23]
 8005fc2:	e00a      	b.n	8005fda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d002      	beq.n	8005fd0 <USB_GetDevSpeed+0x32>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b06      	cmp	r3, #6
 8005fce:	d102      	bne.n	8005fd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	75fb      	strb	r3, [r7, #23]
 8005fd4:	e001      	b.n	8005fda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005fd6:	230f      	movs	r3, #15
 8005fd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d13a      	bne.n	800607a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600a:	69da      	ldr	r2, [r3, #28]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	f003 030f 	and.w	r3, r3, #15
 8006014:	2101      	movs	r1, #1
 8006016:	fa01 f303 	lsl.w	r3, r1, r3
 800601a:	b29b      	uxth	r3, r3
 800601c:	68f9      	ldr	r1, [r7, #12]
 800601e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006022:	4313      	orrs	r3, r2
 8006024:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d155      	bne.n	80060e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	791b      	ldrb	r3, [r3, #4]
 8006056:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006058:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	059b      	lsls	r3, r3, #22
 800605e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006060:	4313      	orrs	r3, r2
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	e036      	b.n	80060e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006080:	69da      	ldr	r2, [r3, #28]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	2101      	movs	r1, #1
 800608c:	fa01 f303 	lsl.w	r3, r1, r3
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	68f9      	ldr	r1, [r7, #12]
 8006094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006098:	4313      	orrs	r3, r2
 800609a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d11a      	bne.n	80060e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	791b      	ldrb	r3, [r3, #4]
 80060cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060ce:	430b      	orrs	r3, r1
 80060d0:	4313      	orrs	r3, r2
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d161      	bne.n	80061d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800612a:	d11f      	bne.n	800616c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006146:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800614a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006166:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800616a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	f003 030f 	and.w	r3, r3, #15
 800617c:	2101      	movs	r1, #1
 800617e:	fa01 f303 	lsl.w	r3, r1, r3
 8006182:	b29b      	uxth	r3, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	68f9      	ldr	r1, [r7, #12]
 8006188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800618c:	4013      	ands	r3, r2
 800618e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	2101      	movs	r1, #1
 80061a2:	fa01 f303 	lsl.w	r3, r1, r3
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061b0:	4013      	ands	r3, r2
 80061b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	0159      	lsls	r1, r3, #5
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	440b      	add	r3, r1
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	4619      	mov	r1, r3
 80061d0:	4b35      	ldr	r3, [pc, #212]	; (80062a8 <USB_DeactivateEndpoint+0x1b0>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	600b      	str	r3, [r1, #0]
 80061d6:	e060      	b.n	800629a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ee:	d11f      	bne.n	8006230 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	440a      	add	r2, r1
 8006206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800620a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800620e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	440a      	add	r2, r1
 8006226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800622e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	2101      	movs	r1, #1
 8006242:	fa01 f303 	lsl.w	r3, r1, r3
 8006246:	041b      	lsls	r3, r3, #16
 8006248:	43db      	mvns	r3, r3
 800624a:	68f9      	ldr	r1, [r7, #12]
 800624c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006250:	4013      	ands	r3, r2
 8006252:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	2101      	movs	r1, #1
 8006266:	fa01 f303 	lsl.w	r3, r1, r3
 800626a:	041b      	lsls	r3, r3, #16
 800626c:	43db      	mvns	r3, r3
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006274:	4013      	ands	r3, r2
 8006276:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	0159      	lsls	r1, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	440b      	add	r3, r1
 800628e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006292:	4619      	mov	r1, r3
 8006294:	4b05      	ldr	r3, [pc, #20]	; (80062ac <USB_DeactivateEndpoint+0x1b4>)
 8006296:	4013      	ands	r3, r2
 8006298:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	ec337800 	.word	0xec337800
 80062ac:	eff37800 	.word	0xeff37800

080062b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	; 0x28
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	f040 815c 	bne.w	800658a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d132      	bne.n	8006340 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006318:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800631c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006338:	0cdb      	lsrs	r3, r3, #19
 800633a:	04db      	lsls	r3, r3, #19
 800633c:	6113      	str	r3, [r2, #16]
 800633e:	e074      	b.n	800642a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635a:	0cdb      	lsrs	r3, r3, #19
 800635c:	04db      	lsls	r3, r3, #19
 800635e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800637e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006382:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006390:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6999      	ldr	r1, [r3, #24]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	440b      	add	r3, r1
 800639c:	1e59      	subs	r1, r3, #1
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80063a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063a8:	4b9d      	ldr	r3, [pc, #628]	; (8006620 <USB_EPStartXfer+0x370>)
 80063aa:	400b      	ands	r3, r1
 80063ac:	69b9      	ldr	r1, [r7, #24]
 80063ae:	0148      	lsls	r0, r1, #5
 80063b0:	69f9      	ldr	r1, [r7, #28]
 80063b2:	4401      	add	r1, r0
 80063b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063b8:	4313      	orrs	r3, r2
 80063ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	691a      	ldr	r2, [r3, #16]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d2:	69b9      	ldr	r1, [r7, #24]
 80063d4:	0148      	lsls	r0, r1, #5
 80063d6:	69f9      	ldr	r1, [r7, #28]
 80063d8:	4401      	add	r1, r0
 80063da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063de:	4313      	orrs	r3, r2
 80063e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	791b      	ldrb	r3, [r3, #4]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d11f      	bne.n	800642a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006404:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006408:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	440a      	add	r2, r1
 8006420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006428:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d14b      	bne.n	80064c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d009      	beq.n	800644c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	461a      	mov	r2, r3
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	791b      	ldrb	r3, [r3, #4]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d128      	bne.n	80064a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006460:	2b00      	cmp	r3, #0
 8006462:	d110      	bne.n	8006486 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	440a      	add	r2, r1
 800647a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	e00f      	b.n	80064a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e133      	b.n	8006730 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	69fa      	ldr	r2, [r7, #28]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	791b      	ldrb	r3, [r3, #4]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d015      	beq.n	800651c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 811b 	beq.w	8006730 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	2101      	movs	r1, #1
 800650c:	fa01 f303 	lsl.w	r3, r1, r3
 8006510:	69f9      	ldr	r1, [r7, #28]
 8006512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006516:	4313      	orrs	r3, r2
 8006518:	634b      	str	r3, [r1, #52]	; 0x34
 800651a:	e109      	b.n	8006730 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006528:	2b00      	cmp	r3, #0
 800652a:	d110      	bne.n	800654e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006546:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	e00f      	b.n	800656e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	440a      	add	r2, r1
 8006564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800656c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6919      	ldr	r1, [r3, #16]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	b298      	uxth	r0, r3
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	4603      	mov	r3, r0
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 fade 	bl	8006b44 <USB_WritePacket>
 8006588:	e0d2      	b.n	8006730 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a4:	0cdb      	lsrs	r3, r3, #19
 80065a6:	04db      	lsls	r3, r3, #19
 80065a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d126      	bne.n	8006624 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ec:	69b9      	ldr	r1, [r7, #24]
 80065ee:	0148      	lsls	r0, r1, #5
 80065f0:	69f9      	ldr	r1, [r7, #28]
 80065f2:	4401      	add	r1, r0
 80065f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065f8:	4313      	orrs	r3, r2
 80065fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006616:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800661a:	6113      	str	r3, [r2, #16]
 800661c:	e03a      	b.n	8006694 <USB_EPStartXfer+0x3e4>
 800661e:	bf00      	nop
 8006620:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	699a      	ldr	r2, [r3, #24]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	4413      	add	r3, r2
 800662e:	1e5a      	subs	r2, r3, #1
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	fbb2 f3f3 	udiv	r3, r2, r3
 8006638:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	8afa      	ldrh	r2, [r7, #22]
 8006640:	fb03 f202 	mul.w	r2, r3, r2
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	8afb      	ldrh	r3, [r7, #22]
 8006658:	04d9      	lsls	r1, r3, #19
 800665a:	4b38      	ldr	r3, [pc, #224]	; (800673c <USB_EPStartXfer+0x48c>)
 800665c:	400b      	ands	r3, r1
 800665e:	69b9      	ldr	r1, [r7, #24]
 8006660:	0148      	lsls	r0, r1, #5
 8006662:	69f9      	ldr	r1, [r7, #28]
 8006664:	4401      	add	r1, r0
 8006666:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800666a:	4313      	orrs	r3, r2
 800666c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006684:	69b9      	ldr	r1, [r7, #24]
 8006686:	0148      	lsls	r0, r1, #5
 8006688:	69f9      	ldr	r1, [r7, #28]
 800668a:	4401      	add	r1, r0
 800668c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006690:	4313      	orrs	r3, r2
 8006692:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d10d      	bne.n	80066b6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6919      	ldr	r1, [r3, #16]
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	460a      	mov	r2, r1
 80066b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	791b      	ldrb	r3, [r3, #4]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d128      	bne.n	8006710 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d110      	bne.n	80066f0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	e00f      	b.n	8006710 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800670a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800670e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800672a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800672e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3720      	adds	r7, #32
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	1ff80000 	.word	0x1ff80000

08006740 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	4613      	mov	r3, r2
 800674c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b01      	cmp	r3, #1
 800675e:	f040 80ce 	bne.w	80068fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d132      	bne.n	80067d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006784:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006788:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800678c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c8:	0cdb      	lsrs	r3, r3, #19
 80067ca:	04db      	lsls	r3, r3, #19
 80067cc:	6113      	str	r3, [r2, #16]
 80067ce:	e04e      	b.n	800686e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ea:	0cdb      	lsrs	r3, r3, #19
 80067ec:	04db      	lsls	r3, r3, #19
 80067ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	0151      	lsls	r1, r2, #5
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	440a      	add	r2, r1
 8006806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800680a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800680e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006812:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	699a      	ldr	r2, [r3, #24]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	429a      	cmp	r2, r3
 800681e:	d903      	bls.n	8006828 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	0151      	lsls	r1, r2, #5
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	440a      	add	r2, r1
 800683e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006842:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	691a      	ldr	r2, [r3, #16]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800685e:	6939      	ldr	r1, [r7, #16]
 8006860:	0148      	lsls	r0, r1, #5
 8006862:	6979      	ldr	r1, [r7, #20]
 8006864:	4401      	add	r1, r0
 8006866:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800686a:	4313      	orrs	r3, r2
 800686c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d11e      	bne.n	80068b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d009      	beq.n	8006890 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	461a      	mov	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	0151      	lsls	r1, r2, #5
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	440a      	add	r2, r1
 80068a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	e097      	b.n	80069e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 8083 	beq.w	80069e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	2101      	movs	r1, #1
 80068ee:	fa01 f303 	lsl.w	r3, r1, r3
 80068f2:	6979      	ldr	r1, [r7, #20]
 80068f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068f8:	4313      	orrs	r3, r2
 80068fa:	634b      	str	r3, [r1, #52]	; 0x34
 80068fc:	e071      	b.n	80069e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	440a      	add	r2, r1
 8006914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006918:	0cdb      	lsrs	r3, r3, #19
 800691a:	04db      	lsls	r3, r3, #19
 800691c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	440a      	add	r2, r1
 8006934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006938:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800693c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006940:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006978:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006990:	6939      	ldr	r1, [r7, #16]
 8006992:	0148      	lsls	r0, r1, #5
 8006994:	6979      	ldr	r1, [r7, #20]
 8006996:	4401      	add	r1, r0
 8006998:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800699c:	4313      	orrs	r3, r2
 800699e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d10d      	bne.n	80069c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	6919      	ldr	r1, [r3, #16]
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069be:	460a      	mov	r2, r1
 80069c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d14a      	bne.n	8006aa4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a26:	f040 8086 	bne.w	8006b36 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	7812      	ldrb	r2, [r2, #0]
 8006a3e:	0151      	lsls	r1, r2, #5
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	440a      	add	r2, r1
 8006a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a4c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	7812      	ldrb	r2, [r2, #0]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d902      	bls.n	8006a88 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	75fb      	strb	r3, [r7, #23]
          break;
 8006a86:	e056      	b.n	8006b36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aa0:	d0e7      	beq.n	8006a72 <USB_EPStopXfer+0x82>
 8006aa2:	e048      	b.n	8006b36 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006abc:	d13b      	bne.n	8006b36 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	7812      	ldrb	r2, [r2, #0]
 8006ad2:	0151      	lsls	r1, r2, #5
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	440a      	add	r2, r1
 8006ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006adc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ae0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	0151      	lsls	r1, r2, #5
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	440a      	add	r2, r1
 8006afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d902      	bls.n	8006b1c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]
          break;
 8006b1a:	e00c      	b.n	8006b36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b34:	d0e7      	beq.n	8006b06 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b089      	sub	sp, #36	; 0x24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	4611      	mov	r1, r2
 8006b50:	461a      	mov	r2, r3
 8006b52:	460b      	mov	r3, r1
 8006b54:	71fb      	strb	r3, [r7, #7]
 8006b56:	4613      	mov	r3, r2
 8006b58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d123      	bne.n	8006bb2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b6a:	88bb      	ldrh	r3, [r7, #4]
 8006b6c:	3303      	adds	r3, #3
 8006b6e:	089b      	lsrs	r3, r3, #2
 8006b70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b72:	2300      	movs	r3, #0
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	e018      	b.n	8006baa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	031a      	lsls	r2, r3, #12
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b84:	461a      	mov	r2, r3
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	3301      	adds	r3, #1
 8006b96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	61bb      	str	r3, [r7, #24]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d3e2      	bcc.n	8006b78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3724      	adds	r7, #36	; 0x24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b08b      	sub	sp, #44	; 0x2c
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	089b      	lsrs	r3, r3, #2
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006bde:	88fb      	ldrh	r3, [r7, #6]
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006be6:	2300      	movs	r3, #0
 8006be8:	623b      	str	r3, [r7, #32]
 8006bea:	e014      	b.n	8006c16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	3301      	adds	r3, #1
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	3301      	adds	r3, #1
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	3301      	adds	r3, #1
 8006c14:	623b      	str	r3, [r7, #32]
 8006c16:	6a3a      	ldr	r2, [r7, #32]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d3e6      	bcc.n	8006bec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c1e:	8bfb      	ldrh	r3, [r7, #30]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01e      	beq.n	8006c62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f107 0310 	add.w	r3, r7, #16
 8006c34:	6812      	ldr	r2, [r2, #0]
 8006c36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	fa22 f303 	lsr.w	r3, r2, r3
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	701a      	strb	r2, [r3, #0]
      i++;
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	3301      	adds	r3, #1
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c56:	8bfb      	ldrh	r3, [r7, #30]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c5c:	8bfb      	ldrh	r3, [r7, #30]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1ea      	bne.n	8006c38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	372c      	adds	r7, #44	; 0x2c
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d12c      	bne.n	8006ce6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	db12      	blt.n	8006cc4 <USB_EPSetStall+0x54>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00f      	beq.n	8006cc4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cc2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	e02b      	b.n	8006d3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	db12      	blt.n	8006d1e <USB_EPSetStall+0xae>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00f      	beq.n	8006d1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d128      	bne.n	8006dba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	791b      	ldrb	r3, [r3, #4]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d003      	beq.n	8006d98 <USB_EPClearStall+0x4c>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	791b      	ldrb	r3, [r3, #4]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d138      	bne.n	8006e0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	e027      	b.n	8006e0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dd8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	791b      	ldrb	r3, [r3, #4]
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d003      	beq.n	8006dea <USB_EPClearStall+0x9e>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	791b      	ldrb	r3, [r3, #4]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d10f      	bne.n	8006e0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	0151      	lsls	r1, r2, #5
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	440a      	add	r2, r1
 8006e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e4c:	68f9      	ldr	r1, [r7, #12]
 8006e4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e52:	4313      	orrs	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e7e:	f023 0303 	bic.w	r3, r3, #3
 8006e82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e92:	f023 0302 	bic.w	r3, r3, #2
 8006e96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ec0:	f023 0303 	bic.w	r3, r3, #3
 8006ec4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ed4:	f043 0302 	orr.w	r3, r3, #2
 8006ed8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4013      	ands	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f00:	68fb      	ldr	r3, [r7, #12]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b085      	sub	sp, #20
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	0c1b      	lsrs	r3, r3, #16
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	4013      	ands	r3, r2
 8006f64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	b29b      	uxth	r3, r3
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f86:	78fb      	ldrb	r3, [r7, #3]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b087      	sub	sp, #28
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006fd6:	78fb      	ldrb	r3, [r7, #3]
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe2:	01db      	lsls	r3, r3, #7
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007000:	68bb      	ldr	r3, [r7, #8]
}
 8007002:	4618      	mov	r0, r3
 8007004:	371c      	adds	r7, #28
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f003 0301 	and.w	r3, r3, #1
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800702a:	b480      	push	{r7}
 800702c:	b085      	sub	sp, #20
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007044:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007048:	f023 0307 	bic.w	r3, r3, #7
 800704c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800705c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007060:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	460b      	mov	r3, r1
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	333c      	adds	r3, #60	; 0x3c
 8007086:	3304      	adds	r3, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4a26      	ldr	r2, [pc, #152]	; (8007128 <USB_EP0_OutStart+0xb8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d90a      	bls.n	80070aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a4:	d101      	bne.n	80070aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	e037      	b.n	800711a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b0:	461a      	mov	r2, r3
 80070b2:	2300      	movs	r3, #0
 80070b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d8:	f043 0318 	orr.w	r3, r3, #24
 80070dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80070f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070f2:	7afb      	ldrb	r3, [r7, #11]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d10f      	bne.n	8007118 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fe:	461a      	mov	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007112:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007116:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	4f54300a 	.word	0x4f54300a

0800712c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4a13      	ldr	r2, [pc, #76]	; (8007190 <USB_CoreReset+0x64>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d901      	bls.n	800714a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e01b      	b.n	8007182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	daf2      	bge.n	8007138 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f043 0201 	orr.w	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a09      	ldr	r2, [pc, #36]	; (8007190 <USB_CoreReset+0x64>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e006      	b.n	8007182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b01      	cmp	r3, #1
 800717e:	d0f0      	beq.n	8007162 <USB_CoreReset+0x36>

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	00030d40 	.word	0x00030d40

08007194 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071a4:	f002 fcca 	bl	8009b3c <USBD_static_malloc>
 80071a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d109      	bne.n	80071c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	32b0      	adds	r2, #176	; 0xb0
 80071ba:	2100      	movs	r1, #0
 80071bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80071c0:	2302      	movs	r3, #2
 80071c2:	e0d4      	b.n	800736e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80071c4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80071c8:	2100      	movs	r1, #0
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f002 fe7c 	bl	8009ec8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	32b0      	adds	r2, #176	; 0xb0
 80071da:	68f9      	ldr	r1, [r7, #12]
 80071dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32b0      	adds	r2, #176	; 0xb0
 80071ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7c1b      	ldrb	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d138      	bne.n	800726e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80071fc:	4b5e      	ldr	r3, [pc, #376]	; (8007378 <USBD_CDC_Init+0x1e4>)
 80071fe:	7819      	ldrb	r1, [r3, #0]
 8007200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007204:	2202      	movs	r2, #2
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f002 fb75 	bl	80098f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800720c:	4b5a      	ldr	r3, [pc, #360]	; (8007378 <USBD_CDC_Init+0x1e4>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	f003 020f 	and.w	r2, r3, #15
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	440b      	add	r3, r1
 8007220:	3324      	adds	r3, #36	; 0x24
 8007222:	2201      	movs	r2, #1
 8007224:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007226:	4b55      	ldr	r3, [pc, #340]	; (800737c <USBD_CDC_Init+0x1e8>)
 8007228:	7819      	ldrb	r1, [r3, #0]
 800722a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800722e:	2202      	movs	r2, #2
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f002 fb60 	bl	80098f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007236:	4b51      	ldr	r3, [pc, #324]	; (800737c <USBD_CDC_Init+0x1e8>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	f003 020f 	and.w	r2, r3, #15
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800724e:	2201      	movs	r2, #1
 8007250:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007252:	4b4b      	ldr	r3, [pc, #300]	; (8007380 <USBD_CDC_Init+0x1ec>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	f003 020f 	and.w	r2, r3, #15
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	440b      	add	r3, r1
 8007266:	3326      	adds	r3, #38	; 0x26
 8007268:	2210      	movs	r2, #16
 800726a:	801a      	strh	r2, [r3, #0]
 800726c:	e035      	b.n	80072da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800726e:	4b42      	ldr	r3, [pc, #264]	; (8007378 <USBD_CDC_Init+0x1e4>)
 8007270:	7819      	ldrb	r1, [r3, #0]
 8007272:	2340      	movs	r3, #64	; 0x40
 8007274:	2202      	movs	r2, #2
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f002 fb3d 	bl	80098f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800727c:	4b3e      	ldr	r3, [pc, #248]	; (8007378 <USBD_CDC_Init+0x1e4>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	f003 020f 	and.w	r2, r3, #15
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	440b      	add	r3, r1
 8007290:	3324      	adds	r3, #36	; 0x24
 8007292:	2201      	movs	r2, #1
 8007294:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007296:	4b39      	ldr	r3, [pc, #228]	; (800737c <USBD_CDC_Init+0x1e8>)
 8007298:	7819      	ldrb	r1, [r3, #0]
 800729a:	2340      	movs	r3, #64	; 0x40
 800729c:	2202      	movs	r2, #2
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f002 fb29 	bl	80098f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80072a4:	4b35      	ldr	r3, [pc, #212]	; (800737c <USBD_CDC_Init+0x1e8>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 020f 	and.w	r2, r3, #15
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	440b      	add	r3, r1
 80072b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072bc:	2201      	movs	r2, #1
 80072be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80072c0:	4b2f      	ldr	r3, [pc, #188]	; (8007380 <USBD_CDC_Init+0x1ec>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	f003 020f 	and.w	r2, r3, #15
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	3326      	adds	r3, #38	; 0x26
 80072d6:	2210      	movs	r2, #16
 80072d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80072da:	4b29      	ldr	r3, [pc, #164]	; (8007380 <USBD_CDC_Init+0x1ec>)
 80072dc:	7819      	ldrb	r1, [r3, #0]
 80072de:	2308      	movs	r3, #8
 80072e0:	2203      	movs	r2, #3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f002 fb07 	bl	80098f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80072e8:	4b25      	ldr	r3, [pc, #148]	; (8007380 <USBD_CDC_Init+0x1ec>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	f003 020f 	and.w	r2, r3, #15
 80072f0:	6879      	ldr	r1, [r7, #4]
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	440b      	add	r3, r1
 80072fc:	3324      	adds	r3, #36	; 0x24
 80072fe:	2201      	movs	r2, #1
 8007300:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	33b0      	adds	r3, #176	; 0xb0
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007338:	2302      	movs	r3, #2
 800733a:	e018      	b.n	800736e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	7c1b      	ldrb	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007344:	4b0d      	ldr	r3, [pc, #52]	; (800737c <USBD_CDC_Init+0x1e8>)
 8007346:	7819      	ldrb	r1, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800734e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f002 fbbe 	bl	8009ad4 <USBD_LL_PrepareReceive>
 8007358:	e008      	b.n	800736c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800735a:	4b08      	ldr	r3, [pc, #32]	; (800737c <USBD_CDC_Init+0x1e8>)
 800735c:	7819      	ldrb	r1, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007364:	2340      	movs	r3, #64	; 0x40
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f002 fbb4 	bl	8009ad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000093 	.word	0x20000093
 800737c:	20000094 	.word	0x20000094
 8007380:	20000095 	.word	0x20000095

08007384 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007390:	4b3a      	ldr	r3, [pc, #232]	; (800747c <USBD_CDC_DeInit+0xf8>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f002 fad3 	bl	8009942 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800739c:	4b37      	ldr	r3, [pc, #220]	; (800747c <USBD_CDC_DeInit+0xf8>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	f003 020f 	and.w	r2, r3, #15
 80073a4:	6879      	ldr	r1, [r7, #4]
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	440b      	add	r3, r1
 80073b0:	3324      	adds	r3, #36	; 0x24
 80073b2:	2200      	movs	r2, #0
 80073b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80073b6:	4b32      	ldr	r3, [pc, #200]	; (8007480 <USBD_CDC_DeInit+0xfc>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f002 fac0 	bl	8009942 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80073c2:	4b2f      	ldr	r3, [pc, #188]	; (8007480 <USBD_CDC_DeInit+0xfc>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	f003 020f 	and.w	r2, r3, #15
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073da:	2200      	movs	r2, #0
 80073dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80073de:	4b29      	ldr	r3, [pc, #164]	; (8007484 <USBD_CDC_DeInit+0x100>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f002 faac 	bl	8009942 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80073ea:	4b26      	ldr	r3, [pc, #152]	; (8007484 <USBD_CDC_DeInit+0x100>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	f003 020f 	and.w	r2, r3, #15
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	3324      	adds	r3, #36	; 0x24
 8007400:	2200      	movs	r2, #0
 8007402:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007404:	4b1f      	ldr	r3, [pc, #124]	; (8007484 <USBD_CDC_DeInit+0x100>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	f003 020f 	and.w	r2, r3, #15
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	440b      	add	r3, r1
 8007418:	3326      	adds	r3, #38	; 0x26
 800741a:	2200      	movs	r2, #0
 800741c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	32b0      	adds	r2, #176	; 0xb0
 8007428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01f      	beq.n	8007470 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	33b0      	adds	r3, #176	; 0xb0
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	32b0      	adds	r2, #176	; 0xb0
 800744e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007452:	4618      	mov	r0, r3
 8007454:	f002 fb80 	bl	8009b58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	32b0      	adds	r2, #176	; 0xb0
 8007462:	2100      	movs	r1, #0
 8007464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000093 	.word	0x20000093
 8007480:	20000094 	.word	0x20000094
 8007484:	20000095 	.word	0x20000095

08007488 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	32b0      	adds	r2, #176	; 0xb0
 800749c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e0bf      	b.n	8007638 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d050      	beq.n	8007566 <USBD_CDC_Setup+0xde>
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	f040 80af 	bne.w	8007628 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	88db      	ldrh	r3, [r3, #6]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d03a      	beq.n	8007548 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b25b      	sxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	da1b      	bge.n	8007514 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	33b0      	adds	r3, #176	; 0xb0
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80074f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	88d2      	ldrh	r2, [r2, #6]
 80074f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	88db      	ldrh	r3, [r3, #6]
 80074fe:	2b07      	cmp	r3, #7
 8007500:	bf28      	it	cs
 8007502:	2307      	movcs	r3, #7
 8007504:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	89fa      	ldrh	r2, [r7, #14]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 fd89 	bl	8009024 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007512:	e090      	b.n	8007636 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	785a      	ldrb	r2, [r3, #1]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	88db      	ldrh	r3, [r3, #6]
 8007522:	2b3f      	cmp	r3, #63	; 0x3f
 8007524:	d803      	bhi.n	800752e <USBD_CDC_Setup+0xa6>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	88db      	ldrh	r3, [r3, #6]
 800752a:	b2da      	uxtb	r2, r3
 800752c:	e000      	b.n	8007530 <USBD_CDC_Setup+0xa8>
 800752e:	2240      	movs	r2, #64	; 0x40
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007536:	6939      	ldr	r1, [r7, #16]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800753e:	461a      	mov	r2, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 fd9b 	bl	800907c <USBD_CtlPrepareRx>
      break;
 8007546:	e076      	b.n	8007636 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	33b0      	adds	r3, #176	; 0xb0
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	7850      	ldrb	r0, [r2, #1]
 800755e:	2200      	movs	r2, #0
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	4798      	blx	r3
      break;
 8007564:	e067      	b.n	8007636 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	2b0b      	cmp	r3, #11
 800756c:	d851      	bhi.n	8007612 <USBD_CDC_Setup+0x18a>
 800756e:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <USBD_CDC_Setup+0xec>)
 8007570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007574:	080075a5 	.word	0x080075a5
 8007578:	08007621 	.word	0x08007621
 800757c:	08007613 	.word	0x08007613
 8007580:	08007613 	.word	0x08007613
 8007584:	08007613 	.word	0x08007613
 8007588:	08007613 	.word	0x08007613
 800758c:	08007613 	.word	0x08007613
 8007590:	08007613 	.word	0x08007613
 8007594:	08007613 	.word	0x08007613
 8007598:	08007613 	.word	0x08007613
 800759c:	080075cf 	.word	0x080075cf
 80075a0:	080075f9 	.word	0x080075f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d107      	bne.n	80075c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80075b0:	f107 030a 	add.w	r3, r7, #10
 80075b4:	2202      	movs	r2, #2
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 fd33 	bl	8009024 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075be:	e032      	b.n	8007626 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fcbd 	bl	8008f42 <USBD_CtlError>
            ret = USBD_FAIL;
 80075c8:	2303      	movs	r3, #3
 80075ca:	75fb      	strb	r3, [r7, #23]
          break;
 80075cc:	e02b      	b.n	8007626 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d107      	bne.n	80075ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80075da:	f107 030d 	add.w	r3, r7, #13
 80075de:	2201      	movs	r2, #1
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 fd1e 	bl	8009024 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075e8:	e01d      	b.n	8007626 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f001 fca8 	bl	8008f42 <USBD_CtlError>
            ret = USBD_FAIL;
 80075f2:	2303      	movs	r3, #3
 80075f4:	75fb      	strb	r3, [r7, #23]
          break;
 80075f6:	e016      	b.n	8007626 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b03      	cmp	r3, #3
 8007602:	d00f      	beq.n	8007624 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fc9b 	bl	8008f42 <USBD_CtlError>
            ret = USBD_FAIL;
 800760c:	2303      	movs	r3, #3
 800760e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007610:	e008      	b.n	8007624 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 fc94 	bl	8008f42 <USBD_CtlError>
          ret = USBD_FAIL;
 800761a:	2303      	movs	r3, #3
 800761c:	75fb      	strb	r3, [r7, #23]
          break;
 800761e:	e002      	b.n	8007626 <USBD_CDC_Setup+0x19e>
          break;
 8007620:	bf00      	nop
 8007622:	e008      	b.n	8007636 <USBD_CDC_Setup+0x1ae>
          break;
 8007624:	bf00      	nop
      }
      break;
 8007626:	e006      	b.n	8007636 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f001 fc89 	bl	8008f42 <USBD_CtlError>
      ret = USBD_FAIL;
 8007630:	2303      	movs	r3, #3
 8007632:	75fb      	strb	r3, [r7, #23]
      break;
 8007634:	bf00      	nop
  }

  return (uint8_t)ret;
 8007636:	7dfb      	ldrb	r3, [r7, #23]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007652:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	32b0      	adds	r2, #176	; 0xb0
 800765e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007666:	2303      	movs	r3, #3
 8007668:	e065      	b.n	8007736 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	32b0      	adds	r2, #176	; 0xb0
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	f003 020f 	and.w	r2, r3, #15
 8007680:	6879      	ldr	r1, [r7, #4]
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	440b      	add	r3, r1
 800768c:	3318      	adds	r3, #24
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d02f      	beq.n	80076f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	f003 020f 	and.w	r2, r3, #15
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	3318      	adds	r3, #24
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	f003 010f 	and.w	r1, r3, #15
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	460b      	mov	r3, r1
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	440b      	add	r3, r1
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4403      	add	r3, r0
 80076bc:	3348      	adds	r3, #72	; 0x48
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d112      	bne.n	80076f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	f003 020f 	and.w	r2, r3, #15
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	440b      	add	r3, r1
 80076e0:	3318      	adds	r3, #24
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076e6:	78f9      	ldrb	r1, [r7, #3]
 80076e8:	2300      	movs	r3, #0
 80076ea:	2200      	movs	r2, #0
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f002 f9d0 	bl	8009a92 <USBD_LL_Transmit>
 80076f2:	e01f      	b.n	8007734 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	33b0      	adds	r3, #176	; 0xb0
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	33b0      	adds	r3, #176	; 0xb0
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	32b0      	adds	r2, #176	; 0xb0
 8007754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007758:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	32b0      	adds	r2, #176	; 0xb0
 8007764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800776c:	2303      	movs	r3, #3
 800776e:	e01a      	b.n	80077a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f002 f9ce 	bl	8009b16 <USBD_LL_GetRxDataSize>
 800777a:	4602      	mov	r2, r0
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	33b0      	adds	r3, #176	; 0xb0
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077a0:	4611      	mov	r1, r2
 80077a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	32b0      	adds	r2, #176	; 0xb0
 80077c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e025      	b.n	800781c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	33b0      	adds	r3, #176	; 0xb0
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01a      	beq.n	800781a <USBD_CDC_EP0_RxReady+0x6c>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077ea:	2bff      	cmp	r3, #255	; 0xff
 80077ec:	d015      	beq.n	800781a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	33b0      	adds	r3, #176	; 0xb0
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007806:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800780e:	b292      	uxth	r2, r2
 8007810:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	22ff      	movs	r2, #255	; 0xff
 8007816:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800782c:	2182      	movs	r1, #130	; 0x82
 800782e:	4818      	ldr	r0, [pc, #96]	; (8007890 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007830:	f000 fd4f 	bl	80082d2 <USBD_GetEpDesc>
 8007834:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007836:	2101      	movs	r1, #1
 8007838:	4815      	ldr	r0, [pc, #84]	; (8007890 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800783a:	f000 fd4a 	bl	80082d2 <USBD_GetEpDesc>
 800783e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007840:	2181      	movs	r1, #129	; 0x81
 8007842:	4813      	ldr	r0, [pc, #76]	; (8007890 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007844:	f000 fd45 	bl	80082d2 <USBD_GetEpDesc>
 8007848:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2210      	movs	r2, #16
 8007854:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d006      	beq.n	800786a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2200      	movs	r2, #0
 8007860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007864:	711a      	strb	r2, [r3, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d006      	beq.n	800787e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007878:	711a      	strb	r2, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2243      	movs	r2, #67	; 0x43
 8007882:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007884:	4b02      	ldr	r3, [pc, #8]	; (8007890 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000050 	.word	0x20000050

08007894 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800789c:	2182      	movs	r1, #130	; 0x82
 800789e:	4818      	ldr	r0, [pc, #96]	; (8007900 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078a0:	f000 fd17 	bl	80082d2 <USBD_GetEpDesc>
 80078a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078a6:	2101      	movs	r1, #1
 80078a8:	4815      	ldr	r0, [pc, #84]	; (8007900 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078aa:	f000 fd12 	bl	80082d2 <USBD_GetEpDesc>
 80078ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078b0:	2181      	movs	r1, #129	; 0x81
 80078b2:	4813      	ldr	r0, [pc, #76]	; (8007900 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078b4:	f000 fd0d 	bl	80082d2 <USBD_GetEpDesc>
 80078b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2210      	movs	r2, #16
 80078c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d006      	beq.n	80078da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2200      	movs	r2, #0
 80078d0:	711a      	strb	r2, [r3, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f042 0202 	orr.w	r2, r2, #2
 80078d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d006      	beq.n	80078ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	711a      	strb	r2, [r3, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f042 0202 	orr.w	r2, r2, #2
 80078ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2243      	movs	r2, #67	; 0x43
 80078f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078f4:	4b02      	ldr	r3, [pc, #8]	; (8007900 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000050 	.word	0x20000050

08007904 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800790c:	2182      	movs	r1, #130	; 0x82
 800790e:	4818      	ldr	r0, [pc, #96]	; (8007970 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007910:	f000 fcdf 	bl	80082d2 <USBD_GetEpDesc>
 8007914:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007916:	2101      	movs	r1, #1
 8007918:	4815      	ldr	r0, [pc, #84]	; (8007970 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800791a:	f000 fcda 	bl	80082d2 <USBD_GetEpDesc>
 800791e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007920:	2181      	movs	r1, #129	; 0x81
 8007922:	4813      	ldr	r0, [pc, #76]	; (8007970 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007924:	f000 fcd5 	bl	80082d2 <USBD_GetEpDesc>
 8007928:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	2210      	movs	r2, #16
 8007934:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d006      	beq.n	800794a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	2200      	movs	r2, #0
 8007940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007944:	711a      	strb	r2, [r3, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d006      	beq.n	800795e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007958:	711a      	strb	r2, [r3, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2243      	movs	r2, #67	; 0x43
 8007962:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007964:	4b02      	ldr	r3, [pc, #8]	; (8007970 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000050 	.word	0x20000050

08007974 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	220a      	movs	r2, #10
 8007980:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007982:	4b03      	ldr	r3, [pc, #12]	; (8007990 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	2000000c 	.word	0x2000000c

08007994 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e009      	b.n	80079bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	33b0      	adds	r3, #176	; 0xb0
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	32b0      	adds	r2, #176	; 0xb0
 80079de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e008      	b.n	8007a00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	371c      	adds	r7, #28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	32b0      	adds	r2, #176	; 0xb0
 8007a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e004      	b.n	8007a3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	32b0      	adds	r2, #176	; 0xb0
 8007a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	32b0      	adds	r2, #176	; 0xb0
 8007a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e025      	b.n	8007ac6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d11f      	bne.n	8007ac4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007a8c:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <USBD_CDC_TransmitPacket+0x88>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4403      	add	r3, r0
 8007aa6:	3318      	adds	r3, #24
 8007aa8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007aaa:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <USBD_CDC_TransmitPacket+0x88>)
 8007aac:	7819      	ldrb	r1, [r3, #0]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 ffe9 	bl	8009a92 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000093 	.word	0x20000093

08007ad4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	32b0      	adds	r2, #176	; 0xb0
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	32b0      	adds	r2, #176	; 0xb0
 8007af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e018      	b.n	8007b34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	7c1b      	ldrb	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10a      	bne.n	8007b20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b0a:	4b0c      	ldr	r3, [pc, #48]	; (8007b3c <USBD_CDC_ReceivePacket+0x68>)
 8007b0c:	7819      	ldrb	r1, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f001 ffdb 	bl	8009ad4 <USBD_LL_PrepareReceive>
 8007b1e:	e008      	b.n	8007b32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b20:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <USBD_CDC_ReceivePacket+0x68>)
 8007b22:	7819      	ldrb	r1, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b2a:	2340      	movs	r3, #64	; 0x40
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 ffd1 	bl	8009ad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20000094 	.word	0x20000094

08007b40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e01f      	b.n	8007b98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	79fa      	ldrb	r2, [r7, #7]
 8007b8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f001 fe4b 	bl	8009828 <USBD_LL_Init>
 8007b92:	4603      	mov	r3, r0
 8007b94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e025      	b.n	8007c04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	32ae      	adds	r2, #174	; 0xae
 8007bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00f      	beq.n	8007bf4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	32ae      	adds	r2, #174	; 0xae
 8007bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be4:	f107 020e 	add.w	r2, r7, #14
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
 8007bec:	4602      	mov	r2, r0
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f001 fe53 	bl	80098c0 <USBD_LL_Start>
 8007c1a:	4603      	mov	r3, r0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d009      	beq.n	8007c68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	78fa      	ldrb	r2, [r7, #3]
 8007c5e:	4611      	mov	r1, r2
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	4798      	blx	r3
 8007c64:	4603      	mov	r3, r0
 8007c66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	78fa      	ldrb	r2, [r7, #3]
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 f908 	bl	8008ece <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ccc:	461a      	mov	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cda:	f003 031f 	and.w	r3, r3, #31
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d01a      	beq.n	8007d18 <USBD_LL_SetupStage+0x72>
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d822      	bhi.n	8007d2c <USBD_LL_SetupStage+0x86>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <USBD_LL_SetupStage+0x4a>
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d00a      	beq.n	8007d04 <USBD_LL_SetupStage+0x5e>
 8007cee:	e01d      	b.n	8007d2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fb5f 	bl	80083bc <USBD_StdDevReq>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]
      break;
 8007d02:	e020      	b.n	8007d46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fbc7 	bl	80084a0 <USBD_StdItfReq>
 8007d12:	4603      	mov	r3, r0
 8007d14:	73fb      	strb	r3, [r7, #15]
      break;
 8007d16:	e016      	b.n	8007d46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fc29 	bl	8008578 <USBD_StdEPReq>
 8007d26:	4603      	mov	r3, r0
 8007d28:	73fb      	strb	r3, [r7, #15]
      break;
 8007d2a:	e00c      	b.n	8007d46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 fe20 	bl	8009980 <USBD_LL_StallEP>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73fb      	strb	r3, [r7, #15]
      break;
 8007d44:	bf00      	nop
  }

  return ret;
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d16e      	bne.n	8007e46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	f040 8098 	bne.w	8007eac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d913      	bls.n	8007db0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	1ad2      	subs	r2, r2, r3
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	bf28      	it	cs
 8007da2:	4613      	movcs	r3, r2
 8007da4:	461a      	mov	r2, r3
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f001 f984 	bl	80090b6 <USBD_CtlContinueRx>
 8007dae:	e07d      	b.n	8007eac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007db6:	f003 031f 	and.w	r3, r3, #31
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d014      	beq.n	8007de8 <USBD_LL_DataOutStage+0x98>
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d81d      	bhi.n	8007dfe <USBD_LL_DataOutStage+0xae>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <USBD_LL_DataOutStage+0x7c>
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d003      	beq.n	8007dd2 <USBD_LL_DataOutStage+0x82>
 8007dca:	e018      	b.n	8007dfe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	75bb      	strb	r3, [r7, #22]
            break;
 8007dd0:	e018      	b.n	8007e04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fa5e 	bl	800829e <USBD_CoreFindIF>
 8007de2:	4603      	mov	r3, r0
 8007de4:	75bb      	strb	r3, [r7, #22]
            break;
 8007de6:	e00d      	b.n	8007e04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	4619      	mov	r1, r3
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 fa60 	bl	80082b8 <USBD_CoreFindEP>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	75bb      	strb	r3, [r7, #22]
            break;
 8007dfc:	e002      	b.n	8007e04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75bb      	strb	r3, [r7, #22]
            break;
 8007e02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007e04:	7dbb      	ldrb	r3, [r7, #22]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d119      	bne.n	8007e3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d113      	bne.n	8007e3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007e16:	7dba      	ldrb	r2, [r7, #22]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	32ae      	adds	r2, #174	; 0xae
 8007e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007e26:	7dba      	ldrb	r2, [r7, #22]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007e2e:	7dba      	ldrb	r2, [r7, #22]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	32ae      	adds	r2, #174	; 0xae
 8007e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f001 f94a 	bl	80090d8 <USBD_CtlSendStatus>
 8007e44:	e032      	b.n	8007eac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	4619      	mov	r1, r3
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fa31 	bl	80082b8 <USBD_CoreFindEP>
 8007e56:	4603      	mov	r3, r0
 8007e58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e5a:	7dbb      	ldrb	r3, [r7, #22]
 8007e5c:	2bff      	cmp	r3, #255	; 0xff
 8007e5e:	d025      	beq.n	8007eac <USBD_LL_DataOutStage+0x15c>
 8007e60:	7dbb      	ldrb	r3, [r7, #22]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d122      	bne.n	8007eac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d117      	bne.n	8007ea2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e72:	7dba      	ldrb	r2, [r7, #22]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	32ae      	adds	r2, #174	; 0xae
 8007e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00f      	beq.n	8007ea2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e82:	7dba      	ldrb	r2, [r7, #22]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e8a:	7dba      	ldrb	r2, [r7, #22]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	32ae      	adds	r2, #174	; 0xae
 8007e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	7afa      	ldrb	r2, [r7, #11]
 8007e98:	4611      	mov	r1, r2
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	4798      	blx	r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	e000      	b.n	8007eae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b086      	sub	sp, #24
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	607a      	str	r2, [r7, #4]
 8007ec2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ec4:	7afb      	ldrb	r3, [r7, #11]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d16f      	bne.n	8007faa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3314      	adds	r3, #20
 8007ece:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d15a      	bne.n	8007f90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	689a      	ldr	r2, [r3, #8]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d914      	bls.n	8007f10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	1ad2      	subs	r2, r2, r3
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f001 f8ac 	bl	800905a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f02:	2300      	movs	r3, #0
 8007f04:	2200      	movs	r2, #0
 8007f06:	2100      	movs	r1, #0
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f001 fde3 	bl	8009ad4 <USBD_LL_PrepareReceive>
 8007f0e:	e03f      	b.n	8007f90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d11c      	bne.n	8007f56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d316      	bcc.n	8007f56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d20f      	bcs.n	8007f56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f36:	2200      	movs	r2, #0
 8007f38:	2100      	movs	r1, #0
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f001 f88d 	bl	800905a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f001 fdc0 	bl	8009ad4 <USBD_LL_PrepareReceive>
 8007f54:	e01c      	b.n	8007f90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d10f      	bne.n	8007f82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d009      	beq.n	8007f82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f82:	2180      	movs	r1, #128	; 0x80
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f001 fcfb 	bl	8009980 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f001 f8b7 	bl	80090fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d03a      	beq.n	8008010 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f7ff fe42 	bl	8007c24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007fa8:	e032      	b.n	8008010 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007faa:	7afb      	ldrb	r3, [r7, #11]
 8007fac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 f97f 	bl	80082b8 <USBD_CoreFindEP>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
 8007fc0:	2bff      	cmp	r3, #255	; 0xff
 8007fc2:	d025      	beq.n	8008010 <USBD_LL_DataInStage+0x15a>
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d122      	bne.n	8008010 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d11c      	bne.n	8008010 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007fd6:	7dfa      	ldrb	r2, [r7, #23]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	32ae      	adds	r2, #174	; 0xae
 8007fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d014      	beq.n	8008010 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007fe6:	7dfa      	ldrb	r2, [r7, #23]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007fee:	7dfa      	ldrb	r2, [r7, #23]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	32ae      	adds	r2, #174	; 0xae
 8007ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	7afa      	ldrb	r2, [r7, #11]
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	4798      	blx	r3
 8008002:	4603      	mov	r3, r0
 8008004:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008006:	7dbb      	ldrb	r3, [r7, #22]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800800c:	7dbb      	ldrb	r3, [r7, #22]
 800800e:	e000      	b.n	8008012 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008052:	2b00      	cmp	r3, #0
 8008054:	d014      	beq.n	8008080 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00e      	beq.n	8008080 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6852      	ldr	r2, [r2, #4]
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	4611      	mov	r1, r2
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	4798      	blx	r3
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800807c:	2303      	movs	r3, #3
 800807e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008080:	2340      	movs	r3, #64	; 0x40
 8008082:	2200      	movs	r2, #0
 8008084:	2100      	movs	r1, #0
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 fc35 	bl	80098f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2240      	movs	r2, #64	; 0x40
 8008098:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800809c:	2340      	movs	r3, #64	; 0x40
 800809e:	2200      	movs	r2, #0
 80080a0:	2180      	movs	r1, #128	; 0x80
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 fc27 	bl	80098f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2240      	movs	r2, #64	; 0x40
 80080b2:	621a      	str	r2, [r3, #32]

  return ret;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	78fa      	ldrb	r2, [r7, #3]
 80080ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2204      	movs	r2, #4
 80080f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800810a:	b480      	push	{r7}
 800810c:	b083      	sub	sp, #12
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b04      	cmp	r3, #4
 800811c:	d106      	bne.n	800812c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008124:	b2da      	uxtb	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b03      	cmp	r3, #3
 800814c:	d110      	bne.n	8008170 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00b      	beq.n	8008170 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d005      	beq.n	8008170 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	32ae      	adds	r2, #174	; 0xae
 8008190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	e01c      	b.n	80081d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d115      	bne.n	80081d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	32ae      	adds	r2, #174	; 0xae
 80081b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00b      	beq.n	80081d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	32ae      	adds	r2, #174	; 0xae
 80081c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	78fa      	ldrb	r2, [r7, #3]
 80081ce:	4611      	mov	r1, r2
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	32ae      	adds	r2, #174	; 0xae
 80081f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e01c      	b.n	800823a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b03      	cmp	r3, #3
 800820a:	d115      	bne.n	8008238 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32ae      	adds	r2, #174	; 0xae
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	32ae      	adds	r2, #174	; 0xae
 800822a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	78fa      	ldrb	r2, [r7, #3]
 8008232:	4611      	mov	r1, r2
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00e      	beq.n	8008294 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	6852      	ldr	r2, [r2, #4]
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	4611      	mov	r1, r2
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008290:	2303      	movs	r3, #3
 8008292:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80082aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80082c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	885b      	ldrh	r3, [r3, #2]
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d920      	bls.n	800833c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008302:	e013      	b.n	800832c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008304:	f107 030a 	add.w	r3, r7, #10
 8008308:	4619      	mov	r1, r3
 800830a:	6978      	ldr	r0, [r7, #20]
 800830c:	f000 f81b 	bl	8008346 <USBD_GetNextDesc>
 8008310:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	2b05      	cmp	r3, #5
 8008318:	d108      	bne.n	800832c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	789b      	ldrb	r3, [r3, #2]
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	429a      	cmp	r2, r3
 8008326:	d008      	beq.n	800833a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008328:	2300      	movs	r3, #0
 800832a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	885b      	ldrh	r3, [r3, #2]
 8008330:	b29a      	uxth	r2, r3
 8008332:	897b      	ldrh	r3, [r7, #10]
 8008334:	429a      	cmp	r2, r3
 8008336:	d8e5      	bhi.n	8008304 <USBD_GetEpDesc+0x32>
 8008338:	e000      	b.n	800833c <USBD_GetEpDesc+0x6a>
          break;
 800833a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800833c:	693b      	ldr	r3, [r7, #16]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008346:	b480      	push	{r7}
 8008348:	b085      	sub	sp, #20
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	881a      	ldrh	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	b29b      	uxth	r3, r3
 800835e:	4413      	add	r3, r2
 8008360:	b29a      	uxth	r2, r3
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4413      	add	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008372:	68fb      	ldr	r3, [r7, #12]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	3301      	adds	r3, #1
 8008396:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800839e:	8a3b      	ldrh	r3, [r7, #16]
 80083a0:	021b      	lsls	r3, r3, #8
 80083a2:	b21a      	sxth	r2, r3
 80083a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	b21b      	sxth	r3, r3
 80083ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083ae:	89fb      	ldrh	r3, [r7, #14]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	371c      	adds	r7, #28
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083d2:	2b40      	cmp	r3, #64	; 0x40
 80083d4:	d005      	beq.n	80083e2 <USBD_StdDevReq+0x26>
 80083d6:	2b40      	cmp	r3, #64	; 0x40
 80083d8:	d857      	bhi.n	800848a <USBD_StdDevReq+0xce>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00f      	beq.n	80083fe <USBD_StdDevReq+0x42>
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d153      	bne.n	800848a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	32ae      	adds	r2, #174	; 0xae
 80083ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	4798      	blx	r3
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]
      break;
 80083fc:	e04a      	b.n	8008494 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	2b09      	cmp	r3, #9
 8008404:	d83b      	bhi.n	800847e <USBD_StdDevReq+0xc2>
 8008406:	a201      	add	r2, pc, #4	; (adr r2, 800840c <USBD_StdDevReq+0x50>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	08008461 	.word	0x08008461
 8008410:	08008475 	.word	0x08008475
 8008414:	0800847f 	.word	0x0800847f
 8008418:	0800846b 	.word	0x0800846b
 800841c:	0800847f 	.word	0x0800847f
 8008420:	0800843f 	.word	0x0800843f
 8008424:	08008435 	.word	0x08008435
 8008428:	0800847f 	.word	0x0800847f
 800842c:	08008457 	.word	0x08008457
 8008430:	08008449 	.word	0x08008449
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa3c 	bl	80088b4 <USBD_GetDescriptor>
          break;
 800843c:	e024      	b.n	8008488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fba1 	bl	8008b88 <USBD_SetAddress>
          break;
 8008446:	e01f      	b.n	8008488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fbe0 	bl	8008c10 <USBD_SetConfig>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]
          break;
 8008454:	e018      	b.n	8008488 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fc83 	bl	8008d64 <USBD_GetConfig>
          break;
 800845e:	e013      	b.n	8008488 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fcb4 	bl	8008dd0 <USBD_GetStatus>
          break;
 8008468:	e00e      	b.n	8008488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fce3 	bl	8008e38 <USBD_SetFeature>
          break;
 8008472:	e009      	b.n	8008488 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fd07 	bl	8008e8a <USBD_ClrFeature>
          break;
 800847c:	e004      	b.n	8008488 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fd5e 	bl	8008f42 <USBD_CtlError>
          break;
 8008486:	bf00      	nop
      }
      break;
 8008488:	e004      	b.n	8008494 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fd58 	bl	8008f42 <USBD_CtlError>
      break;
 8008492:	bf00      	nop
  }

  return ret;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop

080084a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084b6:	2b40      	cmp	r3, #64	; 0x40
 80084b8:	d005      	beq.n	80084c6 <USBD_StdItfReq+0x26>
 80084ba:	2b40      	cmp	r3, #64	; 0x40
 80084bc:	d852      	bhi.n	8008564 <USBD_StdItfReq+0xc4>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <USBD_StdItfReq+0x26>
 80084c2:	2b20      	cmp	r3, #32
 80084c4:	d14e      	bne.n	8008564 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	3b01      	subs	r3, #1
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d840      	bhi.n	8008556 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	889b      	ldrh	r3, [r3, #4]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d836      	bhi.n	800854c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	889b      	ldrh	r3, [r3, #4]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff fed9 	bl	800829e <USBD_CoreFindIF>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	2bff      	cmp	r3, #255	; 0xff
 80084f4:	d01d      	beq.n	8008532 <USBD_StdItfReq+0x92>
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d11a      	bne.n	8008532 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084fc:	7bba      	ldrb	r2, [r7, #14]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	32ae      	adds	r2, #174	; 0xae
 8008502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00f      	beq.n	800852c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800850c:	7bba      	ldrb	r2, [r7, #14]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008514:	7bba      	ldrb	r2, [r7, #14]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	32ae      	adds	r2, #174	; 0xae
 800851a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	4798      	blx	r3
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800852a:	e004      	b.n	8008536 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800852c:	2303      	movs	r3, #3
 800852e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008530:	e001      	b.n	8008536 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008532:	2303      	movs	r3, #3
 8008534:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	88db      	ldrh	r3, [r3, #6]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d110      	bne.n	8008560 <USBD_StdItfReq+0xc0>
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10d      	bne.n	8008560 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fdc7 	bl	80090d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800854a:	e009      	b.n	8008560 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fcf7 	bl	8008f42 <USBD_CtlError>
          break;
 8008554:	e004      	b.n	8008560 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fcf2 	bl	8008f42 <USBD_CtlError>
          break;
 800855e:	e000      	b.n	8008562 <USBD_StdItfReq+0xc2>
          break;
 8008560:	bf00      	nop
      }
      break;
 8008562:	e004      	b.n	800856e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fceb 	bl	8008f42 <USBD_CtlError>
      break;
 800856c:	bf00      	nop
  }

  return ret;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	889b      	ldrh	r3, [r3, #4]
 800858a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008594:	2b40      	cmp	r3, #64	; 0x40
 8008596:	d007      	beq.n	80085a8 <USBD_StdEPReq+0x30>
 8008598:	2b40      	cmp	r3, #64	; 0x40
 800859a:	f200 817f 	bhi.w	800889c <USBD_StdEPReq+0x324>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d02a      	beq.n	80085f8 <USBD_StdEPReq+0x80>
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	f040 817a 	bne.w	800889c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff fe83 	bl	80082b8 <USBD_CoreFindEP>
 80085b2:	4603      	mov	r3, r0
 80085b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085b6:	7b7b      	ldrb	r3, [r7, #13]
 80085b8:	2bff      	cmp	r3, #255	; 0xff
 80085ba:	f000 8174 	beq.w	80088a6 <USBD_StdEPReq+0x32e>
 80085be:	7b7b      	ldrb	r3, [r7, #13]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f040 8170 	bne.w	80088a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80085c6:	7b7a      	ldrb	r2, [r7, #13]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80085ce:	7b7a      	ldrb	r2, [r7, #13]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	32ae      	adds	r2, #174	; 0xae
 80085d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 8163 	beq.w	80088a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80085e0:	7b7a      	ldrb	r2, [r7, #13]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	32ae      	adds	r2, #174	; 0xae
 80085e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085f6:	e156      	b.n	80088a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d008      	beq.n	8008612 <USBD_StdEPReq+0x9a>
 8008600:	2b03      	cmp	r3, #3
 8008602:	f300 8145 	bgt.w	8008890 <USBD_StdEPReq+0x318>
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 809b 	beq.w	8008742 <USBD_StdEPReq+0x1ca>
 800860c:	2b01      	cmp	r3, #1
 800860e:	d03c      	beq.n	800868a <USBD_StdEPReq+0x112>
 8008610:	e13e      	b.n	8008890 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d002      	beq.n	8008624 <USBD_StdEPReq+0xac>
 800861e:	2b03      	cmp	r3, #3
 8008620:	d016      	beq.n	8008650 <USBD_StdEPReq+0xd8>
 8008622:	e02c      	b.n	800867e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008624:	7bbb      	ldrb	r3, [r7, #14]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00d      	beq.n	8008646 <USBD_StdEPReq+0xce>
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	2b80      	cmp	r3, #128	; 0x80
 800862e:	d00a      	beq.n	8008646 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f001 f9a3 	bl	8009980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800863a:	2180      	movs	r1, #128	; 0x80
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 f99f 	bl	8009980 <USBD_LL_StallEP>
 8008642:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008644:	e020      	b.n	8008688 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fc7a 	bl	8008f42 <USBD_CtlError>
              break;
 800864e:	e01b      	b.n	8008688 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	885b      	ldrh	r3, [r3, #2]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10e      	bne.n	8008676 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00b      	beq.n	8008676 <USBD_StdEPReq+0xfe>
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b80      	cmp	r3, #128	; 0x80
 8008662:	d008      	beq.n	8008676 <USBD_StdEPReq+0xfe>
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	88db      	ldrh	r3, [r3, #6]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d104      	bne.n	8008676 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 f985 	bl	8009980 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fd2e 	bl	80090d8 <USBD_CtlSendStatus>

              break;
 800867c:	e004      	b.n	8008688 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fc5e 	bl	8008f42 <USBD_CtlError>
              break;
 8008686:	bf00      	nop
          }
          break;
 8008688:	e107      	b.n	800889a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d002      	beq.n	800869c <USBD_StdEPReq+0x124>
 8008696:	2b03      	cmp	r3, #3
 8008698:	d016      	beq.n	80086c8 <USBD_StdEPReq+0x150>
 800869a:	e04b      	b.n	8008734 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00d      	beq.n	80086be <USBD_StdEPReq+0x146>
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	2b80      	cmp	r3, #128	; 0x80
 80086a6:	d00a      	beq.n	80086be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f001 f967 	bl	8009980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086b2:	2180      	movs	r1, #128	; 0x80
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 f963 	bl	8009980 <USBD_LL_StallEP>
 80086ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086bc:	e040      	b.n	8008740 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fc3e 	bl	8008f42 <USBD_CtlError>
              break;
 80086c6:	e03b      	b.n	8008740 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	885b      	ldrh	r3, [r3, #2]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d136      	bne.n	800873e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d004      	beq.n	80086e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 f96d 	bl	80099be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fcf7 	bl	80090d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff fde2 	bl	80082b8 <USBD_CoreFindEP>
 80086f4:	4603      	mov	r3, r0
 80086f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086f8:	7b7b      	ldrb	r3, [r7, #13]
 80086fa:	2bff      	cmp	r3, #255	; 0xff
 80086fc:	d01f      	beq.n	800873e <USBD_StdEPReq+0x1c6>
 80086fe:	7b7b      	ldrb	r3, [r7, #13]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d11c      	bne.n	800873e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008704:	7b7a      	ldrb	r2, [r7, #13]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800870c:	7b7a      	ldrb	r2, [r7, #13]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	32ae      	adds	r2, #174	; 0xae
 8008712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d010      	beq.n	800873e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800871c:	7b7a      	ldrb	r2, [r7, #13]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	32ae      	adds	r2, #174	; 0xae
 8008722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
 800872e:	4603      	mov	r3, r0
 8008730:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008732:	e004      	b.n	800873e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fc03 	bl	8008f42 <USBD_CtlError>
              break;
 800873c:	e000      	b.n	8008740 <USBD_StdEPReq+0x1c8>
              break;
 800873e:	bf00      	nop
          }
          break;
 8008740:	e0ab      	b.n	800889a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d002      	beq.n	8008754 <USBD_StdEPReq+0x1dc>
 800874e:	2b03      	cmp	r3, #3
 8008750:	d032      	beq.n	80087b8 <USBD_StdEPReq+0x240>
 8008752:	e097      	b.n	8008884 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d007      	beq.n	800876a <USBD_StdEPReq+0x1f2>
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	2b80      	cmp	r3, #128	; 0x80
 800875e:	d004      	beq.n	800876a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fbed 	bl	8008f42 <USBD_CtlError>
                break;
 8008768:	e091      	b.n	800888e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800876a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800876e:	2b00      	cmp	r3, #0
 8008770:	da0b      	bge.n	800878a <USBD_StdEPReq+0x212>
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	3310      	adds	r3, #16
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	4413      	add	r3, r2
 8008786:	3304      	adds	r3, #4
 8008788:	e00b      	b.n	80087a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	4413      	add	r3, r2
 80087a0:	3304      	adds	r3, #4
 80087a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2200      	movs	r2, #0
 80087a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2202      	movs	r2, #2
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fc37 	bl	8009024 <USBD_CtlSendData>
              break;
 80087b6:	e06a      	b.n	800888e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	da11      	bge.n	80087e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	f003 020f 	and.w	r2, r3, #15
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	440b      	add	r3, r1
 80087d2:	3324      	adds	r3, #36	; 0x24
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d117      	bne.n	800880a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fbb0 	bl	8008f42 <USBD_CtlError>
                  break;
 80087e2:	e054      	b.n	800888e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	f003 020f 	and.w	r2, r3, #15
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d104      	bne.n	800880a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fb9d 	bl	8008f42 <USBD_CtlError>
                  break;
 8008808:	e041      	b.n	800888e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800880a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800880e:	2b00      	cmp	r3, #0
 8008810:	da0b      	bge.n	800882a <USBD_StdEPReq+0x2b2>
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	3310      	adds	r3, #16
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	4413      	add	r3, r2
 8008826:	3304      	adds	r3, #4
 8008828:	e00b      	b.n	8008842 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800882a:	7bbb      	ldrb	r3, [r7, #14]
 800882c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008830:	4613      	mov	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	4413      	add	r3, r2
 8008840:	3304      	adds	r3, #4
 8008842:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d002      	beq.n	8008850 <USBD_StdEPReq+0x2d8>
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	2b80      	cmp	r3, #128	; 0x80
 800884e:	d103      	bne.n	8008858 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	e00e      	b.n	8008876 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 f8cd 	bl	80099fc <USBD_LL_IsStallEP>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d003      	beq.n	8008870 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2201      	movs	r2, #1
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	e002      	b.n	8008876 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2202      	movs	r2, #2
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fbd1 	bl	8009024 <USBD_CtlSendData>
              break;
 8008882:	e004      	b.n	800888e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fb5b 	bl	8008f42 <USBD_CtlError>
              break;
 800888c:	bf00      	nop
          }
          break;
 800888e:	e004      	b.n	800889a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fb55 	bl	8008f42 <USBD_CtlError>
          break;
 8008898:	bf00      	nop
      }
      break;
 800889a:	e005      	b.n	80088a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fb4f 	bl	8008f42 <USBD_CtlError>
      break;
 80088a4:	e000      	b.n	80088a8 <USBD_StdEPReq+0x330>
      break;
 80088a6:	bf00      	nop
  }

  return ret;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	885b      	ldrh	r3, [r3, #2]
 80088ce:	0a1b      	lsrs	r3, r3, #8
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	3b01      	subs	r3, #1
 80088d4:	2b06      	cmp	r3, #6
 80088d6:	f200 8128 	bhi.w	8008b2a <USBD_GetDescriptor+0x276>
 80088da:	a201      	add	r2, pc, #4	; (adr r2, 80088e0 <USBD_GetDescriptor+0x2c>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	080088fd 	.word	0x080088fd
 80088e4:	08008915 	.word	0x08008915
 80088e8:	08008955 	.word	0x08008955
 80088ec:	08008b2b 	.word	0x08008b2b
 80088f0:	08008b2b 	.word	0x08008b2b
 80088f4:	08008acb 	.word	0x08008acb
 80088f8:	08008af7 	.word	0x08008af7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	7c12      	ldrb	r2, [r2, #16]
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	60f8      	str	r0, [r7, #12]
      break;
 8008912:	e112      	b.n	8008b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7c1b      	ldrb	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10d      	bne.n	8008938 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008924:	f107 0208 	add.w	r2, r7, #8
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3301      	adds	r3, #1
 8008932:	2202      	movs	r2, #2
 8008934:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008936:	e100      	b.n	8008b3a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	f107 0208 	add.w	r2, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3301      	adds	r3, #1
 800894e:	2202      	movs	r2, #2
 8008950:	701a      	strb	r2, [r3, #0]
      break;
 8008952:	e0f2      	b.n	8008b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	885b      	ldrh	r3, [r3, #2]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b05      	cmp	r3, #5
 800895c:	f200 80ac 	bhi.w	8008ab8 <USBD_GetDescriptor+0x204>
 8008960:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <USBD_GetDescriptor+0xb4>)
 8008962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008966:	bf00      	nop
 8008968:	08008981 	.word	0x08008981
 800896c:	080089b5 	.word	0x080089b5
 8008970:	080089e9 	.word	0x080089e9
 8008974:	08008a1d 	.word	0x08008a1d
 8008978:	08008a51 	.word	0x08008a51
 800897c:	08008a85 	.word	0x08008a85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089a2:	e091      	b.n	8008ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 facb 	bl	8008f42 <USBD_CtlError>
            err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
          break;
 80089b2:	e089      	b.n	8008ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 0108 	add.w	r1, r7, #8
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089d6:	e077      	b.n	8008ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fab1 	bl	8008f42 <USBD_CtlError>
            err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
          break;
 80089e6:	e06f      	b.n	8008ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	7c12      	ldrb	r2, [r2, #16]
 8008a00:	f107 0108 	add.w	r1, r7, #8
 8008a04:	4610      	mov	r0, r2
 8008a06:	4798      	blx	r3
 8008a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a0a:	e05d      	b.n	8008ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa97 	bl	8008f42 <USBD_CtlError>
            err++;
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	3301      	adds	r3, #1
 8008a18:	72fb      	strb	r3, [r7, #11]
          break;
 8008a1a:	e055      	b.n	8008ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7c12      	ldrb	r2, [r2, #16]
 8008a34:	f107 0108 	add.w	r1, r7, #8
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a3e:	e043      	b.n	8008ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa7d 	bl	8008f42 <USBD_CtlError>
            err++;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a4e:	e03b      	b.n	8008ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00b      	beq.n	8008a74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	7c12      	ldrb	r2, [r2, #16]
 8008a68:	f107 0108 	add.w	r1, r7, #8
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
 8008a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a72:	e029      	b.n	8008ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa63 	bl	8008f42 <USBD_CtlError>
            err++;
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	72fb      	strb	r3, [r7, #11]
          break;
 8008a82:	e021      	b.n	8008ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	7c12      	ldrb	r2, [r2, #16]
 8008a9c:	f107 0108 	add.w	r1, r7, #8
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	4798      	blx	r3
 8008aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aa6:	e00f      	b.n	8008ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fa49 	bl	8008f42 <USBD_CtlError>
            err++;
 8008ab0:	7afb      	ldrb	r3, [r7, #11]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ab6:	e007      	b.n	8008ac8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fa41 	bl	8008f42 <USBD_CtlError>
          err++;
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ac6:	bf00      	nop
      }
      break;
 8008ac8:	e037      	b.n	8008b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	7c1b      	ldrb	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ada:	f107 0208 	add.w	r2, r7, #8
 8008ade:	4610      	mov	r0, r2
 8008ae0:	4798      	blx	r3
 8008ae2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ae4:	e029      	b.n	8008b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fa2a 	bl	8008f42 <USBD_CtlError>
        err++;
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	3301      	adds	r3, #1
 8008af2:	72fb      	strb	r3, [r7, #11]
      break;
 8008af4:	e021      	b.n	8008b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	7c1b      	ldrb	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10d      	bne.n	8008b1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	f107 0208 	add.w	r2, r7, #8
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4798      	blx	r3
 8008b0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3301      	adds	r3, #1
 8008b14:	2207      	movs	r2, #7
 8008b16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b18:	e00f      	b.n	8008b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fa10 	bl	8008f42 <USBD_CtlError>
        err++;
 8008b22:	7afb      	ldrb	r3, [r7, #11]
 8008b24:	3301      	adds	r3, #1
 8008b26:	72fb      	strb	r3, [r7, #11]
      break;
 8008b28:	e007      	b.n	8008b3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fa08 	bl	8008f42 <USBD_CtlError>
      err++;
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	3301      	adds	r3, #1
 8008b36:	72fb      	strb	r3, [r7, #11]
      break;
 8008b38:	bf00      	nop
  }

  if (err != 0U)
 8008b3a:	7afb      	ldrb	r3, [r7, #11]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d11e      	bne.n	8008b7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	88db      	ldrh	r3, [r3, #6]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d016      	beq.n	8008b76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008b48:	893b      	ldrh	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00e      	beq.n	8008b6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	88da      	ldrh	r2, [r3, #6]
 8008b52:	893b      	ldrh	r3, [r7, #8]
 8008b54:	4293      	cmp	r3, r2
 8008b56:	bf28      	it	cs
 8008b58:	4613      	movcs	r3, r2
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b5e:	893b      	ldrh	r3, [r7, #8]
 8008b60:	461a      	mov	r2, r3
 8008b62:	68f9      	ldr	r1, [r7, #12]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fa5d 	bl	8009024 <USBD_CtlSendData>
 8008b6a:	e009      	b.n	8008b80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f9e7 	bl	8008f42 <USBD_CtlError>
 8008b74:	e004      	b.n	8008b80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 faae 	bl	80090d8 <USBD_CtlSendStatus>
 8008b7c:	e000      	b.n	8008b80 <USBD_GetDescriptor+0x2cc>
    return;
 8008b7e:	bf00      	nop
  }
}
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop

08008b88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	889b      	ldrh	r3, [r3, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d131      	bne.n	8008bfe <USBD_SetAddress+0x76>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	88db      	ldrh	r3, [r3, #6]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d12d      	bne.n	8008bfe <USBD_SetAddress+0x76>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	885b      	ldrh	r3, [r3, #2]
 8008ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ba8:	d829      	bhi.n	8008bfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	885b      	ldrh	r3, [r3, #2]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d104      	bne.n	8008bcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f9bc 	bl	8008f42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bca:	e01d      	b.n	8008c08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	7bfa      	ldrb	r2, [r7, #15]
 8008bd0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 ff3b 	bl	8009a54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fa7a 	bl	80090d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d004      	beq.n	8008bf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2202      	movs	r2, #2
 8008bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf2:	e009      	b.n	8008c08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfc:	e004      	b.n	8008c08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f99e 	bl	8008f42 <USBD_CtlError>
  }
}
 8008c06:	bf00      	nop
 8008c08:	bf00      	nop
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	885b      	ldrh	r3, [r3, #2]
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	4b4e      	ldr	r3, [pc, #312]	; (8008d60 <USBD_SetConfig+0x150>)
 8008c26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c28:	4b4d      	ldr	r3, [pc, #308]	; (8008d60 <USBD_SetConfig+0x150>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d905      	bls.n	8008c3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f985 	bl	8008f42 <USBD_CtlError>
    return USBD_FAIL;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e08c      	b.n	8008d56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d002      	beq.n	8008c4e <USBD_SetConfig+0x3e>
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d029      	beq.n	8008ca0 <USBD_SetConfig+0x90>
 8008c4c:	e075      	b.n	8008d3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c4e:	4b44      	ldr	r3, [pc, #272]	; (8008d60 <USBD_SetConfig+0x150>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d020      	beq.n	8008c98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c56:	4b42      	ldr	r3, [pc, #264]	; (8008d60 <USBD_SetConfig+0x150>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c60:	4b3f      	ldr	r3, [pc, #252]	; (8008d60 <USBD_SetConfig+0x150>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7fe ffe7 	bl	8007c3a <USBD_SetClassConfig>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d008      	beq.n	8008c88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f962 	bl	8008f42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2202      	movs	r2, #2
 8008c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c86:	e065      	b.n	8008d54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fa25 	bl	80090d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2203      	movs	r2, #3
 8008c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c96:	e05d      	b.n	8008d54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa1d 	bl	80090d8 <USBD_CtlSendStatus>
      break;
 8008c9e:	e059      	b.n	8008d54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ca0:	4b2f      	ldr	r3, [pc, #188]	; (8008d60 <USBD_SetConfig+0x150>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d112      	bne.n	8008cce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008cb0:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <USBD_SetConfig+0x150>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cba:	4b29      	ldr	r3, [pc, #164]	; (8008d60 <USBD_SetConfig+0x150>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7fe ffd6 	bl	8007c72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa06 	bl	80090d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ccc:	e042      	b.n	8008d54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008cce:	4b24      	ldr	r3, [pc, #144]	; (8008d60 <USBD_SetConfig+0x150>)
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d02a      	beq.n	8008d32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7fe ffc4 	bl	8007c72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cea:	4b1d      	ldr	r3, [pc, #116]	; (8008d60 <USBD_SetConfig+0x150>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cf4:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <USBD_SetConfig+0x150>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7fe ff9d 	bl	8007c3a <USBD_SetClassConfig>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00f      	beq.n	8008d2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f918 	bl	8008f42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7fe ffa9 	bl	8007c72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2202      	movs	r2, #2
 8008d24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d28:	e014      	b.n	8008d54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f9d4 	bl	80090d8 <USBD_CtlSendStatus>
      break;
 8008d30:	e010      	b.n	8008d54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f9d0 	bl	80090d8 <USBD_CtlSendStatus>
      break;
 8008d38:	e00c      	b.n	8008d54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f900 	bl	8008f42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d42:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <USBD_SetConfig+0x150>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7fe ff92 	bl	8007c72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	73fb      	strb	r3, [r7, #15]
      break;
 8008d52:	bf00      	nop
  }

  return ret;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	200004dc 	.word	0x200004dc

08008d64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	88db      	ldrh	r3, [r3, #6]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d004      	beq.n	8008d80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f8e2 	bl	8008f42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d7e:	e023      	b.n	8008dc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	dc02      	bgt.n	8008d92 <USBD_GetConfig+0x2e>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dc03      	bgt.n	8008d98 <USBD_GetConfig+0x34>
 8008d90:	e015      	b.n	8008dbe <USBD_GetConfig+0x5a>
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d00b      	beq.n	8008dae <USBD_GetConfig+0x4a>
 8008d96:	e012      	b.n	8008dbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3308      	adds	r3, #8
 8008da2:	2201      	movs	r2, #1
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f93c 	bl	8009024 <USBD_CtlSendData>
        break;
 8008dac:	e00c      	b.n	8008dc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3304      	adds	r3, #4
 8008db2:	2201      	movs	r2, #1
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f934 	bl	8009024 <USBD_CtlSendData>
        break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f8be 	bl	8008f42 <USBD_CtlError>
        break;
 8008dc6:	bf00      	nop
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d81e      	bhi.n	8008e26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	88db      	ldrh	r3, [r3, #6]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d004      	beq.n	8008dfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f8a5 	bl	8008f42 <USBD_CtlError>
        break;
 8008df8:	e01a      	b.n	8008e30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d005      	beq.n	8008e16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	f043 0202 	orr.w	r2, r3, #2
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	330c      	adds	r3, #12
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f900 	bl	8009024 <USBD_CtlSendData>
      break;
 8008e24:	e004      	b.n	8008e30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f88a 	bl	8008f42 <USBD_CtlError>
      break;
 8008e2e:	bf00      	nop
  }
}
 8008e30:	bf00      	nop
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	885b      	ldrh	r3, [r3, #2]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d107      	bne.n	8008e5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f940 	bl	80090d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e58:	e013      	b.n	8008e82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	885b      	ldrh	r3, [r3, #2]
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d10b      	bne.n	8008e7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	889b      	ldrh	r3, [r3, #4]
 8008e66:	0a1b      	lsrs	r3, r3, #8
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f930 	bl	80090d8 <USBD_CtlSendStatus>
}
 8008e78:	e003      	b.n	8008e82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f860 	bl	8008f42 <USBD_CtlError>
}
 8008e82:	bf00      	nop
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d80b      	bhi.n	8008eba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	885b      	ldrh	r3, [r3, #2]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d10c      	bne.n	8008ec4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f910 	bl	80090d8 <USBD_CtlSendStatus>
      }
      break;
 8008eb8:	e004      	b.n	8008ec4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f840 	bl	8008f42 <USBD_CtlError>
      break;
 8008ec2:	e000      	b.n	8008ec6 <USBD_ClrFeature+0x3c>
      break;
 8008ec4:	bf00      	nop
  }
}
 8008ec6:	bf00      	nop
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	781a      	ldrb	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	781a      	ldrb	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff fa41 	bl	8008380 <SWAPBYTE>
 8008efe:	4603      	mov	r3, r0
 8008f00:	461a      	mov	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7ff fa34 	bl	8008380 <SWAPBYTE>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3301      	adds	r3, #1
 8008f24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f7ff fa27 	bl	8008380 <SWAPBYTE>
 8008f32:	4603      	mov	r3, r0
 8008f34:	461a      	mov	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	80da      	strh	r2, [r3, #6]
}
 8008f3a:	bf00      	nop
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f4c:	2180      	movs	r1, #128	; 0x80
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fd16 	bl	8009980 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f54:	2100      	movs	r1, #0
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fd12 	bl	8009980 <USBD_LL_StallEP>
}
 8008f5c:	bf00      	nop
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d036      	beq.n	8008fe8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f7e:	6938      	ldr	r0, [r7, #16]
 8008f80:	f000 f836 	bl	8008ff0 <USBD_GetLen>
 8008f84:	4603      	mov	r3, r0
 8008f86:	3301      	adds	r3, #1
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	4413      	add	r3, r2
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	7812      	ldrb	r2, [r2, #0]
 8008f9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	4413      	add	r3, r2
 8008faa:	2203      	movs	r2, #3
 8008fac:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008fb4:	e013      	b.n	8008fde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	4413      	add	r3, r2
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	7812      	ldrb	r2, [r2, #0]
 8008fc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	613b      	str	r3, [r7, #16]
    idx++;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e7      	bne.n	8008fb6 <USBD_GetString+0x52>
 8008fe6:	e000      	b.n	8008fea <USBD_GetString+0x86>
    return;
 8008fe8:	bf00      	nop
  }
}
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009000:	e005      	b.n	800900e <USBD_GetLen+0x1e>
  {
    len++;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	3301      	adds	r3, #1
 8009006:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	3301      	adds	r3, #1
 800900c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1f5      	bne.n	8009002 <USBD_GetLen+0x12>
  }

  return len;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2202      	movs	r2, #2
 8009034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	2100      	movs	r1, #0
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f000 fd21 	bl	8009a92 <USBD_LL_Transmit>

  return USBD_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	2100      	movs	r1, #0
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 fd10 	bl	8009a92 <USBD_LL_Transmit>

  return USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2203      	movs	r2, #3
 800908c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	2100      	movs	r1, #0
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 fd14 	bl	8009ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	2100      	movs	r1, #0
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fd03 	bl	8009ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2204      	movs	r2, #4
 80090e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090e8:	2300      	movs	r3, #0
 80090ea:	2200      	movs	r2, #0
 80090ec:	2100      	movs	r1, #0
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fccf 	bl	8009a92 <USBD_LL_Transmit>

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2205      	movs	r2, #5
 800910a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800910e:	2300      	movs	r3, #0
 8009110:	2200      	movs	r2, #0
 8009112:	2100      	movs	r1, #0
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fcdd 	bl	8009ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009128:	2200      	movs	r2, #0
 800912a:	4912      	ldr	r1, [pc, #72]	; (8009174 <MX_USB_DEVICE_Init+0x50>)
 800912c:	4812      	ldr	r0, [pc, #72]	; (8009178 <MX_USB_DEVICE_Init+0x54>)
 800912e:	f7fe fd07 	bl	8007b40 <USBD_Init>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009138:	f7f7 fd28 	bl	8000b8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800913c:	490f      	ldr	r1, [pc, #60]	; (800917c <MX_USB_DEVICE_Init+0x58>)
 800913e:	480e      	ldr	r0, [pc, #56]	; (8009178 <MX_USB_DEVICE_Init+0x54>)
 8009140:	f7fe fd2e 	bl	8007ba0 <USBD_RegisterClass>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800914a:	f7f7 fd1f 	bl	8000b8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800914e:	490c      	ldr	r1, [pc, #48]	; (8009180 <MX_USB_DEVICE_Init+0x5c>)
 8009150:	4809      	ldr	r0, [pc, #36]	; (8009178 <MX_USB_DEVICE_Init+0x54>)
 8009152:	f7fe fc1f 	bl	8007994 <USBD_CDC_RegisterInterface>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800915c:	f7f7 fd16 	bl	8000b8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009160:	4805      	ldr	r0, [pc, #20]	; (8009178 <MX_USB_DEVICE_Init+0x54>)
 8009162:	f7fe fd53 	bl	8007c0c <USBD_Start>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800916c:	f7f7 fd0e 	bl	8000b8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009170:	bf00      	nop
 8009172:	bd80      	pop	{r7, pc}
 8009174:	200000ac 	.word	0x200000ac
 8009178:	200004e0 	.word	0x200004e0
 800917c:	20000018 	.word	0x20000018
 8009180:	20000098 	.word	0x20000098

08009184 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009188:	2200      	movs	r2, #0
 800918a:	4905      	ldr	r1, [pc, #20]	; (80091a0 <CDC_Init_FS+0x1c>)
 800918c:	4805      	ldr	r0, [pc, #20]	; (80091a4 <CDC_Init_FS+0x20>)
 800918e:	f7fe fc1b 	bl	80079c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009192:	4905      	ldr	r1, [pc, #20]	; (80091a8 <CDC_Init_FS+0x24>)
 8009194:	4803      	ldr	r0, [pc, #12]	; (80091a4 <CDC_Init_FS+0x20>)
 8009196:	f7fe fc39 	bl	8007a0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800919a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800919c:	4618      	mov	r0, r3
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20000fbc 	.word	0x20000fbc
 80091a4:	200004e0 	.word	0x200004e0
 80091a8:	200007bc 	.word	0x200007bc

080091ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	71fb      	strb	r3, [r7, #7]
 80091c8:	4613      	mov	r3, r2
 80091ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	//USB connection has been detected.
	cdcHandeler.cdcUsbConnectionFlag = true;
 80091cc:	4b2c      	ldr	r3, [pc, #176]	; (8009280 <CDC_Control_FS+0xc4>)
 80091ce:	2201      	movs	r2, #1
 80091d0:	821a      	strh	r2, [r3, #16]

	switch(cmd)
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	2b23      	cmp	r3, #35	; 0x23
 80091d6:	d84b      	bhi.n	8009270 <CDC_Control_FS+0xb4>
 80091d8:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <CDC_Control_FS+0x24>)
 80091da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091de:	bf00      	nop
 80091e0:	08009271 	.word	0x08009271
 80091e4:	08009271 	.word	0x08009271
 80091e8:	08009271 	.word	0x08009271
 80091ec:	08009271 	.word	0x08009271
 80091f0:	08009271 	.word	0x08009271
 80091f4:	08009271 	.word	0x08009271
 80091f8:	08009271 	.word	0x08009271
 80091fc:	08009271 	.word	0x08009271
 8009200:	08009271 	.word	0x08009271
 8009204:	08009271 	.word	0x08009271
 8009208:	08009271 	.word	0x08009271
 800920c:	08009271 	.word	0x08009271
 8009210:	08009271 	.word	0x08009271
 8009214:	08009271 	.word	0x08009271
 8009218:	08009271 	.word	0x08009271
 800921c:	08009271 	.word	0x08009271
 8009220:	08009271 	.word	0x08009271
 8009224:	08009271 	.word	0x08009271
 8009228:	08009271 	.word	0x08009271
 800922c:	08009271 	.word	0x08009271
 8009230:	08009271 	.word	0x08009271
 8009234:	08009271 	.word	0x08009271
 8009238:	08009271 	.word	0x08009271
 800923c:	08009271 	.word	0x08009271
 8009240:	08009271 	.word	0x08009271
 8009244:	08009271 	.word	0x08009271
 8009248:	08009271 	.word	0x08009271
 800924c:	08009271 	.word	0x08009271
 8009250:	08009271 	.word	0x08009271
 8009254:	08009271 	.word	0x08009271
 8009258:	08009271 	.word	0x08009271
 800925c:	08009271 	.word	0x08009271
 8009260:	08009271 	.word	0x08009271
 8009264:	08009271 	.word	0x08009271
 8009268:	08009271 	.word	0x08009271
 800926c:	08009271 	.word	0x08009271
	case CDC_SEND_BREAK:

	break;

	default:
	break;
 8009270:	bf00      	nop
	}

	return (USBD_OK);
 8009272:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	200017bc 	.word	0x200017bc

08009284 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	480b      	ldr	r0, [pc, #44]	; (80092c0 <CDC_Receive_FS+0x3c>)
 8009292:	f7fe fbbb 	bl	8007a0c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009296:	480a      	ldr	r0, [pc, #40]	; (80092c0 <CDC_Receive_FS+0x3c>)
 8009298:	f7fe fc1c 	bl	8007ad4 <USBD_CDC_ReceivePacket>
	//Set the received packet length
	cdcHandeler.cdcRxPacketSize = *Len;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	4b08      	ldr	r3, [pc, #32]	; (80092c4 <CDC_Receive_FS+0x40>)
 80092a4:	811a      	strh	r2, [r3, #8]

	cdcHandeler.cbCdcRxPacket((char*)cdcHandeler.pCdcRxBuffer, cdcHandeler.cdcRxPacketSize);
 80092a6:	4b07      	ldr	r3, [pc, #28]	; (80092c4 <CDC_Receive_FS+0x40>)
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	4a06      	ldr	r2, [pc, #24]	; (80092c4 <CDC_Receive_FS+0x40>)
 80092ac:	6812      	ldr	r2, [r2, #0]
 80092ae:	4905      	ldr	r1, [pc, #20]	; (80092c4 <CDC_Receive_FS+0x40>)
 80092b0:	8909      	ldrh	r1, [r1, #8]
 80092b2:	4610      	mov	r0, r2
 80092b4:	4798      	blx	r3

	return (USBD_OK);
 80092b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	200004e0 	.word	0x200004e0
 80092c4:	200017bc 	.word	0x200017bc

080092c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80092d8:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <CDC_Transmit_FS+0x48>)
 80092da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e00b      	b.n	8009306 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092ee:	887b      	ldrh	r3, [r7, #2]
 80092f0:	461a      	mov	r2, r3
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	4806      	ldr	r0, [pc, #24]	; (8009310 <CDC_Transmit_FS+0x48>)
 80092f6:	f7fe fb67 	bl	80079c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092fa:	4805      	ldr	r0, [pc, #20]	; (8009310 <CDC_Transmit_FS+0x48>)
 80092fc:	f7fe fba4 	bl	8007a48 <USBD_CDC_TransmitPacket>
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009304:	7bfb      	ldrb	r3, [r7, #15]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	200004e0 	.word	0x200004e0

08009314 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800932a:	4618      	mov	r0, r3
 800932c:	371c      	adds	r7, #28
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
	...

08009338 <CDC_Handler_Init_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Handler_Init_FS	(void* cdcRxCallback)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
	memset(&cdcHandeler, 0, sizeof(hCdcBuffer_t));
 8009340:	2214      	movs	r2, #20
 8009342:	2100      	movs	r1, #0
 8009344:	4807      	ldr	r0, [pc, #28]	; (8009364 <CDC_Handler_Init_FS+0x2c>)
 8009346:	f000 fdbf 	bl	8009ec8 <memset>

	cdcHandeler.cbCdcRxPacket = cdcRxCallback;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a05      	ldr	r2, [pc, #20]	; (8009364 <CDC_Handler_Init_FS+0x2c>)
 800934e:	60d3      	str	r3, [r2, #12]

	cdcHandeler.pCdcRxBuffer = UserRxBufferFS;
 8009350:	4b04      	ldr	r3, [pc, #16]	; (8009364 <CDC_Handler_Init_FS+0x2c>)
 8009352:	4a05      	ldr	r2, [pc, #20]	; (8009368 <CDC_Handler_Init_FS+0x30>)
 8009354:	601a      	str	r2, [r3, #0]

	cdcHandeler.pCdcTxBuffer = UserTxBufferFS;
 8009356:	4b03      	ldr	r3, [pc, #12]	; (8009364 <CDC_Handler_Init_FS+0x2c>)
 8009358:	4a04      	ldr	r2, [pc, #16]	; (800936c <CDC_Handler_Init_FS+0x34>)
 800935a:	605a      	str	r2, [r3, #4]
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	200017bc 	.word	0x200017bc
 8009368:	200007bc 	.word	0x200007bc
 800936c:	20000fbc 	.word	0x20000fbc

08009370 <CDC_UsbConnectionCheck>:

	return packetSize;
}

bool CDC_UsbConnectionCheck(void)
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
	return cdcHandeler.cdcUsbConnectionFlag;
 8009374:	4b05      	ldr	r3, [pc, #20]	; (800938c <CDC_UsbConnectionCheck+0x1c>)
 8009376:	8a1b      	ldrh	r3, [r3, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	bf14      	ite	ne
 800937c:	2301      	movne	r3, #1
 800937e:	2300      	moveq	r3, #0
 8009380:	b2db      	uxtb	r3, r3
}
 8009382:	4618      	mov	r0, r3
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	200017bc 	.word	0x200017bc

08009390 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	6039      	str	r1, [r7, #0]
 800939a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	2212      	movs	r2, #18
 80093a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80093a2:	4b03      	ldr	r3, [pc, #12]	; (80093b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	200000c8 	.word	0x200000c8

080093b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	6039      	str	r1, [r7, #0]
 80093be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2204      	movs	r2, #4
 80093c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093c6:	4b03      	ldr	r3, [pc, #12]	; (80093d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	200000dc 	.word	0x200000dc

080093d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d105      	bne.n	80093f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	4907      	ldr	r1, [pc, #28]	; (800940c <USBD_FS_ProductStrDescriptor+0x34>)
 80093ee:	4808      	ldr	r0, [pc, #32]	; (8009410 <USBD_FS_ProductStrDescriptor+0x38>)
 80093f0:	f7ff fdb8 	bl	8008f64 <USBD_GetString>
 80093f4:	e004      	b.n	8009400 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	4904      	ldr	r1, [pc, #16]	; (800940c <USBD_FS_ProductStrDescriptor+0x34>)
 80093fa:	4805      	ldr	r0, [pc, #20]	; (8009410 <USBD_FS_ProductStrDescriptor+0x38>)
 80093fc:	f7ff fdb2 	bl	8008f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009400:	4b02      	ldr	r3, [pc, #8]	; (800940c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	200017d0 	.word	0x200017d0
 8009410:	0800a7c4 	.word	0x0800a7c4

08009414 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	6039      	str	r1, [r7, #0]
 800941e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	4904      	ldr	r1, [pc, #16]	; (8009434 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009424:	4804      	ldr	r0, [pc, #16]	; (8009438 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009426:	f7ff fd9d 	bl	8008f64 <USBD_GetString>
  return USBD_StrDesc;
 800942a:	4b02      	ldr	r3, [pc, #8]	; (8009434 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	200017d0 	.word	0x200017d0
 8009438:	0800a7d0 	.word	0x0800a7d0

0800943c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	221a      	movs	r2, #26
 800944c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800944e:	f000 f843 	bl	80094d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009452:	4b02      	ldr	r3, [pc, #8]	; (800945c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	200000e0 	.word	0x200000e0

08009460 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800946c:	79fb      	ldrb	r3, [r7, #7]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d105      	bne.n	800947e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	4907      	ldr	r1, [pc, #28]	; (8009494 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009476:	4808      	ldr	r0, [pc, #32]	; (8009498 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009478:	f7ff fd74 	bl	8008f64 <USBD_GetString>
 800947c:	e004      	b.n	8009488 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	4904      	ldr	r1, [pc, #16]	; (8009494 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009482:	4805      	ldr	r0, [pc, #20]	; (8009498 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009484:	f7ff fd6e 	bl	8008f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009488:	4b02      	ldr	r3, [pc, #8]	; (8009494 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	200017d0 	.word	0x200017d0
 8009498:	0800a7e4 	.word	0x0800a7e4

0800949c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	6039      	str	r1, [r7, #0]
 80094a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d105      	bne.n	80094ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	4907      	ldr	r1, [pc, #28]	; (80094d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094b2:	4808      	ldr	r0, [pc, #32]	; (80094d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094b4:	f7ff fd56 	bl	8008f64 <USBD_GetString>
 80094b8:	e004      	b.n	80094c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	4904      	ldr	r1, [pc, #16]	; (80094d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094be:	4805      	ldr	r0, [pc, #20]	; (80094d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094c0:	f7ff fd50 	bl	8008f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094c4:	4b02      	ldr	r3, [pc, #8]	; (80094d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	200017d0 	.word	0x200017d0
 80094d4:	0800a7f0 	.word	0x0800a7f0

080094d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094de:	4b0f      	ldr	r3, [pc, #60]	; (800951c <Get_SerialNum+0x44>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094e4:	4b0e      	ldr	r3, [pc, #56]	; (8009520 <Get_SerialNum+0x48>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094ea:	4b0e      	ldr	r3, [pc, #56]	; (8009524 <Get_SerialNum+0x4c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4413      	add	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d009      	beq.n	8009512 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094fe:	2208      	movs	r2, #8
 8009500:	4909      	ldr	r1, [pc, #36]	; (8009528 <Get_SerialNum+0x50>)
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 f814 	bl	8009530 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009508:	2204      	movs	r2, #4
 800950a:	4908      	ldr	r1, [pc, #32]	; (800952c <Get_SerialNum+0x54>)
 800950c:	68b8      	ldr	r0, [r7, #8]
 800950e:	f000 f80f 	bl	8009530 <IntToUnicode>
  }
}
 8009512:	bf00      	nop
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	1fff7a10 	.word	0x1fff7a10
 8009520:	1fff7a14 	.word	0x1fff7a14
 8009524:	1fff7a18 	.word	0x1fff7a18
 8009528:	200000e2 	.word	0x200000e2
 800952c:	200000f2 	.word	0x200000f2

08009530 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	4613      	mov	r3, r2
 800953c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009542:	2300      	movs	r3, #0
 8009544:	75fb      	strb	r3, [r7, #23]
 8009546:	e027      	b.n	8009598 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	0f1b      	lsrs	r3, r3, #28
 800954c:	2b09      	cmp	r3, #9
 800954e:	d80b      	bhi.n	8009568 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	0f1b      	lsrs	r3, r3, #28
 8009554:	b2da      	uxtb	r2, r3
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	4619      	mov	r1, r3
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	440b      	add	r3, r1
 8009560:	3230      	adds	r2, #48	; 0x30
 8009562:	b2d2      	uxtb	r2, r2
 8009564:	701a      	strb	r2, [r3, #0]
 8009566:	e00a      	b.n	800957e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	0f1b      	lsrs	r3, r3, #28
 800956c:	b2da      	uxtb	r2, r3
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	005b      	lsls	r3, r3, #1
 8009572:	4619      	mov	r1, r3
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	440b      	add	r3, r1
 8009578:	3237      	adds	r2, #55	; 0x37
 800957a:	b2d2      	uxtb	r2, r2
 800957c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	011b      	lsls	r3, r3, #4
 8009582:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	3301      	adds	r3, #1
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	4413      	add	r3, r2
 800958e:	2200      	movs	r2, #0
 8009590:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	3301      	adds	r3, #1
 8009596:	75fb      	strb	r3, [r7, #23]
 8009598:	7dfa      	ldrb	r2, [r7, #23]
 800959a:	79fb      	ldrb	r3, [r7, #7]
 800959c:	429a      	cmp	r2, r3
 800959e:	d3d3      	bcc.n	8009548 <IntToUnicode+0x18>
  }
}
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
 80095a4:	371c      	adds	r7, #28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
	...

080095b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08a      	sub	sp, #40	; 0x28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095b8:	f107 0314 	add.w	r3, r7, #20
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	605a      	str	r2, [r3, #4]
 80095c2:	609a      	str	r2, [r3, #8]
 80095c4:	60da      	str	r2, [r3, #12]
 80095c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095d0:	d13a      	bne.n	8009648 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095d2:	2300      	movs	r3, #0
 80095d4:	613b      	str	r3, [r7, #16]
 80095d6:	4b1e      	ldr	r3, [pc, #120]	; (8009650 <HAL_PCD_MspInit+0xa0>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	4a1d      	ldr	r2, [pc, #116]	; (8009650 <HAL_PCD_MspInit+0xa0>)
 80095dc:	f043 0301 	orr.w	r3, r3, #1
 80095e0:	6313      	str	r3, [r2, #48]	; 0x30
 80095e2:	4b1b      	ldr	r3, [pc, #108]	; (8009650 <HAL_PCD_MspInit+0xa0>)
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	613b      	str	r3, [r7, #16]
 80095ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80095ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80095f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095f4:	2302      	movs	r3, #2
 80095f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095fc:	2303      	movs	r3, #3
 80095fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009600:	230a      	movs	r3, #10
 8009602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009604:	f107 0314 	add.w	r3, r7, #20
 8009608:	4619      	mov	r1, r3
 800960a:	4812      	ldr	r0, [pc, #72]	; (8009654 <HAL_PCD_MspInit+0xa4>)
 800960c:	f7f8 fa6c 	bl	8001ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009610:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <HAL_PCD_MspInit+0xa0>)
 8009612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009614:	4a0e      	ldr	r2, [pc, #56]	; (8009650 <HAL_PCD_MspInit+0xa0>)
 8009616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961a:	6353      	str	r3, [r2, #52]	; 0x34
 800961c:	2300      	movs	r3, #0
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <HAL_PCD_MspInit+0xa0>)
 8009622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009624:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <HAL_PCD_MspInit+0xa0>)
 8009626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800962a:	6453      	str	r3, [r2, #68]	; 0x44
 800962c:	4b08      	ldr	r3, [pc, #32]	; (8009650 <HAL_PCD_MspInit+0xa0>)
 800962e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009638:	2200      	movs	r2, #0
 800963a:	2100      	movs	r1, #0
 800963c:	2043      	movs	r0, #67	; 0x43
 800963e:	f7f7 fe1a 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009642:	2043      	movs	r0, #67	; 0x43
 8009644:	f7f7 fe33 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009648:	bf00      	nop
 800964a:	3728      	adds	r7, #40	; 0x28
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	40023800 	.word	0x40023800
 8009654:	40020000 	.word	0x40020000

08009658 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f7fe fb19 	bl	8007ca6 <USBD_LL_SetupStage>
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	4613      	mov	r3, r2
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	78fb      	ldrb	r3, [r7, #3]
 80096a4:	4619      	mov	r1, r3
 80096a6:	f7fe fb53 	bl	8007d50 <USBD_LL_DataOutStage>
}
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80096c4:	78fa      	ldrb	r2, [r7, #3]
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	4613      	mov	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	4413      	add	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	440b      	add	r3, r1
 80096d2:	334c      	adds	r3, #76	; 0x4c
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	78fb      	ldrb	r3, [r7, #3]
 80096d8:	4619      	mov	r1, r3
 80096da:	f7fe fbec 	bl	8007eb6 <USBD_LL_DataInStage>
}
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe fd20 	bl	800813a <USBD_LL_SOF>
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800970a:	2301      	movs	r3, #1
 800970c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	2b02      	cmp	r3, #2
 8009714:	d001      	beq.n	800971a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009716:	f7f7 fa39 	bl	8000b8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009720:	7bfa      	ldrb	r2, [r7, #15]
 8009722:	4611      	mov	r1, r2
 8009724:	4618      	mov	r0, r3
 8009726:	f7fe fcca 	bl	80080be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009730:	4618      	mov	r0, r3
 8009732:	f7fe fc72 	bl	800801a <USBD_LL_Reset>
}
 8009736:	bf00      	nop
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe fcc5 	bl	80080de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	6812      	ldr	r2, [r2, #0]
 8009762:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009766:	f043 0301 	orr.w	r3, r3, #1
 800976a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <HAL_PCD_SuspendCallback+0x48>)
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	4a03      	ldr	r2, [pc, #12]	; (8009788 <HAL_PCD_SuspendCallback+0x48>)
 800977a:	f043 0306 	orr.w	r3, r3, #6
 800977e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	e000ed00 	.word	0xe000ed00

0800978c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800979a:	4618      	mov	r0, r3
 800979c:	f7fe fcb5 	bl	800810a <USBD_LL_Resume>
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097ba:	78fa      	ldrb	r2, [r7, #3]
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fe fd0d 	bl	80081de <USBD_LL_IsoOUTIncomplete>
}
 80097c4:	bf00      	nop
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097de:	78fa      	ldrb	r2, [r7, #3]
 80097e0:	4611      	mov	r1, r2
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe fcc9 	bl	800817a <USBD_LL_IsoINIncomplete>
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fd1f 	bl	8008242 <USBD_LL_DevConnected>
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fd1c 	bl	8008258 <USBD_LL_DevDisconnected>
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d13c      	bne.n	80098b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009838:	4a20      	ldr	r2, [pc, #128]	; (80098bc <USBD_LL_Init+0x94>)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a1e      	ldr	r2, [pc, #120]	; (80098bc <USBD_LL_Init+0x94>)
 8009844:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009848:	4b1c      	ldr	r3, [pc, #112]	; (80098bc <USBD_LL_Init+0x94>)
 800984a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800984e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009850:	4b1a      	ldr	r3, [pc, #104]	; (80098bc <USBD_LL_Init+0x94>)
 8009852:	2204      	movs	r2, #4
 8009854:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009856:	4b19      	ldr	r3, [pc, #100]	; (80098bc <USBD_LL_Init+0x94>)
 8009858:	2202      	movs	r2, #2
 800985a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800985c:	4b17      	ldr	r3, [pc, #92]	; (80098bc <USBD_LL_Init+0x94>)
 800985e:	2200      	movs	r2, #0
 8009860:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009862:	4b16      	ldr	r3, [pc, #88]	; (80098bc <USBD_LL_Init+0x94>)
 8009864:	2202      	movs	r2, #2
 8009866:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009868:	4b14      	ldr	r3, [pc, #80]	; (80098bc <USBD_LL_Init+0x94>)
 800986a:	2200      	movs	r2, #0
 800986c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <USBD_LL_Init+0x94>)
 8009870:	2200      	movs	r2, #0
 8009872:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009874:	4b11      	ldr	r3, [pc, #68]	; (80098bc <USBD_LL_Init+0x94>)
 8009876:	2200      	movs	r2, #0
 8009878:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800987a:	4b10      	ldr	r3, [pc, #64]	; (80098bc <USBD_LL_Init+0x94>)
 800987c:	2200      	movs	r2, #0
 800987e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009880:	4b0e      	ldr	r3, [pc, #56]	; (80098bc <USBD_LL_Init+0x94>)
 8009882:	2200      	movs	r2, #0
 8009884:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009886:	480d      	ldr	r0, [pc, #52]	; (80098bc <USBD_LL_Init+0x94>)
 8009888:	f7f8 fae5 	bl	8001e56 <HAL_PCD_Init>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009892:	f7f7 f97b 	bl	8000b8c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009896:	2180      	movs	r1, #128	; 0x80
 8009898:	4808      	ldr	r0, [pc, #32]	; (80098bc <USBD_LL_Init+0x94>)
 800989a:	f7f9 fd3c 	bl	8003316 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800989e:	2240      	movs	r2, #64	; 0x40
 80098a0:	2100      	movs	r1, #0
 80098a2:	4806      	ldr	r0, [pc, #24]	; (80098bc <USBD_LL_Init+0x94>)
 80098a4:	f7f9 fcf0 	bl	8003288 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80098a8:	2280      	movs	r2, #128	; 0x80
 80098aa:	2101      	movs	r1, #1
 80098ac:	4803      	ldr	r0, [pc, #12]	; (80098bc <USBD_LL_Init+0x94>)
 80098ae:	f7f9 fceb 	bl	8003288 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	200019d0 	.word	0x200019d0

080098c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7f8 fbda 	bl	8002090 <HAL_PCD_Start>
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 f942 	bl	8009b6c <USBD_Get_USB_Status>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	4608      	mov	r0, r1
 8009900:	4611      	mov	r1, r2
 8009902:	461a      	mov	r2, r3
 8009904:	4603      	mov	r3, r0
 8009906:	70fb      	strb	r3, [r7, #3]
 8009908:	460b      	mov	r3, r1
 800990a:	70bb      	strb	r3, [r7, #2]
 800990c:	4613      	mov	r3, r2
 800990e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800991e:	78bb      	ldrb	r3, [r7, #2]
 8009920:	883a      	ldrh	r2, [r7, #0]
 8009922:	78f9      	ldrb	r1, [r7, #3]
 8009924:	f7f9 f8ab 	bl	8002a7e <HAL_PCD_EP_Open>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	4618      	mov	r0, r3
 8009930:	f000 f91c 	bl	8009b6c <USBD_Get_USB_Status>
 8009934:	4603      	mov	r3, r0
 8009936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009938:	7bbb      	ldrb	r3, [r7, #14]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	460b      	mov	r3, r1
 800994c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800995c:	78fa      	ldrb	r2, [r7, #3]
 800995e:	4611      	mov	r1, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f7f9 f8f4 	bl	8002b4e <HAL_PCD_EP_Close>
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f8fd 	bl	8009b6c <USBD_Get_USB_Status>
 8009972:	4603      	mov	r3, r0
 8009974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009976:	7bbb      	ldrb	r3, [r7, #14]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800999a:	78fa      	ldrb	r2, [r7, #3]
 800999c:	4611      	mov	r1, r2
 800999e:	4618      	mov	r0, r3
 80099a0:	f7f9 f9cc 	bl	8002d3c <HAL_PCD_EP_SetStall>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 f8de 	bl	8009b6c <USBD_Get_USB_Status>
 80099b0:	4603      	mov	r3, r0
 80099b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	460b      	mov	r3, r1
 80099c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099d8:	78fa      	ldrb	r2, [r7, #3]
 80099da:	4611      	mov	r1, r2
 80099dc:	4618      	mov	r0, r3
 80099de:	f7f9 fa11 	bl	8002e04 <HAL_PCD_EP_ClrStall>
 80099e2:	4603      	mov	r3, r0
 80099e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 f8bf 	bl	8009b6c <USBD_Get_USB_Status>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	da0b      	bge.n	8009a30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a18:	78fb      	ldrb	r3, [r7, #3]
 8009a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a1e:	68f9      	ldr	r1, [r7, #12]
 8009a20:	4613      	mov	r3, r2
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	333e      	adds	r3, #62	; 0x3e
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	e00b      	b.n	8009a48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a36:	68f9      	ldr	r1, [r7, #12]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	440b      	add	r3, r1
 8009a42:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009a46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3714      	adds	r7, #20
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a6e:	78fa      	ldrb	r2, [r7, #3]
 8009a70:	4611      	mov	r1, r2
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7f8 ffde 	bl	8002a34 <HAL_PCD_SetAddress>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 f874 	bl	8009b6c <USBD_Get_USB_Status>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b086      	sub	sp, #24
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ab0:	7af9      	ldrb	r1, [r7, #11]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	f7f9 f8f7 	bl	8002ca8 <HAL_PCD_EP_Transmit>
 8009aba:	4603      	mov	r3, r0
 8009abc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009abe:	7dfb      	ldrb	r3, [r7, #23]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 f853 	bl	8009b6c <USBD_Get_USB_Status>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009aca:	7dbb      	ldrb	r3, [r7, #22]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3718      	adds	r7, #24
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	607a      	str	r2, [r7, #4]
 8009ade:	603b      	str	r3, [r7, #0]
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009af2:	7af9      	ldrb	r1, [r7, #11]
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	f7f9 f873 	bl	8002be2 <HAL_PCD_EP_Receive>
 8009afc:	4603      	mov	r3, r0
 8009afe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 f832 	bl	8009b6c <USBD_Get_USB_Status>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b28:	78fa      	ldrb	r2, [r7, #3]
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7f9 f8a3 	bl	8002c78 <HAL_PCD_EP_GetRxCount>
 8009b32:	4603      	mov	r3, r0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b44:	4b03      	ldr	r3, [pc, #12]	; (8009b54 <USBD_static_malloc+0x18>)
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	20001edc 	.word	0x20001edc

08009b58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]

}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b7a:	79fb      	ldrb	r3, [r7, #7]
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	d817      	bhi.n	8009bb0 <USBD_Get_USB_Status+0x44>
 8009b80:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <USBD_Get_USB_Status+0x1c>)
 8009b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b86:	bf00      	nop
 8009b88:	08009b99 	.word	0x08009b99
 8009b8c:	08009b9f 	.word	0x08009b9f
 8009b90:	08009ba5 	.word	0x08009ba5
 8009b94:	08009bab 	.word	0x08009bab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b9c:	e00b      	b.n	8009bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba2:	e008      	b.n	8009bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba8:	e005      	b.n	8009bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009baa:	2303      	movs	r3, #3
 8009bac:	73fb      	strb	r3, [r7, #15]
    break;
 8009bae:	e002      	b.n	8009bb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb4:	bf00      	nop
  }
  return usb_status;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <rybg211_bleModuleInit>:

/* PRIVATE FUNCTIONS DECLARATION ---------------------------------------------*/

/* FUNCTION PROTOTYPES -------------------------------------------------------*/
void rybg211_bleModuleInit(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
	memset(&hBleModule, 0, sizeof(hBleModule_t));
 8009bc8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009bcc:	2100      	movs	r1, #0
 8009bce:	4805      	ldr	r0, [pc, #20]	; (8009be4 <rybg211_bleModuleInit+0x20>)
 8009bd0:	f000 f97a 	bl	8009ec8 <memset>

	HAL_GPIO_WritePin(BLE_MODULE_RESET_GPIO_PORT, BLE_MODULE_RESET_PIN, ENABLE);
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009bda:	4803      	ldr	r0, [pc, #12]	; (8009be8 <rybg211_bleModuleInit+0x24>)
 8009bdc:	f7f8 f908 	bl	8001df0 <HAL_GPIO_WritePin>
}
 8009be0:	bf00      	nop
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	200020fc 	.word	0x200020fc
 8009be8:	40020400 	.word	0x40020400

08009bec <rybg211_setOutputPower>:
 * @param 	moduleBuffer	:	This is the buffer that will carry the prepared AT command.
 *
 * @param 	powerLevel		:	output power level value range 20 to -20.
 */
void rybg211_setOutputPower(char* moduleBuffer, int8_t powerLevel)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af02      	add	r7, sp, #8
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]

	sprintf((char*)moduleBuffer, "%s%d%s",BLE_POWER_SET,
 8009bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bfc:	4a0b      	ldr	r2, [pc, #44]	; (8009c2c <rybg211_setOutputPower+0x40>)
 8009bfe:	9200      	str	r2, [sp, #0]
 8009c00:	4a0b      	ldr	r2, [pc, #44]	; (8009c30 <rybg211_setOutputPower+0x44>)
 8009c02:	490c      	ldr	r1, [pc, #48]	; (8009c34 <rybg211_setOutputPower+0x48>)
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f967 	bl	8009ed8 <siprintf>
										powerLevel,
										BLE_CMD_TERM);


	hBleModule.txPacketSize = strlen((char*)moduleBuffer);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7f6 fae8 	bl	80001e0 <strlen>
 8009c10:	4603      	mov	r3, r0
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <rybg211_setOutputPower+0x4c>)
 8009c16:	805a      	strh	r2, [r3, #2]

	hBleModule.controlFlags.flag.packetToTransmit = ENABLE;
 8009c18:	4a07      	ldr	r2, [pc, #28]	; (8009c38 <rybg211_setOutputPower+0x4c>)
 8009c1a:	7813      	ldrb	r3, [r2, #0]
 8009c1c:	f043 0302 	orr.w	r3, r3, #2
 8009c20:	7013      	strb	r3, [r2, #0]
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	0800a818 	.word	0x0800a818
 8009c30:	0800a820 	.word	0x0800a820
 8009c34:	0800a82c 	.word	0x0800a82c
 8009c38:	200020fc 	.word	0x200020fc

08009c3c <rybg211_rxPacketParser>:
 * @param 	packetSize		:	Received packet size.
 *
 * @return	returns 1 if there is a received message should be carried to the bridge handler.
 */
uint8_t rybg211_rxPacketParser(char* moduleBuffer, uint8_t packetSize)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
	uint8_t packetToRead = false;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]

	if(0 == memcmp(moduleBuffer, BLE_DATA_RX, BLE_PARSER_CHAR_COUNT))
 8009c4c:	2204      	movs	r2, #4
 8009c4e:	4919      	ldr	r1, [pc, #100]	; (8009cb4 <rybg211_rxPacketParser+0x78>)
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f91b 	bl	8009e8c <memcmp>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d102      	bne.n	8009c62 <rybg211_rxPacketParser+0x26>
	{
		//Activation to read the data part of the received packet.
		packetToRead = true;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	73fb      	strb	r3, [r7, #15]
 8009c60:	e023      	b.n	8009caa <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_CONNECTION,BLE_PARSER_CHAR_COUNT))
 8009c62:	2204      	movs	r2, #4
 8009c64:	4914      	ldr	r1, [pc, #80]	; (8009cb8 <rybg211_rxPacketParser+0x7c>)
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f910 	bl	8009e8c <memcmp>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10a      	bne.n	8009c88 <rybg211_rxPacketParser+0x4c>
	{
		hBleModule.ConnectedDevice = moduleBuffer[6];
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	799a      	ldrb	r2, [r3, #6]
 8009c76:	4b11      	ldr	r3, [pc, #68]	; (8009cbc <rybg211_rxPacketParser+0x80>)
 8009c78:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 8009c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c7e:	2100      	movs	r1, #0
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f921 	bl	8009ec8 <memset>
 8009c86:	e010      	b.n	8009caa <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_DISCONNECTION, BLE_PARSER_CHAR_COUNT))
 8009c88:	2204      	movs	r2, #4
 8009c8a:	490d      	ldr	r1, [pc, #52]	; (8009cc0 <rybg211_rxPacketParser+0x84>)
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f8fd 	bl	8009e8c <memcmp>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d108      	bne.n	8009caa <rybg211_rxPacketParser+0x6e>
	{
		hBleModule.ConnectedDevice = 0;
 8009c98:	4b08      	ldr	r3, [pc, #32]	; (8009cbc <rybg211_rxPacketParser+0x80>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 8009c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f90f 	bl	8009ec8 <memset>
	}

	return packetToRead;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	0800a834 	.word	0x0800a834
 8009cb8:	0800a83c 	.word	0x0800a83c
 8009cbc:	200020fc 	.word	0x200020fc
 8009cc0:	0800a844 	.word	0x0800a844

08009cc4 <asciiToValue>:
 * 						  stored in targetValue. the value stored in String won't be changed.
 *
 * @return	This function will return the number of found digits in the passed String.
 */
uint8_t asciiToValue(uint32_t* targetValue, uint8_t* String)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
	uint8_t 	digitCount  = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	75fb      	strb	r3, [r7, #23]
	uint32_t 	tempValue 	= 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	613b      	str	r3, [r7, #16]
	uint16_t 	tens 		= 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	81fb      	strh	r3, [r7, #14]
	//Count the number of digits in the string
	while(isdigit(String[digitCount]))
 8009cda:	e002      	b.n	8009ce2 <asciiToValue+0x1e>
	{
		++digitCount;
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	75fb      	strb	r3, [r7, #23]
	while(isdigit(String[digitCount]))
 8009ce2:	7dfb      	ldrb	r3, [r7, #23]
 8009ce4:	683a      	ldr	r2, [r7, #0]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	3301      	adds	r3, #1
 8009cec:	4a26      	ldr	r2, [pc, #152]	; (8009d88 <asciiToValue+0xc4>)
 8009cee:	4413      	add	r3, r2
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1f0      	bne.n	8009cdc <asciiToValue+0x18>
	}
	//This check is done to prevent this function from execution if non alphanumeric string is passed to this function.
	if(0 != digitCount)
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d03c      	beq.n	8009d7a <asciiToValue+0xb6>
	{
		//Operation fix
		digitCount -= 1;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	3b01      	subs	r3, #1
 8009d04:	75fb      	strb	r3, [r7, #23]
		//determines the multiplications of tens
		tens = digitCount == ONE_DIGIT   ? 1   : tens;
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <asciiToValue+0x4c>
 8009d0c:	89fb      	ldrh	r3, [r7, #14]
 8009d0e:	e000      	b.n	8009d12 <asciiToValue+0x4e>
 8009d10:	2301      	movs	r3, #1
 8009d12:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == TWO_DIGIT   ? 10  : tens;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d001      	beq.n	8009d1e <asciiToValue+0x5a>
 8009d1a:	89fb      	ldrh	r3, [r7, #14]
 8009d1c:	e000      	b.n	8009d20 <asciiToValue+0x5c>
 8009d1e:	230a      	movs	r3, #10
 8009d20:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == THREE_DIGIT ? 100 : tens;
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d001      	beq.n	8009d2c <asciiToValue+0x68>
 8009d28:	89fb      	ldrh	r3, [r7, #14]
 8009d2a:	e000      	b.n	8009d2e <asciiToValue+0x6a>
 8009d2c:	2364      	movs	r3, #100	; 0x64
 8009d2e:	81fb      	strh	r3, [r7, #14]
		//Start calculating the integer value out of the passed digits
		for(int8_t i = 0; i <= digitCount; ++i)
 8009d30:	2300      	movs	r3, #0
 8009d32:	737b      	strb	r3, [r7, #13]
 8009d34:	e016      	b.n	8009d64 <asciiToValue+0xa0>
		{
			tempValue = tempValue + ((String[i] - ASCII_STARTING_VALUE) * tens);
 8009d36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	3b30      	subs	r3, #48	; 0x30
 8009d42:	89fa      	ldrh	r2, [r7, #14]
 8009d44:	fb02 f303 	mul.w	r3, r2, r3
 8009d48:	461a      	mov	r2, r3
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	613b      	str	r3, [r7, #16]
			tens = tens / 10;
 8009d50:	89fb      	ldrh	r3, [r7, #14]
 8009d52:	4a0e      	ldr	r2, [pc, #56]	; (8009d8c <asciiToValue+0xc8>)
 8009d54:	fba2 2303 	umull	r2, r3, r2, r3
 8009d58:	08db      	lsrs	r3, r3, #3
 8009d5a:	81fb      	strh	r3, [r7, #14]
		for(int8_t i = 0; i <= digitCount; ++i)
 8009d5c:	7b7b      	ldrb	r3, [r7, #13]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	737b      	strb	r3, [r7, #13]
 8009d64:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	dde3      	ble.n	8009d36 <asciiToValue+0x72>
		}
		//Pass the obtained integer value to targetValue that will be returned
		*targetValue = tempValue;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	601a      	str	r2, [r3, #0]
		//digitCount will carry the number of found digits in the String
		++digitCount;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	3301      	adds	r3, #1
 8009d78:	75fb      	strb	r3, [r7, #23]
	}
	return digitCount;
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	371c      	adds	r7, #28
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	0800a888 	.word	0x0800a888
 8009d8c:	cccccccd 	.word	0xcccccccd

08009d90 <rybg211_rxDataRead>:
 * @param moduleBuffer
 * @param targertBuffer
 * @return
 */
uint32_t rybg211_rxDataRead(char* moduleBuffer, char* targertBuffer)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
	//+1 is used to ignore the ',' from the received packet and jump directly to the data field.
	uint8_t dataPositionOffset = BLE_RX_SIZE_BYTE_POSITION + 1;
 8009d9a:	2308      	movs	r3, #8
 8009d9c:	73fb      	strb	r3, [r7, #15]

	uint32_t length = 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	60bb      	str	r3, [r7, #8]
	//Convert the size from ASCII to integer format and obtain the number of digits to adjust the correct data positio.
	dataPositionOffset += asciiToValue(&length, (uint8_t*)moduleBuffer + BLE_RX_SIZE_BYTE_POSITION);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	1dda      	adds	r2, r3, #7
 8009da6:	f107 0308 	add.w	r3, r7, #8
 8009daa:	4611      	mov	r1, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7ff ff89 	bl	8009cc4 <asciiToValue>
 8009db2:	4603      	mov	r3, r0
 8009db4:	461a      	mov	r2, r3
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	4413      	add	r3, r2
 8009dba:	73fb      	strb	r3, [r7, #15]

	memcpy(targertBuffer, moduleBuffer + dataPositionOffset, length);
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	6838      	ldr	r0, [r7, #0]
 8009dc8:	f000 f870 	bl	8009eac <memcpy>

	return length;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <rybg211_txDataSend>:

void  rybg211_txDataSend			(char* sourceBuffer, uint16_t packetSize)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af06      	add	r7, sp, #24
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	807b      	strh	r3, [r7, #2]

	sprintf((char*)hBleModule.txBuffer, "%s%c%s%d%s%s%s",BLE_DATA_SEND,
													hBleModule.ConnectedDevice,
 8009de4:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <rybg211_txDataSend+0x48>)
 8009de6:	7d1b      	ldrb	r3, [r3, #20]
	sprintf((char*)hBleModule.txBuffer, "%s%c%s%d%s%s%s",BLE_DATA_SEND,
 8009de8:	4619      	mov	r1, r3
 8009dea:	887b      	ldrh	r3, [r7, #2]
 8009dec:	4a0d      	ldr	r2, [pc, #52]	; (8009e24 <rybg211_txDataSend+0x4c>)
 8009dee:	9204      	str	r2, [sp, #16]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	9203      	str	r2, [sp, #12]
 8009df4:	4a0c      	ldr	r2, [pc, #48]	; (8009e28 <rybg211_txDataSend+0x50>)
 8009df6:	9202      	str	r2, [sp, #8]
 8009df8:	9301      	str	r3, [sp, #4]
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <rybg211_txDataSend+0x50>)
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <rybg211_txDataSend+0x54>)
 8009e02:	490b      	ldr	r1, [pc, #44]	; (8009e30 <rybg211_txDataSend+0x58>)
 8009e04:	480b      	ldr	r0, [pc, #44]	; (8009e34 <rybg211_txDataSend+0x5c>)
 8009e06:	f000 f867 	bl	8009ed8 <siprintf>
													packetSize,
													BLE_NEW_FIELD,
													sourceBuffer,
													BLE_CMD_TERM);

	hBleModule.txPacketSize = strlen(hBleModule.txBuffer);
 8009e0a:	480a      	ldr	r0, [pc, #40]	; (8009e34 <rybg211_txDataSend+0x5c>)
 8009e0c:	f7f6 f9e8 	bl	80001e0 <strlen>
 8009e10:	4603      	mov	r3, r0
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	4b02      	ldr	r3, [pc, #8]	; (8009e20 <rybg211_txDataSend+0x48>)
 8009e16:	805a      	strh	r2, [r3, #2]
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	200020fc 	.word	0x200020fc
 8009e24:	0800a818 	.word	0x0800a818
 8009e28:	0800a81c 	.word	0x0800a81c
 8009e2c:	0800a84c 	.word	0x0800a84c
 8009e30:	0800a858 	.word	0x0800a858
 8009e34:	20002111 	.word	0x20002111

08009e38 <__errno>:
 8009e38:	4b01      	ldr	r3, [pc, #4]	; (8009e40 <__errno+0x8>)
 8009e3a:	6818      	ldr	r0, [r3, #0]
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	200000fc 	.word	0x200000fc

08009e44 <__libc_init_array>:
 8009e44:	b570      	push	{r4, r5, r6, lr}
 8009e46:	4d0d      	ldr	r5, [pc, #52]	; (8009e7c <__libc_init_array+0x38>)
 8009e48:	4c0d      	ldr	r4, [pc, #52]	; (8009e80 <__libc_init_array+0x3c>)
 8009e4a:	1b64      	subs	r4, r4, r5
 8009e4c:	10a4      	asrs	r4, r4, #2
 8009e4e:	2600      	movs	r6, #0
 8009e50:	42a6      	cmp	r6, r4
 8009e52:	d109      	bne.n	8009e68 <__libc_init_array+0x24>
 8009e54:	4d0b      	ldr	r5, [pc, #44]	; (8009e84 <__libc_init_array+0x40>)
 8009e56:	4c0c      	ldr	r4, [pc, #48]	; (8009e88 <__libc_init_array+0x44>)
 8009e58:	f000 fc9e 	bl	800a798 <_init>
 8009e5c:	1b64      	subs	r4, r4, r5
 8009e5e:	10a4      	asrs	r4, r4, #2
 8009e60:	2600      	movs	r6, #0
 8009e62:	42a6      	cmp	r6, r4
 8009e64:	d105      	bne.n	8009e72 <__libc_init_array+0x2e>
 8009e66:	bd70      	pop	{r4, r5, r6, pc}
 8009e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e6c:	4798      	blx	r3
 8009e6e:	3601      	adds	r6, #1
 8009e70:	e7ee      	b.n	8009e50 <__libc_init_array+0xc>
 8009e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e76:	4798      	blx	r3
 8009e78:	3601      	adds	r6, #1
 8009e7a:	e7f2      	b.n	8009e62 <__libc_init_array+0x1e>
 8009e7c:	0800a9c4 	.word	0x0800a9c4
 8009e80:	0800a9c4 	.word	0x0800a9c4
 8009e84:	0800a9c4 	.word	0x0800a9c4
 8009e88:	0800a9c8 	.word	0x0800a9c8

08009e8c <memcmp>:
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	3901      	subs	r1, #1
 8009e90:	4402      	add	r2, r0
 8009e92:	4290      	cmp	r0, r2
 8009e94:	d101      	bne.n	8009e9a <memcmp+0xe>
 8009e96:	2000      	movs	r0, #0
 8009e98:	e005      	b.n	8009ea6 <memcmp+0x1a>
 8009e9a:	7803      	ldrb	r3, [r0, #0]
 8009e9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ea0:	42a3      	cmp	r3, r4
 8009ea2:	d001      	beq.n	8009ea8 <memcmp+0x1c>
 8009ea4:	1b18      	subs	r0, r3, r4
 8009ea6:	bd10      	pop	{r4, pc}
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	e7f2      	b.n	8009e92 <memcmp+0x6>

08009eac <memcpy>:
 8009eac:	440a      	add	r2, r1
 8009eae:	4291      	cmp	r1, r2
 8009eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009eb4:	d100      	bne.n	8009eb8 <memcpy+0xc>
 8009eb6:	4770      	bx	lr
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ec2:	4291      	cmp	r1, r2
 8009ec4:	d1f9      	bne.n	8009eba <memcpy+0xe>
 8009ec6:	bd10      	pop	{r4, pc}

08009ec8 <memset>:
 8009ec8:	4402      	add	r2, r0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d100      	bne.n	8009ed2 <memset+0xa>
 8009ed0:	4770      	bx	lr
 8009ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ed6:	e7f9      	b.n	8009ecc <memset+0x4>

08009ed8 <siprintf>:
 8009ed8:	b40e      	push	{r1, r2, r3}
 8009eda:	b500      	push	{lr}
 8009edc:	b09c      	sub	sp, #112	; 0x70
 8009ede:	ab1d      	add	r3, sp, #116	; 0x74
 8009ee0:	9002      	str	r0, [sp, #8]
 8009ee2:	9006      	str	r0, [sp, #24]
 8009ee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ee8:	4809      	ldr	r0, [pc, #36]	; (8009f10 <siprintf+0x38>)
 8009eea:	9107      	str	r1, [sp, #28]
 8009eec:	9104      	str	r1, [sp, #16]
 8009eee:	4909      	ldr	r1, [pc, #36]	; (8009f14 <siprintf+0x3c>)
 8009ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ef4:	9105      	str	r1, [sp, #20]
 8009ef6:	6800      	ldr	r0, [r0, #0]
 8009ef8:	9301      	str	r3, [sp, #4]
 8009efa:	a902      	add	r1, sp, #8
 8009efc:	f000 f868 	bl	8009fd0 <_svfiprintf_r>
 8009f00:	9b02      	ldr	r3, [sp, #8]
 8009f02:	2200      	movs	r2, #0
 8009f04:	701a      	strb	r2, [r3, #0]
 8009f06:	b01c      	add	sp, #112	; 0x70
 8009f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f0c:	b003      	add	sp, #12
 8009f0e:	4770      	bx	lr
 8009f10:	200000fc 	.word	0x200000fc
 8009f14:	ffff0208 	.word	0xffff0208

08009f18 <__ssputs_r>:
 8009f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	688e      	ldr	r6, [r1, #8]
 8009f1e:	429e      	cmp	r6, r3
 8009f20:	4682      	mov	sl, r0
 8009f22:	460c      	mov	r4, r1
 8009f24:	4690      	mov	r8, r2
 8009f26:	461f      	mov	r7, r3
 8009f28:	d838      	bhi.n	8009f9c <__ssputs_r+0x84>
 8009f2a:	898a      	ldrh	r2, [r1, #12]
 8009f2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f30:	d032      	beq.n	8009f98 <__ssputs_r+0x80>
 8009f32:	6825      	ldr	r5, [r4, #0]
 8009f34:	6909      	ldr	r1, [r1, #16]
 8009f36:	eba5 0901 	sub.w	r9, r5, r1
 8009f3a:	6965      	ldr	r5, [r4, #20]
 8009f3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f44:	3301      	adds	r3, #1
 8009f46:	444b      	add	r3, r9
 8009f48:	106d      	asrs	r5, r5, #1
 8009f4a:	429d      	cmp	r5, r3
 8009f4c:	bf38      	it	cc
 8009f4e:	461d      	movcc	r5, r3
 8009f50:	0553      	lsls	r3, r2, #21
 8009f52:	d531      	bpl.n	8009fb8 <__ssputs_r+0xa0>
 8009f54:	4629      	mov	r1, r5
 8009f56:	f000 fb55 	bl	800a604 <_malloc_r>
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	b950      	cbnz	r0, 8009f74 <__ssputs_r+0x5c>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	f8ca 3000 	str.w	r3, [sl]
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f6a:	81a3      	strh	r3, [r4, #12]
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f74:	6921      	ldr	r1, [r4, #16]
 8009f76:	464a      	mov	r2, r9
 8009f78:	f7ff ff98 	bl	8009eac <memcpy>
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f86:	81a3      	strh	r3, [r4, #12]
 8009f88:	6126      	str	r6, [r4, #16]
 8009f8a:	6165      	str	r5, [r4, #20]
 8009f8c:	444e      	add	r6, r9
 8009f8e:	eba5 0509 	sub.w	r5, r5, r9
 8009f92:	6026      	str	r6, [r4, #0]
 8009f94:	60a5      	str	r5, [r4, #8]
 8009f96:	463e      	mov	r6, r7
 8009f98:	42be      	cmp	r6, r7
 8009f9a:	d900      	bls.n	8009f9e <__ssputs_r+0x86>
 8009f9c:	463e      	mov	r6, r7
 8009f9e:	6820      	ldr	r0, [r4, #0]
 8009fa0:	4632      	mov	r2, r6
 8009fa2:	4641      	mov	r1, r8
 8009fa4:	f000 faa8 	bl	800a4f8 <memmove>
 8009fa8:	68a3      	ldr	r3, [r4, #8]
 8009faa:	1b9b      	subs	r3, r3, r6
 8009fac:	60a3      	str	r3, [r4, #8]
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	4433      	add	r3, r6
 8009fb2:	6023      	str	r3, [r4, #0]
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e7db      	b.n	8009f70 <__ssputs_r+0x58>
 8009fb8:	462a      	mov	r2, r5
 8009fba:	f000 fb97 	bl	800a6ec <_realloc_r>
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	d1e1      	bne.n	8009f88 <__ssputs_r+0x70>
 8009fc4:	6921      	ldr	r1, [r4, #16]
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	f000 fab0 	bl	800a52c <_free_r>
 8009fcc:	e7c7      	b.n	8009f5e <__ssputs_r+0x46>
	...

08009fd0 <_svfiprintf_r>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	4698      	mov	r8, r3
 8009fd6:	898b      	ldrh	r3, [r1, #12]
 8009fd8:	061b      	lsls	r3, r3, #24
 8009fda:	b09d      	sub	sp, #116	; 0x74
 8009fdc:	4607      	mov	r7, r0
 8009fde:	460d      	mov	r5, r1
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	d50e      	bpl.n	800a002 <_svfiprintf_r+0x32>
 8009fe4:	690b      	ldr	r3, [r1, #16]
 8009fe6:	b963      	cbnz	r3, 800a002 <_svfiprintf_r+0x32>
 8009fe8:	2140      	movs	r1, #64	; 0x40
 8009fea:	f000 fb0b 	bl	800a604 <_malloc_r>
 8009fee:	6028      	str	r0, [r5, #0]
 8009ff0:	6128      	str	r0, [r5, #16]
 8009ff2:	b920      	cbnz	r0, 8009ffe <_svfiprintf_r+0x2e>
 8009ff4:	230c      	movs	r3, #12
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffc:	e0d1      	b.n	800a1a2 <_svfiprintf_r+0x1d2>
 8009ffe:	2340      	movs	r3, #64	; 0x40
 800a000:	616b      	str	r3, [r5, #20]
 800a002:	2300      	movs	r3, #0
 800a004:	9309      	str	r3, [sp, #36]	; 0x24
 800a006:	2320      	movs	r3, #32
 800a008:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a00c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a010:	2330      	movs	r3, #48	; 0x30
 800a012:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1bc <_svfiprintf_r+0x1ec>
 800a016:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a01a:	f04f 0901 	mov.w	r9, #1
 800a01e:	4623      	mov	r3, r4
 800a020:	469a      	mov	sl, r3
 800a022:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a026:	b10a      	cbz	r2, 800a02c <_svfiprintf_r+0x5c>
 800a028:	2a25      	cmp	r2, #37	; 0x25
 800a02a:	d1f9      	bne.n	800a020 <_svfiprintf_r+0x50>
 800a02c:	ebba 0b04 	subs.w	fp, sl, r4
 800a030:	d00b      	beq.n	800a04a <_svfiprintf_r+0x7a>
 800a032:	465b      	mov	r3, fp
 800a034:	4622      	mov	r2, r4
 800a036:	4629      	mov	r1, r5
 800a038:	4638      	mov	r0, r7
 800a03a:	f7ff ff6d 	bl	8009f18 <__ssputs_r>
 800a03e:	3001      	adds	r0, #1
 800a040:	f000 80aa 	beq.w	800a198 <_svfiprintf_r+0x1c8>
 800a044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a046:	445a      	add	r2, fp
 800a048:	9209      	str	r2, [sp, #36]	; 0x24
 800a04a:	f89a 3000 	ldrb.w	r3, [sl]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 80a2 	beq.w	800a198 <_svfiprintf_r+0x1c8>
 800a054:	2300      	movs	r3, #0
 800a056:	f04f 32ff 	mov.w	r2, #4294967295
 800a05a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a05e:	f10a 0a01 	add.w	sl, sl, #1
 800a062:	9304      	str	r3, [sp, #16]
 800a064:	9307      	str	r3, [sp, #28]
 800a066:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a06a:	931a      	str	r3, [sp, #104]	; 0x68
 800a06c:	4654      	mov	r4, sl
 800a06e:	2205      	movs	r2, #5
 800a070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a074:	4851      	ldr	r0, [pc, #324]	; (800a1bc <_svfiprintf_r+0x1ec>)
 800a076:	f7f6 f8bb 	bl	80001f0 <memchr>
 800a07a:	9a04      	ldr	r2, [sp, #16]
 800a07c:	b9d8      	cbnz	r0, 800a0b6 <_svfiprintf_r+0xe6>
 800a07e:	06d0      	lsls	r0, r2, #27
 800a080:	bf44      	itt	mi
 800a082:	2320      	movmi	r3, #32
 800a084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a088:	0711      	lsls	r1, r2, #28
 800a08a:	bf44      	itt	mi
 800a08c:	232b      	movmi	r3, #43	; 0x2b
 800a08e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a092:	f89a 3000 	ldrb.w	r3, [sl]
 800a096:	2b2a      	cmp	r3, #42	; 0x2a
 800a098:	d015      	beq.n	800a0c6 <_svfiprintf_r+0xf6>
 800a09a:	9a07      	ldr	r2, [sp, #28]
 800a09c:	4654      	mov	r4, sl
 800a09e:	2000      	movs	r0, #0
 800a0a0:	f04f 0c0a 	mov.w	ip, #10
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0aa:	3b30      	subs	r3, #48	; 0x30
 800a0ac:	2b09      	cmp	r3, #9
 800a0ae:	d94e      	bls.n	800a14e <_svfiprintf_r+0x17e>
 800a0b0:	b1b0      	cbz	r0, 800a0e0 <_svfiprintf_r+0x110>
 800a0b2:	9207      	str	r2, [sp, #28]
 800a0b4:	e014      	b.n	800a0e0 <_svfiprintf_r+0x110>
 800a0b6:	eba0 0308 	sub.w	r3, r0, r8
 800a0ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	46a2      	mov	sl, r4
 800a0c4:	e7d2      	b.n	800a06c <_svfiprintf_r+0x9c>
 800a0c6:	9b03      	ldr	r3, [sp, #12]
 800a0c8:	1d19      	adds	r1, r3, #4
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	9103      	str	r1, [sp, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	bfbb      	ittet	lt
 800a0d2:	425b      	neglt	r3, r3
 800a0d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a0d8:	9307      	strge	r3, [sp, #28]
 800a0da:	9307      	strlt	r3, [sp, #28]
 800a0dc:	bfb8      	it	lt
 800a0de:	9204      	strlt	r2, [sp, #16]
 800a0e0:	7823      	ldrb	r3, [r4, #0]
 800a0e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a0e4:	d10c      	bne.n	800a100 <_svfiprintf_r+0x130>
 800a0e6:	7863      	ldrb	r3, [r4, #1]
 800a0e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ea:	d135      	bne.n	800a158 <_svfiprintf_r+0x188>
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	1d1a      	adds	r2, r3, #4
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	9203      	str	r2, [sp, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	bfb8      	it	lt
 800a0f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0fc:	3402      	adds	r4, #2
 800a0fe:	9305      	str	r3, [sp, #20]
 800a100:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1cc <_svfiprintf_r+0x1fc>
 800a104:	7821      	ldrb	r1, [r4, #0]
 800a106:	2203      	movs	r2, #3
 800a108:	4650      	mov	r0, sl
 800a10a:	f7f6 f871 	bl	80001f0 <memchr>
 800a10e:	b140      	cbz	r0, 800a122 <_svfiprintf_r+0x152>
 800a110:	2340      	movs	r3, #64	; 0x40
 800a112:	eba0 000a 	sub.w	r0, r0, sl
 800a116:	fa03 f000 	lsl.w	r0, r3, r0
 800a11a:	9b04      	ldr	r3, [sp, #16]
 800a11c:	4303      	orrs	r3, r0
 800a11e:	3401      	adds	r4, #1
 800a120:	9304      	str	r3, [sp, #16]
 800a122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a126:	4826      	ldr	r0, [pc, #152]	; (800a1c0 <_svfiprintf_r+0x1f0>)
 800a128:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a12c:	2206      	movs	r2, #6
 800a12e:	f7f6 f85f 	bl	80001f0 <memchr>
 800a132:	2800      	cmp	r0, #0
 800a134:	d038      	beq.n	800a1a8 <_svfiprintf_r+0x1d8>
 800a136:	4b23      	ldr	r3, [pc, #140]	; (800a1c4 <_svfiprintf_r+0x1f4>)
 800a138:	bb1b      	cbnz	r3, 800a182 <_svfiprintf_r+0x1b2>
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	3307      	adds	r3, #7
 800a13e:	f023 0307 	bic.w	r3, r3, #7
 800a142:	3308      	adds	r3, #8
 800a144:	9303      	str	r3, [sp, #12]
 800a146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a148:	4433      	add	r3, r6
 800a14a:	9309      	str	r3, [sp, #36]	; 0x24
 800a14c:	e767      	b.n	800a01e <_svfiprintf_r+0x4e>
 800a14e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a152:	460c      	mov	r4, r1
 800a154:	2001      	movs	r0, #1
 800a156:	e7a5      	b.n	800a0a4 <_svfiprintf_r+0xd4>
 800a158:	2300      	movs	r3, #0
 800a15a:	3401      	adds	r4, #1
 800a15c:	9305      	str	r3, [sp, #20]
 800a15e:	4619      	mov	r1, r3
 800a160:	f04f 0c0a 	mov.w	ip, #10
 800a164:	4620      	mov	r0, r4
 800a166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a16a:	3a30      	subs	r2, #48	; 0x30
 800a16c:	2a09      	cmp	r2, #9
 800a16e:	d903      	bls.n	800a178 <_svfiprintf_r+0x1a8>
 800a170:	2b00      	cmp	r3, #0
 800a172:	d0c5      	beq.n	800a100 <_svfiprintf_r+0x130>
 800a174:	9105      	str	r1, [sp, #20]
 800a176:	e7c3      	b.n	800a100 <_svfiprintf_r+0x130>
 800a178:	fb0c 2101 	mla	r1, ip, r1, r2
 800a17c:	4604      	mov	r4, r0
 800a17e:	2301      	movs	r3, #1
 800a180:	e7f0      	b.n	800a164 <_svfiprintf_r+0x194>
 800a182:	ab03      	add	r3, sp, #12
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	462a      	mov	r2, r5
 800a188:	4b0f      	ldr	r3, [pc, #60]	; (800a1c8 <_svfiprintf_r+0x1f8>)
 800a18a:	a904      	add	r1, sp, #16
 800a18c:	4638      	mov	r0, r7
 800a18e:	f3af 8000 	nop.w
 800a192:	1c42      	adds	r2, r0, #1
 800a194:	4606      	mov	r6, r0
 800a196:	d1d6      	bne.n	800a146 <_svfiprintf_r+0x176>
 800a198:	89ab      	ldrh	r3, [r5, #12]
 800a19a:	065b      	lsls	r3, r3, #25
 800a19c:	f53f af2c 	bmi.w	8009ff8 <_svfiprintf_r+0x28>
 800a1a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1a2:	b01d      	add	sp, #116	; 0x74
 800a1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a8:	ab03      	add	r3, sp, #12
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	462a      	mov	r2, r5
 800a1ae:	4b06      	ldr	r3, [pc, #24]	; (800a1c8 <_svfiprintf_r+0x1f8>)
 800a1b0:	a904      	add	r1, sp, #16
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	f000 f87a 	bl	800a2ac <_printf_i>
 800a1b8:	e7eb      	b.n	800a192 <_svfiprintf_r+0x1c2>
 800a1ba:	bf00      	nop
 800a1bc:	0800a989 	.word	0x0800a989
 800a1c0:	0800a993 	.word	0x0800a993
 800a1c4:	00000000 	.word	0x00000000
 800a1c8:	08009f19 	.word	0x08009f19
 800a1cc:	0800a98f 	.word	0x0800a98f

0800a1d0 <_printf_common>:
 800a1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d4:	4616      	mov	r6, r2
 800a1d6:	4699      	mov	r9, r3
 800a1d8:	688a      	ldr	r2, [r1, #8]
 800a1da:	690b      	ldr	r3, [r1, #16]
 800a1dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	bfb8      	it	lt
 800a1e4:	4613      	movlt	r3, r2
 800a1e6:	6033      	str	r3, [r6, #0]
 800a1e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1ec:	4607      	mov	r7, r0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	b10a      	cbz	r2, 800a1f6 <_printf_common+0x26>
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	6033      	str	r3, [r6, #0]
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	0699      	lsls	r1, r3, #26
 800a1fa:	bf42      	ittt	mi
 800a1fc:	6833      	ldrmi	r3, [r6, #0]
 800a1fe:	3302      	addmi	r3, #2
 800a200:	6033      	strmi	r3, [r6, #0]
 800a202:	6825      	ldr	r5, [r4, #0]
 800a204:	f015 0506 	ands.w	r5, r5, #6
 800a208:	d106      	bne.n	800a218 <_printf_common+0x48>
 800a20a:	f104 0a19 	add.w	sl, r4, #25
 800a20e:	68e3      	ldr	r3, [r4, #12]
 800a210:	6832      	ldr	r2, [r6, #0]
 800a212:	1a9b      	subs	r3, r3, r2
 800a214:	42ab      	cmp	r3, r5
 800a216:	dc26      	bgt.n	800a266 <_printf_common+0x96>
 800a218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a21c:	1e13      	subs	r3, r2, #0
 800a21e:	6822      	ldr	r2, [r4, #0]
 800a220:	bf18      	it	ne
 800a222:	2301      	movne	r3, #1
 800a224:	0692      	lsls	r2, r2, #26
 800a226:	d42b      	bmi.n	800a280 <_printf_common+0xb0>
 800a228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a22c:	4649      	mov	r1, r9
 800a22e:	4638      	mov	r0, r7
 800a230:	47c0      	blx	r8
 800a232:	3001      	adds	r0, #1
 800a234:	d01e      	beq.n	800a274 <_printf_common+0xa4>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	68e5      	ldr	r5, [r4, #12]
 800a23a:	6832      	ldr	r2, [r6, #0]
 800a23c:	f003 0306 	and.w	r3, r3, #6
 800a240:	2b04      	cmp	r3, #4
 800a242:	bf08      	it	eq
 800a244:	1aad      	subeq	r5, r5, r2
 800a246:	68a3      	ldr	r3, [r4, #8]
 800a248:	6922      	ldr	r2, [r4, #16]
 800a24a:	bf0c      	ite	eq
 800a24c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a250:	2500      	movne	r5, #0
 800a252:	4293      	cmp	r3, r2
 800a254:	bfc4      	itt	gt
 800a256:	1a9b      	subgt	r3, r3, r2
 800a258:	18ed      	addgt	r5, r5, r3
 800a25a:	2600      	movs	r6, #0
 800a25c:	341a      	adds	r4, #26
 800a25e:	42b5      	cmp	r5, r6
 800a260:	d11a      	bne.n	800a298 <_printf_common+0xc8>
 800a262:	2000      	movs	r0, #0
 800a264:	e008      	b.n	800a278 <_printf_common+0xa8>
 800a266:	2301      	movs	r3, #1
 800a268:	4652      	mov	r2, sl
 800a26a:	4649      	mov	r1, r9
 800a26c:	4638      	mov	r0, r7
 800a26e:	47c0      	blx	r8
 800a270:	3001      	adds	r0, #1
 800a272:	d103      	bne.n	800a27c <_printf_common+0xac>
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a27c:	3501      	adds	r5, #1
 800a27e:	e7c6      	b.n	800a20e <_printf_common+0x3e>
 800a280:	18e1      	adds	r1, r4, r3
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	2030      	movs	r0, #48	; 0x30
 800a286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a28a:	4422      	add	r2, r4
 800a28c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a294:	3302      	adds	r3, #2
 800a296:	e7c7      	b.n	800a228 <_printf_common+0x58>
 800a298:	2301      	movs	r3, #1
 800a29a:	4622      	mov	r2, r4
 800a29c:	4649      	mov	r1, r9
 800a29e:	4638      	mov	r0, r7
 800a2a0:	47c0      	blx	r8
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	d0e6      	beq.n	800a274 <_printf_common+0xa4>
 800a2a6:	3601      	adds	r6, #1
 800a2a8:	e7d9      	b.n	800a25e <_printf_common+0x8e>
	...

0800a2ac <_printf_i>:
 800a2ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b0:	7e0f      	ldrb	r7, [r1, #24]
 800a2b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2b4:	2f78      	cmp	r7, #120	; 0x78
 800a2b6:	4691      	mov	r9, r2
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	469a      	mov	sl, r3
 800a2be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2c2:	d807      	bhi.n	800a2d4 <_printf_i+0x28>
 800a2c4:	2f62      	cmp	r7, #98	; 0x62
 800a2c6:	d80a      	bhi.n	800a2de <_printf_i+0x32>
 800a2c8:	2f00      	cmp	r7, #0
 800a2ca:	f000 80d8 	beq.w	800a47e <_printf_i+0x1d2>
 800a2ce:	2f58      	cmp	r7, #88	; 0x58
 800a2d0:	f000 80a3 	beq.w	800a41a <_printf_i+0x16e>
 800a2d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2dc:	e03a      	b.n	800a354 <_printf_i+0xa8>
 800a2de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2e2:	2b15      	cmp	r3, #21
 800a2e4:	d8f6      	bhi.n	800a2d4 <_printf_i+0x28>
 800a2e6:	a101      	add	r1, pc, #4	; (adr r1, 800a2ec <_printf_i+0x40>)
 800a2e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2ec:	0800a345 	.word	0x0800a345
 800a2f0:	0800a359 	.word	0x0800a359
 800a2f4:	0800a2d5 	.word	0x0800a2d5
 800a2f8:	0800a2d5 	.word	0x0800a2d5
 800a2fc:	0800a2d5 	.word	0x0800a2d5
 800a300:	0800a2d5 	.word	0x0800a2d5
 800a304:	0800a359 	.word	0x0800a359
 800a308:	0800a2d5 	.word	0x0800a2d5
 800a30c:	0800a2d5 	.word	0x0800a2d5
 800a310:	0800a2d5 	.word	0x0800a2d5
 800a314:	0800a2d5 	.word	0x0800a2d5
 800a318:	0800a465 	.word	0x0800a465
 800a31c:	0800a389 	.word	0x0800a389
 800a320:	0800a447 	.word	0x0800a447
 800a324:	0800a2d5 	.word	0x0800a2d5
 800a328:	0800a2d5 	.word	0x0800a2d5
 800a32c:	0800a487 	.word	0x0800a487
 800a330:	0800a2d5 	.word	0x0800a2d5
 800a334:	0800a389 	.word	0x0800a389
 800a338:	0800a2d5 	.word	0x0800a2d5
 800a33c:	0800a2d5 	.word	0x0800a2d5
 800a340:	0800a44f 	.word	0x0800a44f
 800a344:	682b      	ldr	r3, [r5, #0]
 800a346:	1d1a      	adds	r2, r3, #4
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	602a      	str	r2, [r5, #0]
 800a34c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a354:	2301      	movs	r3, #1
 800a356:	e0a3      	b.n	800a4a0 <_printf_i+0x1f4>
 800a358:	6820      	ldr	r0, [r4, #0]
 800a35a:	6829      	ldr	r1, [r5, #0]
 800a35c:	0606      	lsls	r6, r0, #24
 800a35e:	f101 0304 	add.w	r3, r1, #4
 800a362:	d50a      	bpl.n	800a37a <_printf_i+0xce>
 800a364:	680e      	ldr	r6, [r1, #0]
 800a366:	602b      	str	r3, [r5, #0]
 800a368:	2e00      	cmp	r6, #0
 800a36a:	da03      	bge.n	800a374 <_printf_i+0xc8>
 800a36c:	232d      	movs	r3, #45	; 0x2d
 800a36e:	4276      	negs	r6, r6
 800a370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a374:	485e      	ldr	r0, [pc, #376]	; (800a4f0 <_printf_i+0x244>)
 800a376:	230a      	movs	r3, #10
 800a378:	e019      	b.n	800a3ae <_printf_i+0x102>
 800a37a:	680e      	ldr	r6, [r1, #0]
 800a37c:	602b      	str	r3, [r5, #0]
 800a37e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a382:	bf18      	it	ne
 800a384:	b236      	sxthne	r6, r6
 800a386:	e7ef      	b.n	800a368 <_printf_i+0xbc>
 800a388:	682b      	ldr	r3, [r5, #0]
 800a38a:	6820      	ldr	r0, [r4, #0]
 800a38c:	1d19      	adds	r1, r3, #4
 800a38e:	6029      	str	r1, [r5, #0]
 800a390:	0601      	lsls	r1, r0, #24
 800a392:	d501      	bpl.n	800a398 <_printf_i+0xec>
 800a394:	681e      	ldr	r6, [r3, #0]
 800a396:	e002      	b.n	800a39e <_printf_i+0xf2>
 800a398:	0646      	lsls	r6, r0, #25
 800a39a:	d5fb      	bpl.n	800a394 <_printf_i+0xe8>
 800a39c:	881e      	ldrh	r6, [r3, #0]
 800a39e:	4854      	ldr	r0, [pc, #336]	; (800a4f0 <_printf_i+0x244>)
 800a3a0:	2f6f      	cmp	r7, #111	; 0x6f
 800a3a2:	bf0c      	ite	eq
 800a3a4:	2308      	moveq	r3, #8
 800a3a6:	230a      	movne	r3, #10
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3ae:	6865      	ldr	r5, [r4, #4]
 800a3b0:	60a5      	str	r5, [r4, #8]
 800a3b2:	2d00      	cmp	r5, #0
 800a3b4:	bfa2      	ittt	ge
 800a3b6:	6821      	ldrge	r1, [r4, #0]
 800a3b8:	f021 0104 	bicge.w	r1, r1, #4
 800a3bc:	6021      	strge	r1, [r4, #0]
 800a3be:	b90e      	cbnz	r6, 800a3c4 <_printf_i+0x118>
 800a3c0:	2d00      	cmp	r5, #0
 800a3c2:	d04d      	beq.n	800a460 <_printf_i+0x1b4>
 800a3c4:	4615      	mov	r5, r2
 800a3c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3ca:	fb03 6711 	mls	r7, r3, r1, r6
 800a3ce:	5dc7      	ldrb	r7, [r0, r7]
 800a3d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3d4:	4637      	mov	r7, r6
 800a3d6:	42bb      	cmp	r3, r7
 800a3d8:	460e      	mov	r6, r1
 800a3da:	d9f4      	bls.n	800a3c6 <_printf_i+0x11a>
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d10b      	bne.n	800a3f8 <_printf_i+0x14c>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	07de      	lsls	r6, r3, #31
 800a3e4:	d508      	bpl.n	800a3f8 <_printf_i+0x14c>
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	6861      	ldr	r1, [r4, #4]
 800a3ea:	4299      	cmp	r1, r3
 800a3ec:	bfde      	ittt	le
 800a3ee:	2330      	movle	r3, #48	; 0x30
 800a3f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3f8:	1b52      	subs	r2, r2, r5
 800a3fa:	6122      	str	r2, [r4, #16]
 800a3fc:	f8cd a000 	str.w	sl, [sp]
 800a400:	464b      	mov	r3, r9
 800a402:	aa03      	add	r2, sp, #12
 800a404:	4621      	mov	r1, r4
 800a406:	4640      	mov	r0, r8
 800a408:	f7ff fee2 	bl	800a1d0 <_printf_common>
 800a40c:	3001      	adds	r0, #1
 800a40e:	d14c      	bne.n	800a4aa <_printf_i+0x1fe>
 800a410:	f04f 30ff 	mov.w	r0, #4294967295
 800a414:	b004      	add	sp, #16
 800a416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41a:	4835      	ldr	r0, [pc, #212]	; (800a4f0 <_printf_i+0x244>)
 800a41c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a420:	6829      	ldr	r1, [r5, #0]
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	f851 6b04 	ldr.w	r6, [r1], #4
 800a428:	6029      	str	r1, [r5, #0]
 800a42a:	061d      	lsls	r5, r3, #24
 800a42c:	d514      	bpl.n	800a458 <_printf_i+0x1ac>
 800a42e:	07df      	lsls	r7, r3, #31
 800a430:	bf44      	itt	mi
 800a432:	f043 0320 	orrmi.w	r3, r3, #32
 800a436:	6023      	strmi	r3, [r4, #0]
 800a438:	b91e      	cbnz	r6, 800a442 <_printf_i+0x196>
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	f023 0320 	bic.w	r3, r3, #32
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	2310      	movs	r3, #16
 800a444:	e7b0      	b.n	800a3a8 <_printf_i+0xfc>
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	f043 0320 	orr.w	r3, r3, #32
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	2378      	movs	r3, #120	; 0x78
 800a450:	4828      	ldr	r0, [pc, #160]	; (800a4f4 <_printf_i+0x248>)
 800a452:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a456:	e7e3      	b.n	800a420 <_printf_i+0x174>
 800a458:	0659      	lsls	r1, r3, #25
 800a45a:	bf48      	it	mi
 800a45c:	b2b6      	uxthmi	r6, r6
 800a45e:	e7e6      	b.n	800a42e <_printf_i+0x182>
 800a460:	4615      	mov	r5, r2
 800a462:	e7bb      	b.n	800a3dc <_printf_i+0x130>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	6826      	ldr	r6, [r4, #0]
 800a468:	6961      	ldr	r1, [r4, #20]
 800a46a:	1d18      	adds	r0, r3, #4
 800a46c:	6028      	str	r0, [r5, #0]
 800a46e:	0635      	lsls	r5, r6, #24
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	d501      	bpl.n	800a478 <_printf_i+0x1cc>
 800a474:	6019      	str	r1, [r3, #0]
 800a476:	e002      	b.n	800a47e <_printf_i+0x1d2>
 800a478:	0670      	lsls	r0, r6, #25
 800a47a:	d5fb      	bpl.n	800a474 <_printf_i+0x1c8>
 800a47c:	8019      	strh	r1, [r3, #0]
 800a47e:	2300      	movs	r3, #0
 800a480:	6123      	str	r3, [r4, #16]
 800a482:	4615      	mov	r5, r2
 800a484:	e7ba      	b.n	800a3fc <_printf_i+0x150>
 800a486:	682b      	ldr	r3, [r5, #0]
 800a488:	1d1a      	adds	r2, r3, #4
 800a48a:	602a      	str	r2, [r5, #0]
 800a48c:	681d      	ldr	r5, [r3, #0]
 800a48e:	6862      	ldr	r2, [r4, #4]
 800a490:	2100      	movs	r1, #0
 800a492:	4628      	mov	r0, r5
 800a494:	f7f5 feac 	bl	80001f0 <memchr>
 800a498:	b108      	cbz	r0, 800a49e <_printf_i+0x1f2>
 800a49a:	1b40      	subs	r0, r0, r5
 800a49c:	6060      	str	r0, [r4, #4]
 800a49e:	6863      	ldr	r3, [r4, #4]
 800a4a0:	6123      	str	r3, [r4, #16]
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4a8:	e7a8      	b.n	800a3fc <_printf_i+0x150>
 800a4aa:	6923      	ldr	r3, [r4, #16]
 800a4ac:	462a      	mov	r2, r5
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	4640      	mov	r0, r8
 800a4b2:	47d0      	blx	sl
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	d0ab      	beq.n	800a410 <_printf_i+0x164>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	079b      	lsls	r3, r3, #30
 800a4bc:	d413      	bmi.n	800a4e6 <_printf_i+0x23a>
 800a4be:	68e0      	ldr	r0, [r4, #12]
 800a4c0:	9b03      	ldr	r3, [sp, #12]
 800a4c2:	4298      	cmp	r0, r3
 800a4c4:	bfb8      	it	lt
 800a4c6:	4618      	movlt	r0, r3
 800a4c8:	e7a4      	b.n	800a414 <_printf_i+0x168>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	4632      	mov	r2, r6
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	47d0      	blx	sl
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	d09b      	beq.n	800a410 <_printf_i+0x164>
 800a4d8:	3501      	adds	r5, #1
 800a4da:	68e3      	ldr	r3, [r4, #12]
 800a4dc:	9903      	ldr	r1, [sp, #12]
 800a4de:	1a5b      	subs	r3, r3, r1
 800a4e0:	42ab      	cmp	r3, r5
 800a4e2:	dcf2      	bgt.n	800a4ca <_printf_i+0x21e>
 800a4e4:	e7eb      	b.n	800a4be <_printf_i+0x212>
 800a4e6:	2500      	movs	r5, #0
 800a4e8:	f104 0619 	add.w	r6, r4, #25
 800a4ec:	e7f5      	b.n	800a4da <_printf_i+0x22e>
 800a4ee:	bf00      	nop
 800a4f0:	0800a99a 	.word	0x0800a99a
 800a4f4:	0800a9ab 	.word	0x0800a9ab

0800a4f8 <memmove>:
 800a4f8:	4288      	cmp	r0, r1
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	eb01 0402 	add.w	r4, r1, r2
 800a500:	d902      	bls.n	800a508 <memmove+0x10>
 800a502:	4284      	cmp	r4, r0
 800a504:	4623      	mov	r3, r4
 800a506:	d807      	bhi.n	800a518 <memmove+0x20>
 800a508:	1e43      	subs	r3, r0, #1
 800a50a:	42a1      	cmp	r1, r4
 800a50c:	d008      	beq.n	800a520 <memmove+0x28>
 800a50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a512:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a516:	e7f8      	b.n	800a50a <memmove+0x12>
 800a518:	4402      	add	r2, r0
 800a51a:	4601      	mov	r1, r0
 800a51c:	428a      	cmp	r2, r1
 800a51e:	d100      	bne.n	800a522 <memmove+0x2a>
 800a520:	bd10      	pop	{r4, pc}
 800a522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a52a:	e7f7      	b.n	800a51c <memmove+0x24>

0800a52c <_free_r>:
 800a52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a52e:	2900      	cmp	r1, #0
 800a530:	d044      	beq.n	800a5bc <_free_r+0x90>
 800a532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a536:	9001      	str	r0, [sp, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f1a1 0404 	sub.w	r4, r1, #4
 800a53e:	bfb8      	it	lt
 800a540:	18e4      	addlt	r4, r4, r3
 800a542:	f000 f913 	bl	800a76c <__malloc_lock>
 800a546:	4a1e      	ldr	r2, [pc, #120]	; (800a5c0 <_free_r+0x94>)
 800a548:	9801      	ldr	r0, [sp, #4]
 800a54a:	6813      	ldr	r3, [r2, #0]
 800a54c:	b933      	cbnz	r3, 800a55c <_free_r+0x30>
 800a54e:	6063      	str	r3, [r4, #4]
 800a550:	6014      	str	r4, [r2, #0]
 800a552:	b003      	add	sp, #12
 800a554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a558:	f000 b90e 	b.w	800a778 <__malloc_unlock>
 800a55c:	42a3      	cmp	r3, r4
 800a55e:	d908      	bls.n	800a572 <_free_r+0x46>
 800a560:	6825      	ldr	r5, [r4, #0]
 800a562:	1961      	adds	r1, r4, r5
 800a564:	428b      	cmp	r3, r1
 800a566:	bf01      	itttt	eq
 800a568:	6819      	ldreq	r1, [r3, #0]
 800a56a:	685b      	ldreq	r3, [r3, #4]
 800a56c:	1949      	addeq	r1, r1, r5
 800a56e:	6021      	streq	r1, [r4, #0]
 800a570:	e7ed      	b.n	800a54e <_free_r+0x22>
 800a572:	461a      	mov	r2, r3
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	b10b      	cbz	r3, 800a57c <_free_r+0x50>
 800a578:	42a3      	cmp	r3, r4
 800a57a:	d9fa      	bls.n	800a572 <_free_r+0x46>
 800a57c:	6811      	ldr	r1, [r2, #0]
 800a57e:	1855      	adds	r5, r2, r1
 800a580:	42a5      	cmp	r5, r4
 800a582:	d10b      	bne.n	800a59c <_free_r+0x70>
 800a584:	6824      	ldr	r4, [r4, #0]
 800a586:	4421      	add	r1, r4
 800a588:	1854      	adds	r4, r2, r1
 800a58a:	42a3      	cmp	r3, r4
 800a58c:	6011      	str	r1, [r2, #0]
 800a58e:	d1e0      	bne.n	800a552 <_free_r+0x26>
 800a590:	681c      	ldr	r4, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	6053      	str	r3, [r2, #4]
 800a596:	4421      	add	r1, r4
 800a598:	6011      	str	r1, [r2, #0]
 800a59a:	e7da      	b.n	800a552 <_free_r+0x26>
 800a59c:	d902      	bls.n	800a5a4 <_free_r+0x78>
 800a59e:	230c      	movs	r3, #12
 800a5a0:	6003      	str	r3, [r0, #0]
 800a5a2:	e7d6      	b.n	800a552 <_free_r+0x26>
 800a5a4:	6825      	ldr	r5, [r4, #0]
 800a5a6:	1961      	adds	r1, r4, r5
 800a5a8:	428b      	cmp	r3, r1
 800a5aa:	bf04      	itt	eq
 800a5ac:	6819      	ldreq	r1, [r3, #0]
 800a5ae:	685b      	ldreq	r3, [r3, #4]
 800a5b0:	6063      	str	r3, [r4, #4]
 800a5b2:	bf04      	itt	eq
 800a5b4:	1949      	addeq	r1, r1, r5
 800a5b6:	6021      	streq	r1, [r4, #0]
 800a5b8:	6054      	str	r4, [r2, #4]
 800a5ba:	e7ca      	b.n	800a552 <_free_r+0x26>
 800a5bc:	b003      	add	sp, #12
 800a5be:	bd30      	pop	{r4, r5, pc}
 800a5c0:	20002314 	.word	0x20002314

0800a5c4 <sbrk_aligned>:
 800a5c4:	b570      	push	{r4, r5, r6, lr}
 800a5c6:	4e0e      	ldr	r6, [pc, #56]	; (800a600 <sbrk_aligned+0x3c>)
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	6831      	ldr	r1, [r6, #0]
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	b911      	cbnz	r1, 800a5d6 <sbrk_aligned+0x12>
 800a5d0:	f000 f8bc 	bl	800a74c <_sbrk_r>
 800a5d4:	6030      	str	r0, [r6, #0]
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	4628      	mov	r0, r5
 800a5da:	f000 f8b7 	bl	800a74c <_sbrk_r>
 800a5de:	1c43      	adds	r3, r0, #1
 800a5e0:	d00a      	beq.n	800a5f8 <sbrk_aligned+0x34>
 800a5e2:	1cc4      	adds	r4, r0, #3
 800a5e4:	f024 0403 	bic.w	r4, r4, #3
 800a5e8:	42a0      	cmp	r0, r4
 800a5ea:	d007      	beq.n	800a5fc <sbrk_aligned+0x38>
 800a5ec:	1a21      	subs	r1, r4, r0
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f000 f8ac 	bl	800a74c <_sbrk_r>
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d101      	bne.n	800a5fc <sbrk_aligned+0x38>
 800a5f8:	f04f 34ff 	mov.w	r4, #4294967295
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}
 800a600:	20002318 	.word	0x20002318

0800a604 <_malloc_r>:
 800a604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a608:	1ccd      	adds	r5, r1, #3
 800a60a:	f025 0503 	bic.w	r5, r5, #3
 800a60e:	3508      	adds	r5, #8
 800a610:	2d0c      	cmp	r5, #12
 800a612:	bf38      	it	cc
 800a614:	250c      	movcc	r5, #12
 800a616:	2d00      	cmp	r5, #0
 800a618:	4607      	mov	r7, r0
 800a61a:	db01      	blt.n	800a620 <_malloc_r+0x1c>
 800a61c:	42a9      	cmp	r1, r5
 800a61e:	d905      	bls.n	800a62c <_malloc_r+0x28>
 800a620:	230c      	movs	r3, #12
 800a622:	603b      	str	r3, [r7, #0]
 800a624:	2600      	movs	r6, #0
 800a626:	4630      	mov	r0, r6
 800a628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a62c:	4e2e      	ldr	r6, [pc, #184]	; (800a6e8 <_malloc_r+0xe4>)
 800a62e:	f000 f89d 	bl	800a76c <__malloc_lock>
 800a632:	6833      	ldr	r3, [r6, #0]
 800a634:	461c      	mov	r4, r3
 800a636:	bb34      	cbnz	r4, 800a686 <_malloc_r+0x82>
 800a638:	4629      	mov	r1, r5
 800a63a:	4638      	mov	r0, r7
 800a63c:	f7ff ffc2 	bl	800a5c4 <sbrk_aligned>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	4604      	mov	r4, r0
 800a644:	d14d      	bne.n	800a6e2 <_malloc_r+0xde>
 800a646:	6834      	ldr	r4, [r6, #0]
 800a648:	4626      	mov	r6, r4
 800a64a:	2e00      	cmp	r6, #0
 800a64c:	d140      	bne.n	800a6d0 <_malloc_r+0xcc>
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	4631      	mov	r1, r6
 800a652:	4638      	mov	r0, r7
 800a654:	eb04 0803 	add.w	r8, r4, r3
 800a658:	f000 f878 	bl	800a74c <_sbrk_r>
 800a65c:	4580      	cmp	r8, r0
 800a65e:	d13a      	bne.n	800a6d6 <_malloc_r+0xd2>
 800a660:	6821      	ldr	r1, [r4, #0]
 800a662:	3503      	adds	r5, #3
 800a664:	1a6d      	subs	r5, r5, r1
 800a666:	f025 0503 	bic.w	r5, r5, #3
 800a66a:	3508      	adds	r5, #8
 800a66c:	2d0c      	cmp	r5, #12
 800a66e:	bf38      	it	cc
 800a670:	250c      	movcc	r5, #12
 800a672:	4629      	mov	r1, r5
 800a674:	4638      	mov	r0, r7
 800a676:	f7ff ffa5 	bl	800a5c4 <sbrk_aligned>
 800a67a:	3001      	adds	r0, #1
 800a67c:	d02b      	beq.n	800a6d6 <_malloc_r+0xd2>
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	442b      	add	r3, r5
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	e00e      	b.n	800a6a4 <_malloc_r+0xa0>
 800a686:	6822      	ldr	r2, [r4, #0]
 800a688:	1b52      	subs	r2, r2, r5
 800a68a:	d41e      	bmi.n	800a6ca <_malloc_r+0xc6>
 800a68c:	2a0b      	cmp	r2, #11
 800a68e:	d916      	bls.n	800a6be <_malloc_r+0xba>
 800a690:	1961      	adds	r1, r4, r5
 800a692:	42a3      	cmp	r3, r4
 800a694:	6025      	str	r5, [r4, #0]
 800a696:	bf18      	it	ne
 800a698:	6059      	strne	r1, [r3, #4]
 800a69a:	6863      	ldr	r3, [r4, #4]
 800a69c:	bf08      	it	eq
 800a69e:	6031      	streq	r1, [r6, #0]
 800a6a0:	5162      	str	r2, [r4, r5]
 800a6a2:	604b      	str	r3, [r1, #4]
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	f104 060b 	add.w	r6, r4, #11
 800a6aa:	f000 f865 	bl	800a778 <__malloc_unlock>
 800a6ae:	f026 0607 	bic.w	r6, r6, #7
 800a6b2:	1d23      	adds	r3, r4, #4
 800a6b4:	1af2      	subs	r2, r6, r3
 800a6b6:	d0b6      	beq.n	800a626 <_malloc_r+0x22>
 800a6b8:	1b9b      	subs	r3, r3, r6
 800a6ba:	50a3      	str	r3, [r4, r2]
 800a6bc:	e7b3      	b.n	800a626 <_malloc_r+0x22>
 800a6be:	6862      	ldr	r2, [r4, #4]
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	bf0c      	ite	eq
 800a6c4:	6032      	streq	r2, [r6, #0]
 800a6c6:	605a      	strne	r2, [r3, #4]
 800a6c8:	e7ec      	b.n	800a6a4 <_malloc_r+0xa0>
 800a6ca:	4623      	mov	r3, r4
 800a6cc:	6864      	ldr	r4, [r4, #4]
 800a6ce:	e7b2      	b.n	800a636 <_malloc_r+0x32>
 800a6d0:	4634      	mov	r4, r6
 800a6d2:	6876      	ldr	r6, [r6, #4]
 800a6d4:	e7b9      	b.n	800a64a <_malloc_r+0x46>
 800a6d6:	230c      	movs	r3, #12
 800a6d8:	603b      	str	r3, [r7, #0]
 800a6da:	4638      	mov	r0, r7
 800a6dc:	f000 f84c 	bl	800a778 <__malloc_unlock>
 800a6e0:	e7a1      	b.n	800a626 <_malloc_r+0x22>
 800a6e2:	6025      	str	r5, [r4, #0]
 800a6e4:	e7de      	b.n	800a6a4 <_malloc_r+0xa0>
 800a6e6:	bf00      	nop
 800a6e8:	20002314 	.word	0x20002314

0800a6ec <_realloc_r>:
 800a6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f0:	4680      	mov	r8, r0
 800a6f2:	4614      	mov	r4, r2
 800a6f4:	460e      	mov	r6, r1
 800a6f6:	b921      	cbnz	r1, 800a702 <_realloc_r+0x16>
 800a6f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	f7ff bf81 	b.w	800a604 <_malloc_r>
 800a702:	b92a      	cbnz	r2, 800a710 <_realloc_r+0x24>
 800a704:	f7ff ff12 	bl	800a52c <_free_r>
 800a708:	4625      	mov	r5, r4
 800a70a:	4628      	mov	r0, r5
 800a70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a710:	f000 f838 	bl	800a784 <_malloc_usable_size_r>
 800a714:	4284      	cmp	r4, r0
 800a716:	4607      	mov	r7, r0
 800a718:	d802      	bhi.n	800a720 <_realloc_r+0x34>
 800a71a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a71e:	d812      	bhi.n	800a746 <_realloc_r+0x5a>
 800a720:	4621      	mov	r1, r4
 800a722:	4640      	mov	r0, r8
 800a724:	f7ff ff6e 	bl	800a604 <_malloc_r>
 800a728:	4605      	mov	r5, r0
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d0ed      	beq.n	800a70a <_realloc_r+0x1e>
 800a72e:	42bc      	cmp	r4, r7
 800a730:	4622      	mov	r2, r4
 800a732:	4631      	mov	r1, r6
 800a734:	bf28      	it	cs
 800a736:	463a      	movcs	r2, r7
 800a738:	f7ff fbb8 	bl	8009eac <memcpy>
 800a73c:	4631      	mov	r1, r6
 800a73e:	4640      	mov	r0, r8
 800a740:	f7ff fef4 	bl	800a52c <_free_r>
 800a744:	e7e1      	b.n	800a70a <_realloc_r+0x1e>
 800a746:	4635      	mov	r5, r6
 800a748:	e7df      	b.n	800a70a <_realloc_r+0x1e>
	...

0800a74c <_sbrk_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d06      	ldr	r5, [pc, #24]	; (800a768 <_sbrk_r+0x1c>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	602b      	str	r3, [r5, #0]
 800a758:	f7f6 fbaa 	bl	8000eb0 <_sbrk>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_sbrk_r+0x1a>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_sbrk_r+0x1a>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	2000231c 	.word	0x2000231c

0800a76c <__malloc_lock>:
 800a76c:	4801      	ldr	r0, [pc, #4]	; (800a774 <__malloc_lock+0x8>)
 800a76e:	f000 b811 	b.w	800a794 <__retarget_lock_acquire_recursive>
 800a772:	bf00      	nop
 800a774:	20002320 	.word	0x20002320

0800a778 <__malloc_unlock>:
 800a778:	4801      	ldr	r0, [pc, #4]	; (800a780 <__malloc_unlock+0x8>)
 800a77a:	f000 b80c 	b.w	800a796 <__retarget_lock_release_recursive>
 800a77e:	bf00      	nop
 800a780:	20002320 	.word	0x20002320

0800a784 <_malloc_usable_size_r>:
 800a784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a788:	1f18      	subs	r0, r3, #4
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	bfbc      	itt	lt
 800a78e:	580b      	ldrlt	r3, [r1, r0]
 800a790:	18c0      	addlt	r0, r0, r3
 800a792:	4770      	bx	lr

0800a794 <__retarget_lock_acquire_recursive>:
 800a794:	4770      	bx	lr

0800a796 <__retarget_lock_release_recursive>:
 800a796:	4770      	bx	lr

0800a798 <_init>:
 800a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79a:	bf00      	nop
 800a79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79e:	bc08      	pop	{r3}
 800a7a0:	469e      	mov	lr, r3
 800a7a2:	4770      	bx	lr

0800a7a4 <_fini>:
 800a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a6:	bf00      	nop
 800a7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7aa:	bc08      	pop	{r3}
 800a7ac:	469e      	mov	lr, r3
 800a7ae:	4770      	bx	lr
