
rybg211_ble5.1_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009860  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08009a00  08009a00  00019a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad4  08009ad4  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009ad4  08009ad4  00019ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009adc  08009adc  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ae0  08009ae0  00019ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f6c  20000160  08009c44  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020cc  08009c44  000220cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013664  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003317  00000000  00000000  000337f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00036b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00037988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191cc  00000000  00000000  000386b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013693  00000000  00000000  00051884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a2e8  00000000  00000000  00064f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef1ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e44  00000000  00000000  000ef250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099e8 	.word	0x080099e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	080099e8 	.word	0x080099e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fb52 	bl	8000c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f82c 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8e4 	bl	800076c <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8ba 	bl	800071c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f88e 	bl	80006c8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005ac:	f007 ff94 	bl	80084d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  rybg211_bleModuleInit();
 80005b0:	f008 fcb0 	bl	8008f14 <rybg211_bleModuleInit>

  rybg211_setDeviceName(hBleModule.txBuffer, "BLE Bridge");
 80005b4:	490b      	ldr	r1, [pc, #44]	; (80005e4 <main+0x50>)
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <main+0x54>)
 80005b8:	f008 fcc0 	bl	8008f3c <rybg211_setDeviceName>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80005bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c0:	490a      	ldr	r1, [pc, #40]	; (80005ec <main+0x58>)
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <main+0x5c>)
 80005c4:	f003 fa24 	bl	8003a10 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <main+0x60>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <main+0x60>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f022 0208 	bic.w	r2, r2, #8
 80005d6:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  main_UartTxTask();
 80005d8:	f000 f942 	bl	8000860 <main_UartTxTask>

	  main_UartRxTask();
 80005dc:	f000 f96c 	bl	80008b8 <main_UartRxTask>
	  main_UartTxTask();
 80005e0:	e7fa      	b.n	80005d8 <main+0x44>
 80005e2:	bf00      	nop
 80005e4:	08009a00 	.word	0x08009a00
 80005e8:	20001eb9 	.word	0x20001eb9
 80005ec:	20001fb9 	.word	0x20001fb9
 80005f0:	2000017c 	.word	0x2000017c
 80005f4:	200001c0 	.word	0x200001c0

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f008 fd86 	bl	8009118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <SystemClock_Config+0xc8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <SystemClock_Config+0xcc>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000668:	230f      	movs	r3, #15
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800066c:	2390      	movs	r3, #144	; 0x90
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000670:	2304      	movs	r3, #4
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000674:	2305      	movs	r3, #5
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fca3 	bl	8002fc8 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 f932 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2101      	movs	r1, #1
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 ff05 	bl	80034b8 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b4:	f000 f91c 	bl	80008f0 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_USART1_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 8000700:	f003 f8ba 	bl	8003878 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f8f1 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000017c 	.word	0x2000017c
 8000718:	40011000 	.word	0x40011000

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_DMA_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <MX_DMA_Init+0x4c>)
 800072c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_DMA_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	203a      	movs	r0, #58	; 0x3a
 8000744:	f000 fbed 	bl	8000f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000748:	203a      	movs	r0, #58	; 0x3a
 800074a:	f000 fc06 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2046      	movs	r0, #70	; 0x46
 8000754:	f000 fbe5 	bl	8000f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000758:	2046      	movs	r0, #70	; 0x46
 800075a:	f000 fbfe 	bl	8000f5a <HAL_NVIC_EnableIRQ>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_GPIO_Init+0x9c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <MX_GPIO_Init+0x9c>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_GPIO_Init+0x9c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f244 01e0 	movw	r1, #16608	; 0x40e0
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_GPIO_Init+0xa0>)
 80007de:	f001 f95d 	bl	8001a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODULE_RESET_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80007e2:	f244 03e0 	movw	r3, #16608	; 0x40e0
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0xa0>)
 80007fc:	f000 ffca 	bl	8001794 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020400 	.word	0x40020400

08000810 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	807b      	strh	r3, [r7, #2]
	hBleModule.controlFlags.flag.packetReceived = ENABLE;
 800081c:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <HAL_UARTEx_RxEventCallback+0x40>)
 800081e:	7813      	ldrb	r3, [r2, #0]
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	7013      	strb	r3, [r2, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 8000826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800082a:	490a      	ldr	r1, [pc, #40]	; (8000854 <HAL_UARTEx_RxEventCallback+0x44>)
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <HAL_UARTEx_RxEventCallback+0x48>)
 800082e:	f003 f8ef 	bl	8003a10 <HAL_UARTEx_ReceiveToIdle_DMA>

	hBleModule.rxPacketSize = Size;
 8000832:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_UARTEx_RxEventCallback+0x40>)
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	8093      	strh	r3, [r2, #4]

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_UARTEx_RxEventCallback+0x4c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <HAL_UARTEx_RxEventCallback+0x4c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 0208 	bic.w	r2, r2, #8
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20001ea4 	.word	0x20001ea4
 8000854:	20001fb9 	.word	0x20001fb9
 8000858:	2000017c 	.word	0x2000017c
 800085c:	200001c0 	.word	0x200001c0

08000860 <main_UartTxTask>:


void main_UartTxTask()
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hBleModule.txTimer > 1000))
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <main_UartTxTask+0x4c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d019      	beq.n	80008a6 <main_UartTxTask+0x46>
 8000872:	f000 fa4b 	bl	8000d0c <HAL_GetTick>
 8000876:	4602      	mov	r2, r0
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <main_UartTxTask+0x4c>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000882:	d910      	bls.n	80008a6 <main_UartTxTask+0x46>
	{
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <main_UartTxTask+0x4c>)
 8000886:	885b      	ldrh	r3, [r3, #2]
 8000888:	461a      	mov	r2, r3
 800088a:	4909      	ldr	r1, [pc, #36]	; (80008b0 <main_UartTxTask+0x50>)
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <main_UartTxTask+0x54>)
 800088e:	f003 f841 	bl	8003914 <HAL_UART_Transmit_DMA>

		hBleModule.controlFlags.flag.packetToTransmit = DISABLE;
 8000892:	4a06      	ldr	r2, [pc, #24]	; (80008ac <main_UartTxTask+0x4c>)
 8000894:	7813      	ldrb	r3, [r2, #0]
 8000896:	f36f 0341 	bfc	r3, #1, #1
 800089a:	7013      	strb	r3, [r2, #0]

		hBleModule.txTimer = HAL_GetTick();
 800089c:	f000 fa36 	bl	8000d0c <HAL_GetTick>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a02      	ldr	r2, [pc, #8]	; (80008ac <main_UartTxTask+0x4c>)
 80008a4:	60d3      	str	r3, [r2, #12]
	}
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20001ea4 	.word	0x20001ea4
 80008b0:	20001eb9 	.word	0x20001eb9
 80008b4:	2000017c 	.word	0x2000017c

080008b8 <main_UartRxTask>:

void main_UartRxTask()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetReceived)
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <main_UartRxTask+0x30>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00b      	beq.n	80008e2 <main_UartRxTask+0x2a>
	{
		rybg211_rxPacketParser(hBleModule.rxBuffer, hBleModule.rxPacketSize);
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <main_UartRxTask+0x30>)
 80008cc:	889b      	ldrh	r3, [r3, #4]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <main_UartRxTask+0x34>)
 80008d4:	f008 fb68 	bl	8008fa8 <rybg211_rxPacketParser>

		hBleModule.controlFlags.flag.packetReceived = DISABLE;
 80008d8:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <main_UartRxTask+0x30>)
 80008da:	7813      	ldrb	r3, [r2, #0]
 80008dc:	f36f 0300 	bfc	r3, #0, #1
 80008e0:	7013      	strb	r3, [r2, #0]

	}
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20001ea4 	.word	0x20001ea4
 80008ec:	20001fb9 	.word	0x20001fb9

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a4c      	ldr	r2, [pc, #304]	; (8000a9c <HAL_UART_MspInit+0x150>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <HAL_UART_MspInit+0x154>)
 8000976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000978:	4a49      	ldr	r2, [pc, #292]	; (8000aa0 <HAL_UART_MspInit+0x154>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6453      	str	r3, [r2, #68]	; 0x44
 8000980:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <HAL_UART_MspInit+0x154>)
 8000982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <HAL_UART_MspInit+0x154>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a42      	ldr	r2, [pc, #264]	; (8000aa0 <HAL_UART_MspInit+0x154>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b40      	ldr	r3, [pc, #256]	; (8000aa0 <HAL_UART_MspInit+0x154>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4837      	ldr	r0, [pc, #220]	; (8000aa4 <HAL_UART_MspInit+0x158>)
 80009c6:	f000 fee5 	bl	8001794 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 80009cc:	4a37      	ldr	r2, [pc, #220]	; (8000aac <HAL_UART_MspInit+0x160>)
 80009ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80009d0:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 80009d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d8:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009de:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 80009e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ec:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a0a:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 8000a0c:	f000 fac0 	bl	8000f90 <HAL_DMA_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000a16:	f7ff ff6b 	bl	80008f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a22      	ldr	r2, [pc, #136]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 8000a1e:	639a      	str	r2, [r3, #56]	; 0x38
 8000a20:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <HAL_UART_MspInit+0x15c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a28:	4a22      	ldr	r2, [pc, #136]	; (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a32:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a36:	2240      	movs	r2, #64	; 0x40
 8000a38:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a46:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a66:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a68:	f000 fa92 	bl	8000f90 <HAL_DMA_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000a72:	f7ff ff3d 	bl	80008f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <HAL_UART_MspInit+0x164>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	2025      	movs	r0, #37	; 0x25
 8000a88:	f000 fa4b 	bl	8000f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a8c:	2025      	movs	r0, #37	; 0x25
 8000a8e:	f000 fa64 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40011000 	.word	0x40011000
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	200001c0 	.word	0x200001c0
 8000aac:	40026440 	.word	0x40026440
 8000ab0:	20000220 	.word	0x20000220
 8000ab4:	400264b8 	.word	0x400264b8

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f8ee 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <USART1_IRQHandler+0x10>)
 8000b12:	f002 ffe3 	bl	8003adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000017c 	.word	0x2000017c

08000b20 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <DMA2_Stream2_IRQHandler+0x10>)
 8000b26:	f000 fbcb 	bl	80012c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200001c0 	.word	0x200001c0

08000b34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <OTG_FS_IRQHandler+0x10>)
 8000b3a:	f001 f918 	bl	8001d6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20001778 	.word	0x20001778

08000b48 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <DMA2_Stream7_IRQHandler+0x10>)
 8000b4e:	f000 fbb7 	bl	80012c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000220 	.word	0x20000220

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f008 fa7c 	bl	8009088 <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20020000 	.word	0x20020000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	20000280 	.word	0x20000280
 8000bc4:	200020d0 	.word	0x200020d0

08000bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf2:	490e      	ldr	r1, [pc, #56]	; (8000c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf4:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c08:	4c0b      	ldr	r4, [pc, #44]	; (8000c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c16:	f7ff ffd7 	bl	8000bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f008 fa3b 	bl	8009094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fcb9 	bl	8000594 <main>
  bx  lr    
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000c30:	08009ae4 	.word	0x08009ae4
  ldr r2, =_sbss
 8000c34:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000c38:	200020cc 	.word	0x200020cc

08000c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <HAL_Init+0x40>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_Init+0x40>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_Init+0x40>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f94f 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f000 f808 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fe42 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023c00 	.word	0x40023c00

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x54>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x58>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f967 	bl	8000f76 <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 f92f 	bl	8000f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_InitTick+0x5c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000284 	.word	0x20000284

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000284 	.word	0x20000284

08000d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d2c:	f7ff ffee 	bl	8000d0c <HAL_GetTick>
 8000d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3c:	d005      	beq.n	8000d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_Delay+0x44>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4a:	bf00      	nop
 8000d4c:	f7ff ffde 	bl	8000d0c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d8f7      	bhi.n	8000d4c <HAL_Delay+0x28>
  {
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	; (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	; (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f7ff ff8e 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff29 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff3e 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff8e 	bl	8000e60 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5d 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff31 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffa2 	bl	8000ec8 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff feb6 	bl	8000d0c <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e099      	b.n	80010e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fcc:	e00f      	b.n	8000fee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fce:	f7ff fe9d 	bl	8000d0c <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	d908      	bls.n	8000fee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2220      	movs	r2, #32
 8000fe0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e078      	b.n	80010e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1e8      	bne.n	8000fce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <HAL_DMA_Init+0x158>)
 8001008:	4013      	ands	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800101a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4313      	orrs	r3, r2
 800103e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	2b04      	cmp	r3, #4
 8001046:	d107      	bne.n	8001058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	4313      	orrs	r3, r2
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4313      	orrs	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f023 0307 	bic.w	r3, r3, #7
 800106e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	4313      	orrs	r3, r2
 8001078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	2b04      	cmp	r3, #4
 8001080:	d117      	bne.n	80010b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4313      	orrs	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00e      	beq.n	80010b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 fb01 	bl	800169c <DMA_CheckFifoParam>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d008      	beq.n	80010b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2240      	movs	r2, #64	; 0x40
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010ae:	2301      	movs	r3, #1
 80010b0:	e016      	b.n	80010e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fab8 	bl	8001630 <DMA_CalcBaseAndBitshift>
 80010c0:	4603      	mov	r3, r0
 80010c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c8:	223f      	movs	r2, #63	; 0x3f
 80010ca:	409a      	lsls	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	f010803f 	.word	0xf010803f

080010ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800110a:	2b01      	cmp	r3, #1
 800110c:	d101      	bne.n	8001112 <HAL_DMA_Start_IT+0x26>
 800110e:	2302      	movs	r3, #2
 8001110:	e040      	b.n	8001194 <HAL_DMA_Start_IT+0xa8>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d12f      	bne.n	8001186 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2202      	movs	r2, #2
 800112a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 fa4a 	bl	80015d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001144:	223f      	movs	r2, #63	; 0x3f
 8001146:	409a      	lsls	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0216 	orr.w	r2, r2, #22
 800115a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0208 	orr.w	r2, r2, #8
 8001172:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e005      	b.n	8001192 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800118e:	2302      	movs	r3, #2
 8001190:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011aa:	f7ff fdaf 	bl	8000d0c <HAL_GetTick>
 80011ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d008      	beq.n	80011ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e052      	b.n	8001274 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0216 	bic.w	r2, r2, #22
 80011dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	695a      	ldr	r2, [r3, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d103      	bne.n	80011fe <HAL_DMA_Abort+0x62>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0208 	bic.w	r2, r2, #8
 800120c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0201 	bic.w	r2, r2, #1
 800121c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121e:	e013      	b.n	8001248 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001220:	f7ff fd74 	bl	8000d0c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b05      	cmp	r3, #5
 800122c:	d90c      	bls.n	8001248 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2220      	movs	r2, #32
 8001232:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2203      	movs	r2, #3
 8001238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e015      	b.n	8001274 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1e4      	bne.n	8001220 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125a:	223f      	movs	r2, #63	; 0x3f
 800125c:	409a      	lsls	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d004      	beq.n	800129a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00c      	b.n	80012b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2205      	movs	r2, #5
 800129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0201 	bic.w	r2, r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012cc:	4b8e      	ldr	r3, [pc, #568]	; (8001508 <HAL_DMA_IRQHandler+0x248>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a8e      	ldr	r2, [pc, #568]	; (800150c <HAL_DMA_IRQHandler+0x24c>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0a9b      	lsrs	r3, r3, #10
 80012d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ea:	2208      	movs	r2, #8
 80012ec:	409a      	lsls	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d01a      	beq.n	800132c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0204 	bic.w	r2, r2, #4
 8001312:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001318:	2208      	movs	r2, #8
 800131a:	409a      	lsls	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001324:	f043 0201 	orr.w	r2, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	2201      	movs	r2, #1
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d012      	beq.n	8001362 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134e:	2201      	movs	r2, #1
 8001350:	409a      	lsls	r2, r3
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	f043 0202 	orr.w	r2, r3, #2
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001366:	2204      	movs	r2, #4
 8001368:	409a      	lsls	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d012      	beq.n	8001398 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001384:	2204      	movs	r2, #4
 8001386:	409a      	lsls	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001390:	f043 0204 	orr.w	r2, r3, #4
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	2210      	movs	r2, #16
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d043      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d03c      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	2210      	movs	r2, #16
 80013bc:	409a      	lsls	r2, r3
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d018      	beq.n	8001402 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d108      	bne.n	80013f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d024      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	4798      	blx	r3
 80013ee:	e01f      	b.n	8001430 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01b      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	4798      	blx	r3
 8001400:	e016      	b.n	8001430 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d107      	bne.n	8001420 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0208 	bic.w	r2, r2, #8
 800141e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	2220      	movs	r2, #32
 8001436:	409a      	lsls	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 808f 	beq.w	8001560 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8087 	beq.w	8001560 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	2220      	movs	r2, #32
 8001458:	409a      	lsls	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b05      	cmp	r3, #5
 8001468:	d136      	bne.n	80014d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0216 	bic.w	r2, r2, #22
 8001478:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001488:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <HAL_DMA_IRQHandler+0x1da>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0208 	bic.w	r2, r2, #8
 80014a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	223f      	movs	r2, #63	; 0x3f
 80014b0:	409a      	lsls	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d07e      	beq.n	80015cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	4798      	blx	r3
        }
        return;
 80014d6:	e079      	b.n	80015cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01d      	beq.n	8001522 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10d      	bne.n	8001510 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d031      	beq.n	8001560 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
 8001504:	e02c      	b.n	8001560 <HAL_DMA_IRQHandler+0x2a0>
 8001506:	bf00      	nop
 8001508:	20000000 	.word	0x20000000
 800150c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001514:	2b00      	cmp	r3, #0
 8001516:	d023      	beq.n	8001560 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
 8001520:	e01e      	b.n	8001560 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10f      	bne.n	8001550 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0210 	bic.w	r2, r2, #16
 800153e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001564:	2b00      	cmp	r3, #0
 8001566:	d032      	beq.n	80015ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d022      	beq.n	80015ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2205      	movs	r2, #5
 8001578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	3301      	adds	r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	429a      	cmp	r2, r3
 8001596:	d307      	bcc.n	80015a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f2      	bne.n	800158c <HAL_DMA_IRQHandler+0x2cc>
 80015a6:	e000      	b.n	80015aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	4798      	blx	r3
 80015ca:	e000      	b.n	80015ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80015cc:	bf00      	nop
    }
  }
}
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b40      	cmp	r3, #64	; 0x40
 8001600:	d108      	bne.n	8001614 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001612:	e007      	b.n	8001624 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	60da      	str	r2, [r3, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	3b10      	subs	r3, #16
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <DMA_CalcBaseAndBitshift+0x64>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <DMA_CalcBaseAndBitshift+0x68>)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d909      	bls.n	8001672 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001666:	f023 0303 	bic.w	r3, r3, #3
 800166a:	1d1a      	adds	r2, r3, #4
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	659a      	str	r2, [r3, #88]	; 0x58
 8001670:	e007      	b.n	8001682 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	aaaaaaab 	.word	0xaaaaaaab
 8001698:	08009a98 	.word	0x08009a98

0800169c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d11f      	bne.n	80016f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d856      	bhi.n	800176a <DMA_CheckFifoParam+0xce>
 80016bc:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <DMA_CheckFifoParam+0x28>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	080016d5 	.word	0x080016d5
 80016c8:	080016e7 	.word	0x080016e7
 80016cc:	080016d5 	.word	0x080016d5
 80016d0:	0800176b 	.word	0x0800176b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d046      	beq.n	800176e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e4:	e043      	b.n	800176e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016ee:	d140      	bne.n	8001772 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f4:	e03d      	b.n	8001772 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016fe:	d121      	bne.n	8001744 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d837      	bhi.n	8001776 <DMA_CheckFifoParam+0xda>
 8001706:	a201      	add	r2, pc, #4	; (adr r2, 800170c <DMA_CheckFifoParam+0x70>)
 8001708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170c:	0800171d 	.word	0x0800171d
 8001710:	08001723 	.word	0x08001723
 8001714:	0800171d 	.word	0x0800171d
 8001718:	08001735 	.word	0x08001735
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
      break;
 8001720:	e030      	b.n	8001784 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d025      	beq.n	800177a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001732:	e022      	b.n	800177a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800173c:	d11f      	bne.n	800177e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001742:	e01c      	b.n	800177e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d903      	bls.n	8001752 <DMA_CheckFifoParam+0xb6>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b03      	cmp	r3, #3
 800174e:	d003      	beq.n	8001758 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001750:	e018      	b.n	8001784 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
      break;
 8001756:	e015      	b.n	8001784 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00e      	beq.n	8001782 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
      break;
 8001768:	e00b      	b.n	8001782 <DMA_CheckFifoParam+0xe6>
      break;
 800176a:	bf00      	nop
 800176c:	e00a      	b.n	8001784 <DMA_CheckFifoParam+0xe8>
      break;
 800176e:	bf00      	nop
 8001770:	e008      	b.n	8001784 <DMA_CheckFifoParam+0xe8>
      break;
 8001772:	bf00      	nop
 8001774:	e006      	b.n	8001784 <DMA_CheckFifoParam+0xe8>
      break;
 8001776:	bf00      	nop
 8001778:	e004      	b.n	8001784 <DMA_CheckFifoParam+0xe8>
      break;
 800177a:	bf00      	nop
 800177c:	e002      	b.n	8001784 <DMA_CheckFifoParam+0xe8>
      break;   
 800177e:	bf00      	nop
 8001780:	e000      	b.n	8001784 <DMA_CheckFifoParam+0xe8>
      break;
 8001782:	bf00      	nop
    }
  } 
  
  return status; 
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e159      	b.n	8001a64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f040 8148 	bne.w	8001a5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d005      	beq.n	80017e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d130      	bne.n	8001848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800181c:	2201      	movs	r2, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 0201 	and.w	r2, r3, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b03      	cmp	r3, #3
 8001852:	d017      	beq.n	8001884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d123      	bne.n	80018d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	08da      	lsrs	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	69b9      	ldr	r1, [r7, #24]
 80018d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80a2 	beq.w	8001a5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a56      	ldr	r2, [pc, #344]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b54      	ldr	r3, [pc, #336]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001936:	4a52      	ldr	r2, [pc, #328]	; (8001a80 <HAL_GPIO_Init+0x2ec>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_GPIO_Init+0x2f0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d019      	beq.n	8001996 <HAL_GPIO_Init+0x202>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a48      	ldr	r2, [pc, #288]	; (8001a88 <HAL_GPIO_Init+0x2f4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0x1fe>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a47      	ldr	r2, [pc, #284]	; (8001a8c <HAL_GPIO_Init+0x2f8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00d      	beq.n	800198e <HAL_GPIO_Init+0x1fa>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a46      	ldr	r2, [pc, #280]	; (8001a90 <HAL_GPIO_Init+0x2fc>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d007      	beq.n	800198a <HAL_GPIO_Init+0x1f6>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a45      	ldr	r2, [pc, #276]	; (8001a94 <HAL_GPIO_Init+0x300>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_GPIO_Init+0x1f2>
 8001982:	2304      	movs	r3, #4
 8001984:	e008      	b.n	8001998 <HAL_GPIO_Init+0x204>
 8001986:	2307      	movs	r3, #7
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x204>
 800198a:	2303      	movs	r3, #3
 800198c:	e004      	b.n	8001998 <HAL_GPIO_Init+0x204>
 800198e:	2302      	movs	r3, #2
 8001990:	e002      	b.n	8001998 <HAL_GPIO_Init+0x204>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x204>
 8001996:	2300      	movs	r3, #0
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	f002 0203 	and.w	r2, r2, #3
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4093      	lsls	r3, r2
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a8:	4935      	ldr	r1, [pc, #212]	; (8001a80 <HAL_GPIO_Init+0x2ec>)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_GPIO_Init+0x304>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019da:	4a2f      	ldr	r2, [pc, #188]	; (8001a98 <HAL_GPIO_Init+0x304>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <HAL_GPIO_Init+0x304>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a04:	4a24      	ldr	r2, [pc, #144]	; (8001a98 <HAL_GPIO_Init+0x304>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_GPIO_Init+0x304>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a2e:	4a1a      	ldr	r2, [pc, #104]	; (8001a98 <HAL_GPIO_Init+0x304>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_GPIO_Init+0x304>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <HAL_GPIO_Init+0x304>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3301      	adds	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b0f      	cmp	r3, #15
 8001a68:	f67f aea2 	bls.w	80017b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40013800 	.word	0x40013800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020c00 	.word	0x40020c00
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40013c00 	.word	0x40013c00

08001a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aac:	787b      	ldrb	r3, [r7, #1]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab8:	e003      	b.n	8001ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	041a      	lsls	r2, r3, #16
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	619a      	str	r2, [r3, #24]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad0:	b08f      	sub	sp, #60	; 0x3c
 8001ad2:	af0a      	add	r7, sp, #40	; 0x28
 8001ad4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e10f      	b.n	8001d00 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f006 ff00 	bl	8008900 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2203      	movs	r2, #3
 8001b04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 f9d9 	bl	8004ed6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	687e      	ldr	r6, [r7, #4]
 8001b2c:	466d      	mov	r5, sp
 8001b2e:	f106 0410 	add.w	r4, r6, #16
 8001b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b42:	1d33      	adds	r3, r6, #4
 8001b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f003 f8b0 	bl	8004cac <USB_CoreInit>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0d0      	b.n	8001d00 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 f9c7 	bl	8004ef8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
 8001b6e:	e04a      	b.n	8001c06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	333d      	adds	r3, #61	; 0x3d
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	333c      	adds	r3, #60	; 0x3c
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	b298      	uxth	r0, r3
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3344      	adds	r3, #68	; 0x44
 8001bac:	4602      	mov	r2, r0
 8001bae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3340      	adds	r3, #64	; 0x40
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3348      	adds	r3, #72	; 0x48
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	334c      	adds	r3, #76	; 0x4c
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3354      	adds	r3, #84	; 0x54
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	3301      	adds	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3af      	bcc.n	8001b70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e044      	b.n	8001ca0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3b5      	bcc.n	8001c16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	687e      	ldr	r6, [r7, #4]
 8001cb2:	466d      	mov	r5, sp
 8001cb4:	f106 0410 	add.w	r4, r6, #16
 8001cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cc8:	1d33      	adds	r3, r6, #4
 8001cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ccc:	6838      	ldr	r0, [r7, #0]
 8001cce:	f003 f95f 	bl	8004f90 <USB_DevInit>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e00d      	b.n	8001d00 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f004 faae 	bl	800625a <USB_DevDisconnect>

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_PCD_Start+0x1c>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e020      	b.n	8001d66 <HAL_PCD_Start+0x5e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d109      	bne.n	8001d48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d005      	beq.n	8001d48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 f8b1 	bl	8004eb4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fa5e 	bl	8006218 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d6e:	b590      	push	{r4, r7, lr}
 8001d70:	b08d      	sub	sp, #52	; 0x34
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 fb1c 	bl	80063c2 <USB_GetMode>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 848a 	bne.w	80026a6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 fa80 	bl	800629c <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8480 	beq.w	80026a4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f004 fa6d 	bl	800629c <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d107      	bne.n	8001ddc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f002 0202 	and.w	r2, r2, #2
 8001dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fa5b 	bl	800629c <USB_ReadInterrupts>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	d161      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699a      	ldr	r2, [r3, #24]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0210 	bic.w	r2, r2, #16
 8001dfe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	f003 020f 	and.w	r2, r3, #15
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	0c5b      	lsrs	r3, r3, #17
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d124      	bne.n	8001e76 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d035      	beq.n	8001ea4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	6a38      	ldr	r0, [r7, #32]
 8001e4c:	f004 f892 	bl	8005f74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e5c:	441a      	add	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	6a1a      	ldr	r2, [r3, #32]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e6e:	441a      	add	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	621a      	str	r2, [r3, #32]
 8001e74:	e016      	b.n	8001ea4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	0c5b      	lsrs	r3, r3, #17
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d110      	bne.n	8001ea4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e88:	2208      	movs	r2, #8
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6a38      	ldr	r0, [r7, #32]
 8001e8e:	f004 f871 	bl	8005f74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	6a1a      	ldr	r2, [r3, #32]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e9e:	441a      	add	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0210 	orr.w	r2, r2, #16
 8001eb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 f9ef 	bl	800629c <USB_ReadInterrupts>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ec8:	f040 80a7 	bne.w	800201a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 f9f4 	bl	80062c2 <USB_ReadDevAllOutEpInterrupt>
 8001eda:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001edc:	e099      	b.n	8002012 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 808e 	beq.w	8002006 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 fa18 	bl	800632a <USB_ReadDevOutEPInterrupt>
 8001efa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f12:	461a      	mov	r2, r3
 8001f14:	2301      	movs	r3, #1
 8001f16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fec2 	bl	8002ca4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00c      	beq.n	8001f44 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f36:	461a      	mov	r2, r3
 8001f38:	2308      	movs	r3, #8
 8001f3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 ff98 	bl	8002e74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d030      	beq.n	8001fcc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	2b80      	cmp	r3, #128	; 0x80
 8001f74:	d109      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f88:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	78db      	ldrb	r3, [r3, #3]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d108      	bne.n	8001fba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2200      	movs	r2, #0
 8001fac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f006 fd9f 	bl	8008af8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2302      	movs	r3, #2
 8001fca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffe:	461a      	mov	r2, r3
 8002000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002004:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	3301      	adds	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	2b00      	cmp	r3, #0
 8002016:	f47f af62 	bne.w	8001ede <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f004 f93c 	bl	800629c <USB_ReadInterrupts>
 8002024:	4603      	mov	r3, r0
 8002026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800202a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800202e:	f040 80db 	bne.w	80021e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f004 f95d 	bl	80062f6 <USB_ReadDevAllInEpInterrupt>
 800203c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002042:	e0cd      	b.n	80021e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80c2 	beq.w	80021d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f004 f983 	bl	8006366 <USB_ReadDevInEPInterrupt>
 8002060:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d057      	beq.n	800211c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	2201      	movs	r2, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43db      	mvns	r3, r3
 8002086:	69f9      	ldr	r1, [r7, #28]
 8002088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800208c:	4013      	ands	r3, r2
 800208e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800209c:	461a      	mov	r2, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d132      	bne.n	8002110 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	334c      	adds	r3, #76	; 0x4c
 80020ba:	6819      	ldr	r1, [r3, #0]
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4403      	add	r3, r0
 80020ca:	3348      	adds	r3, #72	; 0x48
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4419      	add	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4403      	add	r3, r0
 80020de:	334c      	adds	r3, #76	; 0x4c
 80020e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d113      	bne.n	8002110 <HAL_PCD_IRQHandler+0x3a2>
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	3354      	adds	r3, #84	; 0x54
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d108      	bne.n	8002110 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002108:	461a      	mov	r2, r3
 800210a:	2101      	movs	r1, #1
 800210c:	f004 f98a 	bl	8006424 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f006 fc73 	bl	8008a02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	4413      	add	r3, r2
 800212e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002132:	461a      	mov	r2, r3
 8002134:	2308      	movs	r3, #8
 8002136:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800214e:	461a      	mov	r2, r3
 8002150:	2310      	movs	r3, #16
 8002152:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d008      	beq.n	8002170 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800216a:	461a      	mov	r2, r3
 800216c:	2340      	movs	r3, #64	; 0x40
 800216e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d023      	beq.n	80021c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800217a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217c:	6a38      	ldr	r0, [r7, #32]
 800217e:	f003 f86b 	bl	8005258 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	3338      	adds	r3, #56	; 0x38
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	78db      	ldrb	r3, [r3, #3]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d108      	bne.n	80021b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2200      	movs	r2, #0
 80021a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4619      	mov	r1, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f006 fcb6 	bl	8008b1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021bc:	461a      	mov	r2, r3
 80021be:	2302      	movs	r3, #2
 80021c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fcdb 	bl	8002b8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	3301      	adds	r3, #1
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f47f af2e 	bne.w	8002044 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 f855 	bl	800629c <USB_ReadInterrupts>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021fc:	d122      	bne.n	8002244 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002218:	2b01      	cmp	r3, #1
 800221a:	d108      	bne.n	800222e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002224:	2100      	movs	r1, #0
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fec2 	bl	8002fb0 <HAL_PCDEx_LPM_Callback>
 800222c:	e002      	b.n	8002234 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f006 fc54 	bl	8008adc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f004 f827 	bl	800629c <USB_ReadInterrupts>
 800224e:	4603      	mov	r3, r0
 8002250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002258:	d112      	bne.n	8002280 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d102      	bne.n	8002270 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f006 fc10 	bl	8008a90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800227e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f004 f809 	bl	800629c <USB_ReadInterrupts>
 800228a:	4603      	mov	r3, r0
 800228c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002294:	f040 80b7 	bne.w	8002406 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2110      	movs	r1, #16
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 ffd0 	bl	8005258 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022bc:	e046      	b.n	800234c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ca:	461a      	mov	r2, r3
 80022cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e2:	0151      	lsls	r1, r2, #5
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	440a      	add	r2, r1
 80022e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fe:	461a      	mov	r2, r3
 8002300:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002304:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002316:	0151      	lsls	r1, r2, #5
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	440a      	add	r2, r1
 800231c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002320:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002324:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002336:	0151      	lsls	r1, r2, #5
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	440a      	add	r2, r1
 800233c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002340:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002344:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	3301      	adds	r3, #1
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002352:	429a      	cmp	r2, r3
 8002354:	d3b3      	bcc.n	80022be <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002364:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002368:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002382:	f043 030b 	orr.w	r3, r3, #11
 8002386:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002398:	f043 030b 	orr.w	r3, r3, #11
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	e015      	b.n	80023cc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c6:	f043 030b 	orr.w	r3, r3, #11
 80023ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023f0:	461a      	mov	r2, r3
 80023f2:	f004 f817 	bl	8006424 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002404:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f003 ff46 	bl	800629c <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241a:	d124      	bne.n	8002466 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f003 ffdc 	bl	80063de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f002 ff91 	bl	8005352 <USB_GetDevSpeed>
 8002430:	4603      	mov	r3, r0
 8002432:	461a      	mov	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681c      	ldr	r4, [r3, #0]
 800243c:	f001 f9e8 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8002440:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	4620      	mov	r0, r4
 800244c:	f002 fc90 	bl	8004d70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f006 fafe 	bl	8008a52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002464:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 ff16 	bl	800629c <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d10a      	bne.n	8002490 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f006 fadb 	bl	8008a36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f002 0208 	and.w	r2, r2, #8
 800248e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f003 ff01 	bl	800629c <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a0:	2b80      	cmp	r3, #128	; 0x80
 80024a2:	d122      	bne.n	80024ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024b0:	2301      	movs	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
 80024b4:	e014      	b.n	80024e0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d105      	bne.n	80024da <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fb27 	bl	8002b28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d3e5      	bcc.n	80024b6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 fed4 	bl	800629c <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fe:	d13b      	bne.n	8002578 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002500:	2301      	movs	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
 8002504:	e02b      	b.n	800255e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	3340      	adds	r3, #64	; 0x40
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d115      	bne.n	8002558 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800252c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	da12      	bge.n	8002558 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	333f      	adds	r3, #63	; 0x3f
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800254e:	b2db      	uxtb	r3, r3
 8002550:	4619      	mov	r1, r3
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fae8 	bl	8002b28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	3301      	adds	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	429a      	cmp	r2, r3
 8002566:	d3ce      	bcc.n	8002506 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f003 fe8d 	bl	800629c <USB_ReadInterrupts>
 8002582:	4603      	mov	r3, r0
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800258c:	d155      	bne.n	800263a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800258e:	2301      	movs	r3, #1
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	e045      	b.n	8002620 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d12e      	bne.n	800261a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025be:	2b00      	cmp	r3, #0
 80025c0:	da2b      	bge.n	800261a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80025ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d121      	bne.n	800261a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002616:	6053      	str	r3, [r2, #4]
            break;
 8002618:	e007      	b.n	800262a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	3301      	adds	r3, #1
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	429a      	cmp	r2, r3
 8002628:	d3b4      	bcc.n	8002594 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002638:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f003 fe2c 	bl	800629c <USB_ReadInterrupts>
 8002644:	4603      	mov	r3, r0
 8002646:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264e:	d10a      	bne.n	8002666 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f006 fa75 	bl	8008b40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fe16 	bl	800629c <USB_ReadInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b04      	cmp	r3, #4
 8002678:	d115      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f006 fa65 	bl	8008b5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	430a      	orrs	r2, r1
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	e000      	b.n	80026a6 <HAL_PCD_IRQHandler+0x938>
      return;
 80026a4:	bf00      	nop
    }
  }
}
 80026a6:	3734      	adds	r7, #52	; 0x34
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}

080026ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_PCD_SetAddress+0x1a>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e013      	b.n	80026ee <HAL_PCD_SetAddress+0x42>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fd74 	bl	80061cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	4608      	mov	r0, r1
 8002700:	4611      	mov	r1, r2
 8002702:	461a      	mov	r2, r3
 8002704:	4603      	mov	r3, r0
 8002706:	70fb      	strb	r3, [r7, #3]
 8002708:	460b      	mov	r3, r1
 800270a:	803b      	strh	r3, [r7, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002718:	2b00      	cmp	r3, #0
 800271a:	da0f      	bge.n	800273c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	f003 020f 	and.w	r2, r3, #15
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	3338      	adds	r3, #56	; 0x38
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4413      	add	r3, r2
 8002730:	3304      	adds	r3, #4
 8002732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	705a      	strb	r2, [r3, #1]
 800273a:	e00f      	b.n	800275c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	f003 020f 	and.w	r2, r3, #15
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	3304      	adds	r3, #4
 8002754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	b2da      	uxtb	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002768:	883a      	ldrh	r2, [r7, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	78ba      	ldrb	r2, [r7, #2]
 8002772:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	785b      	ldrb	r3, [r3, #1]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002786:	78bb      	ldrb	r3, [r7, #2]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d102      	bne.n	8002792 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_PCD_EP_Open+0xaa>
 800279c:	2302      	movs	r3, #2
 800279e:	e00e      	b.n	80027be <HAL_PCD_EP_Open+0xc8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fdf4 	bl	800539c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80027bc:	7afb      	ldrb	r3, [r7, #11]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	da0f      	bge.n	80027fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	f003 020f 	and.w	r2, r3, #15
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	3338      	adds	r3, #56	; 0x38
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	3304      	adds	r3, #4
 80027f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	705a      	strb	r2, [r3, #1]
 80027f8:	e00f      	b.n	800281a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_PCD_EP_Close+0x6e>
 8002830:	2302      	movs	r3, #2
 8002832:	e00e      	b.n	8002852 <HAL_PCD_EP_Close+0x8c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68f9      	ldr	r1, [r7, #12]
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fe32 	bl	80054ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	460b      	mov	r3, r1
 8002868:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800286a:	7afb      	ldrb	r3, [r7, #11]
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	3304      	adds	r3, #4
 8002882:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800289c:	7afb      	ldrb	r3, [r7, #11]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d102      	bne.n	80028b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028b6:	7afb      	ldrb	r3, [r7, #11]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	6979      	ldr	r1, [r7, #20]
 80028ce:	f003 f911 	bl	8005af4 <USB_EP0StartXfer>
 80028d2:	e008      	b.n	80028e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	6979      	ldr	r1, [r7, #20]
 80028e2:	f002 febf 	bl	8005664 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 020f 	and.w	r2, r3, #15
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	460b      	mov	r3, r1
 800292e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	3338      	adds	r3, #56	; 0x38
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2200      	movs	r2, #0
 8002958:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2201      	movs	r2, #1
 800295e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	b2da      	uxtb	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800297a:	7afb      	ldrb	r3, [r7, #11]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	f003 f8af 	bl	8005af4 <USB_EP0StartXfer>
 8002996:	e008      	b.n	80029aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	6979      	ldr	r1, [r7, #20]
 80029a6:	f002 fe5d 	bl	8005664 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d901      	bls.n	80029d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e050      	b.n	8002a74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da0f      	bge.n	80029fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	3338      	adds	r3, #56	; 0x38
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	3304      	adds	r3, #4
 80029f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	705a      	strb	r2, [r3, #1]
 80029f8:	e00d      	b.n	8002a16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_PCD_EP_SetStall+0x82>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e01e      	b.n	8002a74 <HAL_PCD_EP_SetStall+0xc0>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 faed 	bl	8006024 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	b2d9      	uxtb	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a64:	461a      	mov	r2, r3
 8002a66:	f003 fcdd 	bl	8006424 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	f003 020f 	and.w	r2, r3, #15
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d901      	bls.n	8002a9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e042      	b.n	8002b20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da0f      	bge.n	8002ac2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 020f 	and.w	r2, r3, #15
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	3338      	adds	r3, #56	; 0x38
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	705a      	strb	r2, [r3, #1]
 8002ac0:	e00f      	b.n	8002ae2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	f003 020f 	and.w	r2, r3, #15
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_PCD_EP_ClrStall+0x86>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e00e      	b.n	8002b20 <HAL_PCD_EP_ClrStall+0xa4>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f003 faf5 	bl	8006100 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da0c      	bge.n	8002b56 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3338      	adds	r3, #56	; 0x38
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e00c      	b.n	8002b70 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	f003 020f 	and.w	r2, r3, #15
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68f9      	ldr	r1, [r7, #12]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 f914 	bl	8005da4 <USB_EPStopXfer>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b80:	7afb      	ldrb	r3, [r7, #11]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b08a      	sub	sp, #40	; 0x28
 8002b8e:	af02      	add	r7, sp, #8
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	3338      	adds	r3, #56	; 0x38
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	3304      	adds	r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d901      	bls.n	8002bc2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06c      	b.n	8002c9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d902      	bls.n	8002bde <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3303      	adds	r3, #3
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002be6:	e02b      	b.n	8002c40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d902      	bls.n	8002c04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	3303      	adds	r3, #3
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6919      	ldr	r1, [r3, #16]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	4603      	mov	r3, r0
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f003 f968 	bl	8005ef8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	441a      	add	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a1a      	ldr	r2, [r3, #32]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	441a      	add	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d809      	bhi.n	8002c6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1a      	ldr	r2, [r3, #32]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d203      	bcs.n	8002c6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1be      	bne.n	8002be8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d811      	bhi.n	8002c9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	6939      	ldr	r1, [r7, #16]
 8002c92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c96:	4013      	ands	r3, r2
 8002c98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	333c      	adds	r3, #60	; 0x3c
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d17b      	bne.n	8002dd2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d015      	beq.n	8002d10 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	4a61      	ldr	r2, [pc, #388]	; (8002e6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	f240 80b9 	bls.w	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80b3 	beq.w	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d06:	461a      	mov	r2, r3
 8002d08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0c:	6093      	str	r3, [r2, #8]
 8002d0e:	e0a7      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d26:	461a      	mov	r2, r3
 8002d28:	2320      	movs	r3, #32
 8002d2a:	6093      	str	r3, [r2, #8]
 8002d2c:	e098      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f040 8093 	bne.w	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	4a4b      	ldr	r2, [pc, #300]	; (8002e6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d90f      	bls.n	8002d62 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5e:	6093      	str	r3, [r2, #8]
 8002d60:	e07e      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	3304      	adds	r3, #4
 8002d76:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	0159      	lsls	r1, r3, #5
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	440b      	add	r3, r1
 8002d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d114      	bne.n	8002dc4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dac:	461a      	mov	r2, r3
 8002dae:	2101      	movs	r1, #1
 8002db0:	f003 fb38 	bl	8006424 <USB_EP0_OutStart>
 8002db4:	e006      	b.n	8002dc4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f005 fdfe 	bl	80089cc <HAL_PCD_DataOutStageCallback>
 8002dd0:	e046      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d124      	bne.n	8002e24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df0:	461a      	mov	r2, r3
 8002df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002df6:	6093      	str	r3, [r2, #8]
 8002df8:	e032      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e10:	461a      	mov	r2, r3
 8002e12:	2320      	movs	r3, #32
 8002e14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f005 fdd5 	bl	80089cc <HAL_PCD_DataOutStageCallback>
 8002e22:	e01d      	b.n	8002e60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d114      	bne.n	8002e54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d108      	bne.n	8002e54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2100      	movs	r1, #0
 8002e50:	f003 fae8 	bl	8006424 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f005 fdb6 	bl	80089cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	4f54300a 	.word	0x4f54300a
 8002e70:	4f54310a 	.word	0x4f54310a

08002e74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	333c      	adds	r3, #60	; 0x3c
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4a15      	ldr	r2, [pc, #84]	; (8002efc <PCD_EP_OutSetupPacket_int+0x88>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d90e      	bls.n	8002ec8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f005 fd6d 	bl	80089a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <PCD_EP_OutSetupPacket_int+0x88>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d90c      	bls.n	8002ef0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d108      	bne.n	8002ef0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2101      	movs	r1, #1
 8002eec:	f003 fa9a 	bl	8006424 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	4f54300a 	.word	0x4f54300a

08002f00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f1e:	883b      	ldrh	r3, [r7, #0]
 8002f20:	0419      	lsls	r1, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f2c:	e028      	b.n	8002f80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	4413      	add	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	e00d      	b.n	8002f5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	3340      	adds	r3, #64	; 0x40
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	4413      	add	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d3ec      	bcc.n	8002f42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f68:	883b      	ldrh	r3, [r7, #0]
 8002f6a:	0418      	lsls	r0, r3, #16
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	4302      	orrs	r2, r0
 8002f78:	3340      	adds	r3, #64	; 0x40
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	887a      	ldrh	r2, [r7, #2]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e267      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d075      	beq.n	80030d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fe6:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d00c      	beq.n	800300c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff2:	4b85      	ldr	r3, [pc, #532]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d112      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffe:	4b82      	ldr	r3, [pc, #520]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300a:	d10b      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	4b7e      	ldr	r3, [pc, #504]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d05b      	beq.n	80030d0 <HAL_RCC_OscConfig+0x108>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d157      	bne.n	80030d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e242      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302c:	d106      	bne.n	800303c <HAL_RCC_OscConfig+0x74>
 800302e:	4b76      	ldr	r3, [pc, #472]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a75      	ldr	r2, [pc, #468]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e01d      	b.n	8003078 <HAL_RCC_OscConfig+0xb0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x98>
 8003046:	4b70      	ldr	r3, [pc, #448]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6f      	ldr	r2, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800304c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	4b6d      	ldr	r3, [pc, #436]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6c      	ldr	r2, [pc, #432]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0xb0>
 8003060:	4b69      	ldr	r3, [pc, #420]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a68      	ldr	r2, [pc, #416]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b66      	ldr	r3, [pc, #408]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a65      	ldr	r2, [pc, #404]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fd fe44 	bl	8000d0c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003088:	f7fd fe40 	bl	8000d0c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e207      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0xc0>
 80030a6:	e014      	b.n	80030d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd fe30 	bl	8000d0c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fd fe2c 	bl	8000d0c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1f3      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	4b51      	ldr	r3, [pc, #324]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0xe8>
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030de:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d11c      	bne.n	8003130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f6:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d116      	bne.n	8003130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_RCC_OscConfig+0x152>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d001      	beq.n	800311a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e1c7      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4937      	ldr	r1, [pc, #220]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	e03a      	b.n	80031a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003138:	4b34      	ldr	r3, [pc, #208]	; (800320c <HAL_RCC_OscConfig+0x244>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fd fde5 	bl	8000d0c <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003146:	f7fd fde1 	bl	8000d0c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e1a8      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003164:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4925      	ldr	r1, [pc, #148]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_RCC_OscConfig+0x244>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fd fdc4 	bl	8000d0c <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003188:	f7fd fdc0 	bl	8000d0c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e187      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d036      	beq.n	8003220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_RCC_OscConfig+0x248>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fd fda4 	bl	8000d0c <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fd fda0 	bl	8000d0c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e167      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x200>
 80031e6:	e01b      	b.n	8003220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x248>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7fd fd8d 	bl	8000d0c <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f4:	e00e      	b.n	8003214 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fd fd89 	bl	8000d0c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d907      	bls.n	8003214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e150      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
 8003208:	40023800 	.word	0x40023800
 800320c:	42470000 	.word	0x42470000
 8003210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b88      	ldr	r3, [pc, #544]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ea      	bne.n	80031f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8097 	beq.w	800335c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b81      	ldr	r3, [pc, #516]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	4b7d      	ldr	r3, [pc, #500]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	4a7c      	ldr	r2, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	; 0x40
 800324e:	4b7a      	ldr	r3, [pc, #488]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b77      	ldr	r3, [pc, #476]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d118      	bne.n	800329c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4b74      	ldr	r3, [pc, #464]	; (800343c <HAL_RCC_OscConfig+0x474>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a73      	ldr	r2, [pc, #460]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7fd fd49 	bl	8000d0c <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327e:	f7fd fd45 	bl	8000d0c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e10c      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2ea>
 80032a4:	4b64      	ldr	r3, [pc, #400]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a63      	ldr	r2, [pc, #396]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	e01c      	b.n	80032ec <HAL_RCC_OscConfig+0x324>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x30c>
 80032ba:	4b5f      	ldr	r3, [pc, #380]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a5e      	ldr	r2, [pc, #376]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	4b5c      	ldr	r3, [pc, #368]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	4a5b      	ldr	r2, [pc, #364]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6713      	str	r3, [r2, #112]	; 0x70
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0x324>
 80032d4:	4b58      	ldr	r3, [pc, #352]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a57      	ldr	r2, [pc, #348]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	4b55      	ldr	r3, [pc, #340]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a54      	ldr	r2, [pc, #336]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032e6:	f023 0304 	bic.w	r3, r3, #4
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d015      	beq.n	8003320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fd fd0a 	bl	8000d0c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fd fd06 	bl	8000d0c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0cb      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	4b49      	ldr	r3, [pc, #292]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0ee      	beq.n	80032fc <HAL_RCC_OscConfig+0x334>
 800331e:	e014      	b.n	800334a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003320:	f7fd fcf4 	bl	8000d0c <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fd fcf0 	bl	8000d0c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0b5      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333e:	4b3e      	ldr	r3, [pc, #248]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1ee      	bne.n	8003328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b39      	ldr	r3, [pc, #228]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	4a38      	ldr	r2, [pc, #224]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a1 	beq.w	80034a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003366:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b08      	cmp	r3, #8
 8003370:	d05c      	beq.n	800342c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d141      	bne.n	80033fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fd fcc4 	bl	8000d0c <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7fd fcc0 	bl	8000d0c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e087      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	491b      	ldr	r1, [pc, #108]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7fd fc99 	bl	8000d0c <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033de:	f7fd fc95 	bl	8000d0c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e05c      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x416>
 80033fc:	e054      	b.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd fc82 	bl	8000d0c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7fd fc7e 	bl	8000d0c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e045      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x444>
 800342a:	e03d      	b.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e038      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
 8003438:	40023800 	.word	0x40023800
 800343c:	40007000 	.word	0x40007000
 8003440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <HAL_RCC_OscConfig+0x4ec>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d028      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d121      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d11a      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800347a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800347c:	4293      	cmp	r3, r2
 800347e:	d111      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	3b01      	subs	r3, #1
 800348e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800

080034b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0cc      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b68      	ldr	r3, [pc, #416]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d90c      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b65      	ldr	r3, [pc, #404]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0b8      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a58      	ldr	r2, [pc, #352]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003524:	4b53      	ldr	r3, [pc, #332]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800352e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	494d      	ldr	r1, [pc, #308]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d044      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d119      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e07f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d003      	beq.n	8003576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003572:	2b03      	cmp	r3, #3
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003576:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003586:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e067      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f023 0203 	bic.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4934      	ldr	r1, [pc, #208]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a8:	f7fd fbb0 	bl	8000d0c <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b0:	f7fd fbac 	bl	8000d0c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e04f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 020c 	and.w	r2, r3, #12
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d1eb      	bne.n	80035b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d20c      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e032      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4916      	ldr	r1, [pc, #88]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	490e      	ldr	r1, [pc, #56]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800363e:	f000 f821 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003642:	4602      	mov	r2, r0
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	490a      	ldr	r1, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd fb10 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023c00 	.word	0x40023c00
 8003674:	40023800 	.word	0x40023800
 8003678:	08009a80 	.word	0x08009a80
 800367c:	20000000 	.word	0x20000000
 8003680:	20000004 	.word	0x20000004

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b090      	sub	sp, #64	; 0x40
 800368a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
 8003690:	2300      	movs	r3, #0
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003694:	2300      	movs	r3, #0
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369c:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d00d      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x40>
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	f200 80a1 	bhi.w	80037f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x34>
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x3a>
 80036b6:	e09b      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b53      	ldr	r3, [pc, #332]	; (8003808 <HAL_RCC_GetSysClockFreq+0x184>)
 80036ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036bc:	e09b      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036be:	4b53      	ldr	r3, [pc, #332]	; (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036c2:	e098      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c4:	4b4f      	ldr	r3, [pc, #316]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ce:	4b4d      	ldr	r3, [pc, #308]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d028      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036da:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	2200      	movs	r2, #0
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	627a      	str	r2, [r7, #36]	; 0x24
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036ec:	2100      	movs	r1, #0
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036f0:	fb03 f201 	mul.w	r2, r3, r1
 80036f4:	2300      	movs	r3, #0
 80036f6:	fb00 f303 	mul.w	r3, r0, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	4a43      	ldr	r2, [pc, #268]	; (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036fe:	fba0 1202 	umull	r1, r2, r0, r2
 8003702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003704:	460a      	mov	r2, r1
 8003706:	62ba      	str	r2, [r7, #40]	; 0x28
 8003708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370a:	4413      	add	r3, r2
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	2200      	movs	r2, #0
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	61fa      	str	r2, [r7, #28]
 8003716:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800371a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800371e:	f7fc fdb7 	bl	8000290 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4613      	mov	r3, r2
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800372a:	e053      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372c:	4b35      	ldr	r3, [pc, #212]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	099b      	lsrs	r3, r3, #6
 8003732:	2200      	movs	r2, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	617a      	str	r2, [r7, #20]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800373e:	f04f 0b00 	mov.w	fp, #0
 8003742:	4652      	mov	r2, sl
 8003744:	465b      	mov	r3, fp
 8003746:	f04f 0000 	mov.w	r0, #0
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	0159      	lsls	r1, r3, #5
 8003750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003754:	0150      	lsls	r0, r2, #5
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	ebb2 080a 	subs.w	r8, r2, sl
 800375e:	eb63 090b 	sbc.w	r9, r3, fp
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800376e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003772:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003776:	ebb2 0408 	subs.w	r4, r2, r8
 800377a:	eb63 0509 	sbc.w	r5, r3, r9
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	00eb      	lsls	r3, r5, #3
 8003788:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800378c:	00e2      	lsls	r2, r4, #3
 800378e:	4614      	mov	r4, r2
 8003790:	461d      	mov	r5, r3
 8003792:	eb14 030a 	adds.w	r3, r4, sl
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	eb45 030b 	adc.w	r3, r5, fp
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037aa:	4629      	mov	r1, r5
 80037ac:	028b      	lsls	r3, r1, #10
 80037ae:	4621      	mov	r1, r4
 80037b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037b4:	4621      	mov	r1, r4
 80037b6:	028a      	lsls	r2, r1, #10
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	2200      	movs	r2, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	60fa      	str	r2, [r7, #12]
 80037c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037c8:	f7fc fd62 	bl	8000290 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4613      	mov	r3, r2
 80037d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	3301      	adds	r3, #1
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037ee:	e002      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetSysClockFreq+0x184>)
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3740      	adds	r7, #64	; 0x40
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400
 800380c:	017d7840 	.word	0x017d7840

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_RCC_GetHCLKFreq+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000000 	.word	0x20000000

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800382c:	f7ff fff0 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0a9b      	lsrs	r3, r3, #10
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4903      	ldr	r1, [pc, #12]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	08009a90 	.word	0x08009a90

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003854:	f7ff ffdc 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0b5b      	lsrs	r3, r3, #13
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	08009a90 	.word	0x08009a90

08003878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e03f      	b.n	800390a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd f854 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 ff81 	bl	80047c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08c      	sub	sp, #48	; 0x30
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b20      	cmp	r3, #32
 800392c:	d165      	bne.n	80039fa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_UART_Transmit_DMA+0x26>
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e05e      	b.n	80039fc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_UART_Transmit_DMA+0x38>
 8003948:	2302      	movs	r3, #2
 800394a:	e057      	b.n	80039fc <HAL_UART_Transmit_DMA+0xe8>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	88fa      	ldrh	r2, [r7, #6]
 800395e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2221      	movs	r2, #33	; 0x21
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003978:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <HAL_UART_Transmit_DMA+0xf0>)
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <HAL_UART_Transmit_DMA+0xf4>)
 8003982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003988:	4a20      	ldr	r2, [pc, #128]	; (8003a0c <HAL_UART_Transmit_DMA+0xf8>)
 800398a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	2200      	movs	r2, #0
 8003992:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003994:	f107 0308 	add.w	r3, r7, #8
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3304      	adds	r3, #4
 80039a8:	461a      	mov	r2, r3
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	f7fd fb9e 	bl	80010ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3314      	adds	r3, #20
 80039c8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	617b      	str	r3, [r7, #20]
   return(result);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3314      	adds	r3, #20
 80039e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e2:	627a      	str	r2, [r7, #36]	; 0x24
 80039e4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6a39      	ldr	r1, [r7, #32]
 80039e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e5      	bne.n	80039c2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
  }
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3730      	adds	r7, #48	; 0x30
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	0800405d 	.word	0x0800405d
 8003a08:	080040f7 	.word	0x080040f7
 8003a0c:	0800426f 	.word	0x0800426f

08003a10 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08c      	sub	sp, #48	; 0x30
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d152      	bne.n	8003ad0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e04b      	b.n	8003ad2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e044      	b.n	8003ad2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fc51 	bl	8004304 <UART_Start_Receive_DMA>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d12c      	bne.n	8003aca <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d125      	bne.n	8003ac4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f043 0310 	orr.w	r3, r3, #16
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aae:	627a      	str	r2, [r7, #36]	; 0x24
 8003ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6a39      	ldr	r1, [r7, #32]
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e5      	bne.n	8003a8e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003ac2:	e002      	b.n	8003aca <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ace:	e000      	b.n	8003ad2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3730      	adds	r7, #48	; 0x30
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b0ba      	sub	sp, #232	; 0xe8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_UART_IRQHandler+0x66>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fd87 	bl	800464e <UART_Receive_IT>
      return;
 8003b40:	e256      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80de 	beq.w	8003d08 <HAL_UART_IRQHandler+0x22c>
 8003b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80d1 	beq.w	8003d08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_UART_IRQHandler+0xae>
 8003b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_UART_IRQHandler+0xd2>
 8003b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f043 0202 	orr.w	r2, r3, #2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xf6>
 8003bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f043 0204 	orr.w	r2, r3, #4
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d011      	beq.n	8003c02 <HAL_UART_IRQHandler+0x126>
 8003bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d105      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f043 0208 	orr.w	r2, r3, #8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 81ed 	beq.w	8003fe6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_UART_IRQHandler+0x14e>
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fd12 	bl	800464e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <HAL_UART_IRQHandler+0x17a>
 8003c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04f      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fc1a 	bl	8004490 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d141      	bne.n	8003cee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3314      	adds	r3, #20
 8003c70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3314      	adds	r3, #20
 8003c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1d9      	bne.n	8003c6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d013      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	4a7d      	ldr	r2, [pc, #500]	; (8003eb8 <HAL_UART_IRQHandler+0x3dc>)
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fad6 	bl	800127c <HAL_DMA_Abort_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d016      	beq.n	8003d04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce4:	e00e      	b.n	8003d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f9ae 	bl	8004048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	e00a      	b.n	8003d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f9aa 	bl	8004048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	e006      	b.n	8003d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f9a6 	bl	8004048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d02:	e170      	b.n	8003fe6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	bf00      	nop
    return;
 8003d06:	e16e      	b.n	8003fe6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 814a 	bne.w	8003fa6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 8143 	beq.w	8003fa6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 813c 	beq.w	8003fa6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	f040 80b4 	bne.w	8003ebc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8140 	beq.w	8003fea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d72:	429a      	cmp	r2, r3
 8003d74:	f080 8139 	bcs.w	8003fea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8a:	f000 8088 	beq.w	8003e9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1d9      	bne.n	8003d8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e1      	bne.n	8003dda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3314      	adds	r3, #20
 8003e36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e3      	bne.n	8003e16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6e:	f023 0310 	bic.w	r3, r3, #16
 8003e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e80:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e3      	bne.n	8003e5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fd f97f 	bl	800119c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fc fcae 	bl	8000810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eb4:	e099      	b.n	8003fea <HAL_UART_IRQHandler+0x50e>
 8003eb6:	bf00      	nop
 8003eb8:	08004557 	.word	0x08004557
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 808b 	beq.w	8003fee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8086 	beq.w	8003fee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	330c      	adds	r3, #12
 8003f02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f06:	647a      	str	r2, [r7, #68]	; 0x44
 8003f08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e3      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	623b      	str	r3, [r7, #32]
   return(result);
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3314      	adds	r3, #20
 8003f3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f3e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e3      	bne.n	8003f1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0310 	bic.w	r3, r3, #16
 8003f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f84:	61fa      	str	r2, [r7, #28]
 8003f86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	69b9      	ldr	r1, [r7, #24]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	617b      	str	r3, [r7, #20]
   return(result);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e3      	bne.n	8003f60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fc fc36 	bl	8000810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fa4:	e023      	b.n	8003fee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x4ea>
 8003fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fadd 	bl	800457e <UART_Transmit_IT>
    return;
 8003fc4:	e014      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x514>
 8003fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d008      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fb1d 	bl	800461e <UART_EndTransmit_IT>
    return;
 8003fe4:	e004      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
    return;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
      return;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
      return;
 8003fee:	bf00      	nop
  }
}
 8003ff0:	37e8      	adds	r7, #232	; 0xe8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop

08003ff8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b090      	sub	sp, #64	; 0x40
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d137      	bne.n	80040e8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407a:	2200      	movs	r2, #0
 800407c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800407e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3314      	adds	r3, #20
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	623b      	str	r3, [r7, #32]
   return(result);
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
 8004096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800409e:	633a      	str	r2, [r7, #48]	; 0x30
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e5      	bne.n	800407e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	330c      	adds	r3, #12
 80040b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040d2:	61fa      	str	r2, [r7, #28]
 80040d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	69b9      	ldr	r1, [r7, #24]
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	617b      	str	r3, [r7, #20]
   return(result);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e5      	bne.n	80040b2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040e6:	e002      	b.n	80040ee <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80040e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040ea:	f7ff ff85 	bl	8003ff8 <HAL_UART_TxCpltCallback>
}
 80040ee:	bf00      	nop
 80040f0:	3740      	adds	r7, #64	; 0x40
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff ff81 	bl	800400c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b09c      	sub	sp, #112	; 0x70
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d172      	bne.n	8004214 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800412e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004130:	2200      	movs	r2, #0
 8004132:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004146:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800414a:	66bb      	str	r3, [r7, #104]	; 0x68
 800414c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004154:	65ba      	str	r2, [r7, #88]	; 0x58
 8004156:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800415a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e5      	bne.n	8004134 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3314      	adds	r3, #20
 800416e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	667b      	str	r3, [r7, #100]	; 0x64
 8004180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3314      	adds	r3, #20
 8004186:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004188:	647a      	str	r2, [r7, #68]	; 0x44
 800418a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800418e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e5      	bne.n	8004168 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3314      	adds	r3, #20
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	623b      	str	r3, [r7, #32]
   return(result);
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b2:	663b      	str	r3, [r7, #96]	; 0x60
 80041b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3314      	adds	r3, #20
 80041ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041bc:	633a      	str	r2, [r7, #48]	; 0x30
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e5      	bne.n	800419c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d119      	bne.n	8004214 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0310 	bic.w	r3, r3, #16
 80041f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004200:	61fa      	str	r2, [r7, #28]
 8004202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	69b9      	ldr	r1, [r7, #24]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	617b      	str	r3, [r7, #20]
   return(result);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e5      	bne.n	80041e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	2b01      	cmp	r3, #1
 800421a:	d106      	bne.n	800422a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800421c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004220:	4619      	mov	r1, r3
 8004222:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004224:	f7fc faf4 	bl	8000810 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004228:	e002      	b.n	8004230 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800422a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800422c:	f7ff fef8 	bl	8004020 <HAL_UART_RxCpltCallback>
}
 8004230:	bf00      	nop
 8004232:	3770      	adds	r7, #112	; 0x70
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	2b01      	cmp	r3, #1
 800424c:	d108      	bne.n	8004260 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	b29b      	uxth	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7fc fad9 	bl	8000810 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800425e:	e002      	b.n	8004266 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff fee7 	bl	8004034 <HAL_UART_RxHalfCpltCallback>
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428a:	2b80      	cmp	r3, #128	; 0x80
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b21      	cmp	r3, #33	; 0x21
 80042a0:	d108      	bne.n	80042b4 <UART_DMAError+0x46>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2200      	movs	r2, #0
 80042ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042ae:	68b8      	ldr	r0, [r7, #8]
 80042b0:	f000 f8c6 	bl	8004440 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	bf0c      	ite	eq
 80042c2:	2301      	moveq	r3, #1
 80042c4:	2300      	movne	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b22      	cmp	r3, #34	; 0x22
 80042d4:	d108      	bne.n	80042e8 <UART_DMAError+0x7a>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042e2:	68b8      	ldr	r0, [r7, #8]
 80042e4:	f000 f8d4 	bl	8004490 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	f043 0210 	orr.w	r2, r3, #16
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042f4:	68b8      	ldr	r0, [r7, #8]
 80042f6:	f7ff fea7 	bl	8004048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b098      	sub	sp, #96	; 0x60
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	88fa      	ldrh	r2, [r7, #6]
 800431c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2222      	movs	r2, #34	; 0x22
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	4a40      	ldr	r2, [pc, #256]	; (8004434 <UART_Start_Receive_DMA+0x130>)
 8004332:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	4a3f      	ldr	r2, [pc, #252]	; (8004438 <UART_Start_Receive_DMA+0x134>)
 800433a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	4a3e      	ldr	r2, [pc, #248]	; (800443c <UART_Start_Receive_DMA+0x138>)
 8004342:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	2200      	movs	r2, #0
 800434a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800434c:	f107 0308 	add.w	r3, r7, #8
 8004350:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	f7fc fec2 	bl	80010ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d019      	beq.n	80043c2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	330c      	adds	r3, #12
 8004394:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800439e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	330c      	adds	r3, #12
 80043ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043ae:	64fa      	str	r2, [r7, #76]	; 0x4c
 80043b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80043b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80043bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e5      	bne.n	800438e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3314      	adds	r3, #20
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	657b      	str	r3, [r7, #84]	; 0x54
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3314      	adds	r3, #20
 80043e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80043e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e5      	bne.n	80043c2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3314      	adds	r3, #20
 80043fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	617b      	str	r3, [r7, #20]
   return(result);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800440c:	653b      	str	r3, [r7, #80]	; 0x50
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3314      	adds	r3, #20
 8004414:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004416:	627a      	str	r2, [r7, #36]	; 0x24
 8004418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6a39      	ldr	r1, [r7, #32]
 800441c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	61fb      	str	r3, [r7, #28]
   return(result);
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3760      	adds	r7, #96	; 0x60
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	08004113 	.word	0x08004113
 8004438:	08004239 	.word	0x08004239
 800443c:	0800426f 	.word	0x0800426f

08004440 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004440:	b480      	push	{r7}
 8004442:	b089      	sub	sp, #36	; 0x24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	60bb      	str	r3, [r7, #8]
   return(result);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	61ba      	str	r2, [r7, #24]
 800446a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6979      	ldr	r1, [r7, #20]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	613b      	str	r3, [r7, #16]
   return(result);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e5      	bne.n	8004448 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004484:	bf00      	nop
 8004486:	3724      	adds	r7, #36	; 0x24
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b095      	sub	sp, #84	; 0x54
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044b8:	643a      	str	r2, [r7, #64]	; 0x40
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e5      	bne.n	8004498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3314      	adds	r3, #20
 80044d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	61fb      	str	r3, [r7, #28]
   return(result);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3314      	adds	r3, #20
 80044ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	d119      	bne.n	800453c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	60bb      	str	r3, [r7, #8]
   return(result);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f023 0310 	bic.w	r3, r3, #16
 800451e:	647b      	str	r3, [r7, #68]	; 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004528:	61ba      	str	r2, [r7, #24]
 800452a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6979      	ldr	r1, [r7, #20]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	613b      	str	r3, [r7, #16]
   return(result);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
}
 800454a:	bf00      	nop
 800454c:	3754      	adds	r7, #84	; 0x54
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff fd69 	bl	8004048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b21      	cmp	r3, #33	; 0x21
 8004590:	d13e      	bne.n	8004610 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459a:	d114      	bne.n	80045c6 <UART_Transmit_IT+0x48>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d110      	bne.n	80045c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	1c9a      	adds	r2, r3, #2
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	621a      	str	r2, [r3, #32]
 80045c4:	e008      	b.n	80045d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	1c59      	adds	r1, r3, #1
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6211      	str	r1, [r2, #32]
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4619      	mov	r1, r3
 80045e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10f      	bne.n	800460c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800460a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004634:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fcda 	bl	8003ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b08c      	sub	sp, #48	; 0x30
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b22      	cmp	r3, #34	; 0x22
 8004660:	f040 80ab 	bne.w	80047ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466c:	d117      	bne.n	800469e <UART_Receive_IT+0x50>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d113      	bne.n	800469e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468c:	b29a      	uxth	r2, r3
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	1c9a      	adds	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
 800469c:	e026      	b.n	80046ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b0:	d007      	beq.n	80046c2 <UART_Receive_IT+0x74>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <UART_Receive_IT+0x82>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e008      	b.n	80046e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4619      	mov	r1, r3
 80046fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d15a      	bne.n	80047b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0220 	bic.w	r2, r2, #32
 800470e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800471e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	2b01      	cmp	r3, #1
 800473e:	d135      	bne.n	80047ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	613b      	str	r3, [r7, #16]
   return(result);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f023 0310 	bic.w	r3, r3, #16
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	330c      	adds	r3, #12
 8004764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004766:	623a      	str	r2, [r7, #32]
 8004768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	69f9      	ldr	r1, [r7, #28]
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	61bb      	str	r3, [r7, #24]
   return(result);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e5      	bne.n	8004746 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b10      	cmp	r3, #16
 8004786:	d10a      	bne.n	800479e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7fc f833 	bl	8000810 <HAL_UARTEx_RxEventCallback>
 80047aa:	e002      	b.n	80047b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff fc37 	bl	8004020 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e002      	b.n	80047bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3730      	adds	r7, #48	; 0x30
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c8:	b0c0      	sub	sp, #256	; 0x100
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	68d9      	ldr	r1, [r3, #12]
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	ea40 0301 	orr.w	r3, r0, r1
 80047ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	431a      	orrs	r2, r3
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800481c:	f021 010c 	bic.w	r1, r1, #12
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800482a:	430b      	orrs	r3, r1
 800482c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	6999      	ldr	r1, [r3, #24]
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	ea40 0301 	orr.w	r3, r0, r1
 800484a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b8f      	ldr	r3, [pc, #572]	; (8004a90 <UART_SetConfig+0x2cc>)
 8004854:	429a      	cmp	r2, r3
 8004856:	d005      	beq.n	8004864 <UART_SetConfig+0xa0>
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b8d      	ldr	r3, [pc, #564]	; (8004a94 <UART_SetConfig+0x2d0>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d104      	bne.n	800486e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004864:	f7fe fff4 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8004868:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800486c:	e003      	b.n	8004876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800486e:	f7fe ffdb 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004872:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004880:	f040 810c 	bne.w	8004a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800488e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004896:	4622      	mov	r2, r4
 8004898:	462b      	mov	r3, r5
 800489a:	1891      	adds	r1, r2, r2
 800489c:	65b9      	str	r1, [r7, #88]	; 0x58
 800489e:	415b      	adcs	r3, r3
 80048a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048a6:	4621      	mov	r1, r4
 80048a8:	eb12 0801 	adds.w	r8, r2, r1
 80048ac:	4629      	mov	r1, r5
 80048ae:	eb43 0901 	adc.w	r9, r3, r1
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c6:	4690      	mov	r8, r2
 80048c8:	4699      	mov	r9, r3
 80048ca:	4623      	mov	r3, r4
 80048cc:	eb18 0303 	adds.w	r3, r8, r3
 80048d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048d4:	462b      	mov	r3, r5
 80048d6:	eb49 0303 	adc.w	r3, r9, r3
 80048da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048f2:	460b      	mov	r3, r1
 80048f4:	18db      	adds	r3, r3, r3
 80048f6:	653b      	str	r3, [r7, #80]	; 0x50
 80048f8:	4613      	mov	r3, r2
 80048fa:	eb42 0303 	adc.w	r3, r2, r3
 80048fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004908:	f7fb fcc2 	bl	8000290 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4b61      	ldr	r3, [pc, #388]	; (8004a98 <UART_SetConfig+0x2d4>)
 8004912:	fba3 2302 	umull	r2, r3, r3, r2
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	011c      	lsls	r4, r3, #4
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004924:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	1891      	adds	r1, r2, r2
 8004932:	64b9      	str	r1, [r7, #72]	; 0x48
 8004934:	415b      	adcs	r3, r3
 8004936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800493c:	4641      	mov	r1, r8
 800493e:	eb12 0a01 	adds.w	sl, r2, r1
 8004942:	4649      	mov	r1, r9
 8004944:	eb43 0b01 	adc.w	fp, r3, r1
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800495c:	4692      	mov	sl, r2
 800495e:	469b      	mov	fp, r3
 8004960:	4643      	mov	r3, r8
 8004962:	eb1a 0303 	adds.w	r3, sl, r3
 8004966:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800496a:	464b      	mov	r3, r9
 800496c:	eb4b 0303 	adc.w	r3, fp, r3
 8004970:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004980:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004988:	460b      	mov	r3, r1
 800498a:	18db      	adds	r3, r3, r3
 800498c:	643b      	str	r3, [r7, #64]	; 0x40
 800498e:	4613      	mov	r3, r2
 8004990:	eb42 0303 	adc.w	r3, r2, r3
 8004994:	647b      	str	r3, [r7, #68]	; 0x44
 8004996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800499a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800499e:	f7fb fc77 	bl	8000290 <__aeabi_uldivmod>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <UART_SetConfig+0x2d4>)
 80049aa:	fba3 2301 	umull	r2, r3, r3, r1
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2264      	movs	r2, #100	; 0x64
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	1acb      	subs	r3, r1, r3
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049be:	4b36      	ldr	r3, [pc, #216]	; (8004a98 <UART_SetConfig+0x2d4>)
 80049c0:	fba3 2302 	umull	r2, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049cc:	441c      	add	r4, r3
 80049ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80049e8:	415b      	adcs	r3, r3
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049f0:	4641      	mov	r1, r8
 80049f2:	1851      	adds	r1, r2, r1
 80049f4:	6339      	str	r1, [r7, #48]	; 0x30
 80049f6:	4649      	mov	r1, r9
 80049f8:	414b      	adcs	r3, r1
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a08:	4659      	mov	r1, fp
 8004a0a:	00cb      	lsls	r3, r1, #3
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a12:	4651      	mov	r1, sl
 8004a14:	00ca      	lsls	r2, r1, #3
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a24:	464b      	mov	r3, r9
 8004a26:	460a      	mov	r2, r1
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a44:	460b      	mov	r3, r1
 8004a46:	18db      	adds	r3, r3, r3
 8004a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a5a:	f7fb fc19 	bl	8000290 <__aeabi_uldivmod>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <UART_SetConfig+0x2d4>)
 8004a64:	fba3 1302 	umull	r1, r3, r3, r2
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	2164      	movs	r1, #100	; 0x64
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	3332      	adds	r3, #50	; 0x32
 8004a76:	4a08      	ldr	r2, [pc, #32]	; (8004a98 <UART_SetConfig+0x2d4>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	f003 0207 	and.w	r2, r3, #7
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4422      	add	r2, r4
 8004a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a8c:	e105      	b.n	8004c9a <UART_SetConfig+0x4d6>
 8004a8e:	bf00      	nop
 8004a90:	40011000 	.word	0x40011000
 8004a94:	40011400 	.word	0x40011400
 8004a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aae:	4642      	mov	r2, r8
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	1891      	adds	r1, r2, r2
 8004ab4:	6239      	str	r1, [r7, #32]
 8004ab6:	415b      	adcs	r3, r3
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004abe:	4641      	mov	r1, r8
 8004ac0:	1854      	adds	r4, r2, r1
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	eb43 0501 	adc.w	r5, r3, r1
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	00eb      	lsls	r3, r5, #3
 8004ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ad6:	00e2      	lsls	r2, r4, #3
 8004ad8:	4614      	mov	r4, r2
 8004ada:	461d      	mov	r5, r3
 8004adc:	4643      	mov	r3, r8
 8004ade:	18e3      	adds	r3, r4, r3
 8004ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	eb45 0303 	adc.w	r3, r5, r3
 8004aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004afa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	008b      	lsls	r3, r1, #2
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b14:	4621      	mov	r1, r4
 8004b16:	008a      	lsls	r2, r1, #2
 8004b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b1c:	f7fb fbb8 	bl	8000290 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4b60      	ldr	r3, [pc, #384]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004b26:	fba3 2302 	umull	r2, r3, r3, r2
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	011c      	lsls	r4, r3, #4
 8004b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	61b9      	str	r1, [r7, #24]
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b50:	4641      	mov	r1, r8
 8004b52:	1851      	adds	r1, r2, r1
 8004b54:	6139      	str	r1, [r7, #16]
 8004b56:	4649      	mov	r1, r9
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b68:	4659      	mov	r1, fp
 8004b6a:	00cb      	lsls	r3, r1, #3
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b72:	4651      	mov	r1, sl
 8004b74:	00ca      	lsls	r2, r1, #3
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b84:	464b      	mov	r3, r9
 8004b86:	460a      	mov	r2, r1
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ba8:	4649      	mov	r1, r9
 8004baa:	008b      	lsls	r3, r1, #2
 8004bac:	4641      	mov	r1, r8
 8004bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	008a      	lsls	r2, r1, #2
 8004bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bba:	f7fb fb69 	bl	8000290 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4b39      	ldr	r3, [pc, #228]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	2164      	movs	r1, #100	; 0x64
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	3332      	adds	r3, #50	; 0x32
 8004bd6:	4a34      	ldr	r2, [pc, #208]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004be2:	441c      	add	r4, r3
 8004be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be8:	2200      	movs	r2, #0
 8004bea:	673b      	str	r3, [r7, #112]	; 0x70
 8004bec:	677a      	str	r2, [r7, #116]	; 0x74
 8004bee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	1891      	adds	r1, r2, r2
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	415b      	adcs	r3, r3
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c02:	4641      	mov	r1, r8
 8004c04:	1851      	adds	r1, r2, r1
 8004c06:	6039      	str	r1, [r7, #0]
 8004c08:	4649      	mov	r1, r9
 8004c0a:	414b      	adcs	r3, r1
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c1a:	4659      	mov	r1, fp
 8004c1c:	00cb      	lsls	r3, r1, #3
 8004c1e:	4651      	mov	r1, sl
 8004c20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c24:	4651      	mov	r1, sl
 8004c26:	00ca      	lsls	r2, r1, #3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4642      	mov	r2, r8
 8004c30:	189b      	adds	r3, r3, r2
 8004c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c34:	464b      	mov	r3, r9
 8004c36:	460a      	mov	r2, r1
 8004c38:	eb42 0303 	adc.w	r3, r2, r3
 8004c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	663b      	str	r3, [r7, #96]	; 0x60
 8004c48:	667a      	str	r2, [r7, #100]	; 0x64
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c56:	4649      	mov	r1, r9
 8004c58:	008b      	lsls	r3, r1, #2
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c60:	4641      	mov	r1, r8
 8004c62:	008a      	lsls	r2, r1, #2
 8004c64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c68:	f7fb fb12 	bl	8000290 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004c72:	fba3 1302 	umull	r1, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2164      	movs	r1, #100	; 0x64
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	3332      	adds	r3, #50	; 0x32
 8004c84:	4a08      	ldr	r2, [pc, #32]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004c86:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	f003 020f 	and.w	r2, r3, #15
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4422      	add	r2, r4
 8004c98:	609a      	str	r2, [r3, #8]
}
 8004c9a:	bf00      	nop
 8004c9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca6:	bf00      	nop
 8004ca8:	51eb851f 	.word	0x51eb851f

08004cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cac:	b084      	sub	sp, #16
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	f107 001c 	add.w	r0, r7, #28
 8004cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d122      	bne.n	8004d0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d105      	bne.n	8004cfe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f001 fbee 	bl	80064e0 <USB_CoreReset>
 8004d04:	4603      	mov	r3, r0
 8004d06:	73fb      	strb	r3, [r7, #15]
 8004d08:	e01a      	b.n	8004d40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 fbe2 	bl	80064e0 <USB_CoreReset>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	639a      	str	r2, [r3, #56]	; 0x38
 8004d32:	e005      	b.n	8004d40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d10b      	bne.n	8004d5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f043 0206 	orr.w	r2, r3, #6
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d6a:	b004      	add	sp, #16
 8004d6c:	4770      	bx	lr
	...

08004d70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d165      	bne.n	8004e50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4a41      	ldr	r2, [pc, #260]	; (8004e8c <USB_SetTurnaroundTime+0x11c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d906      	bls.n	8004d9a <USB_SetTurnaroundTime+0x2a>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4a40      	ldr	r2, [pc, #256]	; (8004e90 <USB_SetTurnaroundTime+0x120>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d202      	bcs.n	8004d9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d94:	230f      	movs	r3, #15
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e062      	b.n	8004e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4a3c      	ldr	r2, [pc, #240]	; (8004e90 <USB_SetTurnaroundTime+0x120>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d306      	bcc.n	8004db0 <USB_SetTurnaroundTime+0x40>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4a3b      	ldr	r2, [pc, #236]	; (8004e94 <USB_SetTurnaroundTime+0x124>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d202      	bcs.n	8004db0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004daa:	230e      	movs	r3, #14
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e057      	b.n	8004e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4a38      	ldr	r2, [pc, #224]	; (8004e94 <USB_SetTurnaroundTime+0x124>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d306      	bcc.n	8004dc6 <USB_SetTurnaroundTime+0x56>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4a37      	ldr	r2, [pc, #220]	; (8004e98 <USB_SetTurnaroundTime+0x128>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d202      	bcs.n	8004dc6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004dc0:	230d      	movs	r3, #13
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e04c      	b.n	8004e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4a33      	ldr	r2, [pc, #204]	; (8004e98 <USB_SetTurnaroundTime+0x128>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d306      	bcc.n	8004ddc <USB_SetTurnaroundTime+0x6c>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4a32      	ldr	r2, [pc, #200]	; (8004e9c <USB_SetTurnaroundTime+0x12c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d802      	bhi.n	8004ddc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004dd6:	230c      	movs	r3, #12
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e041      	b.n	8004e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4a2f      	ldr	r2, [pc, #188]	; (8004e9c <USB_SetTurnaroundTime+0x12c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d906      	bls.n	8004df2 <USB_SetTurnaroundTime+0x82>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4a2e      	ldr	r2, [pc, #184]	; (8004ea0 <USB_SetTurnaroundTime+0x130>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d802      	bhi.n	8004df2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004dec:	230b      	movs	r3, #11
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e036      	b.n	8004e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4a2a      	ldr	r2, [pc, #168]	; (8004ea0 <USB_SetTurnaroundTime+0x130>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d906      	bls.n	8004e08 <USB_SetTurnaroundTime+0x98>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4a29      	ldr	r2, [pc, #164]	; (8004ea4 <USB_SetTurnaroundTime+0x134>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d802      	bhi.n	8004e08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e02:	230a      	movs	r3, #10
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	e02b      	b.n	8004e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <USB_SetTurnaroundTime+0x134>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d906      	bls.n	8004e1e <USB_SetTurnaroundTime+0xae>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <USB_SetTurnaroundTime+0x138>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d202      	bcs.n	8004e1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e18:	2309      	movs	r3, #9
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e020      	b.n	8004e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <USB_SetTurnaroundTime+0x138>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d306      	bcc.n	8004e34 <USB_SetTurnaroundTime+0xc4>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4a20      	ldr	r2, [pc, #128]	; (8004eac <USB_SetTurnaroundTime+0x13c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d802      	bhi.n	8004e34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e2e:	2308      	movs	r3, #8
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e015      	b.n	8004e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <USB_SetTurnaroundTime+0x13c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d906      	bls.n	8004e4a <USB_SetTurnaroundTime+0xda>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a1c      	ldr	r2, [pc, #112]	; (8004eb0 <USB_SetTurnaroundTime+0x140>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d202      	bcs.n	8004e4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e44:	2307      	movs	r3, #7
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e00a      	b.n	8004e60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e4a:	2306      	movs	r3, #6
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	e007      	b.n	8004e60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e56:	2309      	movs	r3, #9
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e001      	b.n	8004e60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e5c:	2309      	movs	r3, #9
 8004e5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	029b      	lsls	r3, r3, #10
 8004e74:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	00d8acbf 	.word	0x00d8acbf
 8004e90:	00e4e1c0 	.word	0x00e4e1c0
 8004e94:	00f42400 	.word	0x00f42400
 8004e98:	01067380 	.word	0x01067380
 8004e9c:	011a499f 	.word	0x011a499f
 8004ea0:	01312cff 	.word	0x01312cff
 8004ea4:	014ca43f 	.word	0x014ca43f
 8004ea8:	016e3600 	.word	0x016e3600
 8004eac:	01a6ab1f 	.word	0x01a6ab1f
 8004eb0:	01e84800 	.word	0x01e84800

08004eb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f043 0201 	orr.w	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d115      	bne.n	8004f46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f26:	2001      	movs	r0, #1
 8004f28:	f7fb fefc 	bl	8000d24 <HAL_Delay>
      ms++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f001 fa45 	bl	80063c2 <USB_GetMode>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d01e      	beq.n	8004f7c <USB_SetCurrentMode+0x84>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b31      	cmp	r3, #49	; 0x31
 8004f42:	d9f0      	bls.n	8004f26 <USB_SetCurrentMode+0x2e>
 8004f44:	e01a      	b.n	8004f7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d115      	bne.n	8004f78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f58:	2001      	movs	r0, #1
 8004f5a:	f7fb fee3 	bl	8000d24 <HAL_Delay>
      ms++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3301      	adds	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f001 fa2c 	bl	80063c2 <USB_GetMode>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <USB_SetCurrentMode+0x84>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b31      	cmp	r3, #49	; 0x31
 8004f74:	d9f0      	bls.n	8004f58 <USB_SetCurrentMode+0x60>
 8004f76:	e001      	b.n	8004f7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e005      	b.n	8004f88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b32      	cmp	r3, #50	; 0x32
 8004f80:	d101      	bne.n	8004f86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f90:	b084      	sub	sp, #16
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b086      	sub	sp, #24
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	e009      	b.n	8004fc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	3340      	adds	r3, #64	; 0x40
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	2b0e      	cmp	r3, #14
 8004fc8:	d9f2      	bls.n	8004fb0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d11c      	bne.n	800500a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fde:	f043 0302 	orr.w	r3, r3, #2
 8004fe2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
 8005008:	e00b      	b.n	8005022 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005028:	461a      	mov	r2, r3
 800502a:	2300      	movs	r3, #0
 800502c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005034:	4619      	mov	r1, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503c:	461a      	mov	r2, r3
 800503e:	680b      	ldr	r3, [r1, #0]
 8005040:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	2b01      	cmp	r3, #1
 8005046:	d10c      	bne.n	8005062 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800504e:	2100      	movs	r1, #0
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f965 	bl	8005320 <USB_SetDevSpeed>
 8005056:	e008      	b.n	800506a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005058:	2101      	movs	r1, #1
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f960 	bl	8005320 <USB_SetDevSpeed>
 8005060:	e003      	b.n	800506a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005062:	2103      	movs	r1, #3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f95b 	bl	8005320 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800506a:	2110      	movs	r1, #16
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8f3 	bl	8005258 <USB_FlushTxFifo>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f91f 	bl	80052c0 <USB_FlushRxFifo>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005092:	461a      	mov	r2, r3
 8005094:	2300      	movs	r3, #0
 8005096:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	461a      	mov	r2, r3
 80050a0:	2300      	movs	r3, #0
 80050a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	461a      	mov	r2, r3
 80050ac:	2300      	movs	r3, #0
 80050ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050b0:	2300      	movs	r3, #0
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	e043      	b.n	800513e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050cc:	d118      	bne.n	8005100 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	461a      	mov	r2, r3
 80050e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	e013      	b.n	8005112 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	461a      	mov	r2, r3
 80050f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e008      	b.n	8005112 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	461a      	mov	r2, r3
 800510e:	2300      	movs	r3, #0
 8005110:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511e:	461a      	mov	r2, r3
 8005120:	2300      	movs	r3, #0
 8005122:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	461a      	mov	r2, r3
 8005132:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005136:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	3301      	adds	r3, #1
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	429a      	cmp	r2, r3
 8005144:	d3b7      	bcc.n	80050b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005146:	2300      	movs	r3, #0
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	e043      	b.n	80051d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800515e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005162:	d118      	bne.n	8005196 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005176:	461a      	mov	r2, r3
 8005178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	e013      	b.n	80051a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	461a      	mov	r2, r3
 800518e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	e008      	b.n	80051a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a2:	461a      	mov	r2, r3
 80051a4:	2300      	movs	r3, #0
 80051a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b4:	461a      	mov	r2, r3
 80051b6:	2300      	movs	r3, #0
 80051b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	461a      	mov	r2, r3
 80051c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	3301      	adds	r3, #1
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d3b7      	bcc.n	800514c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2b00      	cmp	r3, #0
 8005202:	d105      	bne.n	8005210 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f043 0210 	orr.w	r2, r3, #16
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <USB_DevInit+0x2c4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800521c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f043 0208 	orr.w	r2, r3, #8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800522e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005230:	2b01      	cmp	r3, #1
 8005232:	d107      	bne.n	8005244 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800523c:	f043 0304 	orr.w	r3, r3, #4
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005244:	7dfb      	ldrb	r3, [r7, #23]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005250:	b004      	add	sp, #16
 8005252:	4770      	bx	lr
 8005254:	803c3800 	.word	0x803c3800

08005258 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3301      	adds	r3, #1
 800526a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <USB_FlushTxFifo+0x64>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d901      	bls.n	8005278 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e01b      	b.n	80052b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	daf2      	bge.n	8005266 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	019b      	lsls	r3, r3, #6
 8005288:	f043 0220 	orr.w	r2, r3, #32
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4a08      	ldr	r2, [pc, #32]	; (80052bc <USB_FlushTxFifo+0x64>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e006      	b.n	80052b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d0f0      	beq.n	8005290 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	00030d40 	.word	0x00030d40

080052c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3301      	adds	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a11      	ldr	r2, [pc, #68]	; (800531c <USB_FlushRxFifo+0x5c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e018      	b.n	8005310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	daf2      	bge.n	80052cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2210      	movs	r2, #16
 80052ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a08      	ldr	r2, [pc, #32]	; (800531c <USB_FlushRxFifo+0x5c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e006      	b.n	8005310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b10      	cmp	r3, #16
 800530c:	d0f0      	beq.n	80052f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	00030d40 	.word	0x00030d40

08005320 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005340:	4313      	orrs	r3, r2
 8005342:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005352:	b480      	push	{r7}
 8005354:	b087      	sub	sp, #28
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0306 	and.w	r3, r3, #6
 800536a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d102      	bne.n	8005378 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005372:	2300      	movs	r3, #0
 8005374:	75fb      	strb	r3, [r7, #23]
 8005376:	e00a      	b.n	800538e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d002      	beq.n	8005384 <USB_GetDevSpeed+0x32>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b06      	cmp	r3, #6
 8005382:	d102      	bne.n	800538a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005384:	2302      	movs	r3, #2
 8005386:	75fb      	strb	r3, [r7, #23]
 8005388:	e001      	b.n	800538e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800538a:	230f      	movs	r3, #15
 800538c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800538e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005390:	4618      	mov	r0, r3
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	785b      	ldrb	r3, [r3, #1]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d13a      	bne.n	800542e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	69da      	ldr	r2, [r3, #28]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	2101      	movs	r1, #1
 80053ca:	fa01 f303 	lsl.w	r3, r1, r3
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d155      	bne.n	800549c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	791b      	ldrb	r3, [r3, #4]
 800540a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800540c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	059b      	lsls	r3, r3, #22
 8005412:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005414:	4313      	orrs	r3, r2
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	e036      	b.n	800549c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	2101      	movs	r1, #1
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	041b      	lsls	r3, r3, #16
 8005446:	68f9      	ldr	r1, [r7, #12]
 8005448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800544c:	4313      	orrs	r3, r2
 800544e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d11a      	bne.n	800549c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	791b      	ldrb	r3, [r3, #4]
 8005480:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005482:	430b      	orrs	r3, r1
 8005484:	4313      	orrs	r3, r2
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	440a      	add	r2, r1
 800548e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d161      	bne.n	800558c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054de:	d11f      	bne.n	8005520 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800551e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	2101      	movs	r1, #1
 8005532:	fa01 f303 	lsl.w	r3, r1, r3
 8005536:	b29b      	uxth	r3, r3
 8005538:	43db      	mvns	r3, r3
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005540:	4013      	ands	r3, r2
 8005542:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	2101      	movs	r1, #1
 8005556:	fa01 f303 	lsl.w	r3, r1, r3
 800555a:	b29b      	uxth	r3, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005564:	4013      	ands	r3, r2
 8005566:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	0159      	lsls	r1, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	440b      	add	r3, r1
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	4619      	mov	r1, r3
 8005584:	4b35      	ldr	r3, [pc, #212]	; (800565c <USB_DeactivateEndpoint+0x1b0>)
 8005586:	4013      	ands	r3, r2
 8005588:	600b      	str	r3, [r1, #0]
 800558a:	e060      	b.n	800564e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a2:	d11f      	bne.n	80055e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	f003 030f 	and.w	r3, r3, #15
 80055f4:	2101      	movs	r1, #1
 80055f6:	fa01 f303 	lsl.w	r3, r1, r3
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	43db      	mvns	r3, r3
 80055fe:	68f9      	ldr	r1, [r7, #12]
 8005600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005604:	4013      	ands	r3, r2
 8005606:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	2101      	movs	r1, #1
 800561a:	fa01 f303 	lsl.w	r3, r1, r3
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	43db      	mvns	r3, r3
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005628:	4013      	ands	r3, r2
 800562a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	0159      	lsls	r1, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	440b      	add	r3, r1
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	4619      	mov	r1, r3
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <USB_DeactivateEndpoint+0x1b4>)
 800564a:	4013      	ands	r3, r2
 800564c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	ec337800 	.word	0xec337800
 8005660:	eff37800 	.word	0xeff37800

08005664 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	; 0x28
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	4613      	mov	r3, r2
 8005670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	2b01      	cmp	r3, #1
 8005682:	f040 815c 	bne.w	800593e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d132      	bne.n	80056f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ec:	0cdb      	lsrs	r3, r3, #19
 80056ee:	04db      	lsls	r3, r3, #19
 80056f0:	6113      	str	r3, [r2, #16]
 80056f2:	e074      	b.n	80057de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	0151      	lsls	r1, r2, #5
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	440a      	add	r2, r1
 800570a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570e:	0cdb      	lsrs	r3, r3, #19
 8005710:	04db      	lsls	r3, r3, #19
 8005712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	0151      	lsls	r1, r2, #5
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	440a      	add	r2, r1
 800572a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005732:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005736:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6999      	ldr	r1, [r3, #24]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	440b      	add	r3, r1
 8005750:	1e59      	subs	r1, r3, #1
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	fbb1 f3f3 	udiv	r3, r1, r3
 800575a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800575c:	4b9d      	ldr	r3, [pc, #628]	; (80059d4 <USB_EPStartXfer+0x370>)
 800575e:	400b      	ands	r3, r1
 8005760:	69b9      	ldr	r1, [r7, #24]
 8005762:	0148      	lsls	r0, r1, #5
 8005764:	69f9      	ldr	r1, [r7, #28]
 8005766:	4401      	add	r1, r0
 8005768:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800576c:	4313      	orrs	r3, r2
 800576e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005786:	69b9      	ldr	r1, [r7, #24]
 8005788:	0148      	lsls	r0, r1, #5
 800578a:	69f9      	ldr	r1, [r7, #28]
 800578c:	4401      	add	r1, r0
 800578e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005792:	4313      	orrs	r3, r2
 8005794:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	791b      	ldrb	r3, [r3, #4]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d11f      	bne.n	80057de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	0151      	lsls	r1, r2, #5
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	440a      	add	r2, r1
 80057b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d14b      	bne.n	800587c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d009      	beq.n	8005800 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	461a      	mov	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	791b      	ldrb	r3, [r3, #4]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d128      	bne.n	800585a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d110      	bne.n	800583a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	440a      	add	r2, r1
 800582e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005832:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	e00f      	b.n	800585a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005858:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005874:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e133      	b.n	8005ae4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	0151      	lsls	r1, r2, #5
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	440a      	add	r2, r1
 8005892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005896:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800589a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	791b      	ldrb	r3, [r3, #4]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d015      	beq.n	80058d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 811b 	beq.w	8005ae4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	2101      	movs	r1, #1
 80058c0:	fa01 f303 	lsl.w	r3, r1, r3
 80058c4:	69f9      	ldr	r1, [r7, #28]
 80058c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ca:	4313      	orrs	r3, r2
 80058cc:	634b      	str	r3, [r1, #52]	; 0x34
 80058ce:	e109      	b.n	8005ae4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d110      	bne.n	8005902 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	e00f      	b.n	8005922 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005920:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6919      	ldr	r1, [r3, #16]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	b298      	uxth	r0, r3
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	4603      	mov	r3, r0
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 fade 	bl	8005ef8 <USB_WritePacket>
 800593c:	e0d2      	b.n	8005ae4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005958:	0cdb      	lsrs	r3, r3, #19
 800595a:	04db      	lsls	r3, r3, #19
 800595c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	440a      	add	r2, r1
 8005974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005978:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800597c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005980:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d126      	bne.n	80059d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a0:	69b9      	ldr	r1, [r7, #24]
 80059a2:	0148      	lsls	r0, r1, #5
 80059a4:	69f9      	ldr	r1, [r7, #28]
 80059a6:	4401      	add	r1, r0
 80059a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059ac:	4313      	orrs	r3, r2
 80059ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059ce:	6113      	str	r3, [r2, #16]
 80059d0:	e03a      	b.n	8005a48 <USB_EPStartXfer+0x3e4>
 80059d2:	bf00      	nop
 80059d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	1e5a      	subs	r2, r3, #1
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	8afa      	ldrh	r2, [r7, #22]
 80059f4:	fb03 f202 	mul.w	r2, r3, r2
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	8afb      	ldrh	r3, [r7, #22]
 8005a0c:	04d9      	lsls	r1, r3, #19
 8005a0e:	4b38      	ldr	r3, [pc, #224]	; (8005af0 <USB_EPStartXfer+0x48c>)
 8005a10:	400b      	ands	r3, r1
 8005a12:	69b9      	ldr	r1, [r7, #24]
 8005a14:	0148      	lsls	r0, r1, #5
 8005a16:	69f9      	ldr	r1, [r7, #28]
 8005a18:	4401      	add	r1, r0
 8005a1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a38:	69b9      	ldr	r1, [r7, #24]
 8005a3a:	0148      	lsls	r0, r1, #5
 8005a3c:	69f9      	ldr	r1, [r7, #28]
 8005a3e:	4401      	add	r1, r0
 8005a40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a44:	4313      	orrs	r3, r2
 8005a46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d10d      	bne.n	8005a6a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6919      	ldr	r1, [r3, #16]
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a66:	460a      	mov	r2, r1
 8005a68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	791b      	ldrb	r3, [r3, #4]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d128      	bne.n	8005ac4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d110      	bne.n	8005aa4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	e00f      	b.n	8005ac4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ade:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ae2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	1ff80000 	.word	0x1ff80000

08005af4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	f040 80ce 	bne.w	8005cb2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d132      	bne.n	8005b84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7c:	0cdb      	lsrs	r3, r3, #19
 8005b7e:	04db      	lsls	r3, r3, #19
 8005b80:	6113      	str	r3, [r2, #16]
 8005b82:	e04e      	b.n	8005c22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9e:	0cdb      	lsrs	r3, r3, #19
 8005ba0:	04db      	lsls	r3, r3, #19
 8005ba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bc6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	699a      	ldr	r2, [r3, #24]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d903      	bls.n	8005bdc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c12:	6939      	ldr	r1, [r7, #16]
 8005c14:	0148      	lsls	r0, r1, #5
 8005c16:	6979      	ldr	r1, [r7, #20]
 8005c18:	4401      	add	r1, r0
 8005c1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d11e      	bne.n	8005c66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e097      	b.n	8005d96 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8083 	beq.w	8005d96 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	6979      	ldr	r1, [r7, #20]
 8005ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cac:	4313      	orrs	r3, r2
 8005cae:	634b      	str	r3, [r1, #52]	; 0x34
 8005cb0:	e071      	b.n	8005d96 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ccc:	0cdb      	lsrs	r3, r3, #19
 8005cce:	04db      	lsls	r3, r3, #19
 8005cd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cf4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d44:	6939      	ldr	r1, [r7, #16]
 8005d46:	0148      	lsls	r0, r1, #5
 8005d48:	6979      	ldr	r1, [r7, #20]
 8005d4a:	4401      	add	r1, r0
 8005d4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d50:	4313      	orrs	r3, r2
 8005d52:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d10d      	bne.n	8005d76 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	6919      	ldr	r1, [r3, #16]
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d72:	460a      	mov	r2, r1
 8005d74:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	0151      	lsls	r1, r2, #5
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	440a      	add	r2, r1
 8005d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d14a      	bne.n	8005e58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dda:	f040 8086 	bne.w	8005eea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	7812      	ldrb	r2, [r2, #0]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	7812      	ldrb	r2, [r2, #0]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d902      	bls.n	8005e3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	75fb      	strb	r3, [r7, #23]
          break;
 8005e3a:	e056      	b.n	8005eea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e54:	d0e7      	beq.n	8005e26 <USB_EPStopXfer+0x82>
 8005e56:	e048      	b.n	8005eea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e70:	d13b      	bne.n	8005eea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	7812      	ldrb	r2, [r2, #0]
 8005eaa:	0151      	lsls	r1, r2, #5
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	440a      	add	r2, r1
 8005eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d902      	bls.n	8005ed0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ece:	e00c      	b.n	8005eea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee8:	d0e7      	beq.n	8005eba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b089      	sub	sp, #36	; 0x24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	4611      	mov	r1, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	460b      	mov	r3, r1
 8005f08:	71fb      	strb	r3, [r7, #7]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d123      	bne.n	8005f66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f1e:	88bb      	ldrh	r3, [r7, #4]
 8005f20:	3303      	adds	r3, #3
 8005f22:	089b      	lsrs	r3, r3, #2
 8005f24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f26:	2300      	movs	r3, #0
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	e018      	b.n	8005f5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	031a      	lsls	r2, r3, #12
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f38:	461a      	mov	r2, r3
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	3301      	adds	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	3301      	adds	r3, #1
 8005f56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d3e2      	bcc.n	8005f2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3724      	adds	r7, #36	; 0x24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b08b      	sub	sp, #44	; 0x2c
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	089b      	lsrs	r3, r3, #2
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	623b      	str	r3, [r7, #32]
 8005f9e:	e014      	b.n	8005fca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	3301      	adds	r3, #1
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	3301      	adds	r3, #1
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	6a3a      	ldr	r2, [r7, #32]
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d3e6      	bcc.n	8005fa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fd2:	8bfb      	ldrh	r3, [r7, #30]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01e      	beq.n	8006016 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f107 0310 	add.w	r3, r7, #16
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	701a      	strb	r2, [r3, #0]
      i++;
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	3301      	adds	r3, #1
 8006002:	623b      	str	r3, [r7, #32]
      pDest++;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	3301      	adds	r3, #1
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800600a:	8bfb      	ldrh	r3, [r7, #30]
 800600c:	3b01      	subs	r3, #1
 800600e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006010:	8bfb      	ldrh	r3, [r7, #30]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1ea      	bne.n	8005fec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006018:	4618      	mov	r0, r3
 800601a:	372c      	adds	r7, #44	; 0x2c
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d12c      	bne.n	800609a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	db12      	blt.n	8006078 <USB_EPSetStall+0x54>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00f      	beq.n	8006078 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006076:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006092:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	e02b      	b.n	80060f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	db12      	blt.n	80060d2 <USB_EPSetStall+0xae>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00f      	beq.n	80060d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d128      	bne.n	800616e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006136:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800613a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	791b      	ldrb	r3, [r3, #4]
 8006140:	2b03      	cmp	r3, #3
 8006142:	d003      	beq.n	800614c <USB_EPClearStall+0x4c>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	791b      	ldrb	r3, [r3, #4]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d138      	bne.n	80061be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	e027      	b.n	80061be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006188:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800618c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	791b      	ldrb	r3, [r3, #4]
 8006192:	2b03      	cmp	r3, #3
 8006194:	d003      	beq.n	800619e <USB_EPClearStall+0x9e>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	791b      	ldrb	r3, [r3, #4]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d10f      	bne.n	80061be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006200:	68f9      	ldr	r1, [r7, #12]
 8006202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006206:	4313      	orrs	r3, r2
 8006208:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006232:	f023 0303 	bic.w	r3, r3, #3
 8006236:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006246:	f023 0302 	bic.w	r3, r3, #2
 800624a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800625a:	b480      	push	{r7}
 800625c:	b085      	sub	sp, #20
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006274:	f023 0303 	bic.w	r3, r3, #3
 8006278:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006288:	f043 0302 	orr.w	r3, r3, #2
 800628c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4013      	ands	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062b4:	68fb      	ldr	r3, [r7, #12]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	4013      	ands	r3, r2
 80062e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	0c1b      	lsrs	r3, r3, #16
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b085      	sub	sp, #20
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	4013      	ands	r3, r2
 8006318:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	b29b      	uxth	r3, r3
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	4013      	ands	r3, r2
 8006356:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006358:	68bb      	ldr	r3, [r7, #8]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006366:	b480      	push	{r7}
 8006368:	b087      	sub	sp, #28
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006388:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	f003 030f 	and.w	r3, r3, #15
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	fa22 f303 	lsr.w	r3, r2, r3
 8006396:	01db      	lsls	r3, r3, #7
 8006398:	b2db      	uxtb	r3, r3
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4013      	ands	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063b4:	68bb      	ldr	r3, [r7, #8]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	f003 0301 	and.w	r3, r3, #1
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063fc:	f023 0307 	bic.w	r3, r3, #7
 8006400:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	460b      	mov	r3, r1
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	333c      	adds	r3, #60	; 0x3c
 800643a:	3304      	adds	r3, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	4a26      	ldr	r2, [pc, #152]	; (80064dc <USB_EP0_OutStart+0xb8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d90a      	bls.n	800645e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006458:	d101      	bne.n	800645e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e037      	b.n	80064ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800647c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648c:	f043 0318 	orr.w	r3, r3, #24
 8006490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064a6:	7afb      	ldrb	r3, [r7, #11]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d10f      	bne.n	80064cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	4f54300a 	.word	0x4f54300a

080064e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4a13      	ldr	r2, [pc, #76]	; (8006544 <USB_CoreReset+0x64>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d901      	bls.n	80064fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e01b      	b.n	8006536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	daf2      	bge.n	80064ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f043 0201 	orr.w	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3301      	adds	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4a09      	ldr	r2, [pc, #36]	; (8006544 <USB_CoreReset+0x64>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d901      	bls.n	8006528 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e006      	b.n	8006536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	d0f0      	beq.n	8006516 <USB_CoreReset+0x36>

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	00030d40 	.word	0x00030d40

08006548 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006554:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006558:	f002 fc98 	bl	8008e8c <USBD_static_malloc>
 800655c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d109      	bne.n	8006578 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	32b0      	adds	r2, #176	; 0xb0
 800656e:	2100      	movs	r1, #0
 8006570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006574:	2302      	movs	r3, #2
 8006576:	e0d4      	b.n	8006722 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006578:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800657c:	2100      	movs	r1, #0
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f002 fdca 	bl	8009118 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	32b0      	adds	r2, #176	; 0xb0
 800658e:	68f9      	ldr	r1, [r7, #12]
 8006590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	32b0      	adds	r2, #176	; 0xb0
 800659e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	7c1b      	ldrb	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d138      	bne.n	8006622 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065b0:	4b5e      	ldr	r3, [pc, #376]	; (800672c <USBD_CDC_Init+0x1e4>)
 80065b2:	7819      	ldrb	r1, [r3, #0]
 80065b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b8:	2202      	movs	r2, #2
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f002 fb43 	bl	8008c46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065c0:	4b5a      	ldr	r3, [pc, #360]	; (800672c <USBD_CDC_Init+0x1e4>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	f003 020f 	and.w	r2, r3, #15
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	3324      	adds	r3, #36	; 0x24
 80065d6:	2201      	movs	r2, #1
 80065d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065da:	4b55      	ldr	r3, [pc, #340]	; (8006730 <USBD_CDC_Init+0x1e8>)
 80065dc:	7819      	ldrb	r1, [r3, #0]
 80065de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065e2:	2202      	movs	r2, #2
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f002 fb2e 	bl	8008c46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065ea:	4b51      	ldr	r3, [pc, #324]	; (8006730 <USBD_CDC_Init+0x1e8>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	f003 020f 	and.w	r2, r3, #15
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006602:	2201      	movs	r2, #1
 8006604:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006606:	4b4b      	ldr	r3, [pc, #300]	; (8006734 <USBD_CDC_Init+0x1ec>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	f003 020f 	and.w	r2, r3, #15
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	3326      	adds	r3, #38	; 0x26
 800661c:	2210      	movs	r2, #16
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e035      	b.n	800668e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006622:	4b42      	ldr	r3, [pc, #264]	; (800672c <USBD_CDC_Init+0x1e4>)
 8006624:	7819      	ldrb	r1, [r3, #0]
 8006626:	2340      	movs	r3, #64	; 0x40
 8006628:	2202      	movs	r2, #2
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f002 fb0b 	bl	8008c46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006630:	4b3e      	ldr	r3, [pc, #248]	; (800672c <USBD_CDC_Init+0x1e4>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	f003 020f 	and.w	r2, r3, #15
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	3324      	adds	r3, #36	; 0x24
 8006646:	2201      	movs	r2, #1
 8006648:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800664a:	4b39      	ldr	r3, [pc, #228]	; (8006730 <USBD_CDC_Init+0x1e8>)
 800664c:	7819      	ldrb	r1, [r3, #0]
 800664e:	2340      	movs	r3, #64	; 0x40
 8006650:	2202      	movs	r2, #2
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f002 faf7 	bl	8008c46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006658:	4b35      	ldr	r3, [pc, #212]	; (8006730 <USBD_CDC_Init+0x1e8>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f003 020f 	and.w	r2, r3, #15
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006670:	2201      	movs	r2, #1
 8006672:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006674:	4b2f      	ldr	r3, [pc, #188]	; (8006734 <USBD_CDC_Init+0x1ec>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	f003 020f 	and.w	r2, r3, #15
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	3326      	adds	r3, #38	; 0x26
 800668a:	2210      	movs	r2, #16
 800668c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800668e:	4b29      	ldr	r3, [pc, #164]	; (8006734 <USBD_CDC_Init+0x1ec>)
 8006690:	7819      	ldrb	r1, [r3, #0]
 8006692:	2308      	movs	r3, #8
 8006694:	2203      	movs	r2, #3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f002 fad5 	bl	8008c46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800669c:	4b25      	ldr	r3, [pc, #148]	; (8006734 <USBD_CDC_Init+0x1ec>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	f003 020f 	and.w	r2, r3, #15
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	3324      	adds	r3, #36	; 0x24
 80066b2:	2201      	movs	r2, #1
 80066b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	33b0      	adds	r3, #176	; 0xb0
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80066ec:	2302      	movs	r3, #2
 80066ee:	e018      	b.n	8006722 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	7c1b      	ldrb	r3, [r3, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10a      	bne.n	800670e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066f8:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <USBD_CDC_Init+0x1e8>)
 80066fa:	7819      	ldrb	r1, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f002 fb8c 	bl	8008e24 <USBD_LL_PrepareReceive>
 800670c:	e008      	b.n	8006720 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800670e:	4b08      	ldr	r3, [pc, #32]	; (8006730 <USBD_CDC_Init+0x1e8>)
 8006710:	7819      	ldrb	r1, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006718:	2340      	movs	r3, #64	; 0x40
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f002 fb82 	bl	8008e24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000093 	.word	0x20000093
 8006730:	20000094 	.word	0x20000094
 8006734:	20000095 	.word	0x20000095

08006738 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006744:	4b3a      	ldr	r3, [pc, #232]	; (8006830 <USBD_CDC_DeInit+0xf8>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f002 faa1 	bl	8008c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006750:	4b37      	ldr	r3, [pc, #220]	; (8006830 <USBD_CDC_DeInit+0xf8>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f003 020f 	and.w	r2, r3, #15
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	3324      	adds	r3, #36	; 0x24
 8006766:	2200      	movs	r2, #0
 8006768:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800676a:	4b32      	ldr	r3, [pc, #200]	; (8006834 <USBD_CDC_DeInit+0xfc>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f002 fa8e 	bl	8008c92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006776:	4b2f      	ldr	r3, [pc, #188]	; (8006834 <USBD_CDC_DeInit+0xfc>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	f003 020f 	and.w	r2, r3, #15
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	440b      	add	r3, r1
 800678a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800678e:	2200      	movs	r2, #0
 8006790:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006792:	4b29      	ldr	r3, [pc, #164]	; (8006838 <USBD_CDC_DeInit+0x100>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f002 fa7a 	bl	8008c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800679e:	4b26      	ldr	r3, [pc, #152]	; (8006838 <USBD_CDC_DeInit+0x100>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	f003 020f 	and.w	r2, r3, #15
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	440b      	add	r3, r1
 80067b2:	3324      	adds	r3, #36	; 0x24
 80067b4:	2200      	movs	r2, #0
 80067b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067b8:	4b1f      	ldr	r3, [pc, #124]	; (8006838 <USBD_CDC_DeInit+0x100>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f003 020f 	and.w	r2, r3, #15
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	3326      	adds	r3, #38	; 0x26
 80067ce:	2200      	movs	r2, #0
 80067d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	32b0      	adds	r2, #176	; 0xb0
 80067dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01f      	beq.n	8006824 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	33b0      	adds	r3, #176	; 0xb0
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	32b0      	adds	r2, #176	; 0xb0
 8006802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006806:	4618      	mov	r0, r3
 8006808:	f002 fb4e 	bl	8008ea8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	32b0      	adds	r2, #176	; 0xb0
 8006816:	2100      	movs	r1, #0
 8006818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000093 	.word	0x20000093
 8006834:	20000094 	.word	0x20000094
 8006838:	20000095 	.word	0x20000095

0800683c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	32b0      	adds	r2, #176	; 0xb0
 8006850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006854:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006868:	2303      	movs	r3, #3
 800686a:	e0bf      	b.n	80069ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006874:	2b00      	cmp	r3, #0
 8006876:	d050      	beq.n	800691a <USBD_CDC_Setup+0xde>
 8006878:	2b20      	cmp	r3, #32
 800687a:	f040 80af 	bne.w	80069dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	88db      	ldrh	r3, [r3, #6]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d03a      	beq.n	80068fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	b25b      	sxtb	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	da1b      	bge.n	80068c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	33b0      	adds	r3, #176	; 0xb0
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	88d2      	ldrh	r2, [r2, #6]
 80068ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	88db      	ldrh	r3, [r3, #6]
 80068b2:	2b07      	cmp	r3, #7
 80068b4:	bf28      	it	cs
 80068b6:	2307      	movcs	r3, #7
 80068b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	89fa      	ldrh	r2, [r7, #14]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fd89 	bl	80083d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80068c6:	e090      	b.n	80069ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	785a      	ldrb	r2, [r3, #1]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	88db      	ldrh	r3, [r3, #6]
 80068d6:	2b3f      	cmp	r3, #63	; 0x3f
 80068d8:	d803      	bhi.n	80068e2 <USBD_CDC_Setup+0xa6>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	88db      	ldrh	r3, [r3, #6]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	e000      	b.n	80068e4 <USBD_CDC_Setup+0xa8>
 80068e2:	2240      	movs	r2, #64	; 0x40
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80068ea:	6939      	ldr	r1, [r7, #16]
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80068f2:	461a      	mov	r2, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fd9b 	bl	8008430 <USBD_CtlPrepareRx>
      break;
 80068fa:	e076      	b.n	80069ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	33b0      	adds	r3, #176	; 0xb0
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	7850      	ldrb	r0, [r2, #1]
 8006912:	2200      	movs	r2, #0
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	4798      	blx	r3
      break;
 8006918:	e067      	b.n	80069ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	785b      	ldrb	r3, [r3, #1]
 800691e:	2b0b      	cmp	r3, #11
 8006920:	d851      	bhi.n	80069c6 <USBD_CDC_Setup+0x18a>
 8006922:	a201      	add	r2, pc, #4	; (adr r2, 8006928 <USBD_CDC_Setup+0xec>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	08006959 	.word	0x08006959
 800692c:	080069d5 	.word	0x080069d5
 8006930:	080069c7 	.word	0x080069c7
 8006934:	080069c7 	.word	0x080069c7
 8006938:	080069c7 	.word	0x080069c7
 800693c:	080069c7 	.word	0x080069c7
 8006940:	080069c7 	.word	0x080069c7
 8006944:	080069c7 	.word	0x080069c7
 8006948:	080069c7 	.word	0x080069c7
 800694c:	080069c7 	.word	0x080069c7
 8006950:	08006983 	.word	0x08006983
 8006954:	080069ad 	.word	0x080069ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b03      	cmp	r3, #3
 8006962:	d107      	bne.n	8006974 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006964:	f107 030a 	add.w	r3, r7, #10
 8006968:	2202      	movs	r2, #2
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fd33 	bl	80083d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006972:	e032      	b.n	80069da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 fcbd 	bl	80082f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800697c:	2303      	movs	r3, #3
 800697e:	75fb      	strb	r3, [r7, #23]
          break;
 8006980:	e02b      	b.n	80069da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b03      	cmp	r3, #3
 800698c:	d107      	bne.n	800699e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800698e:	f107 030d 	add.w	r3, r7, #13
 8006992:	2201      	movs	r2, #1
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 fd1e 	bl	80083d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800699c:	e01d      	b.n	80069da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 fca8 	bl	80082f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80069a6:	2303      	movs	r3, #3
 80069a8:	75fb      	strb	r3, [r7, #23]
          break;
 80069aa:	e016      	b.n	80069da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d00f      	beq.n	80069d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fc9b 	bl	80082f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80069c0:	2303      	movs	r3, #3
 80069c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069c4:	e008      	b.n	80069d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fc94 	bl	80082f6 <USBD_CtlError>
          ret = USBD_FAIL;
 80069ce:	2303      	movs	r3, #3
 80069d0:	75fb      	strb	r3, [r7, #23]
          break;
 80069d2:	e002      	b.n	80069da <USBD_CDC_Setup+0x19e>
          break;
 80069d4:	bf00      	nop
 80069d6:	e008      	b.n	80069ea <USBD_CDC_Setup+0x1ae>
          break;
 80069d8:	bf00      	nop
      }
      break;
 80069da:	e006      	b.n	80069ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 fc89 	bl	80082f6 <USBD_CtlError>
      ret = USBD_FAIL;
 80069e4:	2303      	movs	r3, #3
 80069e6:	75fb      	strb	r3, [r7, #23]
      break;
 80069e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	32b0      	adds	r2, #176	; 0xb0
 8006a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e065      	b.n	8006aea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	32b0      	adds	r2, #176	; 0xb0
 8006a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	f003 020f 	and.w	r2, r3, #15
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	440b      	add	r3, r1
 8006a40:	3318      	adds	r3, #24
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d02f      	beq.n	8006aa8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	f003 020f 	and.w	r2, r3, #15
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	4613      	mov	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	440b      	add	r3, r1
 8006a5a:	3318      	adds	r3, #24
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	f003 010f 	and.w	r1, r3, #15
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	460b      	mov	r3, r1
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	440b      	add	r3, r1
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4403      	add	r3, r0
 8006a70:	3348      	adds	r3, #72	; 0x48
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a78:	fb01 f303 	mul.w	r3, r1, r3
 8006a7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d112      	bne.n	8006aa8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	f003 020f 	and.w	r2, r3, #15
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	3318      	adds	r3, #24
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a9a:	78f9      	ldrb	r1, [r7, #3]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f002 f99e 	bl	8008de2 <USBD_LL_Transmit>
 8006aa6:	e01f      	b.n	8006ae8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	33b0      	adds	r3, #176	; 0xb0
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d010      	beq.n	8006ae8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	33b0      	adds	r3, #176	; 0xb0
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ae4:	78fa      	ldrb	r2, [r7, #3]
 8006ae6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	460b      	mov	r3, r1
 8006afc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	32b0      	adds	r2, #176	; 0xb0
 8006b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	32b0      	adds	r2, #176	; 0xb0
 8006b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e01a      	b.n	8006b5a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f002 f99c 	bl	8008e66 <USBD_LL_GetRxDataSize>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	33b0      	adds	r3, #176	; 0xb0
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b54:	4611      	mov	r1, r2
 8006b56:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	32b0      	adds	r2, #176	; 0xb0
 8006b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e025      	b.n	8006bd0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	33b0      	adds	r3, #176	; 0xb0
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01a      	beq.n	8006bce <USBD_CDC_EP0_RxReady+0x6c>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b9e:	2bff      	cmp	r3, #255	; 0xff
 8006ba0:	d015      	beq.n	8006bce <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	33b0      	adds	r3, #176	; 0xb0
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006bba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bc2:	b292      	uxth	r2, r2
 8006bc4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	22ff      	movs	r2, #255	; 0xff
 8006bca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006be0:	2182      	movs	r1, #130	; 0x82
 8006be2:	4818      	ldr	r0, [pc, #96]	; (8006c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006be4:	f000 fd4f 	bl	8007686 <USBD_GetEpDesc>
 8006be8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bea:	2101      	movs	r1, #1
 8006bec:	4815      	ldr	r0, [pc, #84]	; (8006c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bee:	f000 fd4a 	bl	8007686 <USBD_GetEpDesc>
 8006bf2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bf4:	2181      	movs	r1, #129	; 0x81
 8006bf6:	4813      	ldr	r0, [pc, #76]	; (8006c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bf8:	f000 fd45 	bl	8007686 <USBD_GetEpDesc>
 8006bfc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2210      	movs	r2, #16
 8006c08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d006      	beq.n	8006c1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c18:	711a      	strb	r2, [r3, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d006      	beq.n	8006c32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c2c:	711a      	strb	r2, [r3, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2243      	movs	r2, #67	; 0x43
 8006c36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c38:	4b02      	ldr	r3, [pc, #8]	; (8006c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000050 	.word	0x20000050

08006c48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c50:	2182      	movs	r1, #130	; 0x82
 8006c52:	4818      	ldr	r0, [pc, #96]	; (8006cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c54:	f000 fd17 	bl	8007686 <USBD_GetEpDesc>
 8006c58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	4815      	ldr	r0, [pc, #84]	; (8006cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c5e:	f000 fd12 	bl	8007686 <USBD_GetEpDesc>
 8006c62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c64:	2181      	movs	r1, #129	; 0x81
 8006c66:	4813      	ldr	r0, [pc, #76]	; (8006cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c68:	f000 fd0d 	bl	8007686 <USBD_GetEpDesc>
 8006c6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2210      	movs	r2, #16
 8006c78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d006      	beq.n	8006c8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2200      	movs	r2, #0
 8006c84:	711a      	strb	r2, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f042 0202 	orr.w	r2, r2, #2
 8006c8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d006      	beq.n	8006ca2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	711a      	strb	r2, [r3, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f042 0202 	orr.w	r2, r2, #2
 8006ca0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2243      	movs	r2, #67	; 0x43
 8006ca6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ca8:	4b02      	ldr	r3, [pc, #8]	; (8006cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000050 	.word	0x20000050

08006cb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cc0:	2182      	movs	r1, #130	; 0x82
 8006cc2:	4818      	ldr	r0, [pc, #96]	; (8006d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cc4:	f000 fcdf 	bl	8007686 <USBD_GetEpDesc>
 8006cc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cca:	2101      	movs	r1, #1
 8006ccc:	4815      	ldr	r0, [pc, #84]	; (8006d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cce:	f000 fcda 	bl	8007686 <USBD_GetEpDesc>
 8006cd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cd4:	2181      	movs	r1, #129	; 0x81
 8006cd6:	4813      	ldr	r0, [pc, #76]	; (8006d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cd8:	f000 fcd5 	bl	8007686 <USBD_GetEpDesc>
 8006cdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2210      	movs	r2, #16
 8006ce8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d006      	beq.n	8006cfe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf8:	711a      	strb	r2, [r3, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d0c:	711a      	strb	r2, [r3, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2243      	movs	r2, #67	; 0x43
 8006d16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d18:	4b02      	ldr	r3, [pc, #8]	; (8006d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20000050 	.word	0x20000050

08006d28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	220a      	movs	r2, #10
 8006d34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d36:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	2000000c 	.word	0x2000000c

08006d48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e009      	b.n	8006d70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	33b0      	adds	r3, #176	; 0xb0
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	32b0      	adds	r2, #176	; 0xb0
 8006d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d96:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e008      	b.n	8006db4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	32b0      	adds	r2, #176	; 0xb0
 8006dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e004      	b.n	8006dee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
	...

08006dfc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	32b0      	adds	r2, #176	; 0xb0
 8006e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e12:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e14:	2301      	movs	r3, #1
 8006e16:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	32b0      	adds	r2, #176	; 0xb0
 8006e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e025      	b.n	8006e7a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d11f      	bne.n	8006e78 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e40:	4b10      	ldr	r3, [pc, #64]	; (8006e84 <USBD_CDC_TransmitPacket+0x88>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f003 020f 	and.w	r2, r3, #15
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4403      	add	r3, r0
 8006e5a:	3318      	adds	r3, #24
 8006e5c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <USBD_CDC_TransmitPacket+0x88>)
 8006e60:	7819      	ldrb	r1, [r3, #0]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 ffb7 	bl	8008de2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20000093 	.word	0x20000093

08006e88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32b0      	adds	r2, #176	; 0xb0
 8006e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	32b0      	adds	r2, #176	; 0xb0
 8006eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e018      	b.n	8006ee8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7c1b      	ldrb	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ebe:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <USBD_CDC_ReceivePacket+0x68>)
 8006ec0:	7819      	ldrb	r1, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 ffa9 	bl	8008e24 <USBD_LL_PrepareReceive>
 8006ed2:	e008      	b.n	8006ee6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ed4:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <USBD_CDC_ReceivePacket+0x68>)
 8006ed6:	7819      	ldrb	r1, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ede:	2340      	movs	r3, #64	; 0x40
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 ff9f 	bl	8008e24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000094 	.word	0x20000094

08006ef4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e01f      	b.n	8006f4c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	79fa      	ldrb	r2, [r7, #7]
 8006f3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f001 fe19 	bl	8008b78 <USBD_LL_Init>
 8006f46:	4603      	mov	r3, r0
 8006f48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e025      	b.n	8006fb8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	32ae      	adds	r2, #174	; 0xae
 8006f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00f      	beq.n	8006fa8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	32ae      	adds	r2, #174	; 0xae
 8006f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	f107 020e 	add.w	r2, r7, #14
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4798      	blx	r3
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fe21 	bl	8008c10 <USBD_LL_Start>
 8006fce:	4603      	mov	r3, r0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fe0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007004:	2b00      	cmp	r3, #0
 8007006:	d009      	beq.n	800701c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	78fa      	ldrb	r2, [r7, #3]
 8007012:	4611      	mov	r1, r2
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
 8007018:	4603      	mov	r3, r0
 800701a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	4611      	mov	r1, r2
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800704c:	2303      	movs	r3, #3
 800704e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007050:	7bfb      	ldrb	r3, [r7, #15]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f001 f908 	bl	8008282 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007080:	461a      	mov	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	2b02      	cmp	r3, #2
 8007094:	d01a      	beq.n	80070cc <USBD_LL_SetupStage+0x72>
 8007096:	2b02      	cmp	r3, #2
 8007098:	d822      	bhi.n	80070e0 <USBD_LL_SetupStage+0x86>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <USBD_LL_SetupStage+0x4a>
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d00a      	beq.n	80070b8 <USBD_LL_SetupStage+0x5e>
 80070a2:	e01d      	b.n	80070e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fb5f 	bl	8007770 <USBD_StdDevReq>
 80070b2:	4603      	mov	r3, r0
 80070b4:	73fb      	strb	r3, [r7, #15]
      break;
 80070b6:	e020      	b.n	80070fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fbc7 	bl	8007854 <USBD_StdItfReq>
 80070c6:	4603      	mov	r3, r0
 80070c8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ca:	e016      	b.n	80070fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fc29 	bl	800792c <USBD_StdEPReq>
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]
      break;
 80070de:	e00c      	b.n	80070fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 fdee 	bl	8008cd0 <USBD_LL_StallEP>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]
      break;
 80070f8:	bf00      	nop
  }

  return ret;
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	460b      	mov	r3, r1
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d16e      	bne.n	80071fa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007122:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800712a:	2b03      	cmp	r3, #3
 800712c:	f040 8098 	bne.w	8007260 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	429a      	cmp	r2, r3
 800713a:	d913      	bls.n	8007164 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	1ad2      	subs	r2, r2, r3
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	4293      	cmp	r3, r2
 8007154:	bf28      	it	cs
 8007156:	4613      	movcs	r3, r2
 8007158:	461a      	mov	r2, r3
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f001 f984 	bl	800846a <USBD_CtlContinueRx>
 8007162:	e07d      	b.n	8007260 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	2b02      	cmp	r3, #2
 8007170:	d014      	beq.n	800719c <USBD_LL_DataOutStage+0x98>
 8007172:	2b02      	cmp	r3, #2
 8007174:	d81d      	bhi.n	80071b2 <USBD_LL_DataOutStage+0xae>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <USBD_LL_DataOutStage+0x7c>
 800717a:	2b01      	cmp	r3, #1
 800717c:	d003      	beq.n	8007186 <USBD_LL_DataOutStage+0x82>
 800717e:	e018      	b.n	80071b2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	75bb      	strb	r3, [r7, #22]
            break;
 8007184:	e018      	b.n	80071b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800718c:	b2db      	uxtb	r3, r3
 800718e:	4619      	mov	r1, r3
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fa5e 	bl	8007652 <USBD_CoreFindIF>
 8007196:	4603      	mov	r3, r0
 8007198:	75bb      	strb	r3, [r7, #22]
            break;
 800719a:	e00d      	b.n	80071b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	4619      	mov	r1, r3
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 fa60 	bl	800766c <USBD_CoreFindEP>
 80071ac:	4603      	mov	r3, r0
 80071ae:	75bb      	strb	r3, [r7, #22]
            break;
 80071b0:	e002      	b.n	80071b8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	75bb      	strb	r3, [r7, #22]
            break;
 80071b6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071b8:	7dbb      	ldrb	r3, [r7, #22]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d119      	bne.n	80071f2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d113      	bne.n	80071f2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071ca:	7dba      	ldrb	r2, [r7, #22]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	32ae      	adds	r2, #174	; 0xae
 80071d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80071da:	7dba      	ldrb	r2, [r7, #22]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80071e2:	7dba      	ldrb	r2, [r7, #22]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	32ae      	adds	r2, #174	; 0xae
 80071e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f001 f94a 	bl	800848c <USBD_CtlSendStatus>
 80071f8:	e032      	b.n	8007260 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80071fa:	7afb      	ldrb	r3, [r7, #11]
 80071fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007200:	b2db      	uxtb	r3, r3
 8007202:	4619      	mov	r1, r3
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fa31 	bl	800766c <USBD_CoreFindEP>
 800720a:	4603      	mov	r3, r0
 800720c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800720e:	7dbb      	ldrb	r3, [r7, #22]
 8007210:	2bff      	cmp	r3, #255	; 0xff
 8007212:	d025      	beq.n	8007260 <USBD_LL_DataOutStage+0x15c>
 8007214:	7dbb      	ldrb	r3, [r7, #22]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d122      	bne.n	8007260 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b03      	cmp	r3, #3
 8007224:	d117      	bne.n	8007256 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007226:	7dba      	ldrb	r2, [r7, #22]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	32ae      	adds	r2, #174	; 0xae
 800722c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00f      	beq.n	8007256 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007236:	7dba      	ldrb	r2, [r7, #22]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800723e:	7dba      	ldrb	r2, [r7, #22]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	32ae      	adds	r2, #174	; 0xae
 8007244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	7afa      	ldrb	r2, [r7, #11]
 800724c:	4611      	mov	r1, r2
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	4798      	blx	r3
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	e000      	b.n	8007262 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b086      	sub	sp, #24
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	460b      	mov	r3, r1
 8007274:	607a      	str	r2, [r7, #4]
 8007276:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007278:	7afb      	ldrb	r3, [r7, #11]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d16f      	bne.n	800735e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3314      	adds	r3, #20
 8007282:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800728a:	2b02      	cmp	r3, #2
 800728c:	d15a      	bne.n	8007344 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	429a      	cmp	r2, r3
 8007298:	d914      	bls.n	80072c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	1ad2      	subs	r2, r2, r3
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	461a      	mov	r2, r3
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f001 f8ac 	bl	800840e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072b6:	2300      	movs	r3, #0
 80072b8:	2200      	movs	r2, #0
 80072ba:	2100      	movs	r1, #0
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f001 fdb1 	bl	8008e24 <USBD_LL_PrepareReceive>
 80072c2:	e03f      	b.n	8007344 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d11c      	bne.n	800730a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072d8:	429a      	cmp	r2, r3
 80072da:	d316      	bcc.n	800730a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d20f      	bcs.n	800730a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072ea:	2200      	movs	r2, #0
 80072ec:	2100      	movs	r1, #0
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f001 f88d 	bl	800840e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072fc:	2300      	movs	r3, #0
 80072fe:	2200      	movs	r2, #0
 8007300:	2100      	movs	r1, #0
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 fd8e 	bl	8008e24 <USBD_LL_PrepareReceive>
 8007308:	e01c      	b.n	8007344 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b03      	cmp	r3, #3
 8007314:	d10f      	bne.n	8007336 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d009      	beq.n	8007336 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007336:	2180      	movs	r1, #128	; 0x80
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f001 fcc9 	bl	8008cd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f001 f8b7 	bl	80084b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d03a      	beq.n	80073c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff fe42 	bl	8006fd8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800735c:	e032      	b.n	80073c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007364:	b2db      	uxtb	r3, r3
 8007366:	4619      	mov	r1, r3
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f97f 	bl	800766c <USBD_CoreFindEP>
 800736e:	4603      	mov	r3, r0
 8007370:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	2bff      	cmp	r3, #255	; 0xff
 8007376:	d025      	beq.n	80073c4 <USBD_LL_DataInStage+0x15a>
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d122      	bne.n	80073c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b03      	cmp	r3, #3
 8007388:	d11c      	bne.n	80073c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800738a:	7dfa      	ldrb	r2, [r7, #23]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	32ae      	adds	r2, #174	; 0xae
 8007390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d014      	beq.n	80073c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800739a:	7dfa      	ldrb	r2, [r7, #23]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073a2:	7dfa      	ldrb	r2, [r7, #23]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	32ae      	adds	r2, #174	; 0xae
 80073a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	7afa      	ldrb	r2, [r7, #11]
 80073b0:	4611      	mov	r1, r2
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	4798      	blx	r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073ba:	7dbb      	ldrb	r3, [r7, #22]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073c0:	7dbb      	ldrb	r3, [r7, #22]
 80073c2:	e000      	b.n	80073c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d014      	beq.n	8007434 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00e      	beq.n	8007434 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	6852      	ldr	r2, [r2, #4]
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	4611      	mov	r1, r2
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007430:	2303      	movs	r3, #3
 8007432:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007434:	2340      	movs	r3, #64	; 0x40
 8007436:	2200      	movs	r2, #0
 8007438:	2100      	movs	r1, #0
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 fc03 	bl	8008c46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2240      	movs	r2, #64	; 0x40
 800744c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007450:	2340      	movs	r3, #64	; 0x40
 8007452:	2200      	movs	r2, #0
 8007454:	2180      	movs	r1, #128	; 0x80
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 fbf5 	bl	8008c46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2240      	movs	r2, #64	; 0x40
 8007466:	621a      	str	r2, [r3, #32]

  return ret;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2204      	movs	r2, #4
 80074ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d106      	bne.n	80074e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b082      	sub	sp, #8
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d110      	bne.n	8007524 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007512:	69db      	ldr	r3, [r3, #28]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	32ae      	adds	r2, #174	; 0xae
 8007544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800754c:	2303      	movs	r3, #3
 800754e:	e01c      	b.n	800758a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b03      	cmp	r3, #3
 800755a:	d115      	bne.n	8007588 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	32ae      	adds	r2, #174	; 0xae
 8007566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	32ae      	adds	r2, #174	; 0xae
 800757a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	4611      	mov	r1, r2
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	32ae      	adds	r2, #174	; 0xae
 80075a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e01c      	b.n	80075ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d115      	bne.n	80075ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	32ae      	adds	r2, #174	; 0xae
 80075ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	32ae      	adds	r2, #174	; 0xae
 80075de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	4611      	mov	r1, r2
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00e      	beq.n	8007648 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6852      	ldr	r2, [r2, #4]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	4611      	mov	r1, r2
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	4798      	blx	r3
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800765e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007678:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	885b      	ldrh	r3, [r3, #2]
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d920      	bls.n	80076f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076b6:	e013      	b.n	80076e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076b8:	f107 030a 	add.w	r3, r7, #10
 80076bc:	4619      	mov	r1, r3
 80076be:	6978      	ldr	r0, [r7, #20]
 80076c0:	f000 f81b 	bl	80076fa <USBD_GetNextDesc>
 80076c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d108      	bne.n	80076e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	789b      	ldrb	r3, [r3, #2]
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d008      	beq.n	80076ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80076dc:	2300      	movs	r3, #0
 80076de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	885b      	ldrh	r3, [r3, #2]
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	897b      	ldrh	r3, [r7, #10]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d8e5      	bhi.n	80076b8 <USBD_GetEpDesc+0x32>
 80076ec:	e000      	b.n	80076f0 <USBD_GetEpDesc+0x6a>
          break;
 80076ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80076f0:	693b      	ldr	r3, [r7, #16]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	881a      	ldrh	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	4413      	add	r3, r2
 8007714:	b29a      	uxth	r2, r3
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4413      	add	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007726:	68fb      	ldr	r3, [r7, #12]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	3301      	adds	r3, #1
 800774a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007752:	8a3b      	ldrh	r3, [r7, #16]
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	b21a      	sxth	r2, r3
 8007758:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800775c:	4313      	orrs	r3, r2
 800775e:	b21b      	sxth	r3, r3
 8007760:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007762:	89fb      	ldrh	r3, [r7, #14]
}
 8007764:	4618      	mov	r0, r3
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d005      	beq.n	8007796 <USBD_StdDevReq+0x26>
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d857      	bhi.n	800783e <USBD_StdDevReq+0xce>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00f      	beq.n	80077b2 <USBD_StdDevReq+0x42>
 8007792:	2b20      	cmp	r3, #32
 8007794:	d153      	bne.n	800783e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	32ae      	adds	r2, #174	; 0xae
 80077a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	4798      	blx	r3
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]
      break;
 80077b0:	e04a      	b.n	8007848 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	2b09      	cmp	r3, #9
 80077b8:	d83b      	bhi.n	8007832 <USBD_StdDevReq+0xc2>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <USBD_StdDevReq+0x50>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	08007815 	.word	0x08007815
 80077c4:	08007829 	.word	0x08007829
 80077c8:	08007833 	.word	0x08007833
 80077cc:	0800781f 	.word	0x0800781f
 80077d0:	08007833 	.word	0x08007833
 80077d4:	080077f3 	.word	0x080077f3
 80077d8:	080077e9 	.word	0x080077e9
 80077dc:	08007833 	.word	0x08007833
 80077e0:	0800780b 	.word	0x0800780b
 80077e4:	080077fd 	.word	0x080077fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa3c 	bl	8007c68 <USBD_GetDescriptor>
          break;
 80077f0:	e024      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fba1 	bl	8007f3c <USBD_SetAddress>
          break;
 80077fa:	e01f      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fbe0 	bl	8007fc4 <USBD_SetConfig>
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]
          break;
 8007808:	e018      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fc83 	bl	8008118 <USBD_GetConfig>
          break;
 8007812:	e013      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fcb4 	bl	8008184 <USBD_GetStatus>
          break;
 800781c:	e00e      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fce3 	bl	80081ec <USBD_SetFeature>
          break;
 8007826:	e009      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fd07 	bl	800823e <USBD_ClrFeature>
          break;
 8007830:	e004      	b.n	800783c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fd5e 	bl	80082f6 <USBD_CtlError>
          break;
 800783a:	bf00      	nop
      }
      break;
 800783c:	e004      	b.n	8007848 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fd58 	bl	80082f6 <USBD_CtlError>
      break;
 8007846:	bf00      	nop
  }

  return ret;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop

08007854 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	d005      	beq.n	800787a <USBD_StdItfReq+0x26>
 800786e:	2b40      	cmp	r3, #64	; 0x40
 8007870:	d852      	bhi.n	8007918 <USBD_StdItfReq+0xc4>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <USBD_StdItfReq+0x26>
 8007876:	2b20      	cmp	r3, #32
 8007878:	d14e      	bne.n	8007918 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007880:	b2db      	uxtb	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	2b02      	cmp	r3, #2
 8007886:	d840      	bhi.n	800790a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	889b      	ldrh	r3, [r3, #4]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d836      	bhi.n	8007900 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	889b      	ldrh	r3, [r3, #4]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff fed9 	bl	8007652 <USBD_CoreFindIF>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	2bff      	cmp	r3, #255	; 0xff
 80078a8:	d01d      	beq.n	80078e6 <USBD_StdItfReq+0x92>
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d11a      	bne.n	80078e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078b0:	7bba      	ldrb	r2, [r7, #14]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	32ae      	adds	r2, #174	; 0xae
 80078b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00f      	beq.n	80078e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078c0:	7bba      	ldrb	r2, [r7, #14]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078c8:	7bba      	ldrb	r2, [r7, #14]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	32ae      	adds	r2, #174	; 0xae
 80078ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	4798      	blx	r3
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078de:	e004      	b.n	80078ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078e0:	2303      	movs	r3, #3
 80078e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078e4:	e001      	b.n	80078ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80078e6:	2303      	movs	r3, #3
 80078e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	88db      	ldrh	r3, [r3, #6]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d110      	bne.n	8007914 <USBD_StdItfReq+0xc0>
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10d      	bne.n	8007914 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fdc7 	bl	800848c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078fe:	e009      	b.n	8007914 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fcf7 	bl	80082f6 <USBD_CtlError>
          break;
 8007908:	e004      	b.n	8007914 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fcf2 	bl	80082f6 <USBD_CtlError>
          break;
 8007912:	e000      	b.n	8007916 <USBD_StdItfReq+0xc2>
          break;
 8007914:	bf00      	nop
      }
      break;
 8007916:	e004      	b.n	8007922 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fceb 	bl	80082f6 <USBD_CtlError>
      break;
 8007920:	bf00      	nop
  }

  return ret;
 8007922:	7bfb      	ldrb	r3, [r7, #15]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	889b      	ldrh	r3, [r3, #4]
 800793e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007948:	2b40      	cmp	r3, #64	; 0x40
 800794a:	d007      	beq.n	800795c <USBD_StdEPReq+0x30>
 800794c:	2b40      	cmp	r3, #64	; 0x40
 800794e:	f200 817f 	bhi.w	8007c50 <USBD_StdEPReq+0x324>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d02a      	beq.n	80079ac <USBD_StdEPReq+0x80>
 8007956:	2b20      	cmp	r3, #32
 8007958:	f040 817a 	bne.w	8007c50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff fe83 	bl	800766c <USBD_CoreFindEP>
 8007966:	4603      	mov	r3, r0
 8007968:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800796a:	7b7b      	ldrb	r3, [r7, #13]
 800796c:	2bff      	cmp	r3, #255	; 0xff
 800796e:	f000 8174 	beq.w	8007c5a <USBD_StdEPReq+0x32e>
 8007972:	7b7b      	ldrb	r3, [r7, #13]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f040 8170 	bne.w	8007c5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800797a:	7b7a      	ldrb	r2, [r7, #13]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007982:	7b7a      	ldrb	r2, [r7, #13]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	32ae      	adds	r2, #174	; 0xae
 8007988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 8163 	beq.w	8007c5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007994:	7b7a      	ldrb	r2, [r7, #13]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32ae      	adds	r2, #174	; 0xae
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
 80079a6:	4603      	mov	r3, r0
 80079a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079aa:	e156      	b.n	8007c5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d008      	beq.n	80079c6 <USBD_StdEPReq+0x9a>
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	f300 8145 	bgt.w	8007c44 <USBD_StdEPReq+0x318>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 809b 	beq.w	8007af6 <USBD_StdEPReq+0x1ca>
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d03c      	beq.n	8007a3e <USBD_StdEPReq+0x112>
 80079c4:	e13e      	b.n	8007c44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d002      	beq.n	80079d8 <USBD_StdEPReq+0xac>
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d016      	beq.n	8007a04 <USBD_StdEPReq+0xd8>
 80079d6:	e02c      	b.n	8007a32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00d      	beq.n	80079fa <USBD_StdEPReq+0xce>
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b80      	cmp	r3, #128	; 0x80
 80079e2:	d00a      	beq.n	80079fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 f971 	bl	8008cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ee:	2180      	movs	r1, #128	; 0x80
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 f96d 	bl	8008cd0 <USBD_LL_StallEP>
 80079f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079f8:	e020      	b.n	8007a3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc7a 	bl	80082f6 <USBD_CtlError>
              break;
 8007a02:	e01b      	b.n	8007a3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	885b      	ldrh	r3, [r3, #2]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10e      	bne.n	8007a2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <USBD_StdEPReq+0xfe>
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b80      	cmp	r3, #128	; 0x80
 8007a16:	d008      	beq.n	8007a2a <USBD_StdEPReq+0xfe>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	88db      	ldrh	r3, [r3, #6]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 f953 	bl	8008cd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fd2e 	bl	800848c <USBD_CtlSendStatus>

              break;
 8007a30:	e004      	b.n	8007a3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fc5e 	bl	80082f6 <USBD_CtlError>
              break;
 8007a3a:	bf00      	nop
          }
          break;
 8007a3c:	e107      	b.n	8007c4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d002      	beq.n	8007a50 <USBD_StdEPReq+0x124>
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d016      	beq.n	8007a7c <USBD_StdEPReq+0x150>
 8007a4e:	e04b      	b.n	8007ae8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00d      	beq.n	8007a72 <USBD_StdEPReq+0x146>
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b80      	cmp	r3, #128	; 0x80
 8007a5a:	d00a      	beq.n	8007a72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 f935 	bl	8008cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a66:	2180      	movs	r1, #128	; 0x80
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 f931 	bl	8008cd0 <USBD_LL_StallEP>
 8007a6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a70:	e040      	b.n	8007af4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fc3e 	bl	80082f6 <USBD_CtlError>
              break;
 8007a7a:	e03b      	b.n	8007af4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	885b      	ldrh	r3, [r3, #2]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d136      	bne.n	8007af2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d004      	beq.n	8007a98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 f93b 	bl	8008d0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fcf7 	bl	800848c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fde2 	bl	800766c <USBD_CoreFindEP>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007aac:	7b7b      	ldrb	r3, [r7, #13]
 8007aae:	2bff      	cmp	r3, #255	; 0xff
 8007ab0:	d01f      	beq.n	8007af2 <USBD_StdEPReq+0x1c6>
 8007ab2:	7b7b      	ldrb	r3, [r7, #13]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d11c      	bne.n	8007af2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ab8:	7b7a      	ldrb	r2, [r7, #13]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ac0:	7b7a      	ldrb	r2, [r7, #13]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	32ae      	adds	r2, #174	; 0xae
 8007ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d010      	beq.n	8007af2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ad0:	7b7a      	ldrb	r2, [r7, #13]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	32ae      	adds	r2, #174	; 0xae
 8007ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ae6:	e004      	b.n	8007af2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fc03 	bl	80082f6 <USBD_CtlError>
              break;
 8007af0:	e000      	b.n	8007af4 <USBD_StdEPReq+0x1c8>
              break;
 8007af2:	bf00      	nop
          }
          break;
 8007af4:	e0ab      	b.n	8007c4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d002      	beq.n	8007b08 <USBD_StdEPReq+0x1dc>
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d032      	beq.n	8007b6c <USBD_StdEPReq+0x240>
 8007b06:	e097      	b.n	8007c38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <USBD_StdEPReq+0x1f2>
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b80      	cmp	r3, #128	; 0x80
 8007b12:	d004      	beq.n	8007b1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fbed 	bl	80082f6 <USBD_CtlError>
                break;
 8007b1c:	e091      	b.n	8007c42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	da0b      	bge.n	8007b3e <USBD_StdEPReq+0x212>
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	3310      	adds	r3, #16
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	4413      	add	r3, r2
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	e00b      	b.n	8007b56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	4413      	add	r3, r2
 8007b54:	3304      	adds	r3, #4
 8007b56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2202      	movs	r2, #2
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fc37 	bl	80083d8 <USBD_CtlSendData>
              break;
 8007b6a:	e06a      	b.n	8007c42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	da11      	bge.n	8007b98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	f003 020f 	and.w	r2, r3, #15
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	3324      	adds	r3, #36	; 0x24
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d117      	bne.n	8007bbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fbb0 	bl	80082f6 <USBD_CtlError>
                  break;
 8007b96:	e054      	b.n	8007c42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	f003 020f 	and.w	r2, r3, #15
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fb9d 	bl	80082f6 <USBD_CtlError>
                  break;
 8007bbc:	e041      	b.n	8007c42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da0b      	bge.n	8007bde <USBD_StdEPReq+0x2b2>
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	3310      	adds	r3, #16
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	4413      	add	r3, r2
 8007bda:	3304      	adds	r3, #4
 8007bdc:	e00b      	b.n	8007bf6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <USBD_StdEPReq+0x2d8>
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	2b80      	cmp	r3, #128	; 0x80
 8007c02:	d103      	bne.n	8007c0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	e00e      	b.n	8007c2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 f89b 	bl	8008d4c <USBD_LL_IsStallEP>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	e002      	b.n	8007c2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fbd1 	bl	80083d8 <USBD_CtlSendData>
              break;
 8007c36:	e004      	b.n	8007c42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fb5b 	bl	80082f6 <USBD_CtlError>
              break;
 8007c40:	bf00      	nop
          }
          break;
 8007c42:	e004      	b.n	8007c4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fb55 	bl	80082f6 <USBD_CtlError>
          break;
 8007c4c:	bf00      	nop
      }
      break;
 8007c4e:	e005      	b.n	8007c5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fb4f 	bl	80082f6 <USBD_CtlError>
      break;
 8007c58:	e000      	b.n	8007c5c <USBD_StdEPReq+0x330>
      break;
 8007c5a:	bf00      	nop
  }

  return ret;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	885b      	ldrh	r3, [r3, #2]
 8007c82:	0a1b      	lsrs	r3, r3, #8
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3b01      	subs	r3, #1
 8007c88:	2b06      	cmp	r3, #6
 8007c8a:	f200 8128 	bhi.w	8007ede <USBD_GetDescriptor+0x276>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <USBD_GetDescriptor+0x2c>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cb1 	.word	0x08007cb1
 8007c98:	08007cc9 	.word	0x08007cc9
 8007c9c:	08007d09 	.word	0x08007d09
 8007ca0:	08007edf 	.word	0x08007edf
 8007ca4:	08007edf 	.word	0x08007edf
 8007ca8:	08007e7f 	.word	0x08007e7f
 8007cac:	08007eab 	.word	0x08007eab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	7c12      	ldrb	r2, [r2, #16]
 8007cbc:	f107 0108 	add.w	r1, r7, #8
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	4798      	blx	r3
 8007cc4:	60f8      	str	r0, [r7, #12]
      break;
 8007cc6:	e112      	b.n	8007eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	7c1b      	ldrb	r3, [r3, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10d      	bne.n	8007cec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	f107 0208 	add.w	r2, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cea:	e100      	b.n	8007eee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	f107 0208 	add.w	r2, r7, #8
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4798      	blx	r3
 8007cfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3301      	adds	r3, #1
 8007d02:	2202      	movs	r2, #2
 8007d04:	701a      	strb	r2, [r3, #0]
      break;
 8007d06:	e0f2      	b.n	8007eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	885b      	ldrh	r3, [r3, #2]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	f200 80ac 	bhi.w	8007e6c <USBD_GetDescriptor+0x204>
 8007d14:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <USBD_GetDescriptor+0xb4>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007d35 	.word	0x08007d35
 8007d20:	08007d69 	.word	0x08007d69
 8007d24:	08007d9d 	.word	0x08007d9d
 8007d28:	08007dd1 	.word	0x08007dd1
 8007d2c:	08007e05 	.word	0x08007e05
 8007d30:	08007e39 	.word	0x08007e39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	7c12      	ldrb	r2, [r2, #16]
 8007d4c:	f107 0108 	add.w	r1, r7, #8
 8007d50:	4610      	mov	r0, r2
 8007d52:	4798      	blx	r3
 8007d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d56:	e091      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 facb 	bl	80082f6 <USBD_CtlError>
            err++;
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	3301      	adds	r3, #1
 8007d64:	72fb      	strb	r3, [r7, #11]
          break;
 8007d66:	e089      	b.n	8007e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	7c12      	ldrb	r2, [r2, #16]
 8007d80:	f107 0108 	add.w	r1, r7, #8
 8007d84:	4610      	mov	r0, r2
 8007d86:	4798      	blx	r3
 8007d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d8a:	e077      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fab1 	bl	80082f6 <USBD_CtlError>
            err++;
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	3301      	adds	r3, #1
 8007d98:	72fb      	strb	r3, [r7, #11]
          break;
 8007d9a:	e06f      	b.n	8007e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	7c12      	ldrb	r2, [r2, #16]
 8007db4:	f107 0108 	add.w	r1, r7, #8
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dbe:	e05d      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa97 	bl	80082f6 <USBD_CtlError>
            err++;
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dce:	e055      	b.n	8007e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00b      	beq.n	8007df4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	7c12      	ldrb	r2, [r2, #16]
 8007de8:	f107 0108 	add.w	r1, r7, #8
 8007dec:	4610      	mov	r0, r2
 8007dee:	4798      	blx	r3
 8007df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007df2:	e043      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa7d 	bl	80082f6 <USBD_CtlError>
            err++;
 8007dfc:	7afb      	ldrb	r3, [r7, #11]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	72fb      	strb	r3, [r7, #11]
          break;
 8007e02:	e03b      	b.n	8007e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	7c12      	ldrb	r2, [r2, #16]
 8007e1c:	f107 0108 	add.w	r1, r7, #8
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
 8007e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e26:	e029      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fa63 	bl	80082f6 <USBD_CtlError>
            err++;
 8007e30:	7afb      	ldrb	r3, [r7, #11]
 8007e32:	3301      	adds	r3, #1
 8007e34:	72fb      	strb	r3, [r7, #11]
          break;
 8007e36:	e021      	b.n	8007e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	7c12      	ldrb	r2, [r2, #16]
 8007e50:	f107 0108 	add.w	r1, r7, #8
 8007e54:	4610      	mov	r0, r2
 8007e56:	4798      	blx	r3
 8007e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e5a:	e00f      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa49 	bl	80082f6 <USBD_CtlError>
            err++;
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	3301      	adds	r3, #1
 8007e68:	72fb      	strb	r3, [r7, #11]
          break;
 8007e6a:	e007      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa41 	bl	80082f6 <USBD_CtlError>
          err++;
 8007e74:	7afb      	ldrb	r3, [r7, #11]
 8007e76:	3301      	adds	r3, #1
 8007e78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e7a:	bf00      	nop
      }
      break;
 8007e7c:	e037      	b.n	8007eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	7c1b      	ldrb	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d109      	bne.n	8007e9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8e:	f107 0208 	add.w	r2, r7, #8
 8007e92:	4610      	mov	r0, r2
 8007e94:	4798      	blx	r3
 8007e96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e98:	e029      	b.n	8007eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fa2a 	bl	80082f6 <USBD_CtlError>
        err++;
 8007ea2:	7afb      	ldrb	r3, [r7, #11]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ea8:	e021      	b.n	8007eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	7c1b      	ldrb	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10d      	bne.n	8007ece <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eba:	f107 0208 	add.w	r2, r7, #8
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	4798      	blx	r3
 8007ec2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	2207      	movs	r2, #7
 8007eca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ecc:	e00f      	b.n	8007eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fa10 	bl	80082f6 <USBD_CtlError>
        err++;
 8007ed6:	7afb      	ldrb	r3, [r7, #11]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	72fb      	strb	r3, [r7, #11]
      break;
 8007edc:	e007      	b.n	8007eee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fa08 	bl	80082f6 <USBD_CtlError>
      err++;
 8007ee6:	7afb      	ldrb	r3, [r7, #11]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	72fb      	strb	r3, [r7, #11]
      break;
 8007eec:	bf00      	nop
  }

  if (err != 0U)
 8007eee:	7afb      	ldrb	r3, [r7, #11]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d11e      	bne.n	8007f32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	88db      	ldrh	r3, [r3, #6]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d016      	beq.n	8007f2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007efc:	893b      	ldrh	r3, [r7, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00e      	beq.n	8007f20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	88da      	ldrh	r2, [r3, #6]
 8007f06:	893b      	ldrh	r3, [r7, #8]
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	bf28      	it	cs
 8007f0c:	4613      	movcs	r3, r2
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f12:	893b      	ldrh	r3, [r7, #8]
 8007f14:	461a      	mov	r2, r3
 8007f16:	68f9      	ldr	r1, [r7, #12]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fa5d 	bl	80083d8 <USBD_CtlSendData>
 8007f1e:	e009      	b.n	8007f34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f9e7 	bl	80082f6 <USBD_CtlError>
 8007f28:	e004      	b.n	8007f34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 faae 	bl	800848c <USBD_CtlSendStatus>
 8007f30:	e000      	b.n	8007f34 <USBD_GetDescriptor+0x2cc>
    return;
 8007f32:	bf00      	nop
  }
}
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop

08007f3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	889b      	ldrh	r3, [r3, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d131      	bne.n	8007fb2 <USBD_SetAddress+0x76>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	88db      	ldrh	r3, [r3, #6]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d12d      	bne.n	8007fb2 <USBD_SetAddress+0x76>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	885b      	ldrh	r3, [r3, #2]
 8007f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f5c:	d829      	bhi.n	8007fb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d104      	bne.n	8007f80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f9bc 	bl	80082f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7e:	e01d      	b.n	8007fbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	7bfa      	ldrb	r2, [r7, #15]
 8007f84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 ff09 	bl	8008da4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa7a 	bl	800848c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d004      	beq.n	8007fa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa6:	e009      	b.n	8007fbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb0:	e004      	b.n	8007fbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f99e 	bl	80082f6 <USBD_CtlError>
  }
}
 8007fba:	bf00      	nop
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	4b4e      	ldr	r3, [pc, #312]	; (8008114 <USBD_SetConfig+0x150>)
 8007fda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fdc:	4b4d      	ldr	r3, [pc, #308]	; (8008114 <USBD_SetConfig+0x150>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d905      	bls.n	8007ff0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f985 	bl	80082f6 <USBD_CtlError>
    return USBD_FAIL;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e08c      	b.n	800810a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d002      	beq.n	8008002 <USBD_SetConfig+0x3e>
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d029      	beq.n	8008054 <USBD_SetConfig+0x90>
 8008000:	e075      	b.n	80080ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008002:	4b44      	ldr	r3, [pc, #272]	; (8008114 <USBD_SetConfig+0x150>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d020      	beq.n	800804c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800800a:	4b42      	ldr	r3, [pc, #264]	; (8008114 <USBD_SetConfig+0x150>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008014:	4b3f      	ldr	r3, [pc, #252]	; (8008114 <USBD_SetConfig+0x150>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7fe ffe7 	bl	8006fee <USBD_SetClassConfig>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d008      	beq.n	800803c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f962 	bl	80082f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800803a:	e065      	b.n	8008108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fa25 	bl	800848c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2203      	movs	r2, #3
 8008046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800804a:	e05d      	b.n	8008108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fa1d 	bl	800848c <USBD_CtlSendStatus>
      break;
 8008052:	e059      	b.n	8008108 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008054:	4b2f      	ldr	r3, [pc, #188]	; (8008114 <USBD_SetConfig+0x150>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d112      	bne.n	8008082 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008064:	4b2b      	ldr	r3, [pc, #172]	; (8008114 <USBD_SetConfig+0x150>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800806e:	4b29      	ldr	r3, [pc, #164]	; (8008114 <USBD_SetConfig+0x150>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7fe ffd6 	bl	8007026 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fa06 	bl	800848c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008080:	e042      	b.n	8008108 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008082:	4b24      	ldr	r3, [pc, #144]	; (8008114 <USBD_SetConfig+0x150>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	429a      	cmp	r2, r3
 800808e:	d02a      	beq.n	80080e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7fe ffc4 	bl	8007026 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800809e:	4b1d      	ldr	r3, [pc, #116]	; (8008114 <USBD_SetConfig+0x150>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080a8:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <USBD_SetConfig+0x150>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fe ff9d 	bl	8006fee <USBD_SetClassConfig>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00f      	beq.n	80080de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f918 	bl	80082f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fe ffa9 	bl	8007026 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080dc:	e014      	b.n	8008108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f9d4 	bl	800848c <USBD_CtlSendStatus>
      break;
 80080e4:	e010      	b.n	8008108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f9d0 	bl	800848c <USBD_CtlSendStatus>
      break;
 80080ec:	e00c      	b.n	8008108 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f900 	bl	80082f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080f6:	4b07      	ldr	r3, [pc, #28]	; (8008114 <USBD_SetConfig+0x150>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7fe ff92 	bl	8007026 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008102:	2303      	movs	r3, #3
 8008104:	73fb      	strb	r3, [r7, #15]
      break;
 8008106:	bf00      	nop
  }

  return ret;
 8008108:	7bfb      	ldrb	r3, [r7, #15]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000288 	.word	0x20000288

08008118 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	88db      	ldrh	r3, [r3, #6]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d004      	beq.n	8008134 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f8e2 	bl	80082f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008132:	e023      	b.n	800817c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	dc02      	bgt.n	8008146 <USBD_GetConfig+0x2e>
 8008140:	2b00      	cmp	r3, #0
 8008142:	dc03      	bgt.n	800814c <USBD_GetConfig+0x34>
 8008144:	e015      	b.n	8008172 <USBD_GetConfig+0x5a>
 8008146:	2b03      	cmp	r3, #3
 8008148:	d00b      	beq.n	8008162 <USBD_GetConfig+0x4a>
 800814a:	e012      	b.n	8008172 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3308      	adds	r3, #8
 8008156:	2201      	movs	r2, #1
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f93c 	bl	80083d8 <USBD_CtlSendData>
        break;
 8008160:	e00c      	b.n	800817c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3304      	adds	r3, #4
 8008166:	2201      	movs	r2, #1
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f934 	bl	80083d8 <USBD_CtlSendData>
        break;
 8008170:	e004      	b.n	800817c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f8be 	bl	80082f6 <USBD_CtlError>
        break;
 800817a:	bf00      	nop
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008194:	b2db      	uxtb	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	2b02      	cmp	r3, #2
 800819a:	d81e      	bhi.n	80081da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	88db      	ldrh	r3, [r3, #6]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d004      	beq.n	80081ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f8a5 	bl	80082f6 <USBD_CtlError>
        break;
 80081ac:	e01a      	b.n	80081e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d005      	beq.n	80081ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f043 0202 	orr.w	r2, r3, #2
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	330c      	adds	r3, #12
 80081ce:	2202      	movs	r2, #2
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f900 	bl	80083d8 <USBD_CtlSendData>
      break;
 80081d8:	e004      	b.n	80081e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f88a 	bl	80082f6 <USBD_CtlError>
      break;
 80081e2:	bf00      	nop
  }
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d107      	bne.n	800820e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f940 	bl	800848c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800820c:	e013      	b.n	8008236 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	885b      	ldrh	r3, [r3, #2]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d10b      	bne.n	800822e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	889b      	ldrh	r3, [r3, #4]
 800821a:	0a1b      	lsrs	r3, r3, #8
 800821c:	b29b      	uxth	r3, r3
 800821e:	b2da      	uxtb	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f930 	bl	800848c <USBD_CtlSendStatus>
}
 800822c:	e003      	b.n	8008236 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f860 	bl	80082f6 <USBD_CtlError>
}
 8008236:	bf00      	nop
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824e:	b2db      	uxtb	r3, r3
 8008250:	3b01      	subs	r3, #1
 8008252:	2b02      	cmp	r3, #2
 8008254:	d80b      	bhi.n	800826e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	885b      	ldrh	r3, [r3, #2]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d10c      	bne.n	8008278 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f910 	bl	800848c <USBD_CtlSendStatus>
      }
      break;
 800826c:	e004      	b.n	8008278 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f840 	bl	80082f6 <USBD_CtlError>
      break;
 8008276:	e000      	b.n	800827a <USBD_ClrFeature+0x3c>
      break;
 8008278:	bf00      	nop
  }
}
 800827a:	bf00      	nop
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	781a      	ldrb	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3301      	adds	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff fa41 	bl	8007734 <SWAPBYTE>
 80082b2:	4603      	mov	r3, r0
 80082b4:	461a      	mov	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3301      	adds	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f7ff fa34 	bl	8007734 <SWAPBYTE>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f7ff fa27 	bl	8007734 <SWAPBYTE>
 80082e6:	4603      	mov	r3, r0
 80082e8:	461a      	mov	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	80da      	strh	r2, [r3, #6]
}
 80082ee:	bf00      	nop
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b082      	sub	sp, #8
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008300:	2180      	movs	r1, #128	; 0x80
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fce4 	bl	8008cd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008308:	2100      	movs	r1, #0
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fce0 	bl	8008cd0 <USBD_LL_StallEP>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d036      	beq.n	800839c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008332:	6938      	ldr	r0, [r7, #16]
 8008334:	f000 f836 	bl	80083a4 <USBD_GetLen>
 8008338:	4603      	mov	r3, r0
 800833a:	3301      	adds	r3, #1
 800833c:	b29b      	uxth	r3, r3
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	b29a      	uxth	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	4413      	add	r3, r2
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	7812      	ldrb	r2, [r2, #0]
 8008350:	701a      	strb	r2, [r3, #0]
  idx++;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	3301      	adds	r3, #1
 8008356:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	4413      	add	r3, r2
 800835e:	2203      	movs	r2, #3
 8008360:	701a      	strb	r2, [r3, #0]
  idx++;
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	3301      	adds	r3, #1
 8008366:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008368:	e013      	b.n	8008392 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800836a:	7dfb      	ldrb	r3, [r7, #23]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	4413      	add	r3, r2
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	7812      	ldrb	r2, [r2, #0]
 8008374:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	3301      	adds	r3, #1
 800837a:	613b      	str	r3, [r7, #16]
    idx++;
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	3301      	adds	r3, #1
 8008380:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	4413      	add	r3, r2
 8008388:	2200      	movs	r2, #0
 800838a:	701a      	strb	r2, [r3, #0]
    idx++;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	3301      	adds	r3, #1
 8008390:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e7      	bne.n	800836a <USBD_GetString+0x52>
 800839a:	e000      	b.n	800839e <USBD_GetString+0x86>
    return;
 800839c:	bf00      	nop
  }
}
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083b4:	e005      	b.n	80083c2 <USBD_GetLen+0x1e>
  {
    len++;
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	3301      	adds	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	3301      	adds	r3, #1
 80083c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1f5      	bne.n	80083b6 <USBD_GetLen+0x12>
  }

  return len;
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	2100      	movs	r1, #0
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 fcef 	bl	8008de2 <USBD_LL_Transmit>

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	2100      	movs	r1, #0
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fcde 	bl	8008de2 <USBD_LL_Transmit>

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2203      	movs	r2, #3
 8008440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	2100      	movs	r1, #0
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 fce2 	bl	8008e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	2100      	movs	r1, #0
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fcd1 	bl	8008e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2204      	movs	r2, #4
 8008498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800849c:	2300      	movs	r3, #0
 800849e:	2200      	movs	r2, #0
 80084a0:	2100      	movs	r1, #0
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fc9d 	bl	8008de2 <USBD_LL_Transmit>

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2205      	movs	r2, #5
 80084be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084c2:	2300      	movs	r3, #0
 80084c4:	2200      	movs	r2, #0
 80084c6:	2100      	movs	r1, #0
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fcab 	bl	8008e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084dc:	2200      	movs	r2, #0
 80084de:	4912      	ldr	r1, [pc, #72]	; (8008528 <MX_USB_DEVICE_Init+0x50>)
 80084e0:	4812      	ldr	r0, [pc, #72]	; (800852c <MX_USB_DEVICE_Init+0x54>)
 80084e2:	f7fe fd07 	bl	8006ef4 <USBD_Init>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084ec:	f7f8 fa00 	bl	80008f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084f0:	490f      	ldr	r1, [pc, #60]	; (8008530 <MX_USB_DEVICE_Init+0x58>)
 80084f2:	480e      	ldr	r0, [pc, #56]	; (800852c <MX_USB_DEVICE_Init+0x54>)
 80084f4:	f7fe fd2e 	bl	8006f54 <USBD_RegisterClass>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084fe:	f7f8 f9f7 	bl	80008f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008502:	490c      	ldr	r1, [pc, #48]	; (8008534 <MX_USB_DEVICE_Init+0x5c>)
 8008504:	4809      	ldr	r0, [pc, #36]	; (800852c <MX_USB_DEVICE_Init+0x54>)
 8008506:	f7fe fc1f 	bl	8006d48 <USBD_CDC_RegisterInterface>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008510:	f7f8 f9ee 	bl	80008f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008514:	4805      	ldr	r0, [pc, #20]	; (800852c <MX_USB_DEVICE_Init+0x54>)
 8008516:	f7fe fd53 	bl	8006fc0 <USBD_Start>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008520:	f7f8 f9e6 	bl	80008f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008524:	bf00      	nop
 8008526:	bd80      	pop	{r7, pc}
 8008528:	200000ac 	.word	0x200000ac
 800852c:	2000028c 	.word	0x2000028c
 8008530:	20000018 	.word	0x20000018
 8008534:	20000098 	.word	0x20000098

08008538 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800853c:	2200      	movs	r2, #0
 800853e:	4905      	ldr	r1, [pc, #20]	; (8008554 <CDC_Init_FS+0x1c>)
 8008540:	4805      	ldr	r0, [pc, #20]	; (8008558 <CDC_Init_FS+0x20>)
 8008542:	f7fe fc1b 	bl	8006d7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008546:	4905      	ldr	r1, [pc, #20]	; (800855c <CDC_Init_FS+0x24>)
 8008548:	4803      	ldr	r0, [pc, #12]	; (8008558 <CDC_Init_FS+0x20>)
 800854a:	f7fe fc39 	bl	8006dc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800854e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008550:	4618      	mov	r0, r3
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20000d68 	.word	0x20000d68
 8008558:	2000028c 	.word	0x2000028c
 800855c:	20000568 	.word	0x20000568

08008560 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008564:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008566:	4618      	mov	r0, r3
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	6039      	str	r1, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
 800857c:	4613      	mov	r3, r2
 800857e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	2b23      	cmp	r3, #35	; 0x23
 8008584:	d84a      	bhi.n	800861c <CDC_Control_FS+0xac>
 8008586:	a201      	add	r2, pc, #4	; (adr r2, 800858c <CDC_Control_FS+0x1c>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	0800861d 	.word	0x0800861d
 8008590:	0800861d 	.word	0x0800861d
 8008594:	0800861d 	.word	0x0800861d
 8008598:	0800861d 	.word	0x0800861d
 800859c:	0800861d 	.word	0x0800861d
 80085a0:	0800861d 	.word	0x0800861d
 80085a4:	0800861d 	.word	0x0800861d
 80085a8:	0800861d 	.word	0x0800861d
 80085ac:	0800861d 	.word	0x0800861d
 80085b0:	0800861d 	.word	0x0800861d
 80085b4:	0800861d 	.word	0x0800861d
 80085b8:	0800861d 	.word	0x0800861d
 80085bc:	0800861d 	.word	0x0800861d
 80085c0:	0800861d 	.word	0x0800861d
 80085c4:	0800861d 	.word	0x0800861d
 80085c8:	0800861d 	.word	0x0800861d
 80085cc:	0800861d 	.word	0x0800861d
 80085d0:	0800861d 	.word	0x0800861d
 80085d4:	0800861d 	.word	0x0800861d
 80085d8:	0800861d 	.word	0x0800861d
 80085dc:	0800861d 	.word	0x0800861d
 80085e0:	0800861d 	.word	0x0800861d
 80085e4:	0800861d 	.word	0x0800861d
 80085e8:	0800861d 	.word	0x0800861d
 80085ec:	0800861d 	.word	0x0800861d
 80085f0:	0800861d 	.word	0x0800861d
 80085f4:	0800861d 	.word	0x0800861d
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	0800861d 	.word	0x0800861d
 8008600:	0800861d 	.word	0x0800861d
 8008604:	0800861d 	.word	0x0800861d
 8008608:	0800861d 	.word	0x0800861d
 800860c:	0800861d 	.word	0x0800861d
 8008610:	0800861d 	.word	0x0800861d
 8008614:	0800861d 	.word	0x0800861d
 8008618:	0800861d 	.word	0x0800861d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800861c:	bf00      	nop
  }

  return (USBD_OK);
 800861e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	480b      	ldr	r0, [pc, #44]	; (8008668 <CDC_Receive_FS+0x3c>)
 800863a:	f7fe fbc1 	bl	8006dc0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800863e:	480a      	ldr	r0, [pc, #40]	; (8008668 <CDC_Receive_FS+0x3c>)
 8008640:	f7fe fc22 	bl	8006e88 <USBD_CDC_ReceivePacket>
	//Set the received packet length
	cdcHandeler.cdcRxPacketSize = *Len;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	b29a      	uxth	r2, r3
 800864a:	4b08      	ldr	r3, [pc, #32]	; (800866c <CDC_Receive_FS+0x40>)
 800864c:	811a      	strh	r2, [r3, #8]

	CDC_Transmit_FS(Buf, hUsbDeviceFS.ep0_data_len);
 800864e:	4b06      	ldr	r3, [pc, #24]	; (8008668 <CDC_Receive_FS+0x3c>)
 8008650:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008654:	b29b      	uxth	r3, r3
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f809 	bl	8008670 <CDC_Transmit_FS>

	return (USBD_OK);
 800865e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	2000028c 	.word	0x2000028c
 800866c:	20001568 	.word	0x20001568

08008670 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008680:	4b0d      	ldr	r3, [pc, #52]	; (80086b8 <CDC_Transmit_FS+0x48>)
 8008682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008686:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008692:	2301      	movs	r3, #1
 8008694:	e00b      	b.n	80086ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008696:	887b      	ldrh	r3, [r7, #2]
 8008698:	461a      	mov	r2, r3
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4806      	ldr	r0, [pc, #24]	; (80086b8 <CDC_Transmit_FS+0x48>)
 800869e:	f7fe fb6d 	bl	8006d7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80086a2:	4805      	ldr	r0, [pc, #20]	; (80086b8 <CDC_Transmit_FS+0x48>)
 80086a4:	f7fe fbaa 	bl	8006dfc <USBD_CDC_TransmitPacket>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	2000028c 	.word	0x2000028c

080086bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
	...

080086e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	6039      	str	r1, [r7, #0]
 80086ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2212      	movs	r2, #18
 80086f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086f2:	4b03      	ldr	r3, [pc, #12]	; (8008700 <USBD_FS_DeviceDescriptor+0x20>)
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	200000c8 	.word	0x200000c8

08008704 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2204      	movs	r2, #4
 8008714:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008716:	4b03      	ldr	r3, [pc, #12]	; (8008724 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	200000dc 	.word	0x200000dc

08008728 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	6039      	str	r1, [r7, #0]
 8008732:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d105      	bne.n	8008746 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	4907      	ldr	r1, [pc, #28]	; (800875c <USBD_FS_ProductStrDescriptor+0x34>)
 800873e:	4808      	ldr	r0, [pc, #32]	; (8008760 <USBD_FS_ProductStrDescriptor+0x38>)
 8008740:	f7ff fdea 	bl	8008318 <USBD_GetString>
 8008744:	e004      	b.n	8008750 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4904      	ldr	r1, [pc, #16]	; (800875c <USBD_FS_ProductStrDescriptor+0x34>)
 800874a:	4805      	ldr	r0, [pc, #20]	; (8008760 <USBD_FS_ProductStrDescriptor+0x38>)
 800874c:	f7ff fde4 	bl	8008318 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008750:	4b02      	ldr	r3, [pc, #8]	; (800875c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20001578 	.word	0x20001578
 8008760:	08009a0c 	.word	0x08009a0c

08008764 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	6039      	str	r1, [r7, #0]
 800876e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	4904      	ldr	r1, [pc, #16]	; (8008784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008774:	4804      	ldr	r0, [pc, #16]	; (8008788 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008776:	f7ff fdcf 	bl	8008318 <USBD_GetString>
  return USBD_StrDesc;
 800877a:	4b02      	ldr	r3, [pc, #8]	; (8008784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20001578 	.word	0x20001578
 8008788:	08009a18 	.word	0x08009a18

0800878c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	6039      	str	r1, [r7, #0]
 8008796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	221a      	movs	r2, #26
 800879c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800879e:	f000 f843 	bl	8008828 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087a2:	4b02      	ldr	r3, [pc, #8]	; (80087ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	200000e0 	.word	0x200000e0

080087b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	6039      	str	r1, [r7, #0]
 80087ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d105      	bne.n	80087ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	4907      	ldr	r1, [pc, #28]	; (80087e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087c6:	4808      	ldr	r0, [pc, #32]	; (80087e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087c8:	f7ff fda6 	bl	8008318 <USBD_GetString>
 80087cc:	e004      	b.n	80087d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	4904      	ldr	r1, [pc, #16]	; (80087e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087d2:	4805      	ldr	r0, [pc, #20]	; (80087e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087d4:	f7ff fda0 	bl	8008318 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087d8:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20001578 	.word	0x20001578
 80087e8:	08009a2c 	.word	0x08009a2c

080087ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d105      	bne.n	800880a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4907      	ldr	r1, [pc, #28]	; (8008820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008802:	4808      	ldr	r0, [pc, #32]	; (8008824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008804:	f7ff fd88 	bl	8008318 <USBD_GetString>
 8008808:	e004      	b.n	8008814 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4904      	ldr	r1, [pc, #16]	; (8008820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800880e:	4805      	ldr	r0, [pc, #20]	; (8008824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008810:	f7ff fd82 	bl	8008318 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20001578 	.word	0x20001578
 8008824:	08009a38 	.word	0x08009a38

08008828 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800882e:	4b0f      	ldr	r3, [pc, #60]	; (800886c <Get_SerialNum+0x44>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008834:	4b0e      	ldr	r3, [pc, #56]	; (8008870 <Get_SerialNum+0x48>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800883a:	4b0e      	ldr	r3, [pc, #56]	; (8008874 <Get_SerialNum+0x4c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4413      	add	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d009      	beq.n	8008862 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800884e:	2208      	movs	r2, #8
 8008850:	4909      	ldr	r1, [pc, #36]	; (8008878 <Get_SerialNum+0x50>)
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 f814 	bl	8008880 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008858:	2204      	movs	r2, #4
 800885a:	4908      	ldr	r1, [pc, #32]	; (800887c <Get_SerialNum+0x54>)
 800885c:	68b8      	ldr	r0, [r7, #8]
 800885e:	f000 f80f 	bl	8008880 <IntToUnicode>
  }
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	1fff7a10 	.word	0x1fff7a10
 8008870:	1fff7a14 	.word	0x1fff7a14
 8008874:	1fff7a18 	.word	0x1fff7a18
 8008878:	200000e2 	.word	0x200000e2
 800887c:	200000f2 	.word	0x200000f2

08008880 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008892:	2300      	movs	r3, #0
 8008894:	75fb      	strb	r3, [r7, #23]
 8008896:	e027      	b.n	80088e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	0f1b      	lsrs	r3, r3, #28
 800889c:	2b09      	cmp	r3, #9
 800889e:	d80b      	bhi.n	80088b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	0f1b      	lsrs	r3, r3, #28
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	4619      	mov	r1, r3
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	440b      	add	r3, r1
 80088b0:	3230      	adds	r2, #48	; 0x30
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	701a      	strb	r2, [r3, #0]
 80088b6:	e00a      	b.n	80088ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	0f1b      	lsrs	r3, r3, #28
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	4619      	mov	r1, r3
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	440b      	add	r3, r1
 80088c8:	3237      	adds	r2, #55	; 0x37
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	011b      	lsls	r3, r3, #4
 80088d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	3301      	adds	r3, #1
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	4413      	add	r3, r2
 80088de:	2200      	movs	r2, #0
 80088e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	3301      	adds	r3, #1
 80088e6:	75fb      	strb	r3, [r7, #23]
 80088e8:	7dfa      	ldrb	r2, [r7, #23]
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d3d3      	bcc.n	8008898 <IntToUnicode+0x18>
  }
}
 80088f0:	bf00      	nop
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
	...

08008900 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008908:	f107 0314 	add.w	r3, r7, #20
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	605a      	str	r2, [r3, #4]
 8008912:	609a      	str	r2, [r3, #8]
 8008914:	60da      	str	r2, [r3, #12]
 8008916:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008920:	d13a      	bne.n	8008998 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
 8008926:	4b1e      	ldr	r3, [pc, #120]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	4a1d      	ldr	r2, [pc, #116]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 800892c:	f043 0301 	orr.w	r3, r3, #1
 8008930:	6313      	str	r3, [r2, #48]	; 0x30
 8008932:	4b1b      	ldr	r3, [pc, #108]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	613b      	str	r3, [r7, #16]
 800893c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800893e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008944:	2302      	movs	r3, #2
 8008946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008948:	2300      	movs	r3, #0
 800894a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800894c:	2303      	movs	r3, #3
 800894e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008950:	230a      	movs	r3, #10
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008954:	f107 0314 	add.w	r3, r7, #20
 8008958:	4619      	mov	r1, r3
 800895a:	4812      	ldr	r0, [pc, #72]	; (80089a4 <HAL_PCD_MspInit+0xa4>)
 800895c:	f7f8 ff1a 	bl	8001794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008960:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008964:	4a0e      	ldr	r2, [pc, #56]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896a:	6353      	str	r3, [r2, #52]	; 0x34
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	4b0b      	ldr	r3, [pc, #44]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008974:	4a0a      	ldr	r2, [pc, #40]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 8008976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800897a:	6453      	str	r3, [r2, #68]	; 0x44
 800897c:	4b08      	ldr	r3, [pc, #32]	; (80089a0 <HAL_PCD_MspInit+0xa0>)
 800897e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008988:	2200      	movs	r2, #0
 800898a:	2100      	movs	r1, #0
 800898c:	2043      	movs	r0, #67	; 0x43
 800898e:	f7f8 fac8 	bl	8000f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008992:	2043      	movs	r0, #67	; 0x43
 8008994:	f7f8 fae1 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008998:	bf00      	nop
 800899a:	3728      	adds	r7, #40	; 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	40023800 	.word	0x40023800
 80089a4:	40020000 	.word	0x40020000

080089a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f7fe fb4b 	bl	800705a <USBD_LL_SetupStage>
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089de:	78fa      	ldrb	r2, [r7, #3]
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	4613      	mov	r3, r2
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	440b      	add	r3, r1
 80089ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	78fb      	ldrb	r3, [r7, #3]
 80089f4:	4619      	mov	r1, r3
 80089f6:	f7fe fb85 	bl	8007104 <USBD_LL_DataOutStage>
}
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a14:	78fa      	ldrb	r2, [r7, #3]
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	4413      	add	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	440b      	add	r3, r1
 8008a22:	334c      	adds	r3, #76	; 0x4c
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	f7fe fc1e 	bl	800726a <USBD_LL_DataInStage>
}
 8008a2e:	bf00      	nop
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe fd52 	bl	80074ee <USBD_LL_SOF>
}
 8008a4a:	bf00      	nop
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d001      	beq.n	8008a6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a66:	f7f7 ff43 	bl	80008f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a70:	7bfa      	ldrb	r2, [r7, #15]
 8008a72:	4611      	mov	r1, r2
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe fcfc 	bl	8007472 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fe fca4 	bl	80073ce <USBD_LL_Reset>
}
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fcf7 	bl	8007492 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	6812      	ldr	r2, [r2, #0]
 8008ab2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ab6:	f043 0301 	orr.w	r3, r3, #1
 8008aba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ac4:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <HAL_PCD_SuspendCallback+0x48>)
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	4a03      	ldr	r2, [pc, #12]	; (8008ad8 <HAL_PCD_SuspendCallback+0x48>)
 8008aca:	f043 0306 	orr.w	r3, r3, #6
 8008ace:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	e000ed00 	.word	0xe000ed00

08008adc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fce7 	bl	80074be <USBD_LL_Resume>
}
 8008af0:	bf00      	nop
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b0a:	78fa      	ldrb	r2, [r7, #3]
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fd3f 	bl	8007592 <USBD_LL_IsoOUTIncomplete>
}
 8008b14:	bf00      	nop
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fcfb 	bl	800752e <USBD_LL_IsoINIncomplete>
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe fd51 	bl	80075f6 <USBD_LL_DevConnected>
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe fd4e 	bl	800760c <USBD_LL_DevDisconnected>
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d13c      	bne.n	8008c02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b88:	4a20      	ldr	r2, [pc, #128]	; (8008c0c <USBD_LL_Init+0x94>)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a1e      	ldr	r2, [pc, #120]	; (8008c0c <USBD_LL_Init+0x94>)
 8008b94:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b98:	4b1c      	ldr	r3, [pc, #112]	; (8008c0c <USBD_LL_Init+0x94>)
 8008b9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ba0:	4b1a      	ldr	r3, [pc, #104]	; (8008c0c <USBD_LL_Init+0x94>)
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ba6:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <USBD_LL_Init+0x94>)
 8008ba8:	2202      	movs	r2, #2
 8008baa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bac:	4b17      	ldr	r3, [pc, #92]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bb2:	4b16      	ldr	r3, [pc, #88]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bb8:	4b14      	ldr	r3, [pc, #80]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bbe:	4b13      	ldr	r3, [pc, #76]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008bc4:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008bca:	4b10      	ldr	r3, [pc, #64]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008bd0:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008bd6:	480d      	ldr	r0, [pc, #52]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bd8:	f7f8 ff79 	bl	8001ace <HAL_PCD_Init>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008be2:	f7f7 fe85 	bl	80008f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008be6:	2180      	movs	r1, #128	; 0x80
 8008be8:	4808      	ldr	r0, [pc, #32]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bea:	f7fa f9d0 	bl	8002f8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008bee:	2240      	movs	r2, #64	; 0x40
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	4806      	ldr	r0, [pc, #24]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bf4:	f7fa f984 	bl	8002f00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008bf8:	2280      	movs	r2, #128	; 0x80
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	4803      	ldr	r0, [pc, #12]	; (8008c0c <USBD_LL_Init+0x94>)
 8008bfe:	f7fa f97f 	bl	8002f00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20001778 	.word	0x20001778

08008c10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7f9 f86e 	bl	8001d08 <HAL_PCD_Start>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f942 	bl	8008ebc <USBD_Get_USB_Status>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	4608      	mov	r0, r1
 8008c50:	4611      	mov	r1, r2
 8008c52:	461a      	mov	r2, r3
 8008c54:	4603      	mov	r3, r0
 8008c56:	70fb      	strb	r3, [r7, #3]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70bb      	strb	r3, [r7, #2]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c6e:	78bb      	ldrb	r3, [r7, #2]
 8008c70:	883a      	ldrh	r2, [r7, #0]
 8008c72:	78f9      	ldrb	r1, [r7, #3]
 8008c74:	f7f9 fd3f 	bl	80026f6 <HAL_PCD_EP_Open>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 f91c 	bl	8008ebc <USBD_Get_USB_Status>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	4611      	mov	r1, r2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7f9 fd88 	bl	80027c6 <HAL_PCD_EP_Close>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 f8fd 	bl	8008ebc <USBD_Get_USB_Status>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cea:	78fa      	ldrb	r2, [r7, #3]
 8008cec:	4611      	mov	r1, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7f9 fe60 	bl	80029b4 <HAL_PCD_EP_SetStall>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 f8de 	bl	8008ebc <USBD_Get_USB_Status>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	460b      	mov	r3, r1
 8008d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d28:	78fa      	ldrb	r2, [r7, #3]
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7f9 fea5 	bl	8002a7c <HAL_PCD_EP_ClrStall>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 f8bf 	bl	8008ebc <USBD_Get_USB_Status>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	da0b      	bge.n	8008d80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d68:	78fb      	ldrb	r3, [r7, #3]
 8008d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d6e:	68f9      	ldr	r1, [r7, #12]
 8008d70:	4613      	mov	r3, r2
 8008d72:	00db      	lsls	r3, r3, #3
 8008d74:	4413      	add	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	440b      	add	r3, r1
 8008d7a:	333e      	adds	r3, #62	; 0x3e
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	e00b      	b.n	8008d98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008d96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f9 fc72 	bl	80026ac <HAL_PCD_SetAddress>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 f874 	bl	8008ebc <USBD_Get_USB_Status>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b086      	sub	sp, #24
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	603b      	str	r3, [r7, #0]
 8008dee:	460b      	mov	r3, r1
 8008df0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e00:	7af9      	ldrb	r1, [r7, #11]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	f7f9 fd8b 	bl	8002920 <HAL_PCD_EP_Transmit>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 f853 	bl	8008ebc <USBD_Get_USB_Status>
 8008e16:	4603      	mov	r3, r0
 8008e18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3718      	adds	r7, #24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	607a      	str	r2, [r7, #4]
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	460b      	mov	r3, r1
 8008e32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e42:	7af9      	ldrb	r1, [r7, #11]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	f7f9 fd07 	bl	800285a <HAL_PCD_EP_Receive>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 f832 	bl	8008ebc <USBD_Get_USB_Status>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7f9 fd37 	bl	80028f0 <HAL_PCD_EP_GetRxCount>
 8008e82:	4603      	mov	r3, r0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e94:	4b03      	ldr	r3, [pc, #12]	; (8008ea4 <USBD_static_malloc+0x18>)
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20001c84 	.word	0x20001c84

08008ea8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]

}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d817      	bhi.n	8008f00 <USBD_Get_USB_Status+0x44>
 8008ed0:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <USBD_Get_USB_Status+0x1c>)
 8008ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed6:	bf00      	nop
 8008ed8:	08008ee9 	.word	0x08008ee9
 8008edc:	08008eef 	.word	0x08008eef
 8008ee0:	08008ef5 	.word	0x08008ef5
 8008ee4:	08008efb 	.word	0x08008efb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73fb      	strb	r3, [r7, #15]
    break;
 8008eec:	e00b      	b.n	8008f06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef2:	e008      	b.n	8008f06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef8:	e005      	b.n	8008f06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008efa:	2303      	movs	r3, #3
 8008efc:	73fb      	strb	r3, [r7, #15]
    break;
 8008efe:	e002      	b.n	8008f06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f00:	2303      	movs	r3, #3
 8008f02:	73fb      	strb	r3, [r7, #15]
    break;
 8008f04:	bf00      	nop
  }
  return usb_status;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <rybg211_bleModuleInit>:

/* PRIVATE FUNCTIONS DECLARATION ---------------------------------------------*/

/* FUNCTION PROTOTYPES -------------------------------------------------------*/
void rybg211_bleModuleInit(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
	memset(&hBleModule, 0, sizeof(hBleModule_t));
 8008f18:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	4805      	ldr	r0, [pc, #20]	; (8008f34 <rybg211_bleModuleInit+0x20>)
 8008f20:	f000 f8fa 	bl	8009118 <memset>

	HAL_GPIO_WritePin(BLE_MODULE_RESET_GPIO_PORT, BLE_MODULE_RESET_PIN, ENABLE);
 8008f24:	2201      	movs	r2, #1
 8008f26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008f2a:	4803      	ldr	r0, [pc, #12]	; (8008f38 <rybg211_bleModuleInit+0x24>)
 8008f2c:	f7f8 fdb6 	bl	8001a9c <HAL_GPIO_WritePin>
}
 8008f30:	bf00      	nop
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	20001ea4 	.word	0x20001ea4
 8008f38:	40020400 	.word	0x40020400

08008f3c <rybg211_setDeviceName>:

void rybg211_setDeviceName(char* moduleBuffer, char* nameString)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af04      	add	r7, sp, #16
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
	uint8_t nameStringSize = strlen(nameString);
 8008f46:	6838      	ldr	r0, [r7, #0]
 8008f48:	f7f7 f94a 	bl	80001e0 <strlen>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]

	memcpy(moduleBuffer ,BLE_NAME_SET, sizeof(BLE_NAME_SET));
 8008f50:	2209      	movs	r2, #9
 8008f52:	4910      	ldr	r1, [pc, #64]	; (8008f94 <rybg211_setDeviceName+0x58>)
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f8d1 	bl	80090fc <memcpy>

	sprintf((char*)moduleBuffer, "%s%d%s%s%s",BLE_NAME_SET,
 8008f5a:	7bfa      	ldrb	r2, [r7, #15]
 8008f5c:	4b0e      	ldr	r3, [pc, #56]	; (8008f98 <rybg211_setDeviceName+0x5c>)
 8008f5e:	9302      	str	r3, [sp, #8]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	9301      	str	r3, [sp, #4]
 8008f64:	4b0d      	ldr	r3, [pc, #52]	; (8008f9c <rybg211_setDeviceName+0x60>)
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	4a0a      	ldr	r2, [pc, #40]	; (8008f94 <rybg211_setDeviceName+0x58>)
 8008f6c:	490c      	ldr	r1, [pc, #48]	; (8008fa0 <rybg211_setDeviceName+0x64>)
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f8da 	bl	8009128 <siprintf>
										BLE_NEW_FIELD,
										nameString,
										BLE_CMD_TERM);


	hBleModule.txPacketSize = strlen((char*)moduleBuffer);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7f7 f933 	bl	80001e0 <strlen>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <rybg211_setDeviceName+0x68>)
 8008f80:	805a      	strh	r2, [r3, #2]

	hBleModule.controlFlags.flag.packetToTransmit = ENABLE;
 8008f82:	4a08      	ldr	r2, [pc, #32]	; (8008fa4 <rybg211_setDeviceName+0x68>)
 8008f84:	7813      	ldrb	r3, [r2, #0]
 8008f86:	f043 0302 	orr.w	r3, r3, #2
 8008f8a:	7013      	strb	r3, [r2, #0]
}
 8008f8c:	bf00      	nop
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	08009a48 	.word	0x08009a48
 8008f98:	08009a60 	.word	0x08009a60
 8008f9c:	08009a64 	.word	0x08009a64
 8008fa0:	08009a54 	.word	0x08009a54
 8008fa4:	20001ea4 	.word	0x20001ea4

08008fa8 <rybg211_rxPacketParser>:

void rybg211_rxPacketParser(char* moduleBuffer, uint8_t packetSize)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b0c2      	sub	sp, #264	; 0x108
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fb6:	6018      	str	r0, [r3, #0]
 8008fb8:	460a      	mov	r2, r1
 8008fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fbe:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8008fc2:	701a      	strb	r2, [r3, #0]

	char tempBuffer[BLE_MODULE_BUFFER_SIZE] = {0};
 8008fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	22fc      	movs	r2, #252	; 0xfc
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f89e 	bl	8009118 <memset>

	if(0 == memcmp(moduleBuffer, BLE_DATA_RX, BLE_PARSER_CHAR_COUNT))
 8008fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fe4:	2204      	movs	r2, #4
 8008fe6:	4924      	ldr	r1, [pc, #144]	; (8009078 <rybg211_rxPacketParser+0xd0>)
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	f000 f877 	bl	80090dc <memcmp>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10e      	bne.n	8009012 <rybg211_rxPacketParser+0x6a>
	{
		memcpy(tempBuffer, moduleBuffer, packetSize);
 8008ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff8:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8008ffc:	781a      	ldrb	r2, [r3, #0]
 8008ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009006:	f107 0008 	add.w	r0, r7, #8
 800900a:	6819      	ldr	r1, [r3, #0]
 800900c:	f000 f876 	bl	80090fc <memcpy>
 8009010:	e023      	b.n	800905a <rybg211_rxPacketParser+0xb2>

	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_CONNECTION,BLE_PARSER_CHAR_COUNT))
 8009012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800901a:	2204      	movs	r2, #4
 800901c:	4917      	ldr	r1, [pc, #92]	; (800907c <rybg211_rxPacketParser+0xd4>)
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	f000 f85c 	bl	80090dc <memcmp>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d108      	bne.n	800903c <rybg211_rxPacketParser+0x94>
	{
		hBleModule.ConnectedDevice = moduleBuffer[6];
 800902a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	799a      	ldrb	r2, [r3, #6]
 8009036:	4b12      	ldr	r3, [pc, #72]	; (8009080 <rybg211_rxPacketParser+0xd8>)
 8009038:	751a      	strb	r2, [r3, #20]
 800903a:	e00e      	b.n	800905a <rybg211_rxPacketParser+0xb2>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_DISCONNECTION, BLE_PARSER_CHAR_COUNT))
 800903c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009044:	2204      	movs	r2, #4
 8009046:	490f      	ldr	r1, [pc, #60]	; (8009084 <rybg211_rxPacketParser+0xdc>)
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	f000 f847 	bl	80090dc <memcmp>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <rybg211_rxPacketParser+0xb2>
	{
		hBleModule.ConnectedDevice = 0;
 8009054:	4b0a      	ldr	r3, [pc, #40]	; (8009080 <rybg211_rxPacketParser+0xd8>)
 8009056:	2200      	movs	r2, #0
 8009058:	751a      	strb	r2, [r3, #20]
	}
	//Clear the UART DMA RX buffer
	memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 800905a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009066:	2100      	movs	r1, #0
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	f000 f855 	bl	8009118 <memset>
}
 800906e:	bf00      	nop
 8009070:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	08009a68 	.word	0x08009a68
 800907c:	08009a70 	.word	0x08009a70
 8009080:	20001ea4 	.word	0x20001ea4
 8009084:	08009a78 	.word	0x08009a78

08009088 <__errno>:
 8009088:	4b01      	ldr	r3, [pc, #4]	; (8009090 <__errno+0x8>)
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	200000fc 	.word	0x200000fc

08009094 <__libc_init_array>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	4d0d      	ldr	r5, [pc, #52]	; (80090cc <__libc_init_array+0x38>)
 8009098:	4c0d      	ldr	r4, [pc, #52]	; (80090d0 <__libc_init_array+0x3c>)
 800909a:	1b64      	subs	r4, r4, r5
 800909c:	10a4      	asrs	r4, r4, #2
 800909e:	2600      	movs	r6, #0
 80090a0:	42a6      	cmp	r6, r4
 80090a2:	d109      	bne.n	80090b8 <__libc_init_array+0x24>
 80090a4:	4d0b      	ldr	r5, [pc, #44]	; (80090d4 <__libc_init_array+0x40>)
 80090a6:	4c0c      	ldr	r4, [pc, #48]	; (80090d8 <__libc_init_array+0x44>)
 80090a8:	f000 fc9e 	bl	80099e8 <_init>
 80090ac:	1b64      	subs	r4, r4, r5
 80090ae:	10a4      	asrs	r4, r4, #2
 80090b0:	2600      	movs	r6, #0
 80090b2:	42a6      	cmp	r6, r4
 80090b4:	d105      	bne.n	80090c2 <__libc_init_array+0x2e>
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090bc:	4798      	blx	r3
 80090be:	3601      	adds	r6, #1
 80090c0:	e7ee      	b.n	80090a0 <__libc_init_array+0xc>
 80090c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c6:	4798      	blx	r3
 80090c8:	3601      	adds	r6, #1
 80090ca:	e7f2      	b.n	80090b2 <__libc_init_array+0x1e>
 80090cc:	08009adc 	.word	0x08009adc
 80090d0:	08009adc 	.word	0x08009adc
 80090d4:	08009adc 	.word	0x08009adc
 80090d8:	08009ae0 	.word	0x08009ae0

080090dc <memcmp>:
 80090dc:	b510      	push	{r4, lr}
 80090de:	3901      	subs	r1, #1
 80090e0:	4402      	add	r2, r0
 80090e2:	4290      	cmp	r0, r2
 80090e4:	d101      	bne.n	80090ea <memcmp+0xe>
 80090e6:	2000      	movs	r0, #0
 80090e8:	e005      	b.n	80090f6 <memcmp+0x1a>
 80090ea:	7803      	ldrb	r3, [r0, #0]
 80090ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80090f0:	42a3      	cmp	r3, r4
 80090f2:	d001      	beq.n	80090f8 <memcmp+0x1c>
 80090f4:	1b18      	subs	r0, r3, r4
 80090f6:	bd10      	pop	{r4, pc}
 80090f8:	3001      	adds	r0, #1
 80090fa:	e7f2      	b.n	80090e2 <memcmp+0x6>

080090fc <memcpy>:
 80090fc:	440a      	add	r2, r1
 80090fe:	4291      	cmp	r1, r2
 8009100:	f100 33ff 	add.w	r3, r0, #4294967295
 8009104:	d100      	bne.n	8009108 <memcpy+0xc>
 8009106:	4770      	bx	lr
 8009108:	b510      	push	{r4, lr}
 800910a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800910e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009112:	4291      	cmp	r1, r2
 8009114:	d1f9      	bne.n	800910a <memcpy+0xe>
 8009116:	bd10      	pop	{r4, pc}

08009118 <memset>:
 8009118:	4402      	add	r2, r0
 800911a:	4603      	mov	r3, r0
 800911c:	4293      	cmp	r3, r2
 800911e:	d100      	bne.n	8009122 <memset+0xa>
 8009120:	4770      	bx	lr
 8009122:	f803 1b01 	strb.w	r1, [r3], #1
 8009126:	e7f9      	b.n	800911c <memset+0x4>

08009128 <siprintf>:
 8009128:	b40e      	push	{r1, r2, r3}
 800912a:	b500      	push	{lr}
 800912c:	b09c      	sub	sp, #112	; 0x70
 800912e:	ab1d      	add	r3, sp, #116	; 0x74
 8009130:	9002      	str	r0, [sp, #8]
 8009132:	9006      	str	r0, [sp, #24]
 8009134:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009138:	4809      	ldr	r0, [pc, #36]	; (8009160 <siprintf+0x38>)
 800913a:	9107      	str	r1, [sp, #28]
 800913c:	9104      	str	r1, [sp, #16]
 800913e:	4909      	ldr	r1, [pc, #36]	; (8009164 <siprintf+0x3c>)
 8009140:	f853 2b04 	ldr.w	r2, [r3], #4
 8009144:	9105      	str	r1, [sp, #20]
 8009146:	6800      	ldr	r0, [r0, #0]
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	a902      	add	r1, sp, #8
 800914c:	f000 f868 	bl	8009220 <_svfiprintf_r>
 8009150:	9b02      	ldr	r3, [sp, #8]
 8009152:	2200      	movs	r2, #0
 8009154:	701a      	strb	r2, [r3, #0]
 8009156:	b01c      	add	sp, #112	; 0x70
 8009158:	f85d eb04 	ldr.w	lr, [sp], #4
 800915c:	b003      	add	sp, #12
 800915e:	4770      	bx	lr
 8009160:	200000fc 	.word	0x200000fc
 8009164:	ffff0208 	.word	0xffff0208

08009168 <__ssputs_r>:
 8009168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	688e      	ldr	r6, [r1, #8]
 800916e:	429e      	cmp	r6, r3
 8009170:	4682      	mov	sl, r0
 8009172:	460c      	mov	r4, r1
 8009174:	4690      	mov	r8, r2
 8009176:	461f      	mov	r7, r3
 8009178:	d838      	bhi.n	80091ec <__ssputs_r+0x84>
 800917a:	898a      	ldrh	r2, [r1, #12]
 800917c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009180:	d032      	beq.n	80091e8 <__ssputs_r+0x80>
 8009182:	6825      	ldr	r5, [r4, #0]
 8009184:	6909      	ldr	r1, [r1, #16]
 8009186:	eba5 0901 	sub.w	r9, r5, r1
 800918a:	6965      	ldr	r5, [r4, #20]
 800918c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009190:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009194:	3301      	adds	r3, #1
 8009196:	444b      	add	r3, r9
 8009198:	106d      	asrs	r5, r5, #1
 800919a:	429d      	cmp	r5, r3
 800919c:	bf38      	it	cc
 800919e:	461d      	movcc	r5, r3
 80091a0:	0553      	lsls	r3, r2, #21
 80091a2:	d531      	bpl.n	8009208 <__ssputs_r+0xa0>
 80091a4:	4629      	mov	r1, r5
 80091a6:	f000 fb55 	bl	8009854 <_malloc_r>
 80091aa:	4606      	mov	r6, r0
 80091ac:	b950      	cbnz	r0, 80091c4 <__ssputs_r+0x5c>
 80091ae:	230c      	movs	r3, #12
 80091b0:	f8ca 3000 	str.w	r3, [sl]
 80091b4:	89a3      	ldrh	r3, [r4, #12]
 80091b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ba:	81a3      	strh	r3, [r4, #12]
 80091bc:	f04f 30ff 	mov.w	r0, #4294967295
 80091c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c4:	6921      	ldr	r1, [r4, #16]
 80091c6:	464a      	mov	r2, r9
 80091c8:	f7ff ff98 	bl	80090fc <memcpy>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	6126      	str	r6, [r4, #16]
 80091da:	6165      	str	r5, [r4, #20]
 80091dc:	444e      	add	r6, r9
 80091de:	eba5 0509 	sub.w	r5, r5, r9
 80091e2:	6026      	str	r6, [r4, #0]
 80091e4:	60a5      	str	r5, [r4, #8]
 80091e6:	463e      	mov	r6, r7
 80091e8:	42be      	cmp	r6, r7
 80091ea:	d900      	bls.n	80091ee <__ssputs_r+0x86>
 80091ec:	463e      	mov	r6, r7
 80091ee:	6820      	ldr	r0, [r4, #0]
 80091f0:	4632      	mov	r2, r6
 80091f2:	4641      	mov	r1, r8
 80091f4:	f000 faa8 	bl	8009748 <memmove>
 80091f8:	68a3      	ldr	r3, [r4, #8]
 80091fa:	1b9b      	subs	r3, r3, r6
 80091fc:	60a3      	str	r3, [r4, #8]
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	4433      	add	r3, r6
 8009202:	6023      	str	r3, [r4, #0]
 8009204:	2000      	movs	r0, #0
 8009206:	e7db      	b.n	80091c0 <__ssputs_r+0x58>
 8009208:	462a      	mov	r2, r5
 800920a:	f000 fb97 	bl	800993c <_realloc_r>
 800920e:	4606      	mov	r6, r0
 8009210:	2800      	cmp	r0, #0
 8009212:	d1e1      	bne.n	80091d8 <__ssputs_r+0x70>
 8009214:	6921      	ldr	r1, [r4, #16]
 8009216:	4650      	mov	r0, sl
 8009218:	f000 fab0 	bl	800977c <_free_r>
 800921c:	e7c7      	b.n	80091ae <__ssputs_r+0x46>
	...

08009220 <_svfiprintf_r>:
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	4698      	mov	r8, r3
 8009226:	898b      	ldrh	r3, [r1, #12]
 8009228:	061b      	lsls	r3, r3, #24
 800922a:	b09d      	sub	sp, #116	; 0x74
 800922c:	4607      	mov	r7, r0
 800922e:	460d      	mov	r5, r1
 8009230:	4614      	mov	r4, r2
 8009232:	d50e      	bpl.n	8009252 <_svfiprintf_r+0x32>
 8009234:	690b      	ldr	r3, [r1, #16]
 8009236:	b963      	cbnz	r3, 8009252 <_svfiprintf_r+0x32>
 8009238:	2140      	movs	r1, #64	; 0x40
 800923a:	f000 fb0b 	bl	8009854 <_malloc_r>
 800923e:	6028      	str	r0, [r5, #0]
 8009240:	6128      	str	r0, [r5, #16]
 8009242:	b920      	cbnz	r0, 800924e <_svfiprintf_r+0x2e>
 8009244:	230c      	movs	r3, #12
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	e0d1      	b.n	80093f2 <_svfiprintf_r+0x1d2>
 800924e:	2340      	movs	r3, #64	; 0x40
 8009250:	616b      	str	r3, [r5, #20]
 8009252:	2300      	movs	r3, #0
 8009254:	9309      	str	r3, [sp, #36]	; 0x24
 8009256:	2320      	movs	r3, #32
 8009258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800925c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009260:	2330      	movs	r3, #48	; 0x30
 8009262:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800940c <_svfiprintf_r+0x1ec>
 8009266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800926a:	f04f 0901 	mov.w	r9, #1
 800926e:	4623      	mov	r3, r4
 8009270:	469a      	mov	sl, r3
 8009272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009276:	b10a      	cbz	r2, 800927c <_svfiprintf_r+0x5c>
 8009278:	2a25      	cmp	r2, #37	; 0x25
 800927a:	d1f9      	bne.n	8009270 <_svfiprintf_r+0x50>
 800927c:	ebba 0b04 	subs.w	fp, sl, r4
 8009280:	d00b      	beq.n	800929a <_svfiprintf_r+0x7a>
 8009282:	465b      	mov	r3, fp
 8009284:	4622      	mov	r2, r4
 8009286:	4629      	mov	r1, r5
 8009288:	4638      	mov	r0, r7
 800928a:	f7ff ff6d 	bl	8009168 <__ssputs_r>
 800928e:	3001      	adds	r0, #1
 8009290:	f000 80aa 	beq.w	80093e8 <_svfiprintf_r+0x1c8>
 8009294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009296:	445a      	add	r2, fp
 8009298:	9209      	str	r2, [sp, #36]	; 0x24
 800929a:	f89a 3000 	ldrb.w	r3, [sl]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 80a2 	beq.w	80093e8 <_svfiprintf_r+0x1c8>
 80092a4:	2300      	movs	r3, #0
 80092a6:	f04f 32ff 	mov.w	r2, #4294967295
 80092aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ae:	f10a 0a01 	add.w	sl, sl, #1
 80092b2:	9304      	str	r3, [sp, #16]
 80092b4:	9307      	str	r3, [sp, #28]
 80092b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092ba:	931a      	str	r3, [sp, #104]	; 0x68
 80092bc:	4654      	mov	r4, sl
 80092be:	2205      	movs	r2, #5
 80092c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c4:	4851      	ldr	r0, [pc, #324]	; (800940c <_svfiprintf_r+0x1ec>)
 80092c6:	f7f6 ff93 	bl	80001f0 <memchr>
 80092ca:	9a04      	ldr	r2, [sp, #16]
 80092cc:	b9d8      	cbnz	r0, 8009306 <_svfiprintf_r+0xe6>
 80092ce:	06d0      	lsls	r0, r2, #27
 80092d0:	bf44      	itt	mi
 80092d2:	2320      	movmi	r3, #32
 80092d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092d8:	0711      	lsls	r1, r2, #28
 80092da:	bf44      	itt	mi
 80092dc:	232b      	movmi	r3, #43	; 0x2b
 80092de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e2:	f89a 3000 	ldrb.w	r3, [sl]
 80092e6:	2b2a      	cmp	r3, #42	; 0x2a
 80092e8:	d015      	beq.n	8009316 <_svfiprintf_r+0xf6>
 80092ea:	9a07      	ldr	r2, [sp, #28]
 80092ec:	4654      	mov	r4, sl
 80092ee:	2000      	movs	r0, #0
 80092f0:	f04f 0c0a 	mov.w	ip, #10
 80092f4:	4621      	mov	r1, r4
 80092f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092fa:	3b30      	subs	r3, #48	; 0x30
 80092fc:	2b09      	cmp	r3, #9
 80092fe:	d94e      	bls.n	800939e <_svfiprintf_r+0x17e>
 8009300:	b1b0      	cbz	r0, 8009330 <_svfiprintf_r+0x110>
 8009302:	9207      	str	r2, [sp, #28]
 8009304:	e014      	b.n	8009330 <_svfiprintf_r+0x110>
 8009306:	eba0 0308 	sub.w	r3, r0, r8
 800930a:	fa09 f303 	lsl.w	r3, r9, r3
 800930e:	4313      	orrs	r3, r2
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	46a2      	mov	sl, r4
 8009314:	e7d2      	b.n	80092bc <_svfiprintf_r+0x9c>
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	1d19      	adds	r1, r3, #4
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	9103      	str	r1, [sp, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfbb      	ittet	lt
 8009322:	425b      	neglt	r3, r3
 8009324:	f042 0202 	orrlt.w	r2, r2, #2
 8009328:	9307      	strge	r3, [sp, #28]
 800932a:	9307      	strlt	r3, [sp, #28]
 800932c:	bfb8      	it	lt
 800932e:	9204      	strlt	r2, [sp, #16]
 8009330:	7823      	ldrb	r3, [r4, #0]
 8009332:	2b2e      	cmp	r3, #46	; 0x2e
 8009334:	d10c      	bne.n	8009350 <_svfiprintf_r+0x130>
 8009336:	7863      	ldrb	r3, [r4, #1]
 8009338:	2b2a      	cmp	r3, #42	; 0x2a
 800933a:	d135      	bne.n	80093a8 <_svfiprintf_r+0x188>
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	1d1a      	adds	r2, r3, #4
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	9203      	str	r2, [sp, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	bfb8      	it	lt
 8009348:	f04f 33ff 	movlt.w	r3, #4294967295
 800934c:	3402      	adds	r4, #2
 800934e:	9305      	str	r3, [sp, #20]
 8009350:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800941c <_svfiprintf_r+0x1fc>
 8009354:	7821      	ldrb	r1, [r4, #0]
 8009356:	2203      	movs	r2, #3
 8009358:	4650      	mov	r0, sl
 800935a:	f7f6 ff49 	bl	80001f0 <memchr>
 800935e:	b140      	cbz	r0, 8009372 <_svfiprintf_r+0x152>
 8009360:	2340      	movs	r3, #64	; 0x40
 8009362:	eba0 000a 	sub.w	r0, r0, sl
 8009366:	fa03 f000 	lsl.w	r0, r3, r0
 800936a:	9b04      	ldr	r3, [sp, #16]
 800936c:	4303      	orrs	r3, r0
 800936e:	3401      	adds	r4, #1
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009376:	4826      	ldr	r0, [pc, #152]	; (8009410 <_svfiprintf_r+0x1f0>)
 8009378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800937c:	2206      	movs	r2, #6
 800937e:	f7f6 ff37 	bl	80001f0 <memchr>
 8009382:	2800      	cmp	r0, #0
 8009384:	d038      	beq.n	80093f8 <_svfiprintf_r+0x1d8>
 8009386:	4b23      	ldr	r3, [pc, #140]	; (8009414 <_svfiprintf_r+0x1f4>)
 8009388:	bb1b      	cbnz	r3, 80093d2 <_svfiprintf_r+0x1b2>
 800938a:	9b03      	ldr	r3, [sp, #12]
 800938c:	3307      	adds	r3, #7
 800938e:	f023 0307 	bic.w	r3, r3, #7
 8009392:	3308      	adds	r3, #8
 8009394:	9303      	str	r3, [sp, #12]
 8009396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009398:	4433      	add	r3, r6
 800939a:	9309      	str	r3, [sp, #36]	; 0x24
 800939c:	e767      	b.n	800926e <_svfiprintf_r+0x4e>
 800939e:	fb0c 3202 	mla	r2, ip, r2, r3
 80093a2:	460c      	mov	r4, r1
 80093a4:	2001      	movs	r0, #1
 80093a6:	e7a5      	b.n	80092f4 <_svfiprintf_r+0xd4>
 80093a8:	2300      	movs	r3, #0
 80093aa:	3401      	adds	r4, #1
 80093ac:	9305      	str	r3, [sp, #20]
 80093ae:	4619      	mov	r1, r3
 80093b0:	f04f 0c0a 	mov.w	ip, #10
 80093b4:	4620      	mov	r0, r4
 80093b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ba:	3a30      	subs	r2, #48	; 0x30
 80093bc:	2a09      	cmp	r2, #9
 80093be:	d903      	bls.n	80093c8 <_svfiprintf_r+0x1a8>
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d0c5      	beq.n	8009350 <_svfiprintf_r+0x130>
 80093c4:	9105      	str	r1, [sp, #20]
 80093c6:	e7c3      	b.n	8009350 <_svfiprintf_r+0x130>
 80093c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093cc:	4604      	mov	r4, r0
 80093ce:	2301      	movs	r3, #1
 80093d0:	e7f0      	b.n	80093b4 <_svfiprintf_r+0x194>
 80093d2:	ab03      	add	r3, sp, #12
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	462a      	mov	r2, r5
 80093d8:	4b0f      	ldr	r3, [pc, #60]	; (8009418 <_svfiprintf_r+0x1f8>)
 80093da:	a904      	add	r1, sp, #16
 80093dc:	4638      	mov	r0, r7
 80093de:	f3af 8000 	nop.w
 80093e2:	1c42      	adds	r2, r0, #1
 80093e4:	4606      	mov	r6, r0
 80093e6:	d1d6      	bne.n	8009396 <_svfiprintf_r+0x176>
 80093e8:	89ab      	ldrh	r3, [r5, #12]
 80093ea:	065b      	lsls	r3, r3, #25
 80093ec:	f53f af2c 	bmi.w	8009248 <_svfiprintf_r+0x28>
 80093f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093f2:	b01d      	add	sp, #116	; 0x74
 80093f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f8:	ab03      	add	r3, sp, #12
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	462a      	mov	r2, r5
 80093fe:	4b06      	ldr	r3, [pc, #24]	; (8009418 <_svfiprintf_r+0x1f8>)
 8009400:	a904      	add	r1, sp, #16
 8009402:	4638      	mov	r0, r7
 8009404:	f000 f87a 	bl	80094fc <_printf_i>
 8009408:	e7eb      	b.n	80093e2 <_svfiprintf_r+0x1c2>
 800940a:	bf00      	nop
 800940c:	08009aa0 	.word	0x08009aa0
 8009410:	08009aaa 	.word	0x08009aaa
 8009414:	00000000 	.word	0x00000000
 8009418:	08009169 	.word	0x08009169
 800941c:	08009aa6 	.word	0x08009aa6

08009420 <_printf_common>:
 8009420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009424:	4616      	mov	r6, r2
 8009426:	4699      	mov	r9, r3
 8009428:	688a      	ldr	r2, [r1, #8]
 800942a:	690b      	ldr	r3, [r1, #16]
 800942c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009430:	4293      	cmp	r3, r2
 8009432:	bfb8      	it	lt
 8009434:	4613      	movlt	r3, r2
 8009436:	6033      	str	r3, [r6, #0]
 8009438:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800943c:	4607      	mov	r7, r0
 800943e:	460c      	mov	r4, r1
 8009440:	b10a      	cbz	r2, 8009446 <_printf_common+0x26>
 8009442:	3301      	adds	r3, #1
 8009444:	6033      	str	r3, [r6, #0]
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	0699      	lsls	r1, r3, #26
 800944a:	bf42      	ittt	mi
 800944c:	6833      	ldrmi	r3, [r6, #0]
 800944e:	3302      	addmi	r3, #2
 8009450:	6033      	strmi	r3, [r6, #0]
 8009452:	6825      	ldr	r5, [r4, #0]
 8009454:	f015 0506 	ands.w	r5, r5, #6
 8009458:	d106      	bne.n	8009468 <_printf_common+0x48>
 800945a:	f104 0a19 	add.w	sl, r4, #25
 800945e:	68e3      	ldr	r3, [r4, #12]
 8009460:	6832      	ldr	r2, [r6, #0]
 8009462:	1a9b      	subs	r3, r3, r2
 8009464:	42ab      	cmp	r3, r5
 8009466:	dc26      	bgt.n	80094b6 <_printf_common+0x96>
 8009468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800946c:	1e13      	subs	r3, r2, #0
 800946e:	6822      	ldr	r2, [r4, #0]
 8009470:	bf18      	it	ne
 8009472:	2301      	movne	r3, #1
 8009474:	0692      	lsls	r2, r2, #26
 8009476:	d42b      	bmi.n	80094d0 <_printf_common+0xb0>
 8009478:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800947c:	4649      	mov	r1, r9
 800947e:	4638      	mov	r0, r7
 8009480:	47c0      	blx	r8
 8009482:	3001      	adds	r0, #1
 8009484:	d01e      	beq.n	80094c4 <_printf_common+0xa4>
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	68e5      	ldr	r5, [r4, #12]
 800948a:	6832      	ldr	r2, [r6, #0]
 800948c:	f003 0306 	and.w	r3, r3, #6
 8009490:	2b04      	cmp	r3, #4
 8009492:	bf08      	it	eq
 8009494:	1aad      	subeq	r5, r5, r2
 8009496:	68a3      	ldr	r3, [r4, #8]
 8009498:	6922      	ldr	r2, [r4, #16]
 800949a:	bf0c      	ite	eq
 800949c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094a0:	2500      	movne	r5, #0
 80094a2:	4293      	cmp	r3, r2
 80094a4:	bfc4      	itt	gt
 80094a6:	1a9b      	subgt	r3, r3, r2
 80094a8:	18ed      	addgt	r5, r5, r3
 80094aa:	2600      	movs	r6, #0
 80094ac:	341a      	adds	r4, #26
 80094ae:	42b5      	cmp	r5, r6
 80094b0:	d11a      	bne.n	80094e8 <_printf_common+0xc8>
 80094b2:	2000      	movs	r0, #0
 80094b4:	e008      	b.n	80094c8 <_printf_common+0xa8>
 80094b6:	2301      	movs	r3, #1
 80094b8:	4652      	mov	r2, sl
 80094ba:	4649      	mov	r1, r9
 80094bc:	4638      	mov	r0, r7
 80094be:	47c0      	blx	r8
 80094c0:	3001      	adds	r0, #1
 80094c2:	d103      	bne.n	80094cc <_printf_common+0xac>
 80094c4:	f04f 30ff 	mov.w	r0, #4294967295
 80094c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094cc:	3501      	adds	r5, #1
 80094ce:	e7c6      	b.n	800945e <_printf_common+0x3e>
 80094d0:	18e1      	adds	r1, r4, r3
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	2030      	movs	r0, #48	; 0x30
 80094d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094da:	4422      	add	r2, r4
 80094dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094e4:	3302      	adds	r3, #2
 80094e6:	e7c7      	b.n	8009478 <_printf_common+0x58>
 80094e8:	2301      	movs	r3, #1
 80094ea:	4622      	mov	r2, r4
 80094ec:	4649      	mov	r1, r9
 80094ee:	4638      	mov	r0, r7
 80094f0:	47c0      	blx	r8
 80094f2:	3001      	adds	r0, #1
 80094f4:	d0e6      	beq.n	80094c4 <_printf_common+0xa4>
 80094f6:	3601      	adds	r6, #1
 80094f8:	e7d9      	b.n	80094ae <_printf_common+0x8e>
	...

080094fc <_printf_i>:
 80094fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009500:	7e0f      	ldrb	r7, [r1, #24]
 8009502:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009504:	2f78      	cmp	r7, #120	; 0x78
 8009506:	4691      	mov	r9, r2
 8009508:	4680      	mov	r8, r0
 800950a:	460c      	mov	r4, r1
 800950c:	469a      	mov	sl, r3
 800950e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009512:	d807      	bhi.n	8009524 <_printf_i+0x28>
 8009514:	2f62      	cmp	r7, #98	; 0x62
 8009516:	d80a      	bhi.n	800952e <_printf_i+0x32>
 8009518:	2f00      	cmp	r7, #0
 800951a:	f000 80d8 	beq.w	80096ce <_printf_i+0x1d2>
 800951e:	2f58      	cmp	r7, #88	; 0x58
 8009520:	f000 80a3 	beq.w	800966a <_printf_i+0x16e>
 8009524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009528:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800952c:	e03a      	b.n	80095a4 <_printf_i+0xa8>
 800952e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009532:	2b15      	cmp	r3, #21
 8009534:	d8f6      	bhi.n	8009524 <_printf_i+0x28>
 8009536:	a101      	add	r1, pc, #4	; (adr r1, 800953c <_printf_i+0x40>)
 8009538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800953c:	08009595 	.word	0x08009595
 8009540:	080095a9 	.word	0x080095a9
 8009544:	08009525 	.word	0x08009525
 8009548:	08009525 	.word	0x08009525
 800954c:	08009525 	.word	0x08009525
 8009550:	08009525 	.word	0x08009525
 8009554:	080095a9 	.word	0x080095a9
 8009558:	08009525 	.word	0x08009525
 800955c:	08009525 	.word	0x08009525
 8009560:	08009525 	.word	0x08009525
 8009564:	08009525 	.word	0x08009525
 8009568:	080096b5 	.word	0x080096b5
 800956c:	080095d9 	.word	0x080095d9
 8009570:	08009697 	.word	0x08009697
 8009574:	08009525 	.word	0x08009525
 8009578:	08009525 	.word	0x08009525
 800957c:	080096d7 	.word	0x080096d7
 8009580:	08009525 	.word	0x08009525
 8009584:	080095d9 	.word	0x080095d9
 8009588:	08009525 	.word	0x08009525
 800958c:	08009525 	.word	0x08009525
 8009590:	0800969f 	.word	0x0800969f
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	1d1a      	adds	r2, r3, #4
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	602a      	str	r2, [r5, #0]
 800959c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095a4:	2301      	movs	r3, #1
 80095a6:	e0a3      	b.n	80096f0 <_printf_i+0x1f4>
 80095a8:	6820      	ldr	r0, [r4, #0]
 80095aa:	6829      	ldr	r1, [r5, #0]
 80095ac:	0606      	lsls	r6, r0, #24
 80095ae:	f101 0304 	add.w	r3, r1, #4
 80095b2:	d50a      	bpl.n	80095ca <_printf_i+0xce>
 80095b4:	680e      	ldr	r6, [r1, #0]
 80095b6:	602b      	str	r3, [r5, #0]
 80095b8:	2e00      	cmp	r6, #0
 80095ba:	da03      	bge.n	80095c4 <_printf_i+0xc8>
 80095bc:	232d      	movs	r3, #45	; 0x2d
 80095be:	4276      	negs	r6, r6
 80095c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c4:	485e      	ldr	r0, [pc, #376]	; (8009740 <_printf_i+0x244>)
 80095c6:	230a      	movs	r3, #10
 80095c8:	e019      	b.n	80095fe <_printf_i+0x102>
 80095ca:	680e      	ldr	r6, [r1, #0]
 80095cc:	602b      	str	r3, [r5, #0]
 80095ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095d2:	bf18      	it	ne
 80095d4:	b236      	sxthne	r6, r6
 80095d6:	e7ef      	b.n	80095b8 <_printf_i+0xbc>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	6820      	ldr	r0, [r4, #0]
 80095dc:	1d19      	adds	r1, r3, #4
 80095de:	6029      	str	r1, [r5, #0]
 80095e0:	0601      	lsls	r1, r0, #24
 80095e2:	d501      	bpl.n	80095e8 <_printf_i+0xec>
 80095e4:	681e      	ldr	r6, [r3, #0]
 80095e6:	e002      	b.n	80095ee <_printf_i+0xf2>
 80095e8:	0646      	lsls	r6, r0, #25
 80095ea:	d5fb      	bpl.n	80095e4 <_printf_i+0xe8>
 80095ec:	881e      	ldrh	r6, [r3, #0]
 80095ee:	4854      	ldr	r0, [pc, #336]	; (8009740 <_printf_i+0x244>)
 80095f0:	2f6f      	cmp	r7, #111	; 0x6f
 80095f2:	bf0c      	ite	eq
 80095f4:	2308      	moveq	r3, #8
 80095f6:	230a      	movne	r3, #10
 80095f8:	2100      	movs	r1, #0
 80095fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095fe:	6865      	ldr	r5, [r4, #4]
 8009600:	60a5      	str	r5, [r4, #8]
 8009602:	2d00      	cmp	r5, #0
 8009604:	bfa2      	ittt	ge
 8009606:	6821      	ldrge	r1, [r4, #0]
 8009608:	f021 0104 	bicge.w	r1, r1, #4
 800960c:	6021      	strge	r1, [r4, #0]
 800960e:	b90e      	cbnz	r6, 8009614 <_printf_i+0x118>
 8009610:	2d00      	cmp	r5, #0
 8009612:	d04d      	beq.n	80096b0 <_printf_i+0x1b4>
 8009614:	4615      	mov	r5, r2
 8009616:	fbb6 f1f3 	udiv	r1, r6, r3
 800961a:	fb03 6711 	mls	r7, r3, r1, r6
 800961e:	5dc7      	ldrb	r7, [r0, r7]
 8009620:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009624:	4637      	mov	r7, r6
 8009626:	42bb      	cmp	r3, r7
 8009628:	460e      	mov	r6, r1
 800962a:	d9f4      	bls.n	8009616 <_printf_i+0x11a>
 800962c:	2b08      	cmp	r3, #8
 800962e:	d10b      	bne.n	8009648 <_printf_i+0x14c>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	07de      	lsls	r6, r3, #31
 8009634:	d508      	bpl.n	8009648 <_printf_i+0x14c>
 8009636:	6923      	ldr	r3, [r4, #16]
 8009638:	6861      	ldr	r1, [r4, #4]
 800963a:	4299      	cmp	r1, r3
 800963c:	bfde      	ittt	le
 800963e:	2330      	movle	r3, #48	; 0x30
 8009640:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009644:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009648:	1b52      	subs	r2, r2, r5
 800964a:	6122      	str	r2, [r4, #16]
 800964c:	f8cd a000 	str.w	sl, [sp]
 8009650:	464b      	mov	r3, r9
 8009652:	aa03      	add	r2, sp, #12
 8009654:	4621      	mov	r1, r4
 8009656:	4640      	mov	r0, r8
 8009658:	f7ff fee2 	bl	8009420 <_printf_common>
 800965c:	3001      	adds	r0, #1
 800965e:	d14c      	bne.n	80096fa <_printf_i+0x1fe>
 8009660:	f04f 30ff 	mov.w	r0, #4294967295
 8009664:	b004      	add	sp, #16
 8009666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966a:	4835      	ldr	r0, [pc, #212]	; (8009740 <_printf_i+0x244>)
 800966c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009670:	6829      	ldr	r1, [r5, #0]
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	f851 6b04 	ldr.w	r6, [r1], #4
 8009678:	6029      	str	r1, [r5, #0]
 800967a:	061d      	lsls	r5, r3, #24
 800967c:	d514      	bpl.n	80096a8 <_printf_i+0x1ac>
 800967e:	07df      	lsls	r7, r3, #31
 8009680:	bf44      	itt	mi
 8009682:	f043 0320 	orrmi.w	r3, r3, #32
 8009686:	6023      	strmi	r3, [r4, #0]
 8009688:	b91e      	cbnz	r6, 8009692 <_printf_i+0x196>
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	f023 0320 	bic.w	r3, r3, #32
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	2310      	movs	r3, #16
 8009694:	e7b0      	b.n	80095f8 <_printf_i+0xfc>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	f043 0320 	orr.w	r3, r3, #32
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	2378      	movs	r3, #120	; 0x78
 80096a0:	4828      	ldr	r0, [pc, #160]	; (8009744 <_printf_i+0x248>)
 80096a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096a6:	e7e3      	b.n	8009670 <_printf_i+0x174>
 80096a8:	0659      	lsls	r1, r3, #25
 80096aa:	bf48      	it	mi
 80096ac:	b2b6      	uxthmi	r6, r6
 80096ae:	e7e6      	b.n	800967e <_printf_i+0x182>
 80096b0:	4615      	mov	r5, r2
 80096b2:	e7bb      	b.n	800962c <_printf_i+0x130>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	6826      	ldr	r6, [r4, #0]
 80096b8:	6961      	ldr	r1, [r4, #20]
 80096ba:	1d18      	adds	r0, r3, #4
 80096bc:	6028      	str	r0, [r5, #0]
 80096be:	0635      	lsls	r5, r6, #24
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	d501      	bpl.n	80096c8 <_printf_i+0x1cc>
 80096c4:	6019      	str	r1, [r3, #0]
 80096c6:	e002      	b.n	80096ce <_printf_i+0x1d2>
 80096c8:	0670      	lsls	r0, r6, #25
 80096ca:	d5fb      	bpl.n	80096c4 <_printf_i+0x1c8>
 80096cc:	8019      	strh	r1, [r3, #0]
 80096ce:	2300      	movs	r3, #0
 80096d0:	6123      	str	r3, [r4, #16]
 80096d2:	4615      	mov	r5, r2
 80096d4:	e7ba      	b.n	800964c <_printf_i+0x150>
 80096d6:	682b      	ldr	r3, [r5, #0]
 80096d8:	1d1a      	adds	r2, r3, #4
 80096da:	602a      	str	r2, [r5, #0]
 80096dc:	681d      	ldr	r5, [r3, #0]
 80096de:	6862      	ldr	r2, [r4, #4]
 80096e0:	2100      	movs	r1, #0
 80096e2:	4628      	mov	r0, r5
 80096e4:	f7f6 fd84 	bl	80001f0 <memchr>
 80096e8:	b108      	cbz	r0, 80096ee <_printf_i+0x1f2>
 80096ea:	1b40      	subs	r0, r0, r5
 80096ec:	6060      	str	r0, [r4, #4]
 80096ee:	6863      	ldr	r3, [r4, #4]
 80096f0:	6123      	str	r3, [r4, #16]
 80096f2:	2300      	movs	r3, #0
 80096f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096f8:	e7a8      	b.n	800964c <_printf_i+0x150>
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	462a      	mov	r2, r5
 80096fe:	4649      	mov	r1, r9
 8009700:	4640      	mov	r0, r8
 8009702:	47d0      	blx	sl
 8009704:	3001      	adds	r0, #1
 8009706:	d0ab      	beq.n	8009660 <_printf_i+0x164>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	079b      	lsls	r3, r3, #30
 800970c:	d413      	bmi.n	8009736 <_printf_i+0x23a>
 800970e:	68e0      	ldr	r0, [r4, #12]
 8009710:	9b03      	ldr	r3, [sp, #12]
 8009712:	4298      	cmp	r0, r3
 8009714:	bfb8      	it	lt
 8009716:	4618      	movlt	r0, r3
 8009718:	e7a4      	b.n	8009664 <_printf_i+0x168>
 800971a:	2301      	movs	r3, #1
 800971c:	4632      	mov	r2, r6
 800971e:	4649      	mov	r1, r9
 8009720:	4640      	mov	r0, r8
 8009722:	47d0      	blx	sl
 8009724:	3001      	adds	r0, #1
 8009726:	d09b      	beq.n	8009660 <_printf_i+0x164>
 8009728:	3501      	adds	r5, #1
 800972a:	68e3      	ldr	r3, [r4, #12]
 800972c:	9903      	ldr	r1, [sp, #12]
 800972e:	1a5b      	subs	r3, r3, r1
 8009730:	42ab      	cmp	r3, r5
 8009732:	dcf2      	bgt.n	800971a <_printf_i+0x21e>
 8009734:	e7eb      	b.n	800970e <_printf_i+0x212>
 8009736:	2500      	movs	r5, #0
 8009738:	f104 0619 	add.w	r6, r4, #25
 800973c:	e7f5      	b.n	800972a <_printf_i+0x22e>
 800973e:	bf00      	nop
 8009740:	08009ab1 	.word	0x08009ab1
 8009744:	08009ac2 	.word	0x08009ac2

08009748 <memmove>:
 8009748:	4288      	cmp	r0, r1
 800974a:	b510      	push	{r4, lr}
 800974c:	eb01 0402 	add.w	r4, r1, r2
 8009750:	d902      	bls.n	8009758 <memmove+0x10>
 8009752:	4284      	cmp	r4, r0
 8009754:	4623      	mov	r3, r4
 8009756:	d807      	bhi.n	8009768 <memmove+0x20>
 8009758:	1e43      	subs	r3, r0, #1
 800975a:	42a1      	cmp	r1, r4
 800975c:	d008      	beq.n	8009770 <memmove+0x28>
 800975e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009762:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009766:	e7f8      	b.n	800975a <memmove+0x12>
 8009768:	4402      	add	r2, r0
 800976a:	4601      	mov	r1, r0
 800976c:	428a      	cmp	r2, r1
 800976e:	d100      	bne.n	8009772 <memmove+0x2a>
 8009770:	bd10      	pop	{r4, pc}
 8009772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800977a:	e7f7      	b.n	800976c <memmove+0x24>

0800977c <_free_r>:
 800977c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800977e:	2900      	cmp	r1, #0
 8009780:	d044      	beq.n	800980c <_free_r+0x90>
 8009782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009786:	9001      	str	r0, [sp, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f1a1 0404 	sub.w	r4, r1, #4
 800978e:	bfb8      	it	lt
 8009790:	18e4      	addlt	r4, r4, r3
 8009792:	f000 f913 	bl	80099bc <__malloc_lock>
 8009796:	4a1e      	ldr	r2, [pc, #120]	; (8009810 <_free_r+0x94>)
 8009798:	9801      	ldr	r0, [sp, #4]
 800979a:	6813      	ldr	r3, [r2, #0]
 800979c:	b933      	cbnz	r3, 80097ac <_free_r+0x30>
 800979e:	6063      	str	r3, [r4, #4]
 80097a0:	6014      	str	r4, [r2, #0]
 80097a2:	b003      	add	sp, #12
 80097a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097a8:	f000 b90e 	b.w	80099c8 <__malloc_unlock>
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	d908      	bls.n	80097c2 <_free_r+0x46>
 80097b0:	6825      	ldr	r5, [r4, #0]
 80097b2:	1961      	adds	r1, r4, r5
 80097b4:	428b      	cmp	r3, r1
 80097b6:	bf01      	itttt	eq
 80097b8:	6819      	ldreq	r1, [r3, #0]
 80097ba:	685b      	ldreq	r3, [r3, #4]
 80097bc:	1949      	addeq	r1, r1, r5
 80097be:	6021      	streq	r1, [r4, #0]
 80097c0:	e7ed      	b.n	800979e <_free_r+0x22>
 80097c2:	461a      	mov	r2, r3
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	b10b      	cbz	r3, 80097cc <_free_r+0x50>
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d9fa      	bls.n	80097c2 <_free_r+0x46>
 80097cc:	6811      	ldr	r1, [r2, #0]
 80097ce:	1855      	adds	r5, r2, r1
 80097d0:	42a5      	cmp	r5, r4
 80097d2:	d10b      	bne.n	80097ec <_free_r+0x70>
 80097d4:	6824      	ldr	r4, [r4, #0]
 80097d6:	4421      	add	r1, r4
 80097d8:	1854      	adds	r4, r2, r1
 80097da:	42a3      	cmp	r3, r4
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	d1e0      	bne.n	80097a2 <_free_r+0x26>
 80097e0:	681c      	ldr	r4, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	6053      	str	r3, [r2, #4]
 80097e6:	4421      	add	r1, r4
 80097e8:	6011      	str	r1, [r2, #0]
 80097ea:	e7da      	b.n	80097a2 <_free_r+0x26>
 80097ec:	d902      	bls.n	80097f4 <_free_r+0x78>
 80097ee:	230c      	movs	r3, #12
 80097f0:	6003      	str	r3, [r0, #0]
 80097f2:	e7d6      	b.n	80097a2 <_free_r+0x26>
 80097f4:	6825      	ldr	r5, [r4, #0]
 80097f6:	1961      	adds	r1, r4, r5
 80097f8:	428b      	cmp	r3, r1
 80097fa:	bf04      	itt	eq
 80097fc:	6819      	ldreq	r1, [r3, #0]
 80097fe:	685b      	ldreq	r3, [r3, #4]
 8009800:	6063      	str	r3, [r4, #4]
 8009802:	bf04      	itt	eq
 8009804:	1949      	addeq	r1, r1, r5
 8009806:	6021      	streq	r1, [r4, #0]
 8009808:	6054      	str	r4, [r2, #4]
 800980a:	e7ca      	b.n	80097a2 <_free_r+0x26>
 800980c:	b003      	add	sp, #12
 800980e:	bd30      	pop	{r4, r5, pc}
 8009810:	200020bc 	.word	0x200020bc

08009814 <sbrk_aligned>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	4e0e      	ldr	r6, [pc, #56]	; (8009850 <sbrk_aligned+0x3c>)
 8009818:	460c      	mov	r4, r1
 800981a:	6831      	ldr	r1, [r6, #0]
 800981c:	4605      	mov	r5, r0
 800981e:	b911      	cbnz	r1, 8009826 <sbrk_aligned+0x12>
 8009820:	f000 f8bc 	bl	800999c <_sbrk_r>
 8009824:	6030      	str	r0, [r6, #0]
 8009826:	4621      	mov	r1, r4
 8009828:	4628      	mov	r0, r5
 800982a:	f000 f8b7 	bl	800999c <_sbrk_r>
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	d00a      	beq.n	8009848 <sbrk_aligned+0x34>
 8009832:	1cc4      	adds	r4, r0, #3
 8009834:	f024 0403 	bic.w	r4, r4, #3
 8009838:	42a0      	cmp	r0, r4
 800983a:	d007      	beq.n	800984c <sbrk_aligned+0x38>
 800983c:	1a21      	subs	r1, r4, r0
 800983e:	4628      	mov	r0, r5
 8009840:	f000 f8ac 	bl	800999c <_sbrk_r>
 8009844:	3001      	adds	r0, #1
 8009846:	d101      	bne.n	800984c <sbrk_aligned+0x38>
 8009848:	f04f 34ff 	mov.w	r4, #4294967295
 800984c:	4620      	mov	r0, r4
 800984e:	bd70      	pop	{r4, r5, r6, pc}
 8009850:	200020c0 	.word	0x200020c0

08009854 <_malloc_r>:
 8009854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009858:	1ccd      	adds	r5, r1, #3
 800985a:	f025 0503 	bic.w	r5, r5, #3
 800985e:	3508      	adds	r5, #8
 8009860:	2d0c      	cmp	r5, #12
 8009862:	bf38      	it	cc
 8009864:	250c      	movcc	r5, #12
 8009866:	2d00      	cmp	r5, #0
 8009868:	4607      	mov	r7, r0
 800986a:	db01      	blt.n	8009870 <_malloc_r+0x1c>
 800986c:	42a9      	cmp	r1, r5
 800986e:	d905      	bls.n	800987c <_malloc_r+0x28>
 8009870:	230c      	movs	r3, #12
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	2600      	movs	r6, #0
 8009876:	4630      	mov	r0, r6
 8009878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800987c:	4e2e      	ldr	r6, [pc, #184]	; (8009938 <_malloc_r+0xe4>)
 800987e:	f000 f89d 	bl	80099bc <__malloc_lock>
 8009882:	6833      	ldr	r3, [r6, #0]
 8009884:	461c      	mov	r4, r3
 8009886:	bb34      	cbnz	r4, 80098d6 <_malloc_r+0x82>
 8009888:	4629      	mov	r1, r5
 800988a:	4638      	mov	r0, r7
 800988c:	f7ff ffc2 	bl	8009814 <sbrk_aligned>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	4604      	mov	r4, r0
 8009894:	d14d      	bne.n	8009932 <_malloc_r+0xde>
 8009896:	6834      	ldr	r4, [r6, #0]
 8009898:	4626      	mov	r6, r4
 800989a:	2e00      	cmp	r6, #0
 800989c:	d140      	bne.n	8009920 <_malloc_r+0xcc>
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	4631      	mov	r1, r6
 80098a2:	4638      	mov	r0, r7
 80098a4:	eb04 0803 	add.w	r8, r4, r3
 80098a8:	f000 f878 	bl	800999c <_sbrk_r>
 80098ac:	4580      	cmp	r8, r0
 80098ae:	d13a      	bne.n	8009926 <_malloc_r+0xd2>
 80098b0:	6821      	ldr	r1, [r4, #0]
 80098b2:	3503      	adds	r5, #3
 80098b4:	1a6d      	subs	r5, r5, r1
 80098b6:	f025 0503 	bic.w	r5, r5, #3
 80098ba:	3508      	adds	r5, #8
 80098bc:	2d0c      	cmp	r5, #12
 80098be:	bf38      	it	cc
 80098c0:	250c      	movcc	r5, #12
 80098c2:	4629      	mov	r1, r5
 80098c4:	4638      	mov	r0, r7
 80098c6:	f7ff ffa5 	bl	8009814 <sbrk_aligned>
 80098ca:	3001      	adds	r0, #1
 80098cc:	d02b      	beq.n	8009926 <_malloc_r+0xd2>
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	442b      	add	r3, r5
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	e00e      	b.n	80098f4 <_malloc_r+0xa0>
 80098d6:	6822      	ldr	r2, [r4, #0]
 80098d8:	1b52      	subs	r2, r2, r5
 80098da:	d41e      	bmi.n	800991a <_malloc_r+0xc6>
 80098dc:	2a0b      	cmp	r2, #11
 80098de:	d916      	bls.n	800990e <_malloc_r+0xba>
 80098e0:	1961      	adds	r1, r4, r5
 80098e2:	42a3      	cmp	r3, r4
 80098e4:	6025      	str	r5, [r4, #0]
 80098e6:	bf18      	it	ne
 80098e8:	6059      	strne	r1, [r3, #4]
 80098ea:	6863      	ldr	r3, [r4, #4]
 80098ec:	bf08      	it	eq
 80098ee:	6031      	streq	r1, [r6, #0]
 80098f0:	5162      	str	r2, [r4, r5]
 80098f2:	604b      	str	r3, [r1, #4]
 80098f4:	4638      	mov	r0, r7
 80098f6:	f104 060b 	add.w	r6, r4, #11
 80098fa:	f000 f865 	bl	80099c8 <__malloc_unlock>
 80098fe:	f026 0607 	bic.w	r6, r6, #7
 8009902:	1d23      	adds	r3, r4, #4
 8009904:	1af2      	subs	r2, r6, r3
 8009906:	d0b6      	beq.n	8009876 <_malloc_r+0x22>
 8009908:	1b9b      	subs	r3, r3, r6
 800990a:	50a3      	str	r3, [r4, r2]
 800990c:	e7b3      	b.n	8009876 <_malloc_r+0x22>
 800990e:	6862      	ldr	r2, [r4, #4]
 8009910:	42a3      	cmp	r3, r4
 8009912:	bf0c      	ite	eq
 8009914:	6032      	streq	r2, [r6, #0]
 8009916:	605a      	strne	r2, [r3, #4]
 8009918:	e7ec      	b.n	80098f4 <_malloc_r+0xa0>
 800991a:	4623      	mov	r3, r4
 800991c:	6864      	ldr	r4, [r4, #4]
 800991e:	e7b2      	b.n	8009886 <_malloc_r+0x32>
 8009920:	4634      	mov	r4, r6
 8009922:	6876      	ldr	r6, [r6, #4]
 8009924:	e7b9      	b.n	800989a <_malloc_r+0x46>
 8009926:	230c      	movs	r3, #12
 8009928:	603b      	str	r3, [r7, #0]
 800992a:	4638      	mov	r0, r7
 800992c:	f000 f84c 	bl	80099c8 <__malloc_unlock>
 8009930:	e7a1      	b.n	8009876 <_malloc_r+0x22>
 8009932:	6025      	str	r5, [r4, #0]
 8009934:	e7de      	b.n	80098f4 <_malloc_r+0xa0>
 8009936:	bf00      	nop
 8009938:	200020bc 	.word	0x200020bc

0800993c <_realloc_r>:
 800993c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009940:	4680      	mov	r8, r0
 8009942:	4614      	mov	r4, r2
 8009944:	460e      	mov	r6, r1
 8009946:	b921      	cbnz	r1, 8009952 <_realloc_r+0x16>
 8009948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800994c:	4611      	mov	r1, r2
 800994e:	f7ff bf81 	b.w	8009854 <_malloc_r>
 8009952:	b92a      	cbnz	r2, 8009960 <_realloc_r+0x24>
 8009954:	f7ff ff12 	bl	800977c <_free_r>
 8009958:	4625      	mov	r5, r4
 800995a:	4628      	mov	r0, r5
 800995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009960:	f000 f838 	bl	80099d4 <_malloc_usable_size_r>
 8009964:	4284      	cmp	r4, r0
 8009966:	4607      	mov	r7, r0
 8009968:	d802      	bhi.n	8009970 <_realloc_r+0x34>
 800996a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800996e:	d812      	bhi.n	8009996 <_realloc_r+0x5a>
 8009970:	4621      	mov	r1, r4
 8009972:	4640      	mov	r0, r8
 8009974:	f7ff ff6e 	bl	8009854 <_malloc_r>
 8009978:	4605      	mov	r5, r0
 800997a:	2800      	cmp	r0, #0
 800997c:	d0ed      	beq.n	800995a <_realloc_r+0x1e>
 800997e:	42bc      	cmp	r4, r7
 8009980:	4622      	mov	r2, r4
 8009982:	4631      	mov	r1, r6
 8009984:	bf28      	it	cs
 8009986:	463a      	movcs	r2, r7
 8009988:	f7ff fbb8 	bl	80090fc <memcpy>
 800998c:	4631      	mov	r1, r6
 800998e:	4640      	mov	r0, r8
 8009990:	f7ff fef4 	bl	800977c <_free_r>
 8009994:	e7e1      	b.n	800995a <_realloc_r+0x1e>
 8009996:	4635      	mov	r5, r6
 8009998:	e7df      	b.n	800995a <_realloc_r+0x1e>
	...

0800999c <_sbrk_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4d06      	ldr	r5, [pc, #24]	; (80099b8 <_sbrk_r+0x1c>)
 80099a0:	2300      	movs	r3, #0
 80099a2:	4604      	mov	r4, r0
 80099a4:	4608      	mov	r0, r1
 80099a6:	602b      	str	r3, [r5, #0]
 80099a8:	f7f7 f8d8 	bl	8000b5c <_sbrk>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_sbrk_r+0x1a>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_sbrk_r+0x1a>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	200020c4 	.word	0x200020c4

080099bc <__malloc_lock>:
 80099bc:	4801      	ldr	r0, [pc, #4]	; (80099c4 <__malloc_lock+0x8>)
 80099be:	f000 b811 	b.w	80099e4 <__retarget_lock_acquire_recursive>
 80099c2:	bf00      	nop
 80099c4:	200020c8 	.word	0x200020c8

080099c8 <__malloc_unlock>:
 80099c8:	4801      	ldr	r0, [pc, #4]	; (80099d0 <__malloc_unlock+0x8>)
 80099ca:	f000 b80c 	b.w	80099e6 <__retarget_lock_release_recursive>
 80099ce:	bf00      	nop
 80099d0:	200020c8 	.word	0x200020c8

080099d4 <_malloc_usable_size_r>:
 80099d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d8:	1f18      	subs	r0, r3, #4
 80099da:	2b00      	cmp	r3, #0
 80099dc:	bfbc      	itt	lt
 80099de:	580b      	ldrlt	r3, [r1, r0]
 80099e0:	18c0      	addlt	r0, r0, r3
 80099e2:	4770      	bx	lr

080099e4 <__retarget_lock_acquire_recursive>:
 80099e4:	4770      	bx	lr

080099e6 <__retarget_lock_release_recursive>:
 80099e6:	4770      	bx	lr

080099e8 <_init>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	bf00      	nop
 80099ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ee:	bc08      	pop	{r3}
 80099f0:	469e      	mov	lr, r3
 80099f2:	4770      	bx	lr

080099f4 <_fini>:
 80099f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f6:	bf00      	nop
 80099f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fa:	bc08      	pop	{r3}
 80099fc:	469e      	mov	lr, r3
 80099fe:	4770      	bx	lr
