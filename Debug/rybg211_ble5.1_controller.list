
rybg211_ble5.1_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009724  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009980  08009980  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009980  08009980  00019980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009988  08009988  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009988  08009988  00019988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800998c  0800998c  0001998c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f68  20000160  08009af0  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020c8  08009af0  000220c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135bf  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003317  00000000  00000000  0003374f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00036a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  000378d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191a8  00000000  00000000  000385f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013630  00000000  00000000  00051798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1fe  00000000  00000000  00064dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eefc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd8  00000000  00000000  000ef018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080098ac 	.word	0x080098ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	080098ac 	.word	0x080098ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fb34 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f82a 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8e2 	bl	8000768 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8b8 	bl	8000718 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f88c 	bl	80006c4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005ac:	f007 ff76 	bl	800849c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  rybg211_bleModuleInit();
 80005b0:	f008 fc92 	bl	8008ed8 <rybg211_bleModuleInit>

  rybg211_setDeviceName(hBleModule.txBuffer, "BLE Bridge");
 80005b4:	490a      	ldr	r1, [pc, #40]	; (80005e0 <main+0x4c>)
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <main+0x50>)
 80005b8:	f008 fca2 	bl	8008f00 <rybg211_setDeviceName>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80005bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c0:	4909      	ldr	r1, [pc, #36]	; (80005e8 <main+0x54>)
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <main+0x58>)
 80005c4:	f003 fa06 	bl	80039d4 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <main+0x5c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <main+0x5c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f022 0208 	bic.w	r2, r2, #8
 80005d6:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  main_UartTxTask();
 80005d8:	f000 f940 	bl	800085c <main_UartTxTask>
 80005dc:	e7fc      	b.n	80005d8 <main+0x44>
 80005de:	bf00      	nop
 80005e0:	080098c4 	.word	0x080098c4
 80005e4:	20001eb8 	.word	0x20001eb8
 80005e8:	20001fb8 	.word	0x20001fb8
 80005ec:	2000017c 	.word	0x2000017c
 80005f0:	200001c0 	.word	0x200001c0

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f008 fcea 	bl	8008fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <SystemClock_Config+0xc8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a26      	ldr	r2, [pc, #152]	; (80006bc <SystemClock_Config+0xc8>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <SystemClock_Config+0xcc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <SystemClock_Config+0xcc>)
 800063e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000664:	230f      	movs	r3, #15
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000668:	2390      	movs	r3, #144	; 0x90
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066c:	2304      	movs	r3, #4
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000670:	2305      	movs	r3, #5
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fc87 	bl	8002f8c <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 f916 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2101      	movs	r1, #1
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fee9 	bl	800347c <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b0:	f000 f900 	bl	80008b4 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART1_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006fc:	f003 f89e 	bl	800383c <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f8d5 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000017c 	.word	0x2000017c
 8000714:	40011000 	.word	0x40011000

08000718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_DMA_Init+0x4c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <MX_DMA_Init+0x4c>)
 8000728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <MX_DMA_Init+0x4c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	203a      	movs	r0, #58	; 0x3a
 8000740:	f000 fbd1 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000744:	203a      	movs	r0, #58	; 0x3a
 8000746:	f000 fbea 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2046      	movs	r0, #70	; 0x46
 8000750:	f000 fbc9 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000754:	2046      	movs	r0, #70	; 0x46
 8000756:	f000 fbe2 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_GPIO_Init+0x9c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <MX_GPIO_Init+0x9c>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_GPIO_Init+0x9c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_GPIO_Init+0x9c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <MX_GPIO_Init+0x9c>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_GPIO_Init+0x9c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_GPIO_Init+0x9c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <MX_GPIO_Init+0x9c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_GPIO_Init+0x9c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f244 01e0 	movw	r1, #16608	; 0x40e0
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <MX_GPIO_Init+0xa0>)
 80007da:	f001 f941 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODULE_RESET_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80007de:	f244 03e0 	movw	r3, #16608	; 0x40e0
 80007e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0xa0>)
 80007f8:	f000 ffae 	bl	8001758 <HAL_GPIO_Init>

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020400 	.word	0x40020400

0800080c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	807b      	strh	r3, [r7, #2]
	hBleModule.controlFlags.flag.packetReceived = ENABLE;
 8000818:	4a0c      	ldr	r2, [pc, #48]	; (800084c <HAL_UARTEx_RxEventCallback+0x40>)
 800081a:	7813      	ldrb	r3, [r2, #0]
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	7013      	strb	r3, [r2, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 8000822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000826:	490a      	ldr	r1, [pc, #40]	; (8000850 <HAL_UARTEx_RxEventCallback+0x44>)
 8000828:	480a      	ldr	r0, [pc, #40]	; (8000854 <HAL_UARTEx_RxEventCallback+0x48>)
 800082a:	f003 f8d3 	bl	80039d4 <HAL_UARTEx_ReceiveToIdle_DMA>

	hBleModule.rxPacketSize = Size;
 800082e:	4a07      	ldr	r2, [pc, #28]	; (800084c <HAL_UARTEx_RxEventCallback+0x40>)
 8000830:	887b      	ldrh	r3, [r7, #2]
 8000832:	8093      	strh	r3, [r2, #4]

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <HAL_UARTEx_RxEventCallback+0x4c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f022 0208 	bic.w	r2, r2, #8
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20001ea4 	.word	0x20001ea4
 8000850:	20001fb8 	.word	0x20001fb8
 8000854:	2000017c 	.word	0x2000017c
 8000858:	200001c0 	.word	0x200001c0

0800085c <main_UartTxTask>:


void main_UartTxTask()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hBleModule.txTimer > 1000))
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <main_UartTxTask+0x4c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	f003 0302 	and.w	r3, r3, #2
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d019      	beq.n	80008a2 <main_UartTxTask+0x46>
 800086e:	f000 fa2f 	bl	8000cd0 <HAL_GetTick>
 8000872:	4602      	mov	r2, r0
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <main_UartTxTask+0x4c>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800087e:	d910      	bls.n	80008a2 <main_UartTxTask+0x46>
	{
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <main_UartTxTask+0x4c>)
 8000882:	885b      	ldrh	r3, [r3, #2]
 8000884:	461a      	mov	r2, r3
 8000886:	4909      	ldr	r1, [pc, #36]	; (80008ac <main_UartTxTask+0x50>)
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <main_UartTxTask+0x54>)
 800088a:	f003 f825 	bl	80038d8 <HAL_UART_Transmit_DMA>

		hBleModule.controlFlags.flag.packetToTransmit = DISABLE;
 800088e:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <main_UartTxTask+0x4c>)
 8000890:	7813      	ldrb	r3, [r2, #0]
 8000892:	f36f 0341 	bfc	r3, #1, #1
 8000896:	7013      	strb	r3, [r2, #0]

		hBleModule.txTimer = HAL_GetTick();
 8000898:	f000 fa1a 	bl	8000cd0 <HAL_GetTick>
 800089c:	4603      	mov	r3, r0
 800089e:	4a02      	ldr	r2, [pc, #8]	; (80008a8 <main_UartTxTask+0x4c>)
 80008a0:	60d3      	str	r3, [r2, #12]
	}
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20001ea4 	.word	0x20001ea4
 80008ac:	20001eb8 	.word	0x20001eb8
 80008b0:	2000017c 	.word	0x2000017c

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a4c      	ldr	r2, [pc, #304]	; (8000a60 <HAL_UART_MspInit+0x150>)
 800092e:	4293      	cmp	r3, r2
 8000930:	f040 8091 	bne.w	8000a56 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	4b4a      	ldr	r3, [pc, #296]	; (8000a64 <HAL_UART_MspInit+0x154>)
 800093a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093c:	4a49      	ldr	r2, [pc, #292]	; (8000a64 <HAL_UART_MspInit+0x154>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6453      	str	r3, [r2, #68]	; 0x44
 8000944:	4b47      	ldr	r3, [pc, #284]	; (8000a64 <HAL_UART_MspInit+0x154>)
 8000946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <HAL_UART_MspInit+0x154>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a42      	ldr	r2, [pc, #264]	; (8000a64 <HAL_UART_MspInit+0x154>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
 8000960:	4b40      	ldr	r3, [pc, #256]	; (8000a64 <HAL_UART_MspInit+0x154>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800096c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800097e:	2307      	movs	r3, #7
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4837      	ldr	r0, [pc, #220]	; (8000a68 <HAL_UART_MspInit+0x158>)
 800098a:	f000 fee5 	bl	8001758 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800098e:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 8000990:	4a37      	ldr	r2, [pc, #220]	; (8000a70 <HAL_UART_MspInit+0x160>)
 8000992:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000994:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 8000996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800099a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099c:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a2:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009a8:	4b30      	ldr	r3, [pc, #192]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 80009aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009b0:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b6:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80009bc:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c8:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009ce:	4827      	ldr	r0, [pc, #156]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 80009d0:	f000 fac0 	bl	8000f54 <HAL_DMA_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80009da:	f7ff ff6b 	bl	80008b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 80009e2:	639a      	str	r2, [r3, #56]	; 0x38
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <HAL_UART_MspInit+0x164>)
 80009ec:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <HAL_UART_MspInit+0x168>)
 80009ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_UART_MspInit+0x164>)
 80009f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <HAL_UART_MspInit+0x164>)
 80009fa:	2240      	movs	r2, #64	; 0x40
 80009fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <HAL_UART_MspInit+0x164>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_UART_MspInit+0x164>)
 8000a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_UART_MspInit+0x164>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0x164>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_UART_MspInit+0x164>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_MspInit+0x164>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <HAL_UART_MspInit+0x164>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a2a:	4812      	ldr	r0, [pc, #72]	; (8000a74 <HAL_UART_MspInit+0x164>)
 8000a2c:	f000 fa92 	bl	8000f54 <HAL_DMA_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000a36:	f7ff ff3d 	bl	80008b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_UART_MspInit+0x164>)
 8000a3e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <HAL_UART_MspInit+0x164>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2025      	movs	r0, #37	; 0x25
 8000a4c:	f000 fa4b 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a50:	2025      	movs	r0, #37	; 0x25
 8000a52:	f000 fa64 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40011000 	.word	0x40011000
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	200001c0 	.word	0x200001c0
 8000a70:	40026440 	.word	0x40026440
 8000a74:	20000220 	.word	0x20000220
 8000a78:	400264b8 	.word	0x400264b8

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f8ee 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <USART1_IRQHandler+0x10>)
 8000ad6:	f002 ffe3 	bl	8003aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000017c 	.word	0x2000017c

08000ae4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <DMA2_Stream2_IRQHandler+0x10>)
 8000aea:	f000 fbcb 	bl	8001284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200001c0 	.word	0x200001c0

08000af8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <OTG_FS_IRQHandler+0x10>)
 8000afe:	f001 f918 	bl	8001d32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20001778 	.word	0x20001778

08000b0c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <DMA2_Stream7_IRQHandler+0x10>)
 8000b12:	f000 fbb7 	bl	8001284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000220 	.word	0x20000220

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f008 fa0c 	bl	8008f6c <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20020000 	.word	0x20020000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	20000280 	.word	0x20000280
 8000b88:	200020c8 	.word	0x200020c8

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bcc:	4c0b      	ldr	r4, [pc, #44]	; (8000bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bda:	f7ff ffd7 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f008 f9cb 	bl	8008f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fcd7 	bl	8000594 <main>
  bx  lr    
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000bf4:	08009990 	.word	0x08009990
  ldr r2, =_sbss
 8000bf8:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000bfc:	200020c8 	.word	0x200020c8

08000c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_Init+0x40>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_Init+0x40>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x40>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f94f 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	200f      	movs	r0, #15
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fe42 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f967 	bl	8000f3a <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f92f 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000284 	.word	0x20000284

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000284 	.word	0x20000284

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff ffee 	bl	8000cd0 <HAL_GetTick>
 8000cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0e:	bf00      	nop
 8000d10:	f7ff ffde 	bl	8000cd0 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff29 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff3e 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff31 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff feb6 	bl	8000cd0 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e099      	b.n	80010a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2202      	movs	r2, #2
 8000f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0201 	bic.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f90:	e00f      	b.n	8000fb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f92:	f7ff fe9d 	bl	8000cd0 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d908      	bls.n	8000fb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e078      	b.n	80010a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1e8      	bne.n	8000f92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <HAL_DMA_Init+0x158>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4313      	orrs	r3, r2
 8001002:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2b04      	cmp	r3, #4
 800100a:	d107      	bne.n	800101c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4313      	orrs	r3, r2
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4313      	orrs	r3, r2
 800101a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f023 0307 	bic.w	r3, r3, #7
 8001032:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	4313      	orrs	r3, r2
 800103c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	2b04      	cmp	r3, #4
 8001044:	d117      	bne.n	8001076 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4313      	orrs	r3, r2
 800104e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00e      	beq.n	8001076 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 fb01 	bl	8001660 <DMA_CheckFifoParam>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001072:	2301      	movs	r3, #1
 8001074:	e016      	b.n	80010a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fab8 	bl	80015f4 <DMA_CalcBaseAndBitshift>
 8001084:	4603      	mov	r3, r0
 8001086:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108c:	223f      	movs	r2, #63	; 0x3f
 800108e:	409a      	lsls	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	f010803f 	.word	0xf010803f

080010b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_DMA_Start_IT+0x26>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e040      	b.n	8001158 <HAL_DMA_Start_IT+0xa8>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d12f      	bne.n	800114a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2202      	movs	r2, #2
 80010ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 fa4a 	bl	8001598 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001108:	223f      	movs	r2, #63	; 0x3f
 800110a:	409a      	lsls	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0216 	orr.w	r2, r2, #22
 800111e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	2b00      	cmp	r3, #0
 8001126:	d007      	beq.n	8001138 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0208 	orr.w	r2, r2, #8
 8001136:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0201 	orr.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e005      	b.n	8001156 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001152:	2302      	movs	r3, #2
 8001154:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001156:	7dfb      	ldrb	r3, [r7, #23]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800116e:	f7ff fdaf 	bl	8000cd0 <HAL_GetTick>
 8001172:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d008      	beq.n	8001192 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e052      	b.n	8001238 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0216 	bic.w	r2, r2, #22
 80011a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695a      	ldr	r2, [r3, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <HAL_DMA_Abort+0x62>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0208 	bic.w	r2, r2, #8
 80011d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0201 	bic.w	r2, r2, #1
 80011e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e2:	e013      	b.n	800120c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011e4:	f7ff fd74 	bl	8000cd0 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b05      	cmp	r3, #5
 80011f0:	d90c      	bls.n	800120c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2220      	movs	r2, #32
 80011f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e015      	b.n	8001238 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1e4      	bne.n	80011e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121e:	223f      	movs	r2, #63	; 0x3f
 8001220:	409a      	lsls	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d004      	beq.n	800125e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00c      	b.n	8001278 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2205      	movs	r2, #5
 8001262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0201 	bic.w	r2, r2, #1
 8001274:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001290:	4b8e      	ldr	r3, [pc, #568]	; (80014cc <HAL_DMA_IRQHandler+0x248>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a8e      	ldr	r2, [pc, #568]	; (80014d0 <HAL_DMA_IRQHandler+0x24c>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0a9b      	lsrs	r3, r3, #10
 800129c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ae:	2208      	movs	r2, #8
 80012b0:	409a      	lsls	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d01a      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0204 	bic.w	r2, r2, #4
 80012d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012dc:	2208      	movs	r2, #8
 80012de:	409a      	lsls	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f4:	2201      	movs	r2, #1
 80012f6:	409a      	lsls	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d012      	beq.n	8001326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001312:	2201      	movs	r2, #1
 8001314:	409a      	lsls	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131e:	f043 0202 	orr.w	r2, r3, #2
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132a:	2204      	movs	r2, #4
 800132c:	409a      	lsls	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d012      	beq.n	800135c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00b      	beq.n	800135c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001348:	2204      	movs	r2, #4
 800134a:	409a      	lsls	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001354:	f043 0204 	orr.w	r2, r3, #4
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001360:	2210      	movs	r2, #16
 8001362:	409a      	lsls	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d043      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d03c      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137e:	2210      	movs	r2, #16
 8001380:	409a      	lsls	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d018      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d108      	bne.n	80013b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d024      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	4798      	blx	r3
 80013b2:	e01f      	b.n	80013f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01b      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	4798      	blx	r3
 80013c4:	e016      	b.n	80013f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d107      	bne.n	80013e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0208 	bic.w	r2, r2, #8
 80013e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f8:	2220      	movs	r2, #32
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 808f 	beq.w	8001524 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 8087 	beq.w	8001524 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141a:	2220      	movs	r2, #32
 800141c:	409a      	lsls	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b05      	cmp	r3, #5
 800142c:	d136      	bne.n	800149c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0216 	bic.w	r2, r2, #22
 800143c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800144c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	2b00      	cmp	r3, #0
 8001454:	d103      	bne.n	800145e <HAL_DMA_IRQHandler+0x1da>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0208 	bic.w	r2, r2, #8
 800146c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	223f      	movs	r2, #63	; 0x3f
 8001474:	409a      	lsls	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800148e:	2b00      	cmp	r3, #0
 8001490:	d07e      	beq.n	8001590 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4798      	blx	r3
        }
        return;
 800149a:	e079      	b.n	8001590 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01d      	beq.n	80014e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10d      	bne.n	80014d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d031      	beq.n	8001524 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
 80014c8:	e02c      	b.n	8001524 <HAL_DMA_IRQHandler+0x2a0>
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000
 80014d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d023      	beq.n	8001524 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	4798      	blx	r3
 80014e4:	e01e      	b.n	8001524 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10f      	bne.n	8001514 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0210 	bic.w	r2, r2, #16
 8001502:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001528:	2b00      	cmp	r3, #0
 800152a:	d032      	beq.n	8001592 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d022      	beq.n	800157e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2205      	movs	r2, #5
 800153c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	3301      	adds	r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	429a      	cmp	r2, r3
 800155a:	d307      	bcc.n	800156c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f2      	bne.n	8001550 <HAL_DMA_IRQHandler+0x2cc>
 800156a:	e000      	b.n	800156e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800156c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	4798      	blx	r3
 800158e:	e000      	b.n	8001592 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001590:	bf00      	nop
    }
  }
}
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b40      	cmp	r3, #64	; 0x40
 80015c4:	d108      	bne.n	80015d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015d6:	e007      	b.n	80015e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	60da      	str	r2, [r3, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	3b10      	subs	r3, #16
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <DMA_CalcBaseAndBitshift+0x64>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800160e:	4a13      	ldr	r2, [pc, #76]	; (800165c <DMA_CalcBaseAndBitshift+0x68>)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4413      	add	r3, r2
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d909      	bls.n	8001636 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800162a:	f023 0303 	bic.w	r3, r3, #3
 800162e:	1d1a      	adds	r2, r3, #4
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	659a      	str	r2, [r3, #88]	; 0x58
 8001634:	e007      	b.n	8001646 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800163e:	f023 0303 	bic.w	r3, r3, #3
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	aaaaaaab 	.word	0xaaaaaaab
 800165c:	08009944 	.word	0x08009944

08001660 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d11f      	bne.n	80016ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d856      	bhi.n	800172e <DMA_CheckFifoParam+0xce>
 8001680:	a201      	add	r2, pc, #4	; (adr r2, 8001688 <DMA_CheckFifoParam+0x28>)
 8001682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001686:	bf00      	nop
 8001688:	08001699 	.word	0x08001699
 800168c:	080016ab 	.word	0x080016ab
 8001690:	08001699 	.word	0x08001699
 8001694:	0800172f 	.word	0x0800172f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d046      	beq.n	8001732 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016a8:	e043      	b.n	8001732 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016b2:	d140      	bne.n	8001736 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016b8:	e03d      	b.n	8001736 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016c2:	d121      	bne.n	8001708 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d837      	bhi.n	800173a <DMA_CheckFifoParam+0xda>
 80016ca:	a201      	add	r2, pc, #4	; (adr r2, 80016d0 <DMA_CheckFifoParam+0x70>)
 80016cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d0:	080016e1 	.word	0x080016e1
 80016d4:	080016e7 	.word	0x080016e7
 80016d8:	080016e1 	.word	0x080016e1
 80016dc:	080016f9 	.word	0x080016f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
      break;
 80016e4:	e030      	b.n	8001748 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d025      	beq.n	800173e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f6:	e022      	b.n	800173e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001700:	d11f      	bne.n	8001742 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001706:	e01c      	b.n	8001742 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d903      	bls.n	8001716 <DMA_CheckFifoParam+0xb6>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d003      	beq.n	800171c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001714:	e018      	b.n	8001748 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]
      break;
 800171a:	e015      	b.n	8001748 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00e      	beq.n	8001746 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
      break;
 800172c:	e00b      	b.n	8001746 <DMA_CheckFifoParam+0xe6>
      break;
 800172e:	bf00      	nop
 8001730:	e00a      	b.n	8001748 <DMA_CheckFifoParam+0xe8>
      break;
 8001732:	bf00      	nop
 8001734:	e008      	b.n	8001748 <DMA_CheckFifoParam+0xe8>
      break;
 8001736:	bf00      	nop
 8001738:	e006      	b.n	8001748 <DMA_CheckFifoParam+0xe8>
      break;
 800173a:	bf00      	nop
 800173c:	e004      	b.n	8001748 <DMA_CheckFifoParam+0xe8>
      break;
 800173e:	bf00      	nop
 8001740:	e002      	b.n	8001748 <DMA_CheckFifoParam+0xe8>
      break;   
 8001742:	bf00      	nop
 8001744:	e000      	b.n	8001748 <DMA_CheckFifoParam+0xe8>
      break;
 8001746:	bf00      	nop
    }
  } 
  
  return status; 
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	e159      	b.n	8001a28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	429a      	cmp	r2, r3
 800178e:	f040 8148 	bne.w	8001a22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d005      	beq.n	80017aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d130      	bne.n	800180c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e0:	2201      	movs	r2, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 0201 	and.w	r2, r3, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b03      	cmp	r3, #3
 8001816:	d017      	beq.n	8001848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d123      	bne.n	800189c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	69b9      	ldr	r1, [r7, #24]
 8001898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80a2 	beq.w	8001a22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <HAL_GPIO_Init+0x2e8>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a56      	ldr	r2, [pc, #344]	; (8001a40 <HAL_GPIO_Init+0x2e8>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b54      	ldr	r3, [pc, #336]	; (8001a40 <HAL_GPIO_Init+0x2e8>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fa:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_GPIO_Init+0x2ec>)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a49      	ldr	r2, [pc, #292]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x202>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a48      	ldr	r2, [pc, #288]	; (8001a4c <HAL_GPIO_Init+0x2f4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x1fe>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a47      	ldr	r2, [pc, #284]	; (8001a50 <HAL_GPIO_Init+0x2f8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x1fa>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a46      	ldr	r2, [pc, #280]	; (8001a54 <HAL_GPIO_Init+0x2fc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x1f6>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a45      	ldr	r2, [pc, #276]	; (8001a58 <HAL_GPIO_Init+0x300>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x1f2>
 8001946:	2304      	movs	r3, #4
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x204>
 800194a:	2307      	movs	r3, #7
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x204>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x204>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x204>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x204>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800196c:	4935      	ldr	r1, [pc, #212]	; (8001a44 <HAL_GPIO_Init+0x2ec>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197a:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_GPIO_Init+0x304>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199e:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <HAL_GPIO_Init+0x304>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_GPIO_Init+0x304>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c8:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <HAL_GPIO_Init+0x304>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_GPIO_Init+0x304>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019f2:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <HAL_GPIO_Init+0x304>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_GPIO_Init+0x304>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1c:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_GPIO_Init+0x304>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f aea2 	bls.w	8001774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40013800 	.word	0x40013800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40013c00 	.word	0x40013c00

08001a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a70:	787b      	ldrb	r3, [r7, #1]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a7c:	e003      	b.n	8001a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	041a      	lsls	r2, r3, #16
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	619a      	str	r2, [r3, #24]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a94:	b08f      	sub	sp, #60	; 0x3c
 8001a96:	af0a      	add	r7, sp, #40	; 0x28
 8001a98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e10f      	b.n	8001cc4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f006 ff00 	bl	80088c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 f9d9 	bl	8004e9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	687e      	ldr	r6, [r7, #4]
 8001af0:	466d      	mov	r5, sp
 8001af2:	f106 0410 	add.w	r4, r6, #16
 8001af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b02:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b06:	1d33      	adds	r3, r6, #4
 8001b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b0a:	6838      	ldr	r0, [r7, #0]
 8001b0c:	f003 f8b0 	bl	8004c70 <USB_CoreInit>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0d0      	b.n	8001cc4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 f9c7 	bl	8004ebc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	e04a      	b.n	8001bca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	333d      	adds	r3, #61	; 0x3d
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	333c      	adds	r3, #60	; 0x3c
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	b298      	uxth	r0, r3
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3344      	adds	r3, #68	; 0x44
 8001b70:	4602      	mov	r2, r0
 8001b72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	3340      	adds	r3, #64	; 0x40
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3348      	adds	r3, #72	; 0x48
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	334c      	adds	r3, #76	; 0x4c
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3354      	adds	r3, #84	; 0x54
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3af      	bcc.n	8001b34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e044      	b.n	8001c64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	3301      	adds	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3b5      	bcc.n	8001bda <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	687e      	ldr	r6, [r7, #4]
 8001c76:	466d      	mov	r5, sp
 8001c78:	f106 0410 	add.w	r4, r6, #16
 8001c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c88:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c8c:	1d33      	adds	r3, r6, #4
 8001c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f003 f95f 	bl	8004f54 <USB_DevInit>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e00d      	b.n	8001cc4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 faae 	bl	800621e <USB_DevDisconnect>

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ccc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_PCD_Start+0x1c>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e020      	b.n	8001d2a <HAL_PCD_Start+0x5e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d109      	bne.n	8001d0c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d005      	beq.n	8001d0c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 f8b1 	bl	8004e78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f004 fa5e 	bl	80061dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d32:	b590      	push	{r4, r7, lr}
 8001d34:	b08d      	sub	sp, #52	; 0x34
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 fb1c 	bl	8006386 <USB_GetMode>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f040 848a 	bne.w	800266a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 fa80 	bl	8006260 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8480 	beq.w	8002668 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f004 fa6d 	bl	8006260 <USB_ReadInterrupts>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d107      	bne.n	8001da0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f002 0202 	and.w	r2, r2, #2
 8001d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 fa5b 	bl	8006260 <USB_ReadInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d161      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0210 	bic.w	r2, r2, #16
 8001dc2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f003 020f 	and.w	r2, r3, #15
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	3304      	adds	r3, #4
 8001de2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	0c5b      	lsrs	r3, r3, #17
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d124      	bne.n	8001e3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d035      	beq.n	8001e68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6a38      	ldr	r0, [r7, #32]
 8001e10:	f004 f892 	bl	8005f38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e20:	441a      	add	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	6a1a      	ldr	r2, [r3, #32]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e32:	441a      	add	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	621a      	str	r2, [r3, #32]
 8001e38:	e016      	b.n	8001e68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	0c5b      	lsrs	r3, r3, #17
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d110      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6a38      	ldr	r0, [r7, #32]
 8001e52:	f004 f871 	bl	8005f38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	6a1a      	ldr	r2, [r3, #32]
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e62:	441a      	add	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0210 	orr.w	r2, r2, #16
 8001e76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f004 f9ef 	bl	8006260 <USB_ReadInterrupts>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e8c:	f040 80a7 	bne.w	8001fde <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f004 f9f4 	bl	8006286 <USB_ReadDevAllOutEpInterrupt>
 8001e9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ea0:	e099      	b.n	8001fd6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 808e 	beq.w	8001fca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fa18 	bl	80062ee <USB_ReadDevOutEPInterrupt>
 8001ebe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2301      	movs	r3, #1
 8001eda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fec2 	bl	8002c68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00c      	beq.n	8001f08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001efa:	461a      	mov	r2, r3
 8001efc:	2308      	movs	r3, #8
 8001efe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 ff98 	bl	8002e38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d008      	beq.n	8001f24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2310      	movs	r3, #16
 8001f22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d030      	beq.n	8001f90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f36:	2b80      	cmp	r3, #128	; 0x80
 8001f38:	d109      	bne.n	8001f4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	3304      	adds	r3, #4
 8001f62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	78db      	ldrb	r3, [r3, #3]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d108      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f006 fd9f 	bl	8008abc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2320      	movs	r3, #32
 8001faa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	3301      	adds	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f47f af62 	bne.w	8001ea2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 f93c 	bl	8006260 <USB_ReadInterrupts>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ff2:	f040 80db 	bne.w	80021ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f004 f95d 	bl	80062ba <USB_ReadDevAllInEpInterrupt>
 8002000:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002006:	e0cd      	b.n	80021a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80c2 	beq.w	8002198 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f004 f983 	bl	800632a <USB_ReadDevInEPInterrupt>
 8002024:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d057      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	2201      	movs	r2, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	69f9      	ldr	r1, [r7, #28]
 800204c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002050:	4013      	ands	r3, r2
 8002052:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	4413      	add	r3, r2
 800205c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002060:	461a      	mov	r2, r3
 8002062:	2301      	movs	r3, #1
 8002064:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d132      	bne.n	80020d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	334c      	adds	r3, #76	; 0x4c
 800207e:	6819      	ldr	r1, [r3, #0]
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4403      	add	r3, r0
 800208e:	3348      	adds	r3, #72	; 0x48
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4419      	add	r1, r3
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4403      	add	r3, r0
 80020a2:	334c      	adds	r3, #76	; 0x4c
 80020a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d113      	bne.n	80020d4 <HAL_PCD_IRQHandler+0x3a2>
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	3354      	adds	r3, #84	; 0x54
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d108      	bne.n	80020d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020cc:	461a      	mov	r2, r3
 80020ce:	2101      	movs	r1, #1
 80020d0:	f004 f98a 	bl	80063e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	4619      	mov	r1, r3
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f006 fc73 	bl	80089c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020f6:	461a      	mov	r2, r3
 80020f8:	2308      	movs	r3, #8
 80020fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002112:	461a      	mov	r2, r3
 8002114:	2310      	movs	r3, #16
 8002116:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212e:	461a      	mov	r2, r3
 8002130:	2340      	movs	r3, #64	; 0x40
 8002132:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d023      	beq.n	8002186 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800213e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002140:	6a38      	ldr	r0, [r7, #32]
 8002142:	f003 f86b 	bl	800521c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	3338      	adds	r3, #56	; 0x38
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	3304      	adds	r3, #4
 8002158:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	78db      	ldrb	r3, [r3, #3]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d108      	bne.n	8002174 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2200      	movs	r2, #0
 8002166:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	b2db      	uxtb	r3, r3
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f006 fcb6 	bl	8008ae0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002180:	461a      	mov	r2, r3
 8002182:	2302      	movs	r3, #2
 8002184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fcdb 	bl	8002b4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	3301      	adds	r3, #1
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	085b      	lsrs	r3, r3, #1
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f af2e 	bne.w	8002008 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 f855 	bl	8006260 <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021c0:	d122      	bne.n	8002208 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d108      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021e8:	2100      	movs	r1, #0
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fec2 	bl	8002f74 <HAL_PCDEx_LPM_Callback>
 80021f0:	e002      	b.n	80021f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f006 fc54 	bl	8008aa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f004 f827 	bl	8006260 <USB_ReadInterrupts>
 8002212:	4603      	mov	r3, r0
 8002214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800221c:	d112      	bne.n	8002244 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f006 fc10 	bl	8008a54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002242:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f004 f809 	bl	8006260 <USB_ReadInterrupts>
 800224e:	4603      	mov	r3, r0
 8002250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002258:	f040 80b7 	bne.w	80023ca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2110      	movs	r1, #16
 8002276:	4618      	mov	r0, r3
 8002278:	f002 ffd0 	bl	800521c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002280:	e046      	b.n	8002310 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228e:	461a      	mov	r2, r3
 8002290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002294:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a6:	0151      	lsls	r1, r2, #5
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	440a      	add	r2, r1
 80022ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c2:	461a      	mov	r2, r3
 80022c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022da:	0151      	lsls	r1, r2, #5
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	440a      	add	r2, r1
 80022e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fa:	0151      	lsls	r1, r2, #5
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	440a      	add	r2, r1
 8002300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002304:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002308:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	3301      	adds	r3, #1
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002316:	429a      	cmp	r2, r3
 8002318:	d3b3      	bcc.n	8002282 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002328:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800232c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	2b00      	cmp	r3, #0
 8002334:	d016      	beq.n	8002364 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800233c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002346:	f043 030b 	orr.w	r3, r3, #11
 800234a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800235c:	f043 030b 	orr.w	r3, r3, #11
 8002360:	6453      	str	r3, [r2, #68]	; 0x44
 8002362:	e015      	b.n	8002390 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002372:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002376:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800237a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800238a:	f043 030b 	orr.w	r3, r3, #11
 800238e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800239e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023b4:	461a      	mov	r2, r3
 80023b6:	f004 f817 	bl	80063e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 ff46 	bl	8006260 <USB_ReadInterrupts>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023de:	d124      	bne.n	800242a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 ffdc 	bl	80063a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 ff91 	bl	8005316 <USB_GetDevSpeed>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681c      	ldr	r4, [r3, #0]
 8002400:	f001 f9e8 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 8002404:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	4620      	mov	r0, r4
 8002410:	f002 fc90 	bl	8004d34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f006 fafe 	bl	8008a16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002428:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f003 ff16 	bl	8006260 <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b08      	cmp	r3, #8
 800243c:	d10a      	bne.n	8002454 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f006 fadb 	bl	80089fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f002 0208 	and.w	r2, r2, #8
 8002452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f003 ff01 	bl	8006260 <USB_ReadInterrupts>
 800245e:	4603      	mov	r3, r0
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	2b80      	cmp	r3, #128	; 0x80
 8002466:	d122      	bne.n	80024ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002474:	2301      	movs	r3, #1
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
 8002478:	e014      	b.n	80024a4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	b2db      	uxtb	r3, r3
 8002496:	4619      	mov	r1, r3
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fb27 	bl	8002aec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	3301      	adds	r3, #1
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d3e5      	bcc.n	800247a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fed4 	bl	8006260 <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c2:	d13b      	bne.n	800253c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024c4:	2301      	movs	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
 80024c8:	e02b      	b.n	8002522 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	3340      	adds	r3, #64	; 0x40
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d115      	bne.n	800251c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80024f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	da12      	bge.n	800251c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	333f      	adds	r3, #63	; 0x3f
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002512:	b2db      	uxtb	r3, r3
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fae8 	bl	8002aec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	3301      	adds	r3, #1
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002528:	429a      	cmp	r2, r3
 800252a:	d3ce      	bcc.n	80024ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800253a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f003 fe8d 	bl	8006260 <USB_ReadInterrupts>
 8002546:	4603      	mov	r3, r0
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002550:	d155      	bne.n	80025fe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002552:	2301      	movs	r3, #1
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
 8002556:	e045      	b.n	80025e4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d12e      	bne.n	80025de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002580:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002582:	2b00      	cmp	r3, #0
 8002584:	da2b      	bge.n	80025de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002592:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002596:	429a      	cmp	r2, r3
 8002598:	d121      	bne.n	80025de <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025da:	6053      	str	r3, [r2, #4]
            break;
 80025dc:	e007      	b.n	80025ee <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	3301      	adds	r3, #1
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d3b4      	bcc.n	8002558 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f003 fe2c 	bl	8006260 <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800260e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002612:	d10a      	bne.n	800262a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f006 fa75 	bl	8008b04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 fe16 	bl	8006260 <USB_ReadInterrupts>
 8002634:	4603      	mov	r3, r0
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b04      	cmp	r3, #4
 800263c:	d115      	bne.n	800266a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f006 fa65 	bl	8008b20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	430a      	orrs	r2, r1
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	e000      	b.n	800266a <HAL_PCD_IRQHandler+0x938>
      return;
 8002668:	bf00      	nop
    }
  }
}
 800266a:	3734      	adds	r7, #52	; 0x34
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}

08002670 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_PCD_SetAddress+0x1a>
 8002686:	2302      	movs	r3, #2
 8002688:	e013      	b.n	80026b2 <HAL_PCD_SetAddress+0x42>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fd74 	bl	8006190 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	4608      	mov	r0, r1
 80026c4:	4611      	mov	r1, r2
 80026c6:	461a      	mov	r2, r3
 80026c8:	4603      	mov	r3, r0
 80026ca:	70fb      	strb	r3, [r7, #3]
 80026cc:	460b      	mov	r3, r1
 80026ce:	803b      	strh	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da0f      	bge.n	8002700 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 020f 	and.w	r2, r3, #15
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	3338      	adds	r3, #56	; 0x38
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	3304      	adds	r3, #4
 80026f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	705a      	strb	r2, [r3, #1]
 80026fe:	e00f      	b.n	8002720 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 020f 	and.w	r2, r3, #15
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	3304      	adds	r3, #4
 8002718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	b2da      	uxtb	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800272c:	883a      	ldrh	r2, [r7, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	78ba      	ldrb	r2, [r7, #2]
 8002736:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800274a:	78bb      	ldrb	r3, [r7, #2]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d102      	bne.n	8002756 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_PCD_EP_Open+0xaa>
 8002760:	2302      	movs	r3, #2
 8002762:	e00e      	b.n	8002782 <HAL_PCD_EP_Open+0xc8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68f9      	ldr	r1, [r7, #12]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fdf4 	bl	8005360 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002780:	7afb      	ldrb	r3, [r7, #11]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800279a:	2b00      	cmp	r3, #0
 800279c:	da0f      	bge.n	80027be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	f003 020f 	and.w	r2, r3, #15
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	3338      	adds	r3, #56	; 0x38
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	3304      	adds	r3, #4
 80027b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	705a      	strb	r2, [r3, #1]
 80027bc:	e00f      	b.n	80027de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 020f 	and.w	r2, r3, #15
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	3304      	adds	r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_PCD_EP_Close+0x6e>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e00e      	b.n	8002816 <HAL_PCD_EP_Close+0x8c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	4618      	mov	r0, r3
 8002808:	f002 fe32 	bl	8005470 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	460b      	mov	r3, r1
 800282c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800282e:	7afb      	ldrb	r3, [r7, #11]
 8002830:	f003 020f 	and.w	r2, r3, #15
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	3304      	adds	r3, #4
 8002846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2200      	movs	r2, #0
 8002858:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2200      	movs	r2, #0
 800285e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	b2da      	uxtb	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d102      	bne.n	800287a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800287a:	7afb      	ldrb	r3, [r7, #11]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	6979      	ldr	r1, [r7, #20]
 8002892:	f003 f911 	bl	8005ab8 <USB_EP0StartXfer>
 8002896:	e008      	b.n	80028aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	6979      	ldr	r1, [r7, #20]
 80028a6:	f002 febf 	bl	8005628 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	f003 020f 	and.w	r2, r3, #15
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	460b      	mov	r3, r1
 80028f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f4:	7afb      	ldrb	r3, [r7, #11]
 80028f6:	f003 020f 	and.w	r2, r3, #15
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	3338      	adds	r3, #56	; 0x38
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	3304      	adds	r3, #4
 800290a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2200      	movs	r2, #0
 800291c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2201      	movs	r2, #1
 8002922:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002924:	7afb      	ldrb	r3, [r7, #11]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	b2da      	uxtb	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d102      	bne.n	800293e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800293e:	7afb      	ldrb	r3, [r7, #11]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	6979      	ldr	r1, [r7, #20]
 8002956:	f003 f8af 	bl	8005ab8 <USB_EP0StartXfer>
 800295a:	e008      	b.n	800296e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	6979      	ldr	r1, [r7, #20]
 800296a:	f002 fe5d 	bl	8005628 <USB_EPStartXfer>
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	f003 020f 	and.w	r2, r3, #15
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	d901      	bls.n	8002996 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e050      	b.n	8002a38 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800299a:	2b00      	cmp	r3, #0
 800299c:	da0f      	bge.n	80029be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	f003 020f 	and.w	r2, r3, #15
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	3338      	adds	r3, #56	; 0x38
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	3304      	adds	r3, #4
 80029b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	705a      	strb	r2, [r3, #1]
 80029bc:	e00d      	b.n	80029da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	3304      	adds	r3, #4
 80029d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_PCD_EP_SetStall+0x82>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e01e      	b.n	8002a38 <HAL_PCD_EP_SetStall+0xc0>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68f9      	ldr	r1, [r7, #12]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 faed 	bl	8005fe8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	b2d9      	uxtb	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f003 fcdd 	bl	80063e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	f003 020f 	and.w	r2, r3, #15
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d901      	bls.n	8002a5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e042      	b.n	8002ae4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	da0f      	bge.n	8002a86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	f003 020f 	and.w	r2, r3, #15
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	3338      	adds	r3, #56	; 0x38
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	705a      	strb	r2, [r3, #1]
 8002a84:	e00f      	b.n	8002aa6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	f003 020f 	and.w	r2, r3, #15
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_PCD_EP_ClrStall+0x86>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e00e      	b.n	8002ae4 <HAL_PCD_EP_ClrStall+0xa4>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 faf5 	bl	80060c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	da0c      	bge.n	8002b1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	f003 020f 	and.w	r2, r3, #15
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	3338      	adds	r3, #56	; 0x38
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	3304      	adds	r3, #4
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e00c      	b.n	8002b34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	f003 020f 	and.w	r2, r3, #15
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	3304      	adds	r3, #4
 8002b32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68f9      	ldr	r1, [r7, #12]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 f914 	bl	8005d68 <USB_EPStopXfer>
 8002b40:	4603      	mov	r3, r0
 8002b42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b44:	7afb      	ldrb	r3, [r7, #11]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b08a      	sub	sp, #40	; 0x28
 8002b52:	af02      	add	r7, sp, #8
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	3338      	adds	r3, #56	; 0x38
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d901      	bls.n	8002b86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e06c      	b.n	8002c60 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d902      	bls.n	8002ba2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3303      	adds	r3, #3
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002baa:	e02b      	b.n	8002c04 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d902      	bls.n	8002bc8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3303      	adds	r3, #3
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6919      	ldr	r1, [r3, #16]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4603      	mov	r3, r0
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f003 f968 	bl	8005ebc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	441a      	add	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a1a      	ldr	r2, [r3, #32]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	441a      	add	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d809      	bhi.n	8002c2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d203      	bcs.n	8002c2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1be      	bne.n	8002bac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d811      	bhi.n	8002c5e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	2201      	movs	r2, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	6939      	ldr	r1, [r7, #16]
 8002c56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	333c      	adds	r3, #60	; 0x3c
 8002c80:	3304      	adds	r3, #4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d17b      	bne.n	8002d96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d015      	beq.n	8002cd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	4a61      	ldr	r2, [pc, #388]	; (8002e30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	f240 80b9 	bls.w	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80b3 	beq.w	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cd0:	6093      	str	r3, [r2, #8]
 8002cd2:	e0a7      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cea:	461a      	mov	r2, r3
 8002cec:	2320      	movs	r3, #32
 8002cee:	6093      	str	r3, [r2, #8]
 8002cf0:	e098      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f040 8093 	bne.w	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	4a4b      	ldr	r2, [pc, #300]	; (8002e30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d90f      	bls.n	8002d26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d22:	6093      	str	r3, [r2, #8]
 8002d24:	e07e      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	3304      	adds	r3, #4
 8002d3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	0159      	lsls	r1, r3, #5
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	440b      	add	r3, r1
 8002d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d52:	1ad2      	subs	r2, r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d114      	bne.n	8002d88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d70:	461a      	mov	r2, r3
 8002d72:	2101      	movs	r1, #1
 8002d74:	f003 fb38 	bl	80063e8 <USB_EP0_OutStart>
 8002d78:	e006      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	441a      	add	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f005 fdfe 	bl	8008990 <HAL_PCD_DataOutStageCallback>
 8002d94:	e046      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d124      	bne.n	8002de8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db4:	461a      	mov	r2, r3
 8002db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dba:	6093      	str	r3, [r2, #8]
 8002dbc:	e032      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	4619      	mov	r1, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f005 fdd5 	bl	8008990 <HAL_PCD_DataOutStageCallback>
 8002de6:	e01d      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d114      	bne.n	8002e18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d108      	bne.n	8002e18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e10:	461a      	mov	r2, r3
 8002e12:	2100      	movs	r1, #0
 8002e14:	f003 fae8 	bl	80063e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f005 fdb6 	bl	8008990 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	4f54300a 	.word	0x4f54300a
 8002e34:	4f54310a 	.word	0x4f54310a

08002e38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	333c      	adds	r3, #60	; 0x3c
 8002e50:	3304      	adds	r3, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d90e      	bls.n	8002e8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d009      	beq.n	8002e8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e84:	461a      	mov	r2, r3
 8002e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f005 fd6d 	bl	800896c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d90c      	bls.n	8002eb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d108      	bne.n	8002eb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002eac:	461a      	mov	r2, r3
 8002eae:	2101      	movs	r1, #1
 8002eb0:	f003 fa9a 	bl	80063e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	4f54300a 	.word	0x4f54300a

08002ec4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ee2:	883b      	ldrh	r3, [r7, #0]
 8002ee4:	0419      	lsls	r1, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
 8002ef0:	e028      	b.n	8002f44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	4413      	add	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e00d      	b.n	8002f22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	3340      	adds	r3, #64	; 0x40
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	4413      	add	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3ec      	bcc.n	8002f06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f2c:	883b      	ldrh	r3, [r7, #0]
 8002f2e:	0418      	lsls	r0, r3, #16
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	4302      	orrs	r2, r0
 8002f3c:	3340      	adds	r3, #64	; 0x40
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e267      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d075      	beq.n	8003096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002faa:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb6:	4b85      	ldr	r3, [pc, #532]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d112      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc2:	4b82      	ldr	r3, [pc, #520]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b7e      	ldr	r3, [pc, #504]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05b      	beq.n	8003094 <HAL_RCC_OscConfig+0x108>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d157      	bne.n	8003094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e242      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x74>
 8002ff2:	4b76      	ldr	r3, [pc, #472]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a75      	ldr	r2, [pc, #468]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x98>
 800300a:	4b70      	ldr	r3, [pc, #448]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a6f      	ldr	r2, [pc, #444]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b6d      	ldr	r3, [pc, #436]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6c      	ldr	r2, [pc, #432]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003024:	4b69      	ldr	r3, [pc, #420]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a68      	ldr	r2, [pc, #416]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b66      	ldr	r3, [pc, #408]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a65      	ldr	r2, [pc, #404]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fd fe44 	bl	8000cd0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7fd fe40 	bl	8000cd0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e207      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xc0>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fd fe30 	bl	8000cd0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003074:	f7fd fe2c 	bl	8000cd0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1f3      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	4b51      	ldr	r3, [pc, #324]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0xe8>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030a2:	4b4a      	ldr	r3, [pc, #296]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d11c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ba:	4b44      	ldr	r3, [pc, #272]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1c7      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b3b      	ldr	r3, [pc, #236]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4937      	ldr	r1, [pc, #220]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	e03a      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fc:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCC_OscConfig+0x244>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fd fde5 	bl	8000cd0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310a:	f7fd fde1 	bl	8000cd0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1a8      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b28      	ldr	r3, [pc, #160]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4925      	ldr	r1, [pc, #148]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_RCC_OscConfig+0x244>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fd fdc4 	bl	8000cd0 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314c:	f7fd fdc0 	bl	8000cd0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e187      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d036      	beq.n	80031e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_RCC_OscConfig+0x248>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fd fda4 	bl	8000cd0 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318c:	f7fd fda0 	bl	8000cd0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e167      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_OscConfig+0x240>)
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x200>
 80031aa:	e01b      	b.n	80031e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_RCC_OscConfig+0x248>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7fd fd8d 	bl	8000cd0 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	e00e      	b.n	80031d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fd fd89 	bl	8000cd0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d907      	bls.n	80031d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e150      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	42470000 	.word	0x42470000
 80031d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	4b88      	ldr	r3, [pc, #544]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ea      	bne.n	80031ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8097 	beq.w	8003320 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f6:	4b81      	ldr	r3, [pc, #516]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	4b7d      	ldr	r3, [pc, #500]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a7c      	ldr	r2, [pc, #496]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
 8003212:	4b7a      	ldr	r3, [pc, #488]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003222:	4b77      	ldr	r3, [pc, #476]	; (8003400 <HAL_RCC_OscConfig+0x474>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d118      	bne.n	8003260 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322e:	4b74      	ldr	r3, [pc, #464]	; (8003400 <HAL_RCC_OscConfig+0x474>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a73      	ldr	r2, [pc, #460]	; (8003400 <HAL_RCC_OscConfig+0x474>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323a:	f7fd fd49 	bl	8000cd0 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7fd fd45 	bl	8000cd0 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e10c      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	4b6a      	ldr	r3, [pc, #424]	; (8003400 <HAL_RCC_OscConfig+0x474>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x2ea>
 8003268:	4b64      	ldr	r3, [pc, #400]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4a63      	ldr	r2, [pc, #396]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	; 0x70
 8003274:	e01c      	b.n	80032b0 <HAL_RCC_OscConfig+0x324>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b05      	cmp	r3, #5
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x30c>
 800327e:	4b5f      	ldr	r3, [pc, #380]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	4a5e      	ldr	r2, [pc, #376]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	6713      	str	r3, [r2, #112]	; 0x70
 800328a:	4b5c      	ldr	r3, [pc, #368]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a5b      	ldr	r2, [pc, #364]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0x324>
 8003298:	4b58      	ldr	r3, [pc, #352]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a57      	ldr	r2, [pc, #348]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	4b55      	ldr	r3, [pc, #340]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a54      	ldr	r2, [pc, #336]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 80032aa:	f023 0304 	bic.w	r3, r3, #4
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d015      	beq.n	80032e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fd fd0a 	bl	8000cd0 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c0:	f7fd fd06 	bl	8000cd0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e0cb      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	4b49      	ldr	r3, [pc, #292]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ee      	beq.n	80032c0 <HAL_RCC_OscConfig+0x334>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e4:	f7fd fcf4 	bl	8000cd0 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ec:	f7fd fcf0 	bl	8000cd0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e0b5      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003302:	4b3e      	ldr	r3, [pc, #248]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1ee      	bne.n	80032ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330e:	7dfb      	ldrb	r3, [r7, #23]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4b39      	ldr	r3, [pc, #228]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	4a38      	ldr	r2, [pc, #224]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 800331a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a1 	beq.w	800346c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800332a:	4b34      	ldr	r3, [pc, #208]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b08      	cmp	r3, #8
 8003334:	d05c      	beq.n	80033f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d141      	bne.n	80033c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333e:	4b31      	ldr	r3, [pc, #196]	; (8003404 <HAL_RCC_OscConfig+0x478>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fd fcc4 	bl	8000cd0 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334c:	f7fd fcc0 	bl	8000cd0 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e087      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	4b27      	ldr	r3, [pc, #156]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	019b      	lsls	r3, r3, #6
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	3b01      	subs	r3, #1
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	491b      	ldr	r1, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003394:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x478>)
 8003396:	2201      	movs	r2, #1
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fd fc99 	bl	8000cd0 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fd fc95 	bl	8000cd0 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e05c      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x416>
 80033c0:	e054      	b.n	800346c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_RCC_OscConfig+0x478>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fd fc82 	bl	8000cd0 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fd fc7e 	bl	8000cd0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e045      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_RCC_OscConfig+0x470>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x444>
 80033ee:	e03d      	b.n	800346c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e038      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
 80033fc:	40023800 	.word	0x40023800
 8003400:	40007000 	.word	0x40007000
 8003404:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_RCC_OscConfig+0x4ec>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d028      	beq.n	8003468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d121      	bne.n	8003468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d11a      	bne.n	8003468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003438:	4013      	ands	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800343e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003440:	4293      	cmp	r3, r2
 8003442:	d111      	bne.n	8003468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	3b01      	subs	r3, #1
 8003452:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003454:	429a      	cmp	r2, r3
 8003456:	d107      	bne.n	8003468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800

0800347c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0cc      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4b68      	ldr	r3, [pc, #416]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d90c      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b65      	ldr	r3, [pc, #404]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0b8      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	494d      	ldr	r1, [pc, #308]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d044      	beq.n	800359c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d119      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e07f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d003      	beq.n	800353a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003536:	2b03      	cmp	r3, #3
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353a:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354a:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e067      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355a:	4b37      	ldr	r3, [pc, #220]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f023 0203 	bic.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4934      	ldr	r1, [pc, #208]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800356c:	f7fd fbb0 	bl	8000cd0 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	e00a      	b.n	800358a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fd fbac 	bl	8000cd0 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e04f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 020c 	and.w	r2, r3, #12
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1eb      	bne.n	8003574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	4b25      	ldr	r3, [pc, #148]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d20c      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e032      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4916      	ldr	r1, [pc, #88]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	490e      	ldr	r1, [pc, #56]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003602:	f000 f821 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003606:	4602      	mov	r2, r0
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	490a      	ldr	r1, [pc, #40]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	5ccb      	ldrb	r3, [r1, r3]
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x1c8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fb10 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00
 8003638:	40023800 	.word	0x40023800
 800363c:	0800992c 	.word	0x0800992c
 8003640:	20000000 	.word	0x20000000
 8003644:	20000004 	.word	0x20000004

08003648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800364c:	b090      	sub	sp, #64	; 0x40
 800364e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
 8003654:	2300      	movs	r3, #0
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003658:	2300      	movs	r3, #0
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003660:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b08      	cmp	r3, #8
 800366a:	d00d      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x40>
 800366c:	2b08      	cmp	r3, #8
 800366e:	f200 80a1 	bhi.w	80037b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x34>
 8003676:	2b04      	cmp	r3, #4
 8003678:	d003      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x3a>
 800367a:	e09b      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_RCC_GetSysClockFreq+0x184>)
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003680:	e09b      	b.n	80037ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003682:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003684:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003686:	e098      	b.n	80037ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003688:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003692:	4b4d      	ldr	r3, [pc, #308]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d028      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369e:	4b4a      	ldr	r3, [pc, #296]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	099b      	lsrs	r3, r3, #6
 80036a4:	2200      	movs	r2, #0
 80036a6:	623b      	str	r3, [r7, #32]
 80036a8:	627a      	str	r2, [r7, #36]	; 0x24
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036b0:	2100      	movs	r1, #0
 80036b2:	4b47      	ldr	r3, [pc, #284]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036b4:	fb03 f201 	mul.w	r2, r3, r1
 80036b8:	2300      	movs	r3, #0
 80036ba:	fb00 f303 	mul.w	r3, r0, r3
 80036be:	4413      	add	r3, r2
 80036c0:	4a43      	ldr	r2, [pc, #268]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036c2:	fba0 1202 	umull	r1, r2, r0, r2
 80036c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036c8:	460a      	mov	r2, r1
 80036ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80036cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ce:	4413      	add	r3, r2
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d4:	2200      	movs	r2, #0
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	61fa      	str	r2, [r7, #28]
 80036da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036e2:	f7fc fdd5 	bl	8000290 <__aeabi_uldivmod>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4613      	mov	r3, r2
 80036ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ee:	e053      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f0:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	099b      	lsrs	r3, r3, #6
 80036f6:	2200      	movs	r2, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	617a      	str	r2, [r7, #20]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003702:	f04f 0b00 	mov.w	fp, #0
 8003706:	4652      	mov	r2, sl
 8003708:	465b      	mov	r3, fp
 800370a:	f04f 0000 	mov.w	r0, #0
 800370e:	f04f 0100 	mov.w	r1, #0
 8003712:	0159      	lsls	r1, r3, #5
 8003714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003718:	0150      	lsls	r0, r2, #5
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	ebb2 080a 	subs.w	r8, r2, sl
 8003722:	eb63 090b 	sbc.w	r9, r3, fp
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800373a:	ebb2 0408 	subs.w	r4, r2, r8
 800373e:	eb63 0509 	sbc.w	r5, r3, r9
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	00eb      	lsls	r3, r5, #3
 800374c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003750:	00e2      	lsls	r2, r4, #3
 8003752:	4614      	mov	r4, r2
 8003754:	461d      	mov	r5, r3
 8003756:	eb14 030a 	adds.w	r3, r4, sl
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	eb45 030b 	adc.w	r3, r5, fp
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800376e:	4629      	mov	r1, r5
 8003770:	028b      	lsls	r3, r1, #10
 8003772:	4621      	mov	r1, r4
 8003774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003778:	4621      	mov	r1, r4
 800377a:	028a      	lsls	r2, r1, #10
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003782:	2200      	movs	r2, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	60fa      	str	r2, [r7, #12]
 8003788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800378c:	f7fc fd80 	bl	8000290 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4613      	mov	r3, r2
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	3301      	adds	r3, #1
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037b2:	e002      	b.n	80037ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <HAL_RCC_GetSysClockFreq+0x184>)
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3740      	adds	r7, #64	; 0x40
 80037c0:	46bd      	mov	sp, r7
 80037c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
 80037cc:	00f42400 	.word	0x00f42400
 80037d0:	017d7840 	.word	0x017d7840

080037d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000000 	.word	0x20000000

080037ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037f0:	f7ff fff0 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0a9b      	lsrs	r3, r3, #10
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40023800 	.word	0x40023800
 8003810:	0800993c 	.word	0x0800993c

08003814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003818:	f7ff ffdc 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0b5b      	lsrs	r3, r3, #13
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	0800993c 	.word	0x0800993c

0800383c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e03f      	b.n	80038ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd f854 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2224      	movs	r2, #36	; 0x24
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800387e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 ff81 	bl	8004788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08c      	sub	sp, #48	; 0x30
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d165      	bne.n	80039be <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_UART_Transmit_DMA+0x26>
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e05e      	b.n	80039c0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_UART_Transmit_DMA+0x38>
 800390c:	2302      	movs	r3, #2
 800390e:	e057      	b.n	80039c0 <HAL_UART_Transmit_DMA+0xe8>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	88fa      	ldrh	r2, [r7, #6]
 8003922:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2221      	movs	r2, #33	; 0x21
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <HAL_UART_Transmit_DMA+0xf0>)
 800393e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	4a21      	ldr	r2, [pc, #132]	; (80039cc <HAL_UART_Transmit_DMA+0xf4>)
 8003946:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	4a20      	ldr	r2, [pc, #128]	; (80039d0 <HAL_UART_Transmit_DMA+0xf8>)
 800394e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	2200      	movs	r2, #0
 8003956:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003958:	f107 0308 	add.w	r3, r7, #8
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3304      	adds	r3, #4
 800396c:	461a      	mov	r2, r3
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	f7fd fb9e 	bl	80010b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800397c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3314      	adds	r3, #20
 800398c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	617b      	str	r3, [r7, #20]
   return(result);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3314      	adds	r3, #20
 80039a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039a6:	627a      	str	r2, [r7, #36]	; 0x24
 80039a8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6a39      	ldr	r1, [r7, #32]
 80039ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e5      	bne.n	8003986 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
  }
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3730      	adds	r7, #48	; 0x30
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	08004021 	.word	0x08004021
 80039cc:	080040bb 	.word	0x080040bb
 80039d0:	08004233 	.word	0x08004233

080039d4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	; 0x30
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d152      	bne.n	8003a94 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e04b      	b.n	8003a96 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e044      	b.n	8003a96 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fc51 	bl	80042c8 <UART_Start_Receive_DMA>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d12c      	bne.n	8003a8e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d125      	bne.n	8003a88 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	617b      	str	r3, [r7, #20]
   return(result);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f043 0310 	orr.w	r3, r3, #16
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	330c      	adds	r3, #12
 8003a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a72:	627a      	str	r2, [r7, #36]	; 0x24
 8003a74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	6a39      	ldr	r1, [r7, #32]
 8003a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e5      	bne.n	8003a52 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003a86:	e002      	b.n	8003a8e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a92:	e000      	b.n	8003a96 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3730      	adds	r7, #48	; 0x30
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b0ba      	sub	sp, #232	; 0xe8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10f      	bne.n	8003b06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <HAL_UART_IRQHandler+0x66>
 8003af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fd87 	bl	8004612 <UART_Receive_IT>
      return;
 8003b04:	e256      	b.n	8003fb4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 80de 	beq.w	8003ccc <HAL_UART_IRQHandler+0x22c>
 8003b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80d1 	beq.w	8003ccc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <HAL_UART_IRQHandler+0xae>
 8003b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00b      	beq.n	8003b72 <HAL_UART_IRQHandler+0xd2>
 8003b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f043 0202 	orr.w	r2, r3, #2
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_UART_IRQHandler+0xf6>
 8003b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f043 0204 	orr.w	r2, r3, #4
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d011      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x126>
 8003ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d105      	bne.n	8003bba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f043 0208 	orr.w	r2, r3, #8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 81ed 	beq.w	8003faa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_UART_IRQHandler+0x14e>
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fd12 	bl	8004612 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b40      	cmp	r3, #64	; 0x40
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <HAL_UART_IRQHandler+0x17a>
 8003c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d04f      	beq.n	8003cba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fc1a 	bl	8004454 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d141      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3314      	adds	r3, #20
 8003c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3314      	adds	r3, #20
 8003c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1d9      	bne.n	8003c2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d013      	beq.n	8003caa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	4a7d      	ldr	r2, [pc, #500]	; (8003e7c <HAL_UART_IRQHandler+0x3dc>)
 8003c88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd fad6 	bl	8001240 <HAL_DMA_Abort_IT>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d016      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca8:	e00e      	b.n	8003cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f9ae 	bl	800400c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	e00a      	b.n	8003cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f9aa 	bl	800400c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb8:	e006      	b.n	8003cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f9a6 	bl	800400c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cc6:	e170      	b.n	8003faa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc8:	bf00      	nop
    return;
 8003cca:	e16e      	b.n	8003faa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	f040 814a 	bne.w	8003f6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8143 	beq.w	8003f6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 813c 	beq.w	8003f6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	f040 80b4 	bne.w	8003e80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8140 	beq.w	8003fae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d36:	429a      	cmp	r2, r3
 8003d38:	f080 8139 	bcs.w	8003fae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4e:	f000 8088 	beq.w	8003e62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1d9      	bne.n	8003d52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3314      	adds	r3, #20
 8003dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e1      	bne.n	8003d9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e3      	bne.n	8003dda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e32:	f023 0310 	bic.w	r3, r3, #16
 8003e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e44:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e3      	bne.n	8003e20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fd f97f 	bl	8001160 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fc fcca 	bl	800080c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e78:	e099      	b.n	8003fae <HAL_UART_IRQHandler+0x50e>
 8003e7a:	bf00      	nop
 8003e7c:	0800451b 	.word	0x0800451b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 808b 	beq.w	8003fb2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8086 	beq.w	8003fb2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003eca:	647a      	str	r2, [r7, #68]	; 0x44
 8003ecc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e3      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3314      	adds	r3, #20
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	623b      	str	r3, [r7, #32]
   return(result);
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f02:	633a      	str	r2, [r7, #48]	; 0x30
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e3      	bne.n	8003ede <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0310 	bic.w	r3, r3, #16
 8003f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f48:	61fa      	str	r2, [r7, #28]
 8003f4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	69b9      	ldr	r1, [r7, #24]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	617b      	str	r3, [r7, #20]
   return(result);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e3      	bne.n	8003f24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f60:	4619      	mov	r1, r3
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc fc52 	bl	800080c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f68:	e023      	b.n	8003fb2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_UART_IRQHandler+0x4ea>
 8003f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fadd 	bl	8004542 <UART_Transmit_IT>
    return;
 8003f88:	e014      	b.n	8003fb4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00e      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x514>
 8003f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d008      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fb1d 	bl	80045e2 <UART_EndTransmit_IT>
    return;
 8003fa8:	e004      	b.n	8003fb4 <HAL_UART_IRQHandler+0x514>
    return;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <HAL_UART_IRQHandler+0x514>
      return;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <HAL_UART_IRQHandler+0x514>
      return;
 8003fb2:	bf00      	nop
  }
}
 8003fb4:	37e8      	adds	r7, #232	; 0xe8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop

08003fbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b090      	sub	sp, #64	; 0x40
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d137      	bne.n	80040ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800403c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800403e:	2200      	movs	r2, #0
 8004040:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3314      	adds	r3, #20
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	623b      	str	r3, [r7, #32]
   return(result);
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
 800405a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3314      	adds	r3, #20
 8004060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004062:	633a      	str	r2, [r7, #48]	; 0x30
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e5      	bne.n	8004042 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	330c      	adds	r3, #12
 800407c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	60fb      	str	r3, [r7, #12]
   return(result);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408c:	637b      	str	r3, [r7, #52]	; 0x34
 800408e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	330c      	adds	r3, #12
 8004094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004096:	61fa      	str	r2, [r7, #28]
 8004098:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	69b9      	ldr	r1, [r7, #24]
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	617b      	str	r3, [r7, #20]
   return(result);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e5      	bne.n	8004076 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040aa:	e002      	b.n	80040b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80040ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040ae:	f7ff ff85 	bl	8003fbc <HAL_UART_TxCpltCallback>
}
 80040b2:	bf00      	nop
 80040b4:	3740      	adds	r7, #64	; 0x40
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f7ff ff81 	bl	8003fd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b09c      	sub	sp, #112	; 0x70
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d172      	bne.n	80041d8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80040f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f4:	2200      	movs	r2, #0
 80040f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800410a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800410e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004118:	65ba      	str	r2, [r7, #88]	; 0x58
 800411a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800411e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3314      	adds	r3, #20
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	667b      	str	r3, [r7, #100]	; 0x64
 8004144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3314      	adds	r3, #20
 800414a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800414c:	647a      	str	r2, [r7, #68]	; 0x44
 800414e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800415a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e5      	bne.n	800412c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3314      	adds	r3, #20
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	623b      	str	r3, [r7, #32]
   return(result);
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004176:	663b      	str	r3, [r7, #96]	; 0x60
 8004178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3314      	adds	r3, #20
 800417e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004180:	633a      	str	r2, [r7, #48]	; 0x30
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e5      	bne.n	8004160 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d119      	bne.n	80041d8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0310 	bic.w	r3, r3, #16
 80041ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041c4:	61fa      	str	r2, [r7, #28]
 80041c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	69b9      	ldr	r1, [r7, #24]
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	617b      	str	r3, [r7, #20]
   return(result);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e5      	bne.n	80041a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d106      	bne.n	80041ee <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041e4:	4619      	mov	r1, r3
 80041e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041e8:	f7fc fb10 	bl	800080c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041ec:	e002      	b.n	80041f4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80041ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041f0:	f7ff fef8 	bl	8003fe4 <HAL_UART_RxCpltCallback>
}
 80041f4:	bf00      	nop
 80041f6:	3770      	adds	r7, #112	; 0x70
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	2b01      	cmp	r3, #1
 8004210:	d108      	bne.n	8004224 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	b29b      	uxth	r3, r3
 800421a:	4619      	mov	r1, r3
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7fc faf5 	bl	800080c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004222:	e002      	b.n	800422a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff fee7 	bl	8003ff8 <HAL_UART_RxHalfCpltCallback>
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b21      	cmp	r3, #33	; 0x21
 8004264:	d108      	bne.n	8004278 <UART_DMAError+0x46>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2200      	movs	r2, #0
 8004270:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004272:	68b8      	ldr	r0, [r7, #8]
 8004274:	f000 f8c6 	bl	8004404 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b22      	cmp	r3, #34	; 0x22
 8004298:	d108      	bne.n	80042ac <UART_DMAError+0x7a>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042a6:	68b8      	ldr	r0, [r7, #8]
 80042a8:	f000 f8d4 	bl	8004454 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	f043 0210 	orr.w	r2, r3, #16
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042b8:	68b8      	ldr	r0, [r7, #8]
 80042ba:	f7ff fea7 	bl	800400c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042be:	bf00      	nop
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b098      	sub	sp, #96	; 0x60
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	4613      	mov	r3, r2
 80042d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2222      	movs	r2, #34	; 0x22
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	4a40      	ldr	r2, [pc, #256]	; (80043f8 <UART_Start_Receive_DMA+0x130>)
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	4a3f      	ldr	r2, [pc, #252]	; (80043fc <UART_Start_Receive_DMA+0x134>)
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	4a3e      	ldr	r2, [pc, #248]	; (8004400 <UART_Start_Receive_DMA+0x138>)
 8004306:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	2200      	movs	r2, #0
 800430e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004310:	f107 0308 	add.w	r3, r7, #8
 8004314:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	f7fc fec2 	bl	80010b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800432c:	2300      	movs	r3, #0
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d019      	beq.n	8004386 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004368:	65bb      	str	r3, [r7, #88]	; 0x58
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004372:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004374:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e5      	bne.n	8004352 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3314      	adds	r3, #20
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	657b      	str	r3, [r7, #84]	; 0x54
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3314      	adds	r3, #20
 80043a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80043a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e5      	bne.n	8004386 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3314      	adds	r3, #20
 80043c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d0:	653b      	str	r3, [r7, #80]	; 0x50
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3314      	adds	r3, #20
 80043d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043da:	627a      	str	r2, [r7, #36]	; 0x24
 80043dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	6a39      	ldr	r1, [r7, #32]
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e5      	bne.n	80043ba <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3760      	adds	r7, #96	; 0x60
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	080040d7 	.word	0x080040d7
 80043fc:	080041fd 	.word	0x080041fd
 8004400:	08004233 	.word	0x08004233

08004404 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	60bb      	str	r3, [r7, #8]
   return(result);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	61ba      	str	r2, [r7, #24]
 800442e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6979      	ldr	r1, [r7, #20]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	613b      	str	r3, [r7, #16]
   return(result);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e5      	bne.n	800440c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004448:	bf00      	nop
 800444a:	3724      	adds	r7, #36	; 0x24
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b095      	sub	sp, #84	; 0x54
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800447c:	643a      	str	r2, [r7, #64]	; 0x40
 800447e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d119      	bne.n	8004500 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	60bb      	str	r3, [r7, #8]
   return(result);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0310 	bic.w	r3, r3, #16
 80044e2:	647b      	str	r3, [r7, #68]	; 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044ec:	61ba      	str	r2, [r7, #24]
 80044ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6979      	ldr	r1, [r7, #20]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	613b      	str	r3, [r7, #16]
   return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800450e:	bf00      	nop
 8004510:	3754      	adds	r7, #84	; 0x54
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff fd69 	bl	800400c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004542:	b480      	push	{r7}
 8004544:	b085      	sub	sp, #20
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b21      	cmp	r3, #33	; 0x21
 8004554:	d13e      	bne.n	80045d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455e:	d114      	bne.n	800458a <UART_Transmit_IT+0x48>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d110      	bne.n	800458a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800457c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	1c9a      	adds	r2, r3, #2
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	621a      	str	r2, [r3, #32]
 8004588:	e008      	b.n	800459c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	1c59      	adds	r1, r3, #1
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6211      	str	r1, [r2, #32]
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4619      	mov	r1, r3
 80045aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10f      	bne.n	80045d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fcda 	bl	8003fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b08c      	sub	sp, #48	; 0x30
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b22      	cmp	r3, #34	; 0x22
 8004624:	f040 80ab 	bne.w	800477e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004630:	d117      	bne.n	8004662 <UART_Receive_IT+0x50>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d113      	bne.n	8004662 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	b29a      	uxth	r2, r3
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	1c9a      	adds	r2, r3, #2
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	629a      	str	r2, [r3, #40]	; 0x28
 8004660:	e026      	b.n	80046b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004674:	d007      	beq.n	8004686 <UART_Receive_IT+0x74>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10a      	bne.n	8004694 <UART_Receive_IT+0x82>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	e008      	b.n	80046a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4619      	mov	r1, r3
 80046be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d15a      	bne.n	800477a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0220 	bic.w	r2, r2, #32
 80046d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	2b01      	cmp	r3, #1
 8004702:	d135      	bne.n	8004770 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	613b      	str	r3, [r7, #16]
   return(result);
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f023 0310 	bic.w	r3, r3, #16
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472a:	623a      	str	r2, [r7, #32]
 800472c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	69f9      	ldr	r1, [r7, #28]
 8004730:	6a3a      	ldr	r2, [r7, #32]
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	61bb      	str	r3, [r7, #24]
   return(result);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b10      	cmp	r3, #16
 800474a:	d10a      	bne.n	8004762 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7fc f84f 	bl	800080c <HAL_UARTEx_RxEventCallback>
 800476e:	e002      	b.n	8004776 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff fc37 	bl	8003fe4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	e002      	b.n	8004780 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3730      	adds	r7, #48	; 0x30
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800478c:	b0c0      	sub	sp, #256	; 0x100
 800478e:	af00      	add	r7, sp, #0
 8004790:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	68d9      	ldr	r1, [r3, #12]
 80047a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	ea40 0301 	orr.w	r3, r0, r1
 80047b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	431a      	orrs	r2, r3
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047e0:	f021 010c 	bic.w	r1, r1, #12
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ee:	430b      	orrs	r3, r1
 80047f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004802:	6999      	ldr	r1, [r3, #24]
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	ea40 0301 	orr.w	r3, r0, r1
 800480e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b8f      	ldr	r3, [pc, #572]	; (8004a54 <UART_SetConfig+0x2cc>)
 8004818:	429a      	cmp	r2, r3
 800481a:	d005      	beq.n	8004828 <UART_SetConfig+0xa0>
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b8d      	ldr	r3, [pc, #564]	; (8004a58 <UART_SetConfig+0x2d0>)
 8004824:	429a      	cmp	r2, r3
 8004826:	d104      	bne.n	8004832 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004828:	f7fe fff4 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 800482c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004830:	e003      	b.n	800483a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004832:	f7fe ffdb 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8004836:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004844:	f040 810c 	bne.w	8004a60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800484c:	2200      	movs	r2, #0
 800484e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004852:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004856:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800485a:	4622      	mov	r2, r4
 800485c:	462b      	mov	r3, r5
 800485e:	1891      	adds	r1, r2, r2
 8004860:	65b9      	str	r1, [r7, #88]	; 0x58
 8004862:	415b      	adcs	r3, r3
 8004864:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004866:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800486a:	4621      	mov	r1, r4
 800486c:	eb12 0801 	adds.w	r8, r2, r1
 8004870:	4629      	mov	r1, r5
 8004872:	eb43 0901 	adc.w	r9, r3, r1
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800488a:	4690      	mov	r8, r2
 800488c:	4699      	mov	r9, r3
 800488e:	4623      	mov	r3, r4
 8004890:	eb18 0303 	adds.w	r3, r8, r3
 8004894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004898:	462b      	mov	r3, r5
 800489a:	eb49 0303 	adc.w	r3, r9, r3
 800489e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048b6:	460b      	mov	r3, r1
 80048b8:	18db      	adds	r3, r3, r3
 80048ba:	653b      	str	r3, [r7, #80]	; 0x50
 80048bc:	4613      	mov	r3, r2
 80048be:	eb42 0303 	adc.w	r3, r2, r3
 80048c2:	657b      	str	r3, [r7, #84]	; 0x54
 80048c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048cc:	f7fb fce0 	bl	8000290 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4b61      	ldr	r3, [pc, #388]	; (8004a5c <UART_SetConfig+0x2d4>)
 80048d6:	fba3 2302 	umull	r2, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	011c      	lsls	r4, r3, #4
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	1891      	adds	r1, r2, r2
 80048f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80048f8:	415b      	adcs	r3, r3
 80048fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004900:	4641      	mov	r1, r8
 8004902:	eb12 0a01 	adds.w	sl, r2, r1
 8004906:	4649      	mov	r1, r9
 8004908:	eb43 0b01 	adc.w	fp, r3, r1
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004918:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800491c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004920:	4692      	mov	sl, r2
 8004922:	469b      	mov	fp, r3
 8004924:	4643      	mov	r3, r8
 8004926:	eb1a 0303 	adds.w	r3, sl, r3
 800492a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800492e:	464b      	mov	r3, r9
 8004930:	eb4b 0303 	adc.w	r3, fp, r3
 8004934:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004944:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004948:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800494c:	460b      	mov	r3, r1
 800494e:	18db      	adds	r3, r3, r3
 8004950:	643b      	str	r3, [r7, #64]	; 0x40
 8004952:	4613      	mov	r3, r2
 8004954:	eb42 0303 	adc.w	r3, r2, r3
 8004958:	647b      	str	r3, [r7, #68]	; 0x44
 800495a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800495e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004962:	f7fb fc95 	bl	8000290 <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4611      	mov	r1, r2
 800496c:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <UART_SetConfig+0x2d4>)
 800496e:	fba3 2301 	umull	r2, r3, r3, r1
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2264      	movs	r2, #100	; 0x64
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	1acb      	subs	r3, r1, r3
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004982:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <UART_SetConfig+0x2d4>)
 8004984:	fba3 2302 	umull	r2, r3, r3, r2
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004990:	441c      	add	r4, r3
 8004992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800499c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049a4:	4642      	mov	r2, r8
 80049a6:	464b      	mov	r3, r9
 80049a8:	1891      	adds	r1, r2, r2
 80049aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80049ac:	415b      	adcs	r3, r3
 80049ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049b4:	4641      	mov	r1, r8
 80049b6:	1851      	adds	r1, r2, r1
 80049b8:	6339      	str	r1, [r7, #48]	; 0x30
 80049ba:	4649      	mov	r1, r9
 80049bc:	414b      	adcs	r3, r1
 80049be:	637b      	str	r3, [r7, #52]	; 0x34
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049cc:	4659      	mov	r1, fp
 80049ce:	00cb      	lsls	r3, r1, #3
 80049d0:	4651      	mov	r1, sl
 80049d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d6:	4651      	mov	r1, sl
 80049d8:	00ca      	lsls	r2, r1, #3
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	4642      	mov	r2, r8
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049e8:	464b      	mov	r3, r9
 80049ea:	460a      	mov	r2, r1
 80049ec:	eb42 0303 	adc.w	r3, r2, r3
 80049f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a08:	460b      	mov	r3, r1
 8004a0a:	18db      	adds	r3, r3, r3
 8004a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0e:	4613      	mov	r3, r2
 8004a10:	eb42 0303 	adc.w	r3, r2, r3
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a1e:	f7fb fc37 	bl	8000290 <__aeabi_uldivmod>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <UART_SetConfig+0x2d4>)
 8004a28:	fba3 1302 	umull	r1, r3, r3, r2
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	2164      	movs	r1, #100	; 0x64
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	3332      	adds	r3, #50	; 0x32
 8004a3a:	4a08      	ldr	r2, [pc, #32]	; (8004a5c <UART_SetConfig+0x2d4>)
 8004a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	f003 0207 	and.w	r2, r3, #7
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4422      	add	r2, r4
 8004a4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a50:	e105      	b.n	8004c5e <UART_SetConfig+0x4d6>
 8004a52:	bf00      	nop
 8004a54:	40011000 	.word	0x40011000
 8004a58:	40011400 	.word	0x40011400
 8004a5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a72:	4642      	mov	r2, r8
 8004a74:	464b      	mov	r3, r9
 8004a76:	1891      	adds	r1, r2, r2
 8004a78:	6239      	str	r1, [r7, #32]
 8004a7a:	415b      	adcs	r3, r3
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a82:	4641      	mov	r1, r8
 8004a84:	1854      	adds	r4, r2, r1
 8004a86:	4649      	mov	r1, r9
 8004a88:	eb43 0501 	adc.w	r5, r3, r1
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	00eb      	lsls	r3, r5, #3
 8004a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a9a:	00e2      	lsls	r2, r4, #3
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	461d      	mov	r5, r3
 8004aa0:	4643      	mov	r3, r8
 8004aa2:	18e3      	adds	r3, r4, r3
 8004aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	eb45 0303 	adc.w	r3, r5, r3
 8004aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004abe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ace:	4629      	mov	r1, r5
 8004ad0:	008b      	lsls	r3, r1, #2
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ad8:	4621      	mov	r1, r4
 8004ada:	008a      	lsls	r2, r1, #2
 8004adc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ae0:	f7fb fbd6 	bl	8000290 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4b60      	ldr	r3, [pc, #384]	; (8004c6c <UART_SetConfig+0x4e4>)
 8004aea:	fba3 2302 	umull	r2, r3, r3, r2
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	011c      	lsls	r4, r3, #4
 8004af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004afc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	1891      	adds	r1, r2, r2
 8004b0a:	61b9      	str	r1, [r7, #24]
 8004b0c:	415b      	adcs	r3, r3
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b14:	4641      	mov	r1, r8
 8004b16:	1851      	adds	r1, r2, r1
 8004b18:	6139      	str	r1, [r7, #16]
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	414b      	adcs	r3, r1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	00cb      	lsls	r3, r1, #3
 8004b30:	4651      	mov	r1, sl
 8004b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b36:	4651      	mov	r1, sl
 8004b38:	00ca      	lsls	r2, r1, #3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4642      	mov	r2, r8
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b48:	464b      	mov	r3, r9
 8004b4a:	460a      	mov	r2, r1
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	008b      	lsls	r3, r1, #2
 8004b70:	4641      	mov	r1, r8
 8004b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b76:	4641      	mov	r1, r8
 8004b78:	008a      	lsls	r2, r1, #2
 8004b7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b7e:	f7fb fb87 	bl	8000290 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <UART_SetConfig+0x4e4>)
 8004b88:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	2164      	movs	r1, #100	; 0x64
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	3332      	adds	r3, #50	; 0x32
 8004b9a:	4a34      	ldr	r2, [pc, #208]	; (8004c6c <UART_SetConfig+0x4e4>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba6:	441c      	add	r4, r3
 8004ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bac:	2200      	movs	r2, #0
 8004bae:	673b      	str	r3, [r7, #112]	; 0x70
 8004bb0:	677a      	str	r2, [r7, #116]	; 0x74
 8004bb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bb6:	4642      	mov	r2, r8
 8004bb8:	464b      	mov	r3, r9
 8004bba:	1891      	adds	r1, r2, r2
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	415b      	adcs	r3, r3
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	1851      	adds	r1, r2, r1
 8004bca:	6039      	str	r1, [r7, #0]
 8004bcc:	4649      	mov	r1, r9
 8004bce:	414b      	adcs	r3, r1
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bde:	4659      	mov	r1, fp
 8004be0:	00cb      	lsls	r3, r1, #3
 8004be2:	4651      	mov	r1, sl
 8004be4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004be8:	4651      	mov	r1, sl
 8004bea:	00ca      	lsls	r2, r1, #3
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	189b      	adds	r3, r3, r2
 8004bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	460a      	mov	r2, r1
 8004bfc:	eb42 0303 	adc.w	r3, r2, r3
 8004c00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c0c:	667a      	str	r2, [r7, #100]	; 0x64
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	008b      	lsls	r3, r1, #2
 8004c1e:	4641      	mov	r1, r8
 8004c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c24:	4641      	mov	r1, r8
 8004c26:	008a      	lsls	r2, r1, #2
 8004c28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c2c:	f7fb fb30 	bl	8000290 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <UART_SetConfig+0x4e4>)
 8004c36:	fba3 1302 	umull	r1, r3, r3, r2
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	2164      	movs	r1, #100	; 0x64
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	3332      	adds	r3, #50	; 0x32
 8004c48:	4a08      	ldr	r2, [pc, #32]	; (8004c6c <UART_SetConfig+0x4e4>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	f003 020f 	and.w	r2, r3, #15
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4422      	add	r2, r4
 8004c5c:	609a      	str	r2, [r3, #8]
}
 8004c5e:	bf00      	nop
 8004c60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c64:	46bd      	mov	sp, r7
 8004c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c6a:	bf00      	nop
 8004c6c:	51eb851f 	.word	0x51eb851f

08004c70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c70:	b084      	sub	sp, #16
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	f107 001c 	add.w	r0, r7, #28
 8004c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d122      	bne.n	8004cce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 fbee 	bl	80064a4 <USB_CoreReset>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	73fb      	strb	r3, [r7, #15]
 8004ccc:	e01a      	b.n	8004d04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f001 fbe2 	bl	80064a4 <USB_CoreReset>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	639a      	str	r2, [r3, #56]	; 0x38
 8004cf6:	e005      	b.n	8004d04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d10b      	bne.n	8004d22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f043 0206 	orr.w	r2, r3, #6
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d2e:	b004      	add	sp, #16
 8004d30:	4770      	bx	lr
	...

08004d34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d165      	bne.n	8004e14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4a41      	ldr	r2, [pc, #260]	; (8004e50 <USB_SetTurnaroundTime+0x11c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d906      	bls.n	8004d5e <USB_SetTurnaroundTime+0x2a>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4a40      	ldr	r2, [pc, #256]	; (8004e54 <USB_SetTurnaroundTime+0x120>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d202      	bcs.n	8004d5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d58:	230f      	movs	r3, #15
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e062      	b.n	8004e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4a3c      	ldr	r2, [pc, #240]	; (8004e54 <USB_SetTurnaroundTime+0x120>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d306      	bcc.n	8004d74 <USB_SetTurnaroundTime+0x40>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4a3b      	ldr	r2, [pc, #236]	; (8004e58 <USB_SetTurnaroundTime+0x124>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d202      	bcs.n	8004d74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d6e:	230e      	movs	r3, #14
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e057      	b.n	8004e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4a38      	ldr	r2, [pc, #224]	; (8004e58 <USB_SetTurnaroundTime+0x124>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d306      	bcc.n	8004d8a <USB_SetTurnaroundTime+0x56>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4a37      	ldr	r2, [pc, #220]	; (8004e5c <USB_SetTurnaroundTime+0x128>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d202      	bcs.n	8004d8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d84:	230d      	movs	r3, #13
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e04c      	b.n	8004e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4a33      	ldr	r2, [pc, #204]	; (8004e5c <USB_SetTurnaroundTime+0x128>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d306      	bcc.n	8004da0 <USB_SetTurnaroundTime+0x6c>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4a32      	ldr	r2, [pc, #200]	; (8004e60 <USB_SetTurnaroundTime+0x12c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d802      	bhi.n	8004da0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e041      	b.n	8004e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4a2f      	ldr	r2, [pc, #188]	; (8004e60 <USB_SetTurnaroundTime+0x12c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d906      	bls.n	8004db6 <USB_SetTurnaroundTime+0x82>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4a2e      	ldr	r2, [pc, #184]	; (8004e64 <USB_SetTurnaroundTime+0x130>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d802      	bhi.n	8004db6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004db0:	230b      	movs	r3, #11
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e036      	b.n	8004e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4a2a      	ldr	r2, [pc, #168]	; (8004e64 <USB_SetTurnaroundTime+0x130>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d906      	bls.n	8004dcc <USB_SetTurnaroundTime+0x98>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4a29      	ldr	r2, [pc, #164]	; (8004e68 <USB_SetTurnaroundTime+0x134>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d802      	bhi.n	8004dcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004dc6:	230a      	movs	r3, #10
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e02b      	b.n	8004e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4a26      	ldr	r2, [pc, #152]	; (8004e68 <USB_SetTurnaroundTime+0x134>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d906      	bls.n	8004de2 <USB_SetTurnaroundTime+0xae>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4a25      	ldr	r2, [pc, #148]	; (8004e6c <USB_SetTurnaroundTime+0x138>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d202      	bcs.n	8004de2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ddc:	2309      	movs	r3, #9
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e020      	b.n	8004e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <USB_SetTurnaroundTime+0x138>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d306      	bcc.n	8004df8 <USB_SetTurnaroundTime+0xc4>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4a20      	ldr	r2, [pc, #128]	; (8004e70 <USB_SetTurnaroundTime+0x13c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d802      	bhi.n	8004df8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004df2:	2308      	movs	r3, #8
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e015      	b.n	8004e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4a1d      	ldr	r2, [pc, #116]	; (8004e70 <USB_SetTurnaroundTime+0x13c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d906      	bls.n	8004e0e <USB_SetTurnaroundTime+0xda>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <USB_SetTurnaroundTime+0x140>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d202      	bcs.n	8004e0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e08:	2307      	movs	r3, #7
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e00a      	b.n	8004e24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e0e:	2306      	movs	r3, #6
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e007      	b.n	8004e24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e14:	79fb      	ldrb	r3, [r7, #7]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e1a:	2309      	movs	r3, #9
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	e001      	b.n	8004e24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e20:	2309      	movs	r3, #9
 8004e22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	029b      	lsls	r3, r3, #10
 8004e38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	00d8acbf 	.word	0x00d8acbf
 8004e54:	00e4e1c0 	.word	0x00e4e1c0
 8004e58:	00f42400 	.word	0x00f42400
 8004e5c:	01067380 	.word	0x01067380
 8004e60:	011a499f 	.word	0x011a499f
 8004e64:	01312cff 	.word	0x01312cff
 8004e68:	014ca43f 	.word	0x014ca43f
 8004e6c:	016e3600 	.word	0x016e3600
 8004e70:	01a6ab1f 	.word	0x01a6ab1f
 8004e74:	01e84800 	.word	0x01e84800

08004e78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f043 0201 	orr.w	r2, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d115      	bne.n	8004f0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eea:	2001      	movs	r0, #1
 8004eec:	f7fb fefc 	bl	8000ce8 <HAL_Delay>
      ms++;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f001 fa45 	bl	8006386 <USB_GetMode>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d01e      	beq.n	8004f40 <USB_SetCurrentMode+0x84>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b31      	cmp	r3, #49	; 0x31
 8004f06:	d9f0      	bls.n	8004eea <USB_SetCurrentMode+0x2e>
 8004f08:	e01a      	b.n	8004f40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d115      	bne.n	8004f3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	f7fb fee3 	bl	8000ce8 <HAL_Delay>
      ms++;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3301      	adds	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f001 fa2c 	bl	8006386 <USB_GetMode>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <USB_SetCurrentMode+0x84>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b31      	cmp	r3, #49	; 0x31
 8004f38:	d9f0      	bls.n	8004f1c <USB_SetCurrentMode+0x60>
 8004f3a:	e001      	b.n	8004f40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e005      	b.n	8004f4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b32      	cmp	r3, #50	; 0x32
 8004f44:	d101      	bne.n	8004f4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f54:	b084      	sub	sp, #16
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	e009      	b.n	8004f88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	3340      	adds	r3, #64	; 0x40
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3301      	adds	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b0e      	cmp	r3, #14
 8004f8c:	d9f2      	bls.n	8004f74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11c      	bne.n	8004fce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa2:	f043 0302 	orr.w	r3, r3, #2
 8004fa6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
 8004fcc:	e00b      	b.n	8004fe6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fec:	461a      	mov	r2, r3
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005000:	461a      	mov	r2, r3
 8005002:	680b      	ldr	r3, [r1, #0]
 8005004:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	2b01      	cmp	r3, #1
 800500a:	d10c      	bne.n	8005026 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d104      	bne.n	800501c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005012:	2100      	movs	r1, #0
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f965 	bl	80052e4 <USB_SetDevSpeed>
 800501a:	e008      	b.n	800502e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800501c:	2101      	movs	r1, #1
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f960 	bl	80052e4 <USB_SetDevSpeed>
 8005024:	e003      	b.n	800502e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005026:	2103      	movs	r1, #3
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f95b 	bl	80052e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800502e:	2110      	movs	r1, #16
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f8f3 	bl	800521c <USB_FlushTxFifo>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f91f 	bl	8005284 <USB_FlushRxFifo>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	461a      	mov	r2, r3
 8005058:	2300      	movs	r3, #0
 800505a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005062:	461a      	mov	r2, r3
 8005064:	2300      	movs	r3, #0
 8005066:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	461a      	mov	r2, r3
 8005070:	2300      	movs	r3, #0
 8005072:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e043      	b.n	8005102 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800508c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005090:	d118      	bne.n	80050c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	461a      	mov	r2, r3
 80050a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e013      	b.n	80050d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ba:	461a      	mov	r2, r3
 80050bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e008      	b.n	80050d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	461a      	mov	r2, r3
 80050d2:	2300      	movs	r3, #0
 80050d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	461a      	mov	r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	461a      	mov	r2, r3
 80050f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	3301      	adds	r3, #1
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	429a      	cmp	r2, r3
 8005108:	d3b7      	bcc.n	800507a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e043      	b.n	8005198 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005126:	d118      	bne.n	800515a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	461a      	mov	r2, r3
 800513c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e013      	b.n	800516c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	461a      	mov	r2, r3
 8005152:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	e008      	b.n	800516c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	461a      	mov	r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005178:	461a      	mov	r2, r3
 800517a:	2300      	movs	r3, #0
 800517c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518a:	461a      	mov	r2, r3
 800518c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005190:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	3301      	adds	r3, #1
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	429a      	cmp	r2, r3
 800519e:	d3b7      	bcc.n	8005110 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f043 0210 	orr.w	r2, r3, #16
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	4b0f      	ldr	r3, [pc, #60]	; (8005218 <USB_DevInit+0x2c4>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f043 0208 	orr.w	r2, r3, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d107      	bne.n	8005208 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005200:	f043 0304 	orr.w	r3, r3, #4
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005208:	7dfb      	ldrb	r3, [r7, #23]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005214:	b004      	add	sp, #16
 8005216:	4770      	bx	lr
 8005218:	803c3800 	.word	0x803c3800

0800521c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3301      	adds	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a13      	ldr	r2, [pc, #76]	; (8005280 <USB_FlushTxFifo+0x64>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d901      	bls.n	800523c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e01b      	b.n	8005274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	daf2      	bge.n	800522a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	019b      	lsls	r3, r3, #6
 800524c:	f043 0220 	orr.w	r2, r3, #32
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3301      	adds	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4a08      	ldr	r2, [pc, #32]	; (8005280 <USB_FlushTxFifo+0x64>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e006      	b.n	8005274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b20      	cmp	r3, #32
 8005270:	d0f0      	beq.n	8005254 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	00030d40 	.word	0x00030d40

08005284 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4a11      	ldr	r2, [pc, #68]	; (80052e0 <USB_FlushRxFifo+0x5c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e018      	b.n	80052d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	daf2      	bge.n	8005290 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2210      	movs	r2, #16
 80052b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3301      	adds	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4a08      	ldr	r2, [pc, #32]	; (80052e0 <USB_FlushRxFifo+0x5c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d901      	bls.n	80052c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e006      	b.n	80052d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d0f0      	beq.n	80052b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	00030d40 	.word	0x00030d40

080052e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005304:	4313      	orrs	r3, r2
 8005306:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 0306 	and.w	r3, r3, #6
 800532e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005336:	2300      	movs	r3, #0
 8005338:	75fb      	strb	r3, [r7, #23]
 800533a:	e00a      	b.n	8005352 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d002      	beq.n	8005348 <USB_GetDevSpeed+0x32>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b06      	cmp	r3, #6
 8005346:	d102      	bne.n	800534e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005348:	2302      	movs	r3, #2
 800534a:	75fb      	strb	r3, [r7, #23]
 800534c:	e001      	b.n	8005352 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800534e:	230f      	movs	r3, #15
 8005350:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005352:	7dfb      	ldrb	r3, [r7, #23]
}
 8005354:	4618      	mov	r0, r3
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d13a      	bne.n	80053f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	2101      	movs	r1, #1
 800538e:	fa01 f303 	lsl.w	r3, r1, r3
 8005392:	b29b      	uxth	r3, r3
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800539a:	4313      	orrs	r3, r2
 800539c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d155      	bne.n	8005460 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	791b      	ldrb	r3, [r3, #4]
 80053ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	059b      	lsls	r3, r3, #22
 80053d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053d8:	4313      	orrs	r3, r2
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	e036      	b.n	8005460 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	2101      	movs	r1, #1
 8005404:	fa01 f303 	lsl.w	r3, r1, r3
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005410:	4313      	orrs	r3, r2
 8005412:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d11a      	bne.n	8005460 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	791b      	ldrb	r3, [r3, #4]
 8005444:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005446:	430b      	orrs	r3, r1
 8005448:	4313      	orrs	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d161      	bne.n	8005550 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800549e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a2:	d11f      	bne.n	80054e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	0151      	lsls	r1, r2, #5
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	440a      	add	r2, r1
 80054ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	2101      	movs	r1, #1
 80054f6:	fa01 f303 	lsl.w	r3, r1, r3
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	68f9      	ldr	r1, [r7, #12]
 8005500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005504:	4013      	ands	r3, r2
 8005506:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	2101      	movs	r1, #1
 800551a:	fa01 f303 	lsl.w	r3, r1, r3
 800551e:	b29b      	uxth	r3, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005528:	4013      	ands	r3, r2
 800552a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	0159      	lsls	r1, r3, #5
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	440b      	add	r3, r1
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	4619      	mov	r1, r3
 8005548:	4b35      	ldr	r3, [pc, #212]	; (8005620 <USB_DeactivateEndpoint+0x1b0>)
 800554a:	4013      	ands	r3, r2
 800554c:	600b      	str	r3, [r1, #0]
 800554e:	e060      	b.n	8005612 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005566:	d11f      	bne.n	80055a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005582:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005586:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	2101      	movs	r1, #1
 80055ba:	fa01 f303 	lsl.w	r3, r1, r3
 80055be:	041b      	lsls	r3, r3, #16
 80055c0:	43db      	mvns	r3, r3
 80055c2:	68f9      	ldr	r1, [r7, #12]
 80055c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c8:	4013      	ands	r3, r2
 80055ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	2101      	movs	r1, #1
 80055de:	fa01 f303 	lsl.w	r3, r1, r3
 80055e2:	041b      	lsls	r3, r3, #16
 80055e4:	43db      	mvns	r3, r3
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ec:	4013      	ands	r3, r2
 80055ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	0159      	lsls	r1, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	440b      	add	r3, r1
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	4619      	mov	r1, r3
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <USB_DeactivateEndpoint+0x1b4>)
 800560e:	4013      	ands	r3, r2
 8005610:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	ec337800 	.word	0xec337800
 8005624:	eff37800 	.word	0xeff37800

08005628 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	2b01      	cmp	r3, #1
 8005646:	f040 815c 	bne.w	8005902 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d132      	bne.n	80056b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005670:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005674:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	440a      	add	r2, r1
 800568c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005694:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b0:	0cdb      	lsrs	r3, r3, #19
 80056b2:	04db      	lsls	r3, r3, #19
 80056b4:	6113      	str	r3, [r2, #16]
 80056b6:	e074      	b.n	80057a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	0151      	lsls	r1, r2, #5
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	440a      	add	r2, r1
 80056ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d2:	0cdb      	lsrs	r3, r3, #19
 80056d4:	04db      	lsls	r3, r3, #19
 80056d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	0151      	lsls	r1, r2, #5
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	440a      	add	r2, r1
 80056ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6999      	ldr	r1, [r3, #24]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	440b      	add	r3, r1
 8005714:	1e59      	subs	r1, r3, #1
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	fbb1 f3f3 	udiv	r3, r1, r3
 800571e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005720:	4b9d      	ldr	r3, [pc, #628]	; (8005998 <USB_EPStartXfer+0x370>)
 8005722:	400b      	ands	r3, r1
 8005724:	69b9      	ldr	r1, [r7, #24]
 8005726:	0148      	lsls	r0, r1, #5
 8005728:	69f9      	ldr	r1, [r7, #28]
 800572a:	4401      	add	r1, r0
 800572c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005730:	4313      	orrs	r3, r2
 8005732:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800574a:	69b9      	ldr	r1, [r7, #24]
 800574c:	0148      	lsls	r0, r1, #5
 800574e:	69f9      	ldr	r1, [r7, #28]
 8005750:	4401      	add	r1, r0
 8005752:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005756:	4313      	orrs	r3, r2
 8005758:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	791b      	ldrb	r3, [r3, #4]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d11f      	bne.n	80057a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005780:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d14b      	bne.n	8005840 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d009      	beq.n	80057c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	461a      	mov	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	791b      	ldrb	r3, [r3, #4]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d128      	bne.n	800581e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d110      	bne.n	80057fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	e00f      	b.n	800581e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005838:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e133      	b.n	8005aa8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800585e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	791b      	ldrb	r3, [r3, #4]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d015      	beq.n	8005894 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 811b 	beq.w	8005aa8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	2101      	movs	r1, #1
 8005884:	fa01 f303 	lsl.w	r3, r1, r3
 8005888:	69f9      	ldr	r1, [r7, #28]
 800588a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800588e:	4313      	orrs	r3, r2
 8005890:	634b      	str	r3, [r1, #52]	; 0x34
 8005892:	e109      	b.n	8005aa8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d110      	bne.n	80058c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	e00f      	b.n	80058e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6919      	ldr	r1, [r3, #16]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	781a      	ldrb	r2, [r3, #0]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	b298      	uxth	r0, r3
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4603      	mov	r3, r0
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 fade 	bl	8005ebc <USB_WritePacket>
 8005900:	e0d2      	b.n	8005aa8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591c:	0cdb      	lsrs	r3, r3, #19
 800591e:	04db      	lsls	r3, r3, #19
 8005920:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	440a      	add	r2, r1
 8005938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005940:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005944:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d126      	bne.n	800599c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005964:	69b9      	ldr	r1, [r7, #24]
 8005966:	0148      	lsls	r0, r1, #5
 8005968:	69f9      	ldr	r1, [r7, #28]
 800596a:	4401      	add	r1, r0
 800596c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005970:	4313      	orrs	r3, r2
 8005972:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005992:	6113      	str	r3, [r2, #16]
 8005994:	e03a      	b.n	8005a0c <USB_EPStartXfer+0x3e4>
 8005996:	bf00      	nop
 8005998:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	1e5a      	subs	r2, r3, #1
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	8afa      	ldrh	r2, [r7, #22]
 80059b8:	fb03 f202 	mul.w	r2, r3, r2
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	8afb      	ldrh	r3, [r7, #22]
 80059d0:	04d9      	lsls	r1, r3, #19
 80059d2:	4b38      	ldr	r3, [pc, #224]	; (8005ab4 <USB_EPStartXfer+0x48c>)
 80059d4:	400b      	ands	r3, r1
 80059d6:	69b9      	ldr	r1, [r7, #24]
 80059d8:	0148      	lsls	r0, r1, #5
 80059da:	69f9      	ldr	r1, [r7, #28]
 80059dc:	4401      	add	r1, r0
 80059de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059e2:	4313      	orrs	r3, r2
 80059e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fc:	69b9      	ldr	r1, [r7, #24]
 80059fe:	0148      	lsls	r0, r1, #5
 8005a00:	69f9      	ldr	r1, [r7, #28]
 8005a02:	4401      	add	r1, r0
 8005a04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d10d      	bne.n	8005a2e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6919      	ldr	r1, [r3, #16]
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	460a      	mov	r2, r1
 8005a2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	791b      	ldrb	r3, [r3, #4]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d128      	bne.n	8005a88 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d110      	bne.n	8005a68 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	e00f      	b.n	8005a88 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005aa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	1ff80000 	.word	0x1ff80000

08005ab8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	f040 80ce 	bne.w	8005c76 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d132      	bne.n	8005b48 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	0151      	lsls	r1, r2, #5
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	440a      	add	r2, r1
 8005af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b40:	0cdb      	lsrs	r3, r3, #19
 8005b42:	04db      	lsls	r3, r3, #19
 8005b44:	6113      	str	r3, [r2, #16]
 8005b46:	e04e      	b.n	8005be6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b62:	0cdb      	lsrs	r3, r3, #19
 8005b64:	04db      	lsls	r3, r3, #19
 8005b66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b8a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	699a      	ldr	r2, [r3, #24]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d903      	bls.n	8005ba0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bd6:	6939      	ldr	r1, [r7, #16]
 8005bd8:	0148      	lsls	r0, r1, #5
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	4401      	add	r1, r0
 8005bde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005be2:	4313      	orrs	r3, r2
 8005be4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d11e      	bne.n	8005c2a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	461a      	mov	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	e097      	b.n	8005d5a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c48:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8083 	beq.w	8005d5a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	2101      	movs	r1, #1
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	6979      	ldr	r1, [r7, #20]
 8005c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c70:	4313      	orrs	r3, r2
 8005c72:	634b      	str	r3, [r1, #52]	; 0x34
 8005c74:	e071      	b.n	8005d5a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c90:	0cdb      	lsrs	r3, r3, #19
 8005c92:	04db      	lsls	r3, r3, #19
 8005c94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d08:	6939      	ldr	r1, [r7, #16]
 8005d0a:	0148      	lsls	r0, r1, #5
 8005d0c:	6979      	ldr	r1, [r7, #20]
 8005d0e:	4401      	add	r1, r0
 8005d10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d14:	4313      	orrs	r3, r2
 8005d16:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d10d      	bne.n	8005d3a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6919      	ldr	r1, [r3, #16]
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d36:	460a      	mov	r2, r1
 8005d38:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d14a      	bne.n	8005e1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d9e:	f040 8086 	bne.w	8005eae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	7812      	ldrb	r2, [r2, #0]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	7812      	ldrb	r2, [r2, #0]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005de8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3301      	adds	r3, #1
 8005dee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d902      	bls.n	8005e00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8005dfe:	e056      	b.n	8005eae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e18:	d0e7      	beq.n	8005dea <USB_EPStopXfer+0x82>
 8005e1a:	e048      	b.n	8005eae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e34:	d13b      	bne.n	8005eae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	7812      	ldrb	r2, [r2, #0]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d902      	bls.n	8005e94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	75fb      	strb	r3, [r7, #23]
          break;
 8005e92:	e00c      	b.n	8005eae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eac:	d0e7      	beq.n	8005e7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b089      	sub	sp, #36	; 0x24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	460b      	mov	r3, r1
 8005ecc:	71fb      	strb	r3, [r7, #7]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005eda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d123      	bne.n	8005f2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ee2:	88bb      	ldrh	r3, [r7, #4]
 8005ee4:	3303      	adds	r3, #3
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005eea:	2300      	movs	r3, #0
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	e018      	b.n	8005f22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	031a      	lsls	r2, r3, #12
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005efc:	461a      	mov	r2, r3
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	3301      	adds	r3, #1
 8005f08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	3301      	adds	r3, #1
 8005f14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	61bb      	str	r3, [r7, #24]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d3e2      	bcc.n	8005ef0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3724      	adds	r7, #36	; 0x24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b08b      	sub	sp, #44	; 0x2c
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f4e:	88fb      	ldrh	r3, [r7, #6]
 8005f50:	089b      	lsrs	r3, r3, #2
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	f003 0303 	and.w	r3, r3, #3
 8005f5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f5e:	2300      	movs	r3, #0
 8005f60:	623b      	str	r3, [r7, #32]
 8005f62:	e014      	b.n	8005f8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	3301      	adds	r3, #1
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	3301      	adds	r3, #1
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	3301      	adds	r3, #1
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	3301      	adds	r3, #1
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	623b      	str	r3, [r7, #32]
 8005f8e:	6a3a      	ldr	r2, [r7, #32]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d3e6      	bcc.n	8005f64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f96:	8bfb      	ldrh	r3, [r7, #30]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01e      	beq.n	8005fda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f107 0310 	add.w	r3, r7, #16
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	701a      	strb	r2, [r3, #0]
      i++;
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	3301      	adds	r3, #1
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005fce:	8bfb      	ldrh	r3, [r7, #30]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005fd4:	8bfb      	ldrh	r3, [r7, #30]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1ea      	bne.n	8005fb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	372c      	adds	r7, #44	; 0x2c
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d12c      	bne.n	800605e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	db12      	blt.n	800603c <USB_EPSetStall+0x54>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00f      	beq.n	800603c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	440a      	add	r2, r1
 8006032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006036:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800603a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	440a      	add	r2, r1
 8006052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	e02b      	b.n	80060b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	db12      	blt.n	8006096 <USB_EPSetStall+0xae>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00f      	beq.n	8006096 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006090:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006094:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d128      	bne.n	8006132 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	791b      	ldrb	r3, [r3, #4]
 8006104:	2b03      	cmp	r3, #3
 8006106:	d003      	beq.n	8006110 <USB_EPClearStall+0x4c>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	791b      	ldrb	r3, [r3, #4]
 800610c:	2b02      	cmp	r3, #2
 800610e:	d138      	bne.n	8006182 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	0151      	lsls	r1, r2, #5
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	440a      	add	r2, r1
 8006126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	e027      	b.n	8006182 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006150:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	791b      	ldrb	r3, [r3, #4]
 8006156:	2b03      	cmp	r3, #3
 8006158:	d003      	beq.n	8006162 <USB_EPClearStall+0x9e>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	791b      	ldrb	r3, [r3, #4]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d10f      	bne.n	8006182 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800617c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006180:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80061c4:	68f9      	ldr	r1, [r7, #12]
 80061c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ca:	4313      	orrs	r3, r2
 80061cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061f6:	f023 0303 	bic.w	r3, r3, #3
 80061fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800620a:	f023 0302 	bic.w	r3, r3, #2
 800620e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800621e:	b480      	push	{r7}
 8006220:	b085      	sub	sp, #20
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006238:	f023 0303 	bic.w	r3, r3, #3
 800623c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800624c:	f043 0302 	orr.w	r3, r3, #2
 8006250:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4013      	ands	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006278:	68fb      	ldr	r3, [r7, #12]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	4013      	ands	r3, r2
 80062a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	0c1b      	lsrs	r3, r3, #16
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b085      	sub	sp, #20
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	4013      	ands	r3, r2
 80062dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	b29b      	uxth	r3, r3
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	4013      	ands	r3, r2
 800631a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800631c:	68bb      	ldr	r3, [r7, #8]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800632a:	b480      	push	{r7}
 800632c:	b087      	sub	sp, #28
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	fa22 f303 	lsr.w	r3, r2, r3
 800635a:	01db      	lsls	r3, r3, #7
 800635c:	b2db      	uxtb	r3, r3
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4013      	ands	r3, r2
 8006376:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006378:	68bb      	ldr	r3, [r7, #8]
}
 800637a:	4618      	mov	r0, r3
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	f003 0301 	and.w	r3, r3, #1
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063c0:	f023 0307 	bic.w	r3, r3, #7
 80063c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	460b      	mov	r3, r1
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	333c      	adds	r3, #60	; 0x3c
 80063fe:	3304      	adds	r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4a26      	ldr	r2, [pc, #152]	; (80064a0 <USB_EP0_OutStart+0xb8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d90a      	bls.n	8006422 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800641c:	d101      	bne.n	8006422 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e037      	b.n	8006492 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006428:	461a      	mov	r2, r3
 800642a:	2300      	movs	r3, #0
 800642c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800643c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006450:	f043 0318 	orr.w	r3, r3, #24
 8006454:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006464:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006468:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800646a:	7afb      	ldrb	r3, [r7, #11]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10f      	bne.n	8006490 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	461a      	mov	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800648e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	4f54300a 	.word	0x4f54300a

080064a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a13      	ldr	r2, [pc, #76]	; (8006508 <USB_CoreReset+0x64>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d901      	bls.n	80064c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e01b      	b.n	80064fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	daf2      	bge.n	80064b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f043 0201 	orr.w	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4a09      	ldr	r2, [pc, #36]	; (8006508 <USB_CoreReset+0x64>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d901      	bls.n	80064ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e006      	b.n	80064fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d0f0      	beq.n	80064da <USB_CoreReset+0x36>

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	00030d40 	.word	0x00030d40

0800650c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006518:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800651c:	f002 fc98 	bl	8008e50 <USBD_static_malloc>
 8006520:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d109      	bne.n	800653c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	32b0      	adds	r2, #176	; 0xb0
 8006532:	2100      	movs	r1, #0
 8006534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006538:	2302      	movs	r3, #2
 800653a:	e0d4      	b.n	80066e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800653c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006540:	2100      	movs	r1, #0
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f002 fd4a 	bl	8008fdc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	32b0      	adds	r2, #176	; 0xb0
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	32b0      	adds	r2, #176	; 0xb0
 8006562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	7c1b      	ldrb	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d138      	bne.n	80065e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006574:	4b5e      	ldr	r3, [pc, #376]	; (80066f0 <USBD_CDC_Init+0x1e4>)
 8006576:	7819      	ldrb	r1, [r3, #0]
 8006578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800657c:	2202      	movs	r2, #2
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f002 fb43 	bl	8008c0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006584:	4b5a      	ldr	r3, [pc, #360]	; (80066f0 <USBD_CDC_Init+0x1e4>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	f003 020f 	and.w	r2, r3, #15
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	4613      	mov	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	3324      	adds	r3, #36	; 0x24
 800659a:	2201      	movs	r2, #1
 800659c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800659e:	4b55      	ldr	r3, [pc, #340]	; (80066f4 <USBD_CDC_Init+0x1e8>)
 80065a0:	7819      	ldrb	r1, [r3, #0]
 80065a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a6:	2202      	movs	r2, #2
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f002 fb2e 	bl	8008c0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065ae:	4b51      	ldr	r3, [pc, #324]	; (80066f4 <USBD_CDC_Init+0x1e8>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	f003 020f 	and.w	r2, r3, #15
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065c6:	2201      	movs	r2, #1
 80065c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80065ca:	4b4b      	ldr	r3, [pc, #300]	; (80066f8 <USBD_CDC_Init+0x1ec>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f003 020f 	and.w	r2, r3, #15
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	4613      	mov	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	3326      	adds	r3, #38	; 0x26
 80065e0:	2210      	movs	r2, #16
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	e035      	b.n	8006652 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065e6:	4b42      	ldr	r3, [pc, #264]	; (80066f0 <USBD_CDC_Init+0x1e4>)
 80065e8:	7819      	ldrb	r1, [r3, #0]
 80065ea:	2340      	movs	r3, #64	; 0x40
 80065ec:	2202      	movs	r2, #2
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f002 fb0b 	bl	8008c0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065f4:	4b3e      	ldr	r3, [pc, #248]	; (80066f0 <USBD_CDC_Init+0x1e4>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f003 020f 	and.w	r2, r3, #15
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	3324      	adds	r3, #36	; 0x24
 800660a:	2201      	movs	r2, #1
 800660c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800660e:	4b39      	ldr	r3, [pc, #228]	; (80066f4 <USBD_CDC_Init+0x1e8>)
 8006610:	7819      	ldrb	r1, [r3, #0]
 8006612:	2340      	movs	r3, #64	; 0x40
 8006614:	2202      	movs	r2, #2
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f002 faf7 	bl	8008c0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800661c:	4b35      	ldr	r3, [pc, #212]	; (80066f4 <USBD_CDC_Init+0x1e8>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006634:	2201      	movs	r2, #1
 8006636:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006638:	4b2f      	ldr	r3, [pc, #188]	; (80066f8 <USBD_CDC_Init+0x1ec>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	f003 020f 	and.w	r2, r3, #15
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	3326      	adds	r3, #38	; 0x26
 800664e:	2210      	movs	r2, #16
 8006650:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006652:	4b29      	ldr	r3, [pc, #164]	; (80066f8 <USBD_CDC_Init+0x1ec>)
 8006654:	7819      	ldrb	r1, [r3, #0]
 8006656:	2308      	movs	r3, #8
 8006658:	2203      	movs	r2, #3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f002 fad5 	bl	8008c0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006660:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <USBD_CDC_Init+0x1ec>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f003 020f 	and.w	r2, r3, #15
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	3324      	adds	r3, #36	; 0x24
 8006676:	2201      	movs	r2, #1
 8006678:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	33b0      	adds	r3, #176	; 0xb0
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80066b0:	2302      	movs	r3, #2
 80066b2:	e018      	b.n	80066e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	7c1b      	ldrb	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066bc:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <USBD_CDC_Init+0x1e8>)
 80066be:	7819      	ldrb	r1, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f002 fb8c 	bl	8008de8 <USBD_LL_PrepareReceive>
 80066d0:	e008      	b.n	80066e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <USBD_CDC_Init+0x1e8>)
 80066d4:	7819      	ldrb	r1, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066dc:	2340      	movs	r3, #64	; 0x40
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f002 fb82 	bl	8008de8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000093 	.word	0x20000093
 80066f4:	20000094 	.word	0x20000094
 80066f8:	20000095 	.word	0x20000095

080066fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006708:	4b3a      	ldr	r3, [pc, #232]	; (80067f4 <USBD_CDC_DeInit+0xf8>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f002 faa1 	bl	8008c56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006714:	4b37      	ldr	r3, [pc, #220]	; (80067f4 <USBD_CDC_DeInit+0xf8>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	f003 020f 	and.w	r2, r3, #15
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	3324      	adds	r3, #36	; 0x24
 800672a:	2200      	movs	r2, #0
 800672c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800672e:	4b32      	ldr	r3, [pc, #200]	; (80067f8 <USBD_CDC_DeInit+0xfc>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f002 fa8e 	bl	8008c56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800673a:	4b2f      	ldr	r3, [pc, #188]	; (80067f8 <USBD_CDC_DeInit+0xfc>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	f003 020f 	and.w	r2, r3, #15
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006752:	2200      	movs	r2, #0
 8006754:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006756:	4b29      	ldr	r3, [pc, #164]	; (80067fc <USBD_CDC_DeInit+0x100>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f002 fa7a 	bl	8008c56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006762:	4b26      	ldr	r3, [pc, #152]	; (80067fc <USBD_CDC_DeInit+0x100>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	f003 020f 	and.w	r2, r3, #15
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	3324      	adds	r3, #36	; 0x24
 8006778:	2200      	movs	r2, #0
 800677a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800677c:	4b1f      	ldr	r3, [pc, #124]	; (80067fc <USBD_CDC_DeInit+0x100>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	f003 020f 	and.w	r2, r3, #15
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	3326      	adds	r3, #38	; 0x26
 8006792:	2200      	movs	r2, #0
 8006794:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	32b0      	adds	r2, #176	; 0xb0
 80067a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d01f      	beq.n	80067e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	33b0      	adds	r3, #176	; 0xb0
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	32b0      	adds	r2, #176	; 0xb0
 80067c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f002 fb4e 	bl	8008e6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	32b0      	adds	r2, #176	; 0xb0
 80067da:	2100      	movs	r1, #0
 80067dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000093 	.word	0x20000093
 80067f8:	20000094 	.word	0x20000094
 80067fc:	20000095 	.word	0x20000095

08006800 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	32b0      	adds	r2, #176	; 0xb0
 8006814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006818:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800682c:	2303      	movs	r3, #3
 800682e:	e0bf      	b.n	80069b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006838:	2b00      	cmp	r3, #0
 800683a:	d050      	beq.n	80068de <USBD_CDC_Setup+0xde>
 800683c:	2b20      	cmp	r3, #32
 800683e:	f040 80af 	bne.w	80069a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	88db      	ldrh	r3, [r3, #6]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d03a      	beq.n	80068c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	b25b      	sxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	da1b      	bge.n	800688c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	33b0      	adds	r3, #176	; 0xb0
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800686a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	88d2      	ldrh	r2, [r2, #6]
 8006870:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	88db      	ldrh	r3, [r3, #6]
 8006876:	2b07      	cmp	r3, #7
 8006878:	bf28      	it	cs
 800687a:	2307      	movcs	r3, #7
 800687c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	89fa      	ldrh	r2, [r7, #14]
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fd89 	bl	800839c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800688a:	e090      	b.n	80069ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	785a      	ldrb	r2, [r3, #1]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	88db      	ldrh	r3, [r3, #6]
 800689a:	2b3f      	cmp	r3, #63	; 0x3f
 800689c:	d803      	bhi.n	80068a6 <USBD_CDC_Setup+0xa6>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	88db      	ldrh	r3, [r3, #6]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	e000      	b.n	80068a8 <USBD_CDC_Setup+0xa8>
 80068a6:	2240      	movs	r2, #64	; 0x40
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80068ae:	6939      	ldr	r1, [r7, #16]
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80068b6:	461a      	mov	r2, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 fd9b 	bl	80083f4 <USBD_CtlPrepareRx>
      break;
 80068be:	e076      	b.n	80069ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	33b0      	adds	r3, #176	; 0xb0
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	7850      	ldrb	r0, [r2, #1]
 80068d6:	2200      	movs	r2, #0
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	4798      	blx	r3
      break;
 80068dc:	e067      	b.n	80069ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	2b0b      	cmp	r3, #11
 80068e4:	d851      	bhi.n	800698a <USBD_CDC_Setup+0x18a>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <USBD_CDC_Setup+0xec>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	0800691d 	.word	0x0800691d
 80068f0:	08006999 	.word	0x08006999
 80068f4:	0800698b 	.word	0x0800698b
 80068f8:	0800698b 	.word	0x0800698b
 80068fc:	0800698b 	.word	0x0800698b
 8006900:	0800698b 	.word	0x0800698b
 8006904:	0800698b 	.word	0x0800698b
 8006908:	0800698b 	.word	0x0800698b
 800690c:	0800698b 	.word	0x0800698b
 8006910:	0800698b 	.word	0x0800698b
 8006914:	08006947 	.word	0x08006947
 8006918:	08006971 	.word	0x08006971
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b03      	cmp	r3, #3
 8006926:	d107      	bne.n	8006938 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006928:	f107 030a 	add.w	r3, r7, #10
 800692c:	2202      	movs	r2, #2
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 fd33 	bl	800839c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006936:	e032      	b.n	800699e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 fcbd 	bl	80082ba <USBD_CtlError>
            ret = USBD_FAIL;
 8006940:	2303      	movs	r3, #3
 8006942:	75fb      	strb	r3, [r7, #23]
          break;
 8006944:	e02b      	b.n	800699e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b03      	cmp	r3, #3
 8006950:	d107      	bne.n	8006962 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006952:	f107 030d 	add.w	r3, r7, #13
 8006956:	2201      	movs	r2, #1
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f001 fd1e 	bl	800839c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006960:	e01d      	b.n	800699e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 fca8 	bl	80082ba <USBD_CtlError>
            ret = USBD_FAIL;
 800696a:	2303      	movs	r3, #3
 800696c:	75fb      	strb	r3, [r7, #23]
          break;
 800696e:	e016      	b.n	800699e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b03      	cmp	r3, #3
 800697a:	d00f      	beq.n	800699c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fc9b 	bl	80082ba <USBD_CtlError>
            ret = USBD_FAIL;
 8006984:	2303      	movs	r3, #3
 8006986:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006988:	e008      	b.n	800699c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fc94 	bl	80082ba <USBD_CtlError>
          ret = USBD_FAIL;
 8006992:	2303      	movs	r3, #3
 8006994:	75fb      	strb	r3, [r7, #23]
          break;
 8006996:	e002      	b.n	800699e <USBD_CDC_Setup+0x19e>
          break;
 8006998:	bf00      	nop
 800699a:	e008      	b.n	80069ae <USBD_CDC_Setup+0x1ae>
          break;
 800699c:	bf00      	nop
      }
      break;
 800699e:	e006      	b.n	80069ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f001 fc89 	bl	80082ba <USBD_CtlError>
      ret = USBD_FAIL;
 80069a8:	2303      	movs	r3, #3
 80069aa:	75fb      	strb	r3, [r7, #23]
      break;
 80069ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80069ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	32b0      	adds	r2, #176	; 0xb0
 80069d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80069de:	2303      	movs	r3, #3
 80069e0:	e065      	b.n	8006aae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	32b0      	adds	r2, #176	; 0xb0
 80069ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	f003 020f 	and.w	r2, r3, #15
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	3318      	adds	r3, #24
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d02f      	beq.n	8006a6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	f003 020f 	and.w	r2, r3, #15
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	3318      	adds	r3, #24
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	f003 010f 	and.w	r1, r3, #15
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	440b      	add	r3, r1
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4403      	add	r3, r0
 8006a34:	3348      	adds	r3, #72	; 0x48
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a3c:	fb01 f303 	mul.w	r3, r1, r3
 8006a40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d112      	bne.n	8006a6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	3318      	adds	r3, #24
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a5e:	78f9      	ldrb	r1, [r7, #3]
 8006a60:	2300      	movs	r3, #0
 8006a62:	2200      	movs	r2, #0
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f002 f99e 	bl	8008da6 <USBD_LL_Transmit>
 8006a6a:	e01f      	b.n	8006aac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	33b0      	adds	r3, #176	; 0xb0
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d010      	beq.n	8006aac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	33b0      	adds	r3, #176	; 0xb0
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006aa8:	78fa      	ldrb	r2, [r7, #3]
 8006aaa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	32b0      	adds	r2, #176	; 0xb0
 8006acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	32b0      	adds	r2, #176	; 0xb0
 8006adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e01a      	b.n	8006b1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f002 f99c 	bl	8008e2a <USBD_LL_GetRxDataSize>
 8006af2:	4602      	mov	r2, r0
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	33b0      	adds	r3, #176	; 0xb0
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	32b0      	adds	r2, #176	; 0xb0
 8006b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e025      	b.n	8006b94 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	33b0      	adds	r3, #176	; 0xb0
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01a      	beq.n	8006b92 <USBD_CDC_EP0_RxReady+0x6c>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b62:	2bff      	cmp	r3, #255	; 0xff
 8006b64:	d015      	beq.n	8006b92 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	33b0      	adds	r3, #176	; 0xb0
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b86:	b292      	uxth	r2, r2
 8006b88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	22ff      	movs	r2, #255	; 0xff
 8006b8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ba4:	2182      	movs	r1, #130	; 0x82
 8006ba6:	4818      	ldr	r0, [pc, #96]	; (8006c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ba8:	f000 fd4f 	bl	800764a <USBD_GetEpDesc>
 8006bac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bae:	2101      	movs	r1, #1
 8006bb0:	4815      	ldr	r0, [pc, #84]	; (8006c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bb2:	f000 fd4a 	bl	800764a <USBD_GetEpDesc>
 8006bb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bb8:	2181      	movs	r1, #129	; 0x81
 8006bba:	4813      	ldr	r0, [pc, #76]	; (8006c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bbc:	f000 fd45 	bl	800764a <USBD_GetEpDesc>
 8006bc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2210      	movs	r2, #16
 8006bcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d006      	beq.n	8006be2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bdc:	711a      	strb	r2, [r3, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d006      	beq.n	8006bf6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf0:	711a      	strb	r2, [r3, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2243      	movs	r2, #67	; 0x43
 8006bfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bfc:	4b02      	ldr	r3, [pc, #8]	; (8006c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000050 	.word	0x20000050

08006c0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c14:	2182      	movs	r1, #130	; 0x82
 8006c16:	4818      	ldr	r0, [pc, #96]	; (8006c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c18:	f000 fd17 	bl	800764a <USBD_GetEpDesc>
 8006c1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c1e:	2101      	movs	r1, #1
 8006c20:	4815      	ldr	r0, [pc, #84]	; (8006c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c22:	f000 fd12 	bl	800764a <USBD_GetEpDesc>
 8006c26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c28:	2181      	movs	r1, #129	; 0x81
 8006c2a:	4813      	ldr	r0, [pc, #76]	; (8006c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c2c:	f000 fd0d 	bl	800764a <USBD_GetEpDesc>
 8006c30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2210      	movs	r2, #16
 8006c3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d006      	beq.n	8006c52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2200      	movs	r2, #0
 8006c48:	711a      	strb	r2, [r3, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f042 0202 	orr.w	r2, r2, #2
 8006c50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d006      	beq.n	8006c66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	711a      	strb	r2, [r3, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f042 0202 	orr.w	r2, r2, #2
 8006c64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2243      	movs	r2, #67	; 0x43
 8006c6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c6c:	4b02      	ldr	r3, [pc, #8]	; (8006c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000050 	.word	0x20000050

08006c7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c84:	2182      	movs	r1, #130	; 0x82
 8006c86:	4818      	ldr	r0, [pc, #96]	; (8006ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c88:	f000 fcdf 	bl	800764a <USBD_GetEpDesc>
 8006c8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c8e:	2101      	movs	r1, #1
 8006c90:	4815      	ldr	r0, [pc, #84]	; (8006ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c92:	f000 fcda 	bl	800764a <USBD_GetEpDesc>
 8006c96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c98:	2181      	movs	r1, #129	; 0x81
 8006c9a:	4813      	ldr	r0, [pc, #76]	; (8006ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c9c:	f000 fcd5 	bl	800764a <USBD_GetEpDesc>
 8006ca0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2210      	movs	r2, #16
 8006cac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d006      	beq.n	8006cc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cbc:	711a      	strb	r2, [r3, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d006      	beq.n	8006cd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cd0:	711a      	strb	r2, [r3, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2243      	movs	r2, #67	; 0x43
 8006cda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cdc:	4b02      	ldr	r3, [pc, #8]	; (8006ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000050 	.word	0x20000050

08006cec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	220a      	movs	r2, #10
 8006cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006cfa:	4b03      	ldr	r3, [pc, #12]	; (8006d08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	2000000c 	.word	0x2000000c

08006d0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e009      	b.n	8006d34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	33b0      	adds	r3, #176	; 0xb0
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	32b0      	adds	r2, #176	; 0xb0
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e008      	b.n	8006d78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	32b0      	adds	r2, #176	; 0xb0
 8006d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e004      	b.n	8006db2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
	...

08006dc0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	32b0      	adds	r2, #176	; 0xb0
 8006dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	32b0      	adds	r2, #176	; 0xb0
 8006de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e025      	b.n	8006e3e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11f      	bne.n	8006e3c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e04:	4b10      	ldr	r3, [pc, #64]	; (8006e48 <USBD_CDC_TransmitPacket+0x88>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	f003 020f 	and.w	r2, r3, #15
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4403      	add	r3, r0
 8006e1e:	3318      	adds	r3, #24
 8006e20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <USBD_CDC_TransmitPacket+0x88>)
 8006e24:	7819      	ldrb	r1, [r3, #0]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 ffb7 	bl	8008da6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000093 	.word	0x20000093

08006e4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	32b0      	adds	r2, #176	; 0xb0
 8006e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	32b0      	adds	r2, #176	; 0xb0
 8006e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e018      	b.n	8006eac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	7c1b      	ldrb	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10a      	bne.n	8006e98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e82:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <USBD_CDC_ReceivePacket+0x68>)
 8006e84:	7819      	ldrb	r1, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 ffa9 	bl	8008de8 <USBD_LL_PrepareReceive>
 8006e96:	e008      	b.n	8006eaa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e98:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <USBD_CDC_ReceivePacket+0x68>)
 8006e9a:	7819      	ldrb	r1, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ea2:	2340      	movs	r3, #64	; 0x40
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 ff9f 	bl	8008de8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000094 	.word	0x20000094

08006eb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e01f      	b.n	8006f10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	79fa      	ldrb	r2, [r7, #7]
 8006f02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f001 fe19 	bl	8008b3c <USBD_LL_Init>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e025      	b.n	8006f7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	32ae      	adds	r2, #174	; 0xae
 8006f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00f      	beq.n	8006f6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	32ae      	adds	r2, #174	; 0xae
 8006f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	f107 020e 	add.w	r2, r7, #14
 8006f60:	4610      	mov	r0, r2
 8006f62:	4798      	blx	r3
 8006f64:	4602      	mov	r2, r0
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 fe21 	bl	8008bd4 <USBD_LL_Start>
 8006f92:	4603      	mov	r3, r0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fa4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d009      	beq.n	8006fe0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	78fa      	ldrb	r2, [r7, #3]
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	78fa      	ldrb	r2, [r7, #3]
 8007004:	4611      	mov	r1, r2
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	4798      	blx	r3
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007010:	2303      	movs	r3, #3
 8007012:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	4618      	mov	r0, r3
 8007032:	f001 f908 	bl	8008246 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007044:	461a      	mov	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007052:	f003 031f 	and.w	r3, r3, #31
 8007056:	2b02      	cmp	r3, #2
 8007058:	d01a      	beq.n	8007090 <USBD_LL_SetupStage+0x72>
 800705a:	2b02      	cmp	r3, #2
 800705c:	d822      	bhi.n	80070a4 <USBD_LL_SetupStage+0x86>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <USBD_LL_SetupStage+0x4a>
 8007062:	2b01      	cmp	r3, #1
 8007064:	d00a      	beq.n	800707c <USBD_LL_SetupStage+0x5e>
 8007066:	e01d      	b.n	80070a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fb5f 	bl	8007734 <USBD_StdDevReq>
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
      break;
 800707a:	e020      	b.n	80070be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fbc7 	bl	8007818 <USBD_StdItfReq>
 800708a:	4603      	mov	r3, r0
 800708c:	73fb      	strb	r3, [r7, #15]
      break;
 800708e:	e016      	b.n	80070be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fc29 	bl	80078f0 <USBD_StdEPReq>
 800709e:	4603      	mov	r3, r0
 80070a0:	73fb      	strb	r3, [r7, #15]
      break;
 80070a2:	e00c      	b.n	80070be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 fdee 	bl	8008c94 <USBD_LL_StallEP>
 80070b8:	4603      	mov	r3, r0
 80070ba:	73fb      	strb	r3, [r7, #15]
      break;
 80070bc:	bf00      	nop
  }

  return ret;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	460b      	mov	r3, r1
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80070da:	7afb      	ldrb	r3, [r7, #11]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d16e      	bne.n	80071be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	f040 8098 	bne.w	8007224 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d913      	bls.n	8007128 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	1ad2      	subs	r2, r2, r3
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	4293      	cmp	r3, r2
 8007118:	bf28      	it	cs
 800711a:	4613      	movcs	r3, r2
 800711c:	461a      	mov	r2, r3
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f001 f984 	bl	800842e <USBD_CtlContinueRx>
 8007126:	e07d      	b.n	8007224 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2b02      	cmp	r3, #2
 8007134:	d014      	beq.n	8007160 <USBD_LL_DataOutStage+0x98>
 8007136:	2b02      	cmp	r3, #2
 8007138:	d81d      	bhi.n	8007176 <USBD_LL_DataOutStage+0xae>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <USBD_LL_DataOutStage+0x7c>
 800713e:	2b01      	cmp	r3, #1
 8007140:	d003      	beq.n	800714a <USBD_LL_DataOutStage+0x82>
 8007142:	e018      	b.n	8007176 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	75bb      	strb	r3, [r7, #22]
            break;
 8007148:	e018      	b.n	800717c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007150:	b2db      	uxtb	r3, r3
 8007152:	4619      	mov	r1, r3
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fa5e 	bl	8007616 <USBD_CoreFindIF>
 800715a:	4603      	mov	r3, r0
 800715c:	75bb      	strb	r3, [r7, #22]
            break;
 800715e:	e00d      	b.n	800717c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007166:	b2db      	uxtb	r3, r3
 8007168:	4619      	mov	r1, r3
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fa60 	bl	8007630 <USBD_CoreFindEP>
 8007170:	4603      	mov	r3, r0
 8007172:	75bb      	strb	r3, [r7, #22]
            break;
 8007174:	e002      	b.n	800717c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	75bb      	strb	r3, [r7, #22]
            break;
 800717a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800717c:	7dbb      	ldrb	r3, [r7, #22]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d119      	bne.n	80071b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b03      	cmp	r3, #3
 800718c:	d113      	bne.n	80071b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800718e:	7dba      	ldrb	r2, [r7, #22]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	32ae      	adds	r2, #174	; 0xae
 8007194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800719e:	7dba      	ldrb	r2, [r7, #22]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80071a6:	7dba      	ldrb	r2, [r7, #22]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	32ae      	adds	r2, #174	; 0xae
 80071ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f001 f94a 	bl	8008450 <USBD_CtlSendStatus>
 80071bc:	e032      	b.n	8007224 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80071be:	7afb      	ldrb	r3, [r7, #11]
 80071c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	4619      	mov	r1, r3
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 fa31 	bl	8007630 <USBD_CoreFindEP>
 80071ce:	4603      	mov	r3, r0
 80071d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071d2:	7dbb      	ldrb	r3, [r7, #22]
 80071d4:	2bff      	cmp	r3, #255	; 0xff
 80071d6:	d025      	beq.n	8007224 <USBD_LL_DataOutStage+0x15c>
 80071d8:	7dbb      	ldrb	r3, [r7, #22]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d122      	bne.n	8007224 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d117      	bne.n	800721a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80071ea:	7dba      	ldrb	r2, [r7, #22]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	32ae      	adds	r2, #174	; 0xae
 80071f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00f      	beq.n	800721a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80071fa:	7dba      	ldrb	r2, [r7, #22]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007202:	7dba      	ldrb	r2, [r7, #22]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	32ae      	adds	r2, #174	; 0xae
 8007208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	7afa      	ldrb	r2, [r7, #11]
 8007210:	4611      	mov	r1, r2
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	4798      	blx	r3
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	e000      	b.n	8007226 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b086      	sub	sp, #24
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	460b      	mov	r3, r1
 8007238:	607a      	str	r2, [r7, #4]
 800723a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800723c:	7afb      	ldrb	r3, [r7, #11]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d16f      	bne.n	8007322 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3314      	adds	r3, #20
 8007246:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800724e:	2b02      	cmp	r3, #2
 8007250:	d15a      	bne.n	8007308 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	429a      	cmp	r2, r3
 800725c:	d914      	bls.n	8007288 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	689a      	ldr	r2, [r3, #8]
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	1ad2      	subs	r2, r2, r3
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	461a      	mov	r2, r3
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f001 f8ac 	bl	80083d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800727a:	2300      	movs	r3, #0
 800727c:	2200      	movs	r2, #0
 800727e:	2100      	movs	r1, #0
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f001 fdb1 	bl	8008de8 <USBD_LL_PrepareReceive>
 8007286:	e03f      	b.n	8007308 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	429a      	cmp	r2, r3
 8007292:	d11c      	bne.n	80072ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800729c:	429a      	cmp	r2, r3
 800729e:	d316      	bcc.n	80072ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d20f      	bcs.n	80072ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072ae:	2200      	movs	r2, #0
 80072b0:	2100      	movs	r1, #0
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f001 f88d 	bl	80083d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072c0:	2300      	movs	r3, #0
 80072c2:	2200      	movs	r2, #0
 80072c4:	2100      	movs	r1, #0
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f001 fd8e 	bl	8008de8 <USBD_LL_PrepareReceive>
 80072cc:	e01c      	b.n	8007308 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d10f      	bne.n	80072fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d009      	beq.n	80072fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80072fa:	2180      	movs	r1, #128	; 0x80
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f001 fcc9 	bl	8008c94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 f8b7 	bl	8008476 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d03a      	beq.n	8007388 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7ff fe42 	bl	8006f9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007320:	e032      	b.n	8007388 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007322:	7afb      	ldrb	r3, [r7, #11]
 8007324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007328:	b2db      	uxtb	r3, r3
 800732a:	4619      	mov	r1, r3
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f97f 	bl	8007630 <USBD_CoreFindEP>
 8007332:	4603      	mov	r3, r0
 8007334:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007336:	7dfb      	ldrb	r3, [r7, #23]
 8007338:	2bff      	cmp	r3, #255	; 0xff
 800733a:	d025      	beq.n	8007388 <USBD_LL_DataInStage+0x15a>
 800733c:	7dfb      	ldrb	r3, [r7, #23]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d122      	bne.n	8007388 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b03      	cmp	r3, #3
 800734c:	d11c      	bne.n	8007388 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800734e:	7dfa      	ldrb	r2, [r7, #23]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	32ae      	adds	r2, #174	; 0xae
 8007354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d014      	beq.n	8007388 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800735e:	7dfa      	ldrb	r2, [r7, #23]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007366:	7dfa      	ldrb	r2, [r7, #23]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	32ae      	adds	r2, #174	; 0xae
 800736c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	7afa      	ldrb	r2, [r7, #11]
 8007374:	4611      	mov	r1, r2
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	4798      	blx	r3
 800737a:	4603      	mov	r3, r0
 800737c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800737e:	7dbb      	ldrb	r3, [r7, #22]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007384:	7dbb      	ldrb	r3, [r7, #22]
 8007386:	e000      	b.n	800738a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d014      	beq.n	80073f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00e      	beq.n	80073f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6852      	ldr	r2, [r2, #4]
 80073e6:	b2d2      	uxtb	r2, r2
 80073e8:	4611      	mov	r1, r2
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	4798      	blx	r3
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80073f4:	2303      	movs	r3, #3
 80073f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073f8:	2340      	movs	r3, #64	; 0x40
 80073fa:	2200      	movs	r2, #0
 80073fc:	2100      	movs	r1, #0
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 fc03 	bl	8008c0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2240      	movs	r2, #64	; 0x40
 8007410:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007414:	2340      	movs	r3, #64	; 0x40
 8007416:	2200      	movs	r2, #0
 8007418:	2180      	movs	r1, #128	; 0x80
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 fbf5 	bl	8008c0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2240      	movs	r2, #64	; 0x40
 800742a:	621a      	str	r2, [r3, #32]

  return ret;
 800742c:	7bfb      	ldrb	r3, [r7, #15]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	460b      	mov	r3, r1
 8007440:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007464:	b2da      	uxtb	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2204      	movs	r2, #4
 8007470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b04      	cmp	r3, #4
 8007494:	d106      	bne.n	80074a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800749c:	b2da      	uxtb	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d110      	bne.n	80074e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00b      	beq.n	80074e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	32ae      	adds	r2, #174	; 0xae
 8007508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007510:	2303      	movs	r3, #3
 8007512:	e01c      	b.n	800754e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b03      	cmp	r3, #3
 800751e:	d115      	bne.n	800754c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	32ae      	adds	r2, #174	; 0xae
 800752a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	32ae      	adds	r2, #174	; 0xae
 800753e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	4611      	mov	r1, r2
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	32ae      	adds	r2, #174	; 0xae
 800756c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007574:	2303      	movs	r3, #3
 8007576:	e01c      	b.n	80075b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b03      	cmp	r3, #3
 8007582:	d115      	bne.n	80075b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32ae      	adds	r2, #174	; 0xae
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	32ae      	adds	r2, #174	; 0xae
 80075a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	4611      	mov	r1, r2
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00e      	beq.n	800760c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	6852      	ldr	r2, [r2, #4]
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	4611      	mov	r1, r2
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	4798      	blx	r3
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	460b      	mov	r3, r1
 8007620:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007622:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800763c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800763e:	4618      	mov	r0, r3
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	885b      	ldrh	r3, [r3, #2]
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	429a      	cmp	r2, r3
 8007670:	d920      	bls.n	80076b4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	b29b      	uxth	r3, r3
 8007678:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800767a:	e013      	b.n	80076a4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800767c:	f107 030a 	add.w	r3, r7, #10
 8007680:	4619      	mov	r1, r3
 8007682:	6978      	ldr	r0, [r7, #20]
 8007684:	f000 f81b 	bl	80076be <USBD_GetNextDesc>
 8007688:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	2b05      	cmp	r3, #5
 8007690:	d108      	bne.n	80076a4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	789b      	ldrb	r3, [r3, #2]
 800769a:	78fa      	ldrb	r2, [r7, #3]
 800769c:	429a      	cmp	r2, r3
 800769e:	d008      	beq.n	80076b2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80076a0:	2300      	movs	r3, #0
 80076a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	885b      	ldrh	r3, [r3, #2]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	897b      	ldrh	r3, [r7, #10]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d8e5      	bhi.n	800767c <USBD_GetEpDesc+0x32>
 80076b0:	e000      	b.n	80076b4 <USBD_GetEpDesc+0x6a>
          break;
 80076b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80076b4:	693b      	ldr	r3, [r7, #16]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	881a      	ldrh	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	4413      	add	r3, r2
 80076d8:	b29a      	uxth	r2, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4413      	add	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076ea:	68fb      	ldr	r3, [r7, #12]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	3301      	adds	r3, #1
 800770e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007716:	8a3b      	ldrh	r3, [r7, #16]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	b21a      	sxth	r2, r3
 800771c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007720:	4313      	orrs	r3, r2
 8007722:	b21b      	sxth	r3, r3
 8007724:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007726:	89fb      	ldrh	r3, [r7, #14]
}
 8007728:	4618      	mov	r0, r3
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800774a:	2b40      	cmp	r3, #64	; 0x40
 800774c:	d005      	beq.n	800775a <USBD_StdDevReq+0x26>
 800774e:	2b40      	cmp	r3, #64	; 0x40
 8007750:	d857      	bhi.n	8007802 <USBD_StdDevReq+0xce>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00f      	beq.n	8007776 <USBD_StdDevReq+0x42>
 8007756:	2b20      	cmp	r3, #32
 8007758:	d153      	bne.n	8007802 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	32ae      	adds	r2, #174	; 0xae
 8007764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	4798      	blx	r3
 8007770:	4603      	mov	r3, r0
 8007772:	73fb      	strb	r3, [r7, #15]
      break;
 8007774:	e04a      	b.n	800780c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	2b09      	cmp	r3, #9
 800777c:	d83b      	bhi.n	80077f6 <USBD_StdDevReq+0xc2>
 800777e:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <USBD_StdDevReq+0x50>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	080077d9 	.word	0x080077d9
 8007788:	080077ed 	.word	0x080077ed
 800778c:	080077f7 	.word	0x080077f7
 8007790:	080077e3 	.word	0x080077e3
 8007794:	080077f7 	.word	0x080077f7
 8007798:	080077b7 	.word	0x080077b7
 800779c:	080077ad 	.word	0x080077ad
 80077a0:	080077f7 	.word	0x080077f7
 80077a4:	080077cf 	.word	0x080077cf
 80077a8:	080077c1 	.word	0x080077c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa3c 	bl	8007c2c <USBD_GetDescriptor>
          break;
 80077b4:	e024      	b.n	8007800 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fba1 	bl	8007f00 <USBD_SetAddress>
          break;
 80077be:	e01f      	b.n	8007800 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fbe0 	bl	8007f88 <USBD_SetConfig>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]
          break;
 80077cc:	e018      	b.n	8007800 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fc83 	bl	80080dc <USBD_GetConfig>
          break;
 80077d6:	e013      	b.n	8007800 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fcb4 	bl	8008148 <USBD_GetStatus>
          break;
 80077e0:	e00e      	b.n	8007800 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fce3 	bl	80081b0 <USBD_SetFeature>
          break;
 80077ea:	e009      	b.n	8007800 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fd07 	bl	8008202 <USBD_ClrFeature>
          break;
 80077f4:	e004      	b.n	8007800 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fd5e 	bl	80082ba <USBD_CtlError>
          break;
 80077fe:	bf00      	nop
      }
      break;
 8007800:	e004      	b.n	800780c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fd58 	bl	80082ba <USBD_CtlError>
      break;
 800780a:	bf00      	nop
  }

  return ret;
 800780c:	7bfb      	ldrb	r3, [r7, #15]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop

08007818 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d005      	beq.n	800783e <USBD_StdItfReq+0x26>
 8007832:	2b40      	cmp	r3, #64	; 0x40
 8007834:	d852      	bhi.n	80078dc <USBD_StdItfReq+0xc4>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <USBD_StdItfReq+0x26>
 800783a:	2b20      	cmp	r3, #32
 800783c:	d14e      	bne.n	80078dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007844:	b2db      	uxtb	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	2b02      	cmp	r3, #2
 800784a:	d840      	bhi.n	80078ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	889b      	ldrh	r3, [r3, #4]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b01      	cmp	r3, #1
 8007854:	d836      	bhi.n	80078c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	889b      	ldrh	r3, [r3, #4]
 800785a:	b2db      	uxtb	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff fed9 	bl	8007616 <USBD_CoreFindIF>
 8007864:	4603      	mov	r3, r0
 8007866:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	2bff      	cmp	r3, #255	; 0xff
 800786c:	d01d      	beq.n	80078aa <USBD_StdItfReq+0x92>
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d11a      	bne.n	80078aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007874:	7bba      	ldrb	r2, [r7, #14]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	32ae      	adds	r2, #174	; 0xae
 800787a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00f      	beq.n	80078a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007884:	7bba      	ldrb	r2, [r7, #14]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800788c:	7bba      	ldrb	r2, [r7, #14]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	32ae      	adds	r2, #174	; 0xae
 8007892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	4798      	blx	r3
 800789e:	4603      	mov	r3, r0
 80078a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078a2:	e004      	b.n	80078ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078a4:	2303      	movs	r3, #3
 80078a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078a8:	e001      	b.n	80078ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80078aa:	2303      	movs	r3, #3
 80078ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	88db      	ldrh	r3, [r3, #6]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d110      	bne.n	80078d8 <USBD_StdItfReq+0xc0>
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10d      	bne.n	80078d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fdc7 	bl	8008450 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078c2:	e009      	b.n	80078d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fcf7 	bl	80082ba <USBD_CtlError>
          break;
 80078cc:	e004      	b.n	80078d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fcf2 	bl	80082ba <USBD_CtlError>
          break;
 80078d6:	e000      	b.n	80078da <USBD_StdItfReq+0xc2>
          break;
 80078d8:	bf00      	nop
      }
      break;
 80078da:	e004      	b.n	80078e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fceb 	bl	80082ba <USBD_CtlError>
      break;
 80078e4:	bf00      	nop
  }

  return ret;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	889b      	ldrh	r3, [r3, #4]
 8007902:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800790c:	2b40      	cmp	r3, #64	; 0x40
 800790e:	d007      	beq.n	8007920 <USBD_StdEPReq+0x30>
 8007910:	2b40      	cmp	r3, #64	; 0x40
 8007912:	f200 817f 	bhi.w	8007c14 <USBD_StdEPReq+0x324>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d02a      	beq.n	8007970 <USBD_StdEPReq+0x80>
 800791a:	2b20      	cmp	r3, #32
 800791c:	f040 817a 	bne.w	8007c14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7ff fe83 	bl	8007630 <USBD_CoreFindEP>
 800792a:	4603      	mov	r3, r0
 800792c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800792e:	7b7b      	ldrb	r3, [r7, #13]
 8007930:	2bff      	cmp	r3, #255	; 0xff
 8007932:	f000 8174 	beq.w	8007c1e <USBD_StdEPReq+0x32e>
 8007936:	7b7b      	ldrb	r3, [r7, #13]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f040 8170 	bne.w	8007c1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800793e:	7b7a      	ldrb	r2, [r7, #13]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007946:	7b7a      	ldrb	r2, [r7, #13]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	32ae      	adds	r2, #174	; 0xae
 800794c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 8163 	beq.w	8007c1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007958:	7b7a      	ldrb	r2, [r7, #13]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	32ae      	adds	r2, #174	; 0xae
 800795e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800796e:	e156      	b.n	8007c1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	785b      	ldrb	r3, [r3, #1]
 8007974:	2b03      	cmp	r3, #3
 8007976:	d008      	beq.n	800798a <USBD_StdEPReq+0x9a>
 8007978:	2b03      	cmp	r3, #3
 800797a:	f300 8145 	bgt.w	8007c08 <USBD_StdEPReq+0x318>
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 809b 	beq.w	8007aba <USBD_StdEPReq+0x1ca>
 8007984:	2b01      	cmp	r3, #1
 8007986:	d03c      	beq.n	8007a02 <USBD_StdEPReq+0x112>
 8007988:	e13e      	b.n	8007c08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d002      	beq.n	800799c <USBD_StdEPReq+0xac>
 8007996:	2b03      	cmp	r3, #3
 8007998:	d016      	beq.n	80079c8 <USBD_StdEPReq+0xd8>
 800799a:	e02c      	b.n	80079f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00d      	beq.n	80079be <USBD_StdEPReq+0xce>
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b80      	cmp	r3, #128	; 0x80
 80079a6:	d00a      	beq.n	80079be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 f971 	bl	8008c94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079b2:	2180      	movs	r1, #128	; 0x80
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 f96d 	bl	8008c94 <USBD_LL_StallEP>
 80079ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079bc:	e020      	b.n	8007a00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fc7a 	bl	80082ba <USBD_CtlError>
              break;
 80079c6:	e01b      	b.n	8007a00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	885b      	ldrh	r3, [r3, #2]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10e      	bne.n	80079ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00b      	beq.n	80079ee <USBD_StdEPReq+0xfe>
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b80      	cmp	r3, #128	; 0x80
 80079da:	d008      	beq.n	80079ee <USBD_StdEPReq+0xfe>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	88db      	ldrh	r3, [r3, #6]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d104      	bne.n	80079ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 f953 	bl	8008c94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fd2e 	bl	8008450 <USBD_CtlSendStatus>

              break;
 80079f4:	e004      	b.n	8007a00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fc5e 	bl	80082ba <USBD_CtlError>
              break;
 80079fe:	bf00      	nop
          }
          break;
 8007a00:	e107      	b.n	8007c12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d002      	beq.n	8007a14 <USBD_StdEPReq+0x124>
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d016      	beq.n	8007a40 <USBD_StdEPReq+0x150>
 8007a12:	e04b      	b.n	8007aac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00d      	beq.n	8007a36 <USBD_StdEPReq+0x146>
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b80      	cmp	r3, #128	; 0x80
 8007a1e:	d00a      	beq.n	8007a36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 f935 	bl	8008c94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a2a:	2180      	movs	r1, #128	; 0x80
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 f931 	bl	8008c94 <USBD_LL_StallEP>
 8007a32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a34:	e040      	b.n	8007ab8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fc3e 	bl	80082ba <USBD_CtlError>
              break;
 8007a3e:	e03b      	b.n	8007ab8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	885b      	ldrh	r3, [r3, #2]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d136      	bne.n	8007ab6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 f93b 	bl	8008cd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fcf7 	bl	8008450 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fde2 	bl	8007630 <USBD_CoreFindEP>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a70:	7b7b      	ldrb	r3, [r7, #13]
 8007a72:	2bff      	cmp	r3, #255	; 0xff
 8007a74:	d01f      	beq.n	8007ab6 <USBD_StdEPReq+0x1c6>
 8007a76:	7b7b      	ldrb	r3, [r7, #13]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d11c      	bne.n	8007ab6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a7c:	7b7a      	ldrb	r2, [r7, #13]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a84:	7b7a      	ldrb	r2, [r7, #13]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	32ae      	adds	r2, #174	; 0xae
 8007a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d010      	beq.n	8007ab6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a94:	7b7a      	ldrb	r2, [r7, #13]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	32ae      	adds	r2, #174	; 0xae
 8007a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007aaa:	e004      	b.n	8007ab6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fc03 	bl	80082ba <USBD_CtlError>
              break;
 8007ab4:	e000      	b.n	8007ab8 <USBD_StdEPReq+0x1c8>
              break;
 8007ab6:	bf00      	nop
          }
          break;
 8007ab8:	e0ab      	b.n	8007c12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d002      	beq.n	8007acc <USBD_StdEPReq+0x1dc>
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d032      	beq.n	8007b30 <USBD_StdEPReq+0x240>
 8007aca:	e097      	b.n	8007bfc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d007      	beq.n	8007ae2 <USBD_StdEPReq+0x1f2>
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	2b80      	cmp	r3, #128	; 0x80
 8007ad6:	d004      	beq.n	8007ae2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fbed 	bl	80082ba <USBD_CtlError>
                break;
 8007ae0:	e091      	b.n	8007c06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da0b      	bge.n	8007b02 <USBD_StdEPReq+0x212>
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007af0:	4613      	mov	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	3310      	adds	r3, #16
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	4413      	add	r3, r2
 8007afe:	3304      	adds	r3, #4
 8007b00:	e00b      	b.n	8007b1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	4413      	add	r3, r2
 8007b18:	3304      	adds	r3, #4
 8007b1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2202      	movs	r2, #2
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fc37 	bl	800839c <USBD_CtlSendData>
              break;
 8007b2e:	e06a      	b.n	8007c06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	da11      	bge.n	8007b5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	f003 020f 	and.w	r2, r3, #15
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	3324      	adds	r3, #36	; 0x24
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d117      	bne.n	8007b82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fbb0 	bl	80082ba <USBD_CtlError>
                  break;
 8007b5a:	e054      	b.n	8007c06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	f003 020f 	and.w	r2, r3, #15
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fb9d 	bl	80082ba <USBD_CtlError>
                  break;
 8007b80:	e041      	b.n	8007c06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	da0b      	bge.n	8007ba2 <USBD_StdEPReq+0x2b2>
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	3310      	adds	r3, #16
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	e00b      	b.n	8007bba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	3304      	adds	r3, #4
 8007bba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <USBD_StdEPReq+0x2d8>
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b80      	cmp	r3, #128	; 0x80
 8007bc6:	d103      	bne.n	8007bd0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	e00e      	b.n	8007bee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 f89b 	bl	8008d10 <USBD_LL_IsStallEP>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2201      	movs	r2, #1
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	e002      	b.n	8007bee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fbd1 	bl	800839c <USBD_CtlSendData>
              break;
 8007bfa:	e004      	b.n	8007c06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fb5b 	bl	80082ba <USBD_CtlError>
              break;
 8007c04:	bf00      	nop
          }
          break;
 8007c06:	e004      	b.n	8007c12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fb55 	bl	80082ba <USBD_CtlError>
          break;
 8007c10:	bf00      	nop
      }
      break;
 8007c12:	e005      	b.n	8007c20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fb4f 	bl	80082ba <USBD_CtlError>
      break;
 8007c1c:	e000      	b.n	8007c20 <USBD_StdEPReq+0x330>
      break;
 8007c1e:	bf00      	nop
  }

  return ret;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	885b      	ldrh	r3, [r3, #2]
 8007c46:	0a1b      	lsrs	r3, r3, #8
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	2b06      	cmp	r3, #6
 8007c4e:	f200 8128 	bhi.w	8007ea2 <USBD_GetDescriptor+0x276>
 8007c52:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <USBD_GetDescriptor+0x2c>)
 8007c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c58:	08007c75 	.word	0x08007c75
 8007c5c:	08007c8d 	.word	0x08007c8d
 8007c60:	08007ccd 	.word	0x08007ccd
 8007c64:	08007ea3 	.word	0x08007ea3
 8007c68:	08007ea3 	.word	0x08007ea3
 8007c6c:	08007e43 	.word	0x08007e43
 8007c70:	08007e6f 	.word	0x08007e6f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	7c12      	ldrb	r2, [r2, #16]
 8007c80:	f107 0108 	add.w	r1, r7, #8
 8007c84:	4610      	mov	r0, r2
 8007c86:	4798      	blx	r3
 8007c88:	60f8      	str	r0, [r7, #12]
      break;
 8007c8a:	e112      	b.n	8007eb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	7c1b      	ldrb	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10d      	bne.n	8007cb0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9c:	f107 0208 	add.w	r2, r7, #8
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	2202      	movs	r2, #2
 8007cac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cae:	e100      	b.n	8007eb2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	f107 0208 	add.w	r2, r7, #8
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	701a      	strb	r2, [r3, #0]
      break;
 8007cca:	e0f2      	b.n	8007eb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	885b      	ldrh	r3, [r3, #2]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	f200 80ac 	bhi.w	8007e30 <USBD_GetDescriptor+0x204>
 8007cd8:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <USBD_GetDescriptor+0xb4>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007cf9 	.word	0x08007cf9
 8007ce4:	08007d2d 	.word	0x08007d2d
 8007ce8:	08007d61 	.word	0x08007d61
 8007cec:	08007d95 	.word	0x08007d95
 8007cf0:	08007dc9 	.word	0x08007dc9
 8007cf4:	08007dfd 	.word	0x08007dfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	7c12      	ldrb	r2, [r2, #16]
 8007d10:	f107 0108 	add.w	r1, r7, #8
 8007d14:	4610      	mov	r0, r2
 8007d16:	4798      	blx	r3
 8007d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d1a:	e091      	b.n	8007e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 facb 	bl	80082ba <USBD_CtlError>
            err++;
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	3301      	adds	r3, #1
 8007d28:	72fb      	strb	r3, [r7, #11]
          break;
 8007d2a:	e089      	b.n	8007e40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00b      	beq.n	8007d50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7c12      	ldrb	r2, [r2, #16]
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4e:	e077      	b.n	8007e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fab1 	bl	80082ba <USBD_CtlError>
            err++;
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d5e:	e06f      	b.n	8007e40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	7c12      	ldrb	r2, [r2, #16]
 8007d78:	f107 0108 	add.w	r1, r7, #8
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	4798      	blx	r3
 8007d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d82:	e05d      	b.n	8007e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa97 	bl	80082ba <USBD_CtlError>
            err++;
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	72fb      	strb	r3, [r7, #11]
          break;
 8007d92:	e055      	b.n	8007e40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	7c12      	ldrb	r2, [r2, #16]
 8007dac:	f107 0108 	add.w	r1, r7, #8
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db6:	e043      	b.n	8007e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa7d 	bl	80082ba <USBD_CtlError>
            err++;
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc6:	e03b      	b.n	8007e40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	7c12      	ldrb	r2, [r2, #16]
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	4610      	mov	r0, r2
 8007de6:	4798      	blx	r3
 8007de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dea:	e029      	b.n	8007e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fa63 	bl	80082ba <USBD_CtlError>
            err++;
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	3301      	adds	r3, #1
 8007df8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfa:	e021      	b.n	8007e40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	7c12      	ldrb	r2, [r2, #16]
 8007e14:	f107 0108 	add.w	r1, r7, #8
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4798      	blx	r3
 8007e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1e:	e00f      	b.n	8007e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa49 	bl	80082ba <USBD_CtlError>
            err++;
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2e:	e007      	b.n	8007e40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fa41 	bl	80082ba <USBD_CtlError>
          err++;
 8007e38:	7afb      	ldrb	r3, [r7, #11]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e3e:	bf00      	nop
      }
      break;
 8007e40:	e037      	b.n	8007eb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7c1b      	ldrb	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d109      	bne.n	8007e5e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e52:	f107 0208 	add.w	r2, r7, #8
 8007e56:	4610      	mov	r0, r2
 8007e58:	4798      	blx	r3
 8007e5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e5c:	e029      	b.n	8007eb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fa2a 	bl	80082ba <USBD_CtlError>
        err++;
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e6c:	e021      	b.n	8007eb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	7c1b      	ldrb	r3, [r3, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10d      	bne.n	8007e92 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	f107 0208 	add.w	r2, r7, #8
 8007e82:	4610      	mov	r0, r2
 8007e84:	4798      	blx	r3
 8007e86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	2207      	movs	r2, #7
 8007e8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e90:	e00f      	b.n	8007eb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fa10 	bl	80082ba <USBD_CtlError>
        err++;
 8007e9a:	7afb      	ldrb	r3, [r7, #11]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	72fb      	strb	r3, [r7, #11]
      break;
 8007ea0:	e007      	b.n	8007eb2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa08 	bl	80082ba <USBD_CtlError>
      err++;
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	3301      	adds	r3, #1
 8007eae:	72fb      	strb	r3, [r7, #11]
      break;
 8007eb0:	bf00      	nop
  }

  if (err != 0U)
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11e      	bne.n	8007ef6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	88db      	ldrh	r3, [r3, #6]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d016      	beq.n	8007eee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ec0:	893b      	ldrh	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00e      	beq.n	8007ee4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	88da      	ldrh	r2, [r3, #6]
 8007eca:	893b      	ldrh	r3, [r7, #8]
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	bf28      	it	cs
 8007ed0:	4613      	movcs	r3, r2
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ed6:	893b      	ldrh	r3, [r7, #8]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	68f9      	ldr	r1, [r7, #12]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fa5d 	bl	800839c <USBD_CtlSendData>
 8007ee2:	e009      	b.n	8007ef8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f9e7 	bl	80082ba <USBD_CtlError>
 8007eec:	e004      	b.n	8007ef8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 faae 	bl	8008450 <USBD_CtlSendStatus>
 8007ef4:	e000      	b.n	8007ef8 <USBD_GetDescriptor+0x2cc>
    return;
 8007ef6:	bf00      	nop
  }
}
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop

08007f00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	889b      	ldrh	r3, [r3, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d131      	bne.n	8007f76 <USBD_SetAddress+0x76>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	88db      	ldrh	r3, [r3, #6]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d12d      	bne.n	8007f76 <USBD_SetAddress+0x76>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	885b      	ldrh	r3, [r3, #2]
 8007f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8007f20:	d829      	bhi.n	8007f76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	885b      	ldrh	r3, [r3, #2]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d104      	bne.n	8007f44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f9bc 	bl	80082ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f42:	e01d      	b.n	8007f80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	7bfa      	ldrb	r2, [r7, #15]
 8007f48:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 ff09 	bl	8008d68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fa7a 	bl	8008450 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d004      	beq.n	8007f6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2202      	movs	r2, #2
 8007f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6a:	e009      	b.n	8007f80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f74:	e004      	b.n	8007f80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f99e 	bl	80082ba <USBD_CtlError>
  }
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	885b      	ldrh	r3, [r3, #2]
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	4b4e      	ldr	r3, [pc, #312]	; (80080d8 <USBD_SetConfig+0x150>)
 8007f9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fa0:	4b4d      	ldr	r3, [pc, #308]	; (80080d8 <USBD_SetConfig+0x150>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d905      	bls.n	8007fb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f985 	bl	80082ba <USBD_CtlError>
    return USBD_FAIL;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e08c      	b.n	80080ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d002      	beq.n	8007fc6 <USBD_SetConfig+0x3e>
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d029      	beq.n	8008018 <USBD_SetConfig+0x90>
 8007fc4:	e075      	b.n	80080b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007fc6:	4b44      	ldr	r3, [pc, #272]	; (80080d8 <USBD_SetConfig+0x150>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d020      	beq.n	8008010 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007fce:	4b42      	ldr	r3, [pc, #264]	; (80080d8 <USBD_SetConfig+0x150>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fd8:	4b3f      	ldr	r3, [pc, #252]	; (80080d8 <USBD_SetConfig+0x150>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7fe ffe7 	bl	8006fb2 <USBD_SetClassConfig>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d008      	beq.n	8008000 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f962 	bl	80082ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ffe:	e065      	b.n	80080cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fa25 	bl	8008450 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2203      	movs	r2, #3
 800800a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800800e:	e05d      	b.n	80080cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fa1d 	bl	8008450 <USBD_CtlSendStatus>
      break;
 8008016:	e059      	b.n	80080cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008018:	4b2f      	ldr	r3, [pc, #188]	; (80080d8 <USBD_SetConfig+0x150>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d112      	bne.n	8008046 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008028:	4b2b      	ldr	r3, [pc, #172]	; (80080d8 <USBD_SetConfig+0x150>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	461a      	mov	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008032:	4b29      	ldr	r3, [pc, #164]	; (80080d8 <USBD_SetConfig+0x150>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7fe ffd6 	bl	8006fea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa06 	bl	8008450 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008044:	e042      	b.n	80080cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008046:	4b24      	ldr	r3, [pc, #144]	; (80080d8 <USBD_SetConfig+0x150>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d02a      	beq.n	80080aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fe ffc4 	bl	8006fea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008062:	4b1d      	ldr	r3, [pc, #116]	; (80080d8 <USBD_SetConfig+0x150>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800806c:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <USBD_SetConfig+0x150>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fe ff9d 	bl	8006fb2 <USBD_SetClassConfig>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00f      	beq.n	80080a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f918 	bl	80082ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7fe ffa9 	bl	8006fea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080a0:	e014      	b.n	80080cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f9d4 	bl	8008450 <USBD_CtlSendStatus>
      break;
 80080a8:	e010      	b.n	80080cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f9d0 	bl	8008450 <USBD_CtlSendStatus>
      break;
 80080b0:	e00c      	b.n	80080cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f900 	bl	80082ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <USBD_SetConfig+0x150>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7fe ff92 	bl	8006fea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80080c6:	2303      	movs	r3, #3
 80080c8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ca:	bf00      	nop
  }

  return ret;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20000288 	.word	0x20000288

080080dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	88db      	ldrh	r3, [r3, #6]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d004      	beq.n	80080f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f8e2 	bl	80082ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080f6:	e023      	b.n	8008140 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	dc02      	bgt.n	800810a <USBD_GetConfig+0x2e>
 8008104:	2b00      	cmp	r3, #0
 8008106:	dc03      	bgt.n	8008110 <USBD_GetConfig+0x34>
 8008108:	e015      	b.n	8008136 <USBD_GetConfig+0x5a>
 800810a:	2b03      	cmp	r3, #3
 800810c:	d00b      	beq.n	8008126 <USBD_GetConfig+0x4a>
 800810e:	e012      	b.n	8008136 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3308      	adds	r3, #8
 800811a:	2201      	movs	r2, #1
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f93c 	bl	800839c <USBD_CtlSendData>
        break;
 8008124:	e00c      	b.n	8008140 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3304      	adds	r3, #4
 800812a:	2201      	movs	r2, #1
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f934 	bl	800839c <USBD_CtlSendData>
        break;
 8008134:	e004      	b.n	8008140 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f8be 	bl	80082ba <USBD_CtlError>
        break;
 800813e:	bf00      	nop
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008158:	b2db      	uxtb	r3, r3
 800815a:	3b01      	subs	r3, #1
 800815c:	2b02      	cmp	r3, #2
 800815e:	d81e      	bhi.n	800819e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	88db      	ldrh	r3, [r3, #6]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d004      	beq.n	8008172 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f8a5 	bl	80082ba <USBD_CtlError>
        break;
 8008170:	e01a      	b.n	80081a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f043 0202 	orr.w	r2, r3, #2
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	330c      	adds	r3, #12
 8008192:	2202      	movs	r2, #2
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f900 	bl	800839c <USBD_CtlSendData>
      break;
 800819c:	e004      	b.n	80081a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f88a 	bl	80082ba <USBD_CtlError>
      break;
 80081a6:	bf00      	nop
  }
}
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	885b      	ldrh	r3, [r3, #2]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d107      	bne.n	80081d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f940 	bl	8008450 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80081d0:	e013      	b.n	80081fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	885b      	ldrh	r3, [r3, #2]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d10b      	bne.n	80081f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	889b      	ldrh	r3, [r3, #4]
 80081de:	0a1b      	lsrs	r3, r3, #8
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f930 	bl	8008450 <USBD_CtlSendStatus>
}
 80081f0:	e003      	b.n	80081fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f860 	bl	80082ba <USBD_CtlError>
}
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b082      	sub	sp, #8
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008212:	b2db      	uxtb	r3, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	2b02      	cmp	r3, #2
 8008218:	d80b      	bhi.n	8008232 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	885b      	ldrh	r3, [r3, #2]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d10c      	bne.n	800823c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f910 	bl	8008450 <USBD_CtlSendStatus>
      }
      break;
 8008230:	e004      	b.n	800823c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f840 	bl	80082ba <USBD_CtlError>
      break;
 800823a:	e000      	b.n	800823e <USBD_ClrFeature+0x3c>
      break;
 800823c:	bf00      	nop
  }
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	781a      	ldrb	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	3301      	adds	r3, #1
 8008260:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	781a      	ldrb	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3301      	adds	r3, #1
 800826e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f7ff fa41 	bl	80076f8 <SWAPBYTE>
 8008276:	4603      	mov	r3, r0
 8008278:	461a      	mov	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3301      	adds	r3, #1
 8008282:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff fa34 	bl	80076f8 <SWAPBYTE>
 8008290:	4603      	mov	r3, r0
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3301      	adds	r3, #1
 80082a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff fa27 	bl	80076f8 <SWAPBYTE>
 80082aa:	4603      	mov	r3, r0
 80082ac:	461a      	mov	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	80da      	strh	r2, [r3, #6]
}
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80082c4:	2180      	movs	r1, #128	; 0x80
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fce4 	bl	8008c94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80082cc:	2100      	movs	r1, #0
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fce0 	bl	8008c94 <USBD_LL_StallEP>
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d036      	beq.n	8008360 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80082f6:	6938      	ldr	r0, [r7, #16]
 80082f8:	f000 f836 	bl	8008368 <USBD_GetLen>
 80082fc:	4603      	mov	r3, r0
 80082fe:	3301      	adds	r3, #1
 8008300:	b29b      	uxth	r3, r3
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	b29a      	uxth	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	4413      	add	r3, r2
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	7812      	ldrb	r2, [r2, #0]
 8008314:	701a      	strb	r2, [r3, #0]
  idx++;
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	3301      	adds	r3, #1
 800831a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800831c:	7dfb      	ldrb	r3, [r7, #23]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4413      	add	r3, r2
 8008322:	2203      	movs	r2, #3
 8008324:	701a      	strb	r2, [r3, #0]
  idx++;
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	3301      	adds	r3, #1
 800832a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800832c:	e013      	b.n	8008356 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800832e:	7dfb      	ldrb	r3, [r7, #23]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	4413      	add	r3, r2
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	7812      	ldrb	r2, [r2, #0]
 8008338:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	3301      	adds	r3, #1
 800833e:	613b      	str	r3, [r7, #16]
    idx++;
 8008340:	7dfb      	ldrb	r3, [r7, #23]
 8008342:	3301      	adds	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	4413      	add	r3, r2
 800834c:	2200      	movs	r2, #0
 800834e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
 8008352:	3301      	adds	r3, #1
 8008354:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e7      	bne.n	800832e <USBD_GetString+0x52>
 800835e:	e000      	b.n	8008362 <USBD_GetString+0x86>
    return;
 8008360:	bf00      	nop
  }
}
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008370:	2300      	movs	r3, #0
 8008372:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008378:	e005      	b.n	8008386 <USBD_GetLen+0x1e>
  {
    len++;
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	3301      	adds	r3, #1
 800837e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	3301      	adds	r3, #1
 8008384:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1f5      	bne.n	800837a <USBD_GetLen+0x12>
  }

  return len;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	2100      	movs	r1, #0
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 fcef 	bl	8008da6 <USBD_LL_Transmit>

  return USBD_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	2100      	movs	r1, #0
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 fcde 	bl	8008da6 <USBD_LL_Transmit>

  return USBD_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2203      	movs	r2, #3
 8008404:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	2100      	movs	r1, #0
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 fce2 	bl	8008de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	60f8      	str	r0, [r7, #12]
 8008436:	60b9      	str	r1, [r7, #8]
 8008438:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	2100      	movs	r1, #0
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 fcd1 	bl	8008de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2204      	movs	r2, #4
 800845c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008460:	2300      	movs	r3, #0
 8008462:	2200      	movs	r2, #0
 8008464:	2100      	movs	r1, #0
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fc9d 	bl	8008da6 <USBD_LL_Transmit>

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2205      	movs	r2, #5
 8008482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008486:	2300      	movs	r3, #0
 8008488:	2200      	movs	r2, #0
 800848a:	2100      	movs	r1, #0
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fcab 	bl	8008de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084a0:	2200      	movs	r2, #0
 80084a2:	4912      	ldr	r1, [pc, #72]	; (80084ec <MX_USB_DEVICE_Init+0x50>)
 80084a4:	4812      	ldr	r0, [pc, #72]	; (80084f0 <MX_USB_DEVICE_Init+0x54>)
 80084a6:	f7fe fd07 	bl	8006eb8 <USBD_Init>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084b0:	f7f8 fa00 	bl	80008b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084b4:	490f      	ldr	r1, [pc, #60]	; (80084f4 <MX_USB_DEVICE_Init+0x58>)
 80084b6:	480e      	ldr	r0, [pc, #56]	; (80084f0 <MX_USB_DEVICE_Init+0x54>)
 80084b8:	f7fe fd2e 	bl	8006f18 <USBD_RegisterClass>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084c2:	f7f8 f9f7 	bl	80008b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084c6:	490c      	ldr	r1, [pc, #48]	; (80084f8 <MX_USB_DEVICE_Init+0x5c>)
 80084c8:	4809      	ldr	r0, [pc, #36]	; (80084f0 <MX_USB_DEVICE_Init+0x54>)
 80084ca:	f7fe fc1f 	bl	8006d0c <USBD_CDC_RegisterInterface>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084d4:	f7f8 f9ee 	bl	80008b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084d8:	4805      	ldr	r0, [pc, #20]	; (80084f0 <MX_USB_DEVICE_Init+0x54>)
 80084da:	f7fe fd53 	bl	8006f84 <USBD_Start>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084e4:	f7f8 f9e6 	bl	80008b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084e8:	bf00      	nop
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	200000ac 	.word	0x200000ac
 80084f0:	2000028c 	.word	0x2000028c
 80084f4:	20000018 	.word	0x20000018
 80084f8:	20000098 	.word	0x20000098

080084fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008500:	2200      	movs	r2, #0
 8008502:	4905      	ldr	r1, [pc, #20]	; (8008518 <CDC_Init_FS+0x1c>)
 8008504:	4805      	ldr	r0, [pc, #20]	; (800851c <CDC_Init_FS+0x20>)
 8008506:	f7fe fc1b 	bl	8006d40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800850a:	4905      	ldr	r1, [pc, #20]	; (8008520 <CDC_Init_FS+0x24>)
 800850c:	4803      	ldr	r0, [pc, #12]	; (800851c <CDC_Init_FS+0x20>)
 800850e:	f7fe fc39 	bl	8006d84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008512:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008514:	4618      	mov	r0, r3
 8008516:	bd80      	pop	{r7, pc}
 8008518:	20000d68 	.word	0x20000d68
 800851c:	2000028c 	.word	0x2000028c
 8008520:	20000568 	.word	0x20000568

08008524 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008528:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800852a:	4618      	mov	r0, r3
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	6039      	str	r1, [r7, #0]
 800853e:	71fb      	strb	r3, [r7, #7]
 8008540:	4613      	mov	r3, r2
 8008542:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	2b23      	cmp	r3, #35	; 0x23
 8008548:	d84a      	bhi.n	80085e0 <CDC_Control_FS+0xac>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <CDC_Control_FS+0x1c>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	080085e1 	.word	0x080085e1
 8008554:	080085e1 	.word	0x080085e1
 8008558:	080085e1 	.word	0x080085e1
 800855c:	080085e1 	.word	0x080085e1
 8008560:	080085e1 	.word	0x080085e1
 8008564:	080085e1 	.word	0x080085e1
 8008568:	080085e1 	.word	0x080085e1
 800856c:	080085e1 	.word	0x080085e1
 8008570:	080085e1 	.word	0x080085e1
 8008574:	080085e1 	.word	0x080085e1
 8008578:	080085e1 	.word	0x080085e1
 800857c:	080085e1 	.word	0x080085e1
 8008580:	080085e1 	.word	0x080085e1
 8008584:	080085e1 	.word	0x080085e1
 8008588:	080085e1 	.word	0x080085e1
 800858c:	080085e1 	.word	0x080085e1
 8008590:	080085e1 	.word	0x080085e1
 8008594:	080085e1 	.word	0x080085e1
 8008598:	080085e1 	.word	0x080085e1
 800859c:	080085e1 	.word	0x080085e1
 80085a0:	080085e1 	.word	0x080085e1
 80085a4:	080085e1 	.word	0x080085e1
 80085a8:	080085e1 	.word	0x080085e1
 80085ac:	080085e1 	.word	0x080085e1
 80085b0:	080085e1 	.word	0x080085e1
 80085b4:	080085e1 	.word	0x080085e1
 80085b8:	080085e1 	.word	0x080085e1
 80085bc:	080085e1 	.word	0x080085e1
 80085c0:	080085e1 	.word	0x080085e1
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	080085e1 	.word	0x080085e1
 80085cc:	080085e1 	.word	0x080085e1
 80085d0:	080085e1 	.word	0x080085e1
 80085d4:	080085e1 	.word	0x080085e1
 80085d8:	080085e1 	.word	0x080085e1
 80085dc:	080085e1 	.word	0x080085e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085e0:	bf00      	nop
  }

  return (USBD_OK);
 80085e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	480b      	ldr	r0, [pc, #44]	; (800862c <CDC_Receive_FS+0x3c>)
 80085fe:	f7fe fbc1 	bl	8006d84 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008602:	480a      	ldr	r0, [pc, #40]	; (800862c <CDC_Receive_FS+0x3c>)
 8008604:	f7fe fc22 	bl	8006e4c <USBD_CDC_ReceivePacket>
	//Set the received packet length
	cdcHandeler.cdcRxPacketSize = *Len;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	b29a      	uxth	r2, r3
 800860e:	4b08      	ldr	r3, [pc, #32]	; (8008630 <CDC_Receive_FS+0x40>)
 8008610:	811a      	strh	r2, [r3, #8]

	CDC_Transmit_FS(Buf, hUsbDeviceFS.ep0_data_len);
 8008612:	4b06      	ldr	r3, [pc, #24]	; (800862c <CDC_Receive_FS+0x3c>)
 8008614:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008618:	b29b      	uxth	r3, r3
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f809 	bl	8008634 <CDC_Transmit_FS>

	return (USBD_OK);
 8008622:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008624:	4618      	mov	r0, r3
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	2000028c 	.word	0x2000028c
 8008630:	20001568 	.word	0x20001568

08008634 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008644:	4b0d      	ldr	r3, [pc, #52]	; (800867c <CDC_Transmit_FS+0x48>)
 8008646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800864a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008656:	2301      	movs	r3, #1
 8008658:	e00b      	b.n	8008672 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800865a:	887b      	ldrh	r3, [r7, #2]
 800865c:	461a      	mov	r2, r3
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4806      	ldr	r0, [pc, #24]	; (800867c <CDC_Transmit_FS+0x48>)
 8008662:	f7fe fb6d 	bl	8006d40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008666:	4805      	ldr	r0, [pc, #20]	; (800867c <CDC_Transmit_FS+0x48>)
 8008668:	f7fe fbaa 	bl	8006dc0 <USBD_CDC_TransmitPacket>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008670:	7bfb      	ldrb	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	2000028c 	.word	0x2000028c

08008680 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008696:	4618      	mov	r0, r3
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
	...

080086a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	4603      	mov	r3, r0
 80086ac:	6039      	str	r1, [r7, #0]
 80086ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2212      	movs	r2, #18
 80086b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086b6:	4b03      	ldr	r3, [pc, #12]	; (80086c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	200000c8 	.word	0x200000c8

080086c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2204      	movs	r2, #4
 80086d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80086da:	4b03      	ldr	r3, [pc, #12]	; (80086e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80086dc:	4618      	mov	r0, r3
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	200000dc 	.word	0x200000dc

080086ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d105      	bne.n	800870a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	4907      	ldr	r1, [pc, #28]	; (8008720 <USBD_FS_ProductStrDescriptor+0x34>)
 8008702:	4808      	ldr	r0, [pc, #32]	; (8008724 <USBD_FS_ProductStrDescriptor+0x38>)
 8008704:	f7ff fdea 	bl	80082dc <USBD_GetString>
 8008708:	e004      	b.n	8008714 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	4904      	ldr	r1, [pc, #16]	; (8008720 <USBD_FS_ProductStrDescriptor+0x34>)
 800870e:	4805      	ldr	r0, [pc, #20]	; (8008724 <USBD_FS_ProductStrDescriptor+0x38>)
 8008710:	f7ff fde4 	bl	80082dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008714:	4b02      	ldr	r3, [pc, #8]	; (8008720 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20001578 	.word	0x20001578
 8008724:	080098d0 	.word	0x080098d0

08008728 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	6039      	str	r1, [r7, #0]
 8008732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	4904      	ldr	r1, [pc, #16]	; (8008748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008738:	4804      	ldr	r0, [pc, #16]	; (800874c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800873a:	f7ff fdcf 	bl	80082dc <USBD_GetString>
  return USBD_StrDesc;
 800873e:	4b02      	ldr	r3, [pc, #8]	; (8008748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20001578 	.word	0x20001578
 800874c:	080098dc 	.word	0x080098dc

08008750 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	221a      	movs	r2, #26
 8008760:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008762:	f000 f843 	bl	80087ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008766:	4b02      	ldr	r3, [pc, #8]	; (8008770 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008768:	4618      	mov	r0, r3
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	200000e0 	.word	0x200000e0

08008774 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	6039      	str	r1, [r7, #0]
 800877e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d105      	bne.n	8008792 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	4907      	ldr	r1, [pc, #28]	; (80087a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800878a:	4808      	ldr	r0, [pc, #32]	; (80087ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800878c:	f7ff fda6 	bl	80082dc <USBD_GetString>
 8008790:	e004      	b.n	800879c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	4904      	ldr	r1, [pc, #16]	; (80087a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008796:	4805      	ldr	r0, [pc, #20]	; (80087ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8008798:	f7ff fda0 	bl	80082dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800879c:	4b02      	ldr	r3, [pc, #8]	; (80087a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20001578 	.word	0x20001578
 80087ac:	080098f0 	.word	0x080098f0

080087b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	6039      	str	r1, [r7, #0]
 80087ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d105      	bne.n	80087ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	4907      	ldr	r1, [pc, #28]	; (80087e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087c6:	4808      	ldr	r0, [pc, #32]	; (80087e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087c8:	f7ff fd88 	bl	80082dc <USBD_GetString>
 80087cc:	e004      	b.n	80087d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	4904      	ldr	r1, [pc, #16]	; (80087e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087d2:	4805      	ldr	r0, [pc, #20]	; (80087e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087d4:	f7ff fd82 	bl	80082dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80087d8:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20001578 	.word	0x20001578
 80087e8:	080098fc 	.word	0x080098fc

080087ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80087f2:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <Get_SerialNum+0x44>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087f8:	4b0e      	ldr	r3, [pc, #56]	; (8008834 <Get_SerialNum+0x48>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087fe:	4b0e      	ldr	r3, [pc, #56]	; (8008838 <Get_SerialNum+0x4c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4413      	add	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d009      	beq.n	8008826 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008812:	2208      	movs	r2, #8
 8008814:	4909      	ldr	r1, [pc, #36]	; (800883c <Get_SerialNum+0x50>)
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 f814 	bl	8008844 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800881c:	2204      	movs	r2, #4
 800881e:	4908      	ldr	r1, [pc, #32]	; (8008840 <Get_SerialNum+0x54>)
 8008820:	68b8      	ldr	r0, [r7, #8]
 8008822:	f000 f80f 	bl	8008844 <IntToUnicode>
  }
}
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	1fff7a10 	.word	0x1fff7a10
 8008834:	1fff7a14 	.word	0x1fff7a14
 8008838:	1fff7a18 	.word	0x1fff7a18
 800883c:	200000e2 	.word	0x200000e2
 8008840:	200000f2 	.word	0x200000f2

08008844 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	4613      	mov	r3, r2
 8008850:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008856:	2300      	movs	r3, #0
 8008858:	75fb      	strb	r3, [r7, #23]
 800885a:	e027      	b.n	80088ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	0f1b      	lsrs	r3, r3, #28
 8008860:	2b09      	cmp	r3, #9
 8008862:	d80b      	bhi.n	800887c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	0f1b      	lsrs	r3, r3, #28
 8008868:	b2da      	uxtb	r2, r3
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	4619      	mov	r1, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	440b      	add	r3, r1
 8008874:	3230      	adds	r2, #48	; 0x30
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	e00a      	b.n	8008892 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	0f1b      	lsrs	r3, r3, #28
 8008880:	b2da      	uxtb	r2, r3
 8008882:	7dfb      	ldrb	r3, [r7, #23]
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	4619      	mov	r1, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	440b      	add	r3, r1
 800888c:	3237      	adds	r2, #55	; 0x37
 800888e:	b2d2      	uxtb	r2, r2
 8008890:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	3301      	adds	r3, #1
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	4413      	add	r3, r2
 80088a2:	2200      	movs	r2, #0
 80088a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	3301      	adds	r3, #1
 80088aa:	75fb      	strb	r3, [r7, #23]
 80088ac:	7dfa      	ldrb	r2, [r7, #23]
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d3d3      	bcc.n	800885c <IntToUnicode+0x18>
  }
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
	...

080088c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08a      	sub	sp, #40	; 0x28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088cc:	f107 0314 	add.w	r3, r7, #20
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	605a      	str	r2, [r3, #4]
 80088d6:	609a      	str	r2, [r3, #8]
 80088d8:	60da      	str	r2, [r3, #12]
 80088da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088e4:	d13a      	bne.n	800895c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088e6:	2300      	movs	r3, #0
 80088e8:	613b      	str	r3, [r7, #16]
 80088ea:	4b1e      	ldr	r3, [pc, #120]	; (8008964 <HAL_PCD_MspInit+0xa0>)
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	4a1d      	ldr	r2, [pc, #116]	; (8008964 <HAL_PCD_MspInit+0xa0>)
 80088f0:	f043 0301 	orr.w	r3, r3, #1
 80088f4:	6313      	str	r3, [r2, #48]	; 0x30
 80088f6:	4b1b      	ldr	r3, [pc, #108]	; (8008964 <HAL_PCD_MspInit+0xa0>)
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	613b      	str	r3, [r7, #16]
 8008900:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008902:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008908:	2302      	movs	r3, #2
 800890a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890c:	2300      	movs	r3, #0
 800890e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008910:	2303      	movs	r3, #3
 8008912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008914:	230a      	movs	r3, #10
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008918:	f107 0314 	add.w	r3, r7, #20
 800891c:	4619      	mov	r1, r3
 800891e:	4812      	ldr	r0, [pc, #72]	; (8008968 <HAL_PCD_MspInit+0xa4>)
 8008920:	f7f8 ff1a 	bl	8001758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008924:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <HAL_PCD_MspInit+0xa0>)
 8008926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008928:	4a0e      	ldr	r2, [pc, #56]	; (8008964 <HAL_PCD_MspInit+0xa0>)
 800892a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892e:	6353      	str	r3, [r2, #52]	; 0x34
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <HAL_PCD_MspInit+0xa0>)
 8008936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008938:	4a0a      	ldr	r2, [pc, #40]	; (8008964 <HAL_PCD_MspInit+0xa0>)
 800893a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800893e:	6453      	str	r3, [r2, #68]	; 0x44
 8008940:	4b08      	ldr	r3, [pc, #32]	; (8008964 <HAL_PCD_MspInit+0xa0>)
 8008942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800894c:	2200      	movs	r2, #0
 800894e:	2100      	movs	r1, #0
 8008950:	2043      	movs	r0, #67	; 0x43
 8008952:	f7f8 fac8 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008956:	2043      	movs	r0, #67	; 0x43
 8008958:	f7f8 fae1 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800895c:	bf00      	nop
 800895e:	3728      	adds	r7, #40	; 0x28
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	40023800 	.word	0x40023800
 8008968:	40020000 	.word	0x40020000

0800896c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008980:	4619      	mov	r1, r3
 8008982:	4610      	mov	r0, r2
 8008984:	f7fe fb4b 	bl	800701e <USBD_LL_SetupStage>
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089a2:	78fa      	ldrb	r2, [r7, #3]
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	00db      	lsls	r3, r3, #3
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	440b      	add	r3, r1
 80089b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	78fb      	ldrb	r3, [r7, #3]
 80089b8:	4619      	mov	r1, r3
 80089ba:	f7fe fb85 	bl	80070c8 <USBD_LL_DataOutStage>
}
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089d8:	78fa      	ldrb	r2, [r7, #3]
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	4613      	mov	r3, r2
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	4413      	add	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	440b      	add	r3, r1
 80089e6:	334c      	adds	r3, #76	; 0x4c
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	78fb      	ldrb	r3, [r7, #3]
 80089ec:	4619      	mov	r1, r3
 80089ee:	f7fe fc1e 	bl	800722e <USBD_LL_DataInStage>
}
 80089f2:	bf00      	nop
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fe fd52 	bl	80074b2 <USBD_LL_SOF>
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d001      	beq.n	8008a2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a2a:	f7f7 ff43 	bl	80008b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a34:	7bfa      	ldrb	r2, [r7, #15]
 8008a36:	4611      	mov	r1, r2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fcfc 	bl	8007436 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe fca4 	bl	8007392 <USBD_LL_Reset>
}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe fcf7 	bl	8007456 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a7a:	f043 0301 	orr.w	r3, r3, #1
 8008a7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a88:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <HAL_PCD_SuspendCallback+0x48>)
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	4a03      	ldr	r2, [pc, #12]	; (8008a9c <HAL_PCD_SuspendCallback+0x48>)
 8008a8e:	f043 0306 	orr.w	r3, r3, #6
 8008a92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	e000ed00 	.word	0xe000ed00

08008aa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fce7 	bl	8007482 <USBD_LL_Resume>
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ace:	78fa      	ldrb	r2, [r7, #3]
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fd3f 	bl	8007556 <USBD_LL_IsoOUTIncomplete>
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008af2:	78fa      	ldrb	r2, [r7, #3]
 8008af4:	4611      	mov	r1, r2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fcfb 	bl	80074f2 <USBD_LL_IsoINIncomplete>
}
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe fd51 	bl	80075ba <USBD_LL_DevConnected>
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe fd4e 	bl	80075d0 <USBD_LL_DevDisconnected>
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d13c      	bne.n	8008bc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b4c:	4a20      	ldr	r2, [pc, #128]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a1e      	ldr	r2, [pc, #120]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b58:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b5c:	4b1c      	ldr	r3, [pc, #112]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b64:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b66:	2204      	movs	r2, #4
 8008b68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b6a:	4b19      	ldr	r3, [pc, #100]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b70:	4b17      	ldr	r3, [pc, #92]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b76:	4b16      	ldr	r3, [pc, #88]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b78:	2202      	movs	r2, #2
 8008b7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b7c:	4b14      	ldr	r3, [pc, #80]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b82:	4b13      	ldr	r3, [pc, #76]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b88:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b8e:	4b10      	ldr	r3, [pc, #64]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b94:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b9a:	480d      	ldr	r0, [pc, #52]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b9c:	f7f8 ff79 	bl	8001a92 <HAL_PCD_Init>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ba6:	f7f7 fe85 	bl	80008b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008baa:	2180      	movs	r1, #128	; 0x80
 8008bac:	4808      	ldr	r0, [pc, #32]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008bae:	f7fa f9d0 	bl	8002f52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008bb2:	2240      	movs	r2, #64	; 0x40
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	4806      	ldr	r0, [pc, #24]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008bb8:	f7fa f984 	bl	8002ec4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008bbc:	2280      	movs	r2, #128	; 0x80
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	4803      	ldr	r0, [pc, #12]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008bc2:	f7fa f97f 	bl	8002ec4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20001778 	.word	0x20001778

08008bd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7f9 f86e 	bl	8001ccc <HAL_PCD_Start>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 f942 	bl	8008e80 <USBD_Get_USB_Status>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	4608      	mov	r0, r1
 8008c14:	4611      	mov	r1, r2
 8008c16:	461a      	mov	r2, r3
 8008c18:	4603      	mov	r3, r0
 8008c1a:	70fb      	strb	r3, [r7, #3]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70bb      	strb	r3, [r7, #2]
 8008c20:	4613      	mov	r3, r2
 8008c22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c32:	78bb      	ldrb	r3, [r7, #2]
 8008c34:	883a      	ldrh	r2, [r7, #0]
 8008c36:	78f9      	ldrb	r1, [r7, #3]
 8008c38:	f7f9 fd3f 	bl	80026ba <HAL_PCD_EP_Open>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f91c 	bl	8008e80 <USBD_Get_USB_Status>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	460b      	mov	r3, r1
 8008c60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c70:	78fa      	ldrb	r2, [r7, #3]
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7f9 fd88 	bl	800278a <HAL_PCD_EP_Close>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 f8fd 	bl	8008e80 <USBD_Get_USB_Status>
 8008c86:	4603      	mov	r3, r0
 8008c88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cae:	78fa      	ldrb	r2, [r7, #3]
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7f9 fe60 	bl	8002978 <HAL_PCD_EP_SetStall>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 f8de 	bl	8008e80 <USBD_Get_USB_Status>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f9 fea5 	bl	8002a40 <HAL_PCD_EP_ClrStall>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 f8bf 	bl	8008e80 <USBD_Get_USB_Status>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	da0b      	bge.n	8008d44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d2c:	78fb      	ldrb	r3, [r7, #3]
 8008d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d32:	68f9      	ldr	r1, [r7, #12]
 8008d34:	4613      	mov	r3, r2
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	440b      	add	r3, r1
 8008d3e:	333e      	adds	r3, #62	; 0x3e
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	e00b      	b.n	8008d5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d4a:	68f9      	ldr	r1, [r7, #12]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	4413      	add	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	440b      	add	r3, r1
 8008d56:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008d5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	4611      	mov	r1, r2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7f9 fc72 	bl	8002670 <HAL_PCD_SetAddress>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 f874 	bl	8008e80 <USBD_Get_USB_Status>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b086      	sub	sp, #24
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	603b      	str	r3, [r7, #0]
 8008db2:	460b      	mov	r3, r1
 8008db4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008dc4:	7af9      	ldrb	r1, [r7, #11]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	f7f9 fd8b 	bl	80028e4 <HAL_PCD_EP_Transmit>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 f853 	bl	8008e80 <USBD_Get_USB_Status>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dde:	7dbb      	ldrb	r3, [r7, #22]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	607a      	str	r2, [r7, #4]
 8008df2:	603b      	str	r3, [r7, #0]
 8008df4:	460b      	mov	r3, r1
 8008df6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e06:	7af9      	ldrb	r1, [r7, #11]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	f7f9 fd07 	bl	800281e <HAL_PCD_EP_Receive>
 8008e10:	4603      	mov	r3, r0
 8008e12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 f832 	bl	8008e80 <USBD_Get_USB_Status>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e20:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	460b      	mov	r3, r1
 8008e34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e3c:	78fa      	ldrb	r2, [r7, #3]
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7f9 fd37 	bl	80028b4 <HAL_PCD_EP_GetRxCount>
 8008e46:	4603      	mov	r3, r0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e58:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <USBD_static_malloc+0x18>)
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	20001c84 	.word	0x20001c84

08008e6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]

}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d817      	bhi.n	8008ec4 <USBD_Get_USB_Status+0x44>
 8008e94:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <USBD_Get_USB_Status+0x1c>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008ead 	.word	0x08008ead
 8008ea0:	08008eb3 	.word	0x08008eb3
 8008ea4:	08008eb9 	.word	0x08008eb9
 8008ea8:	08008ebf 	.word	0x08008ebf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb0:	e00b      	b.n	8008eca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb6:	e008      	b.n	8008eca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	73fb      	strb	r3, [r7, #15]
    break;
 8008ebc:	e005      	b.n	8008eca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec2:	e002      	b.n	8008eca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec8:	bf00      	nop
  }
  return usb_status;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <rybg211_bleModuleInit>:

/* PRIVATE FUNCTIONS DECLARATION ---------------------------------------------*/

/* FUNCTION PROTOTYPES -------------------------------------------------------*/
void rybg211_bleModuleInit(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
	memset(&hBleModule, 0, sizeof(hBleModule_t));
 8008edc:	f44f 7205 	mov.w	r2, #532	; 0x214
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	4805      	ldr	r0, [pc, #20]	; (8008ef8 <rybg211_bleModuleInit+0x20>)
 8008ee4:	f000 f87a 	bl	8008fdc <memset>

	HAL_GPIO_WritePin(BLE_MODULE_RESET_GPIO_PORT, BLE_MODULE_RESET_PIN, ENABLE);
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008eee:	4803      	ldr	r0, [pc, #12]	; (8008efc <rybg211_bleModuleInit+0x24>)
 8008ef0:	f7f8 fdb6 	bl	8001a60 <HAL_GPIO_WritePin>
}
 8008ef4:	bf00      	nop
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20001ea4 	.word	0x20001ea4
 8008efc:	40020400 	.word	0x40020400

08008f00 <rybg211_setDeviceName>:

void rybg211_setDeviceName(uint8_t* moduleBuffer, char* nameString)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af04      	add	r7, sp, #16
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
	uint8_t nameStringSize = strlen(nameString);
 8008f0a:	6838      	ldr	r0, [r7, #0]
 8008f0c:	f7f7 f968 	bl	80001e0 <strlen>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]

	memcpy(moduleBuffer ,BLE_NAME_SET, sizeof(BLE_NAME_SET));
 8008f14:	2209      	movs	r2, #9
 8008f16:	4910      	ldr	r1, [pc, #64]	; (8008f58 <rybg211_setDeviceName+0x58>)
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f851 	bl	8008fc0 <memcpy>

	sprintf((char*)moduleBuffer, "%s%d%s%s%s",BLE_NAME_SET,
 8008f1e:	7bfa      	ldrb	r2, [r7, #15]
 8008f20:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <rybg211_setDeviceName+0x5c>)
 8008f22:	9302      	str	r3, [sp, #8]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	9301      	str	r3, [sp, #4]
 8008f28:	4b0d      	ldr	r3, [pc, #52]	; (8008f60 <rybg211_setDeviceName+0x60>)
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	4a0a      	ldr	r2, [pc, #40]	; (8008f58 <rybg211_setDeviceName+0x58>)
 8008f30:	490c      	ldr	r1, [pc, #48]	; (8008f64 <rybg211_setDeviceName+0x64>)
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f85a 	bl	8008fec <siprintf>
										BLE_NEW_FIELD,
										nameString,
										BLE_CMD_TERM);


	hBleModule.txPacketSize = strlen((char*)moduleBuffer);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7f7 f951 	bl	80001e0 <strlen>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <rybg211_setDeviceName+0x68>)
 8008f44:	805a      	strh	r2, [r3, #2]

	hBleModule.controlFlags.flag.packetToTransmit = ENABLE;
 8008f46:	4a08      	ldr	r2, [pc, #32]	; (8008f68 <rybg211_setDeviceName+0x68>)
 8008f48:	7813      	ldrb	r3, [r2, #0]
 8008f4a:	f043 0302 	orr.w	r3, r3, #2
 8008f4e:	7013      	strb	r3, [r2, #0]
}
 8008f50:	bf00      	nop
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	0800990c 	.word	0x0800990c
 8008f5c:	08009924 	.word	0x08009924
 8008f60:	08009928 	.word	0x08009928
 8008f64:	08009918 	.word	0x08009918
 8008f68:	20001ea4 	.word	0x20001ea4

08008f6c <__errno>:
 8008f6c:	4b01      	ldr	r3, [pc, #4]	; (8008f74 <__errno+0x8>)
 8008f6e:	6818      	ldr	r0, [r3, #0]
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	200000fc 	.word	0x200000fc

08008f78 <__libc_init_array>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	4d0d      	ldr	r5, [pc, #52]	; (8008fb0 <__libc_init_array+0x38>)
 8008f7c:	4c0d      	ldr	r4, [pc, #52]	; (8008fb4 <__libc_init_array+0x3c>)
 8008f7e:	1b64      	subs	r4, r4, r5
 8008f80:	10a4      	asrs	r4, r4, #2
 8008f82:	2600      	movs	r6, #0
 8008f84:	42a6      	cmp	r6, r4
 8008f86:	d109      	bne.n	8008f9c <__libc_init_array+0x24>
 8008f88:	4d0b      	ldr	r5, [pc, #44]	; (8008fb8 <__libc_init_array+0x40>)
 8008f8a:	4c0c      	ldr	r4, [pc, #48]	; (8008fbc <__libc_init_array+0x44>)
 8008f8c:	f000 fc8e 	bl	80098ac <_init>
 8008f90:	1b64      	subs	r4, r4, r5
 8008f92:	10a4      	asrs	r4, r4, #2
 8008f94:	2600      	movs	r6, #0
 8008f96:	42a6      	cmp	r6, r4
 8008f98:	d105      	bne.n	8008fa6 <__libc_init_array+0x2e>
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa0:	4798      	blx	r3
 8008fa2:	3601      	adds	r6, #1
 8008fa4:	e7ee      	b.n	8008f84 <__libc_init_array+0xc>
 8008fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008faa:	4798      	blx	r3
 8008fac:	3601      	adds	r6, #1
 8008fae:	e7f2      	b.n	8008f96 <__libc_init_array+0x1e>
 8008fb0:	08009988 	.word	0x08009988
 8008fb4:	08009988 	.word	0x08009988
 8008fb8:	08009988 	.word	0x08009988
 8008fbc:	0800998c 	.word	0x0800998c

08008fc0 <memcpy>:
 8008fc0:	440a      	add	r2, r1
 8008fc2:	4291      	cmp	r1, r2
 8008fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fc8:	d100      	bne.n	8008fcc <memcpy+0xc>
 8008fca:	4770      	bx	lr
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fd6:	4291      	cmp	r1, r2
 8008fd8:	d1f9      	bne.n	8008fce <memcpy+0xe>
 8008fda:	bd10      	pop	{r4, pc}

08008fdc <memset>:
 8008fdc:	4402      	add	r2, r0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d100      	bne.n	8008fe6 <memset+0xa>
 8008fe4:	4770      	bx	lr
 8008fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8008fea:	e7f9      	b.n	8008fe0 <memset+0x4>

08008fec <siprintf>:
 8008fec:	b40e      	push	{r1, r2, r3}
 8008fee:	b500      	push	{lr}
 8008ff0:	b09c      	sub	sp, #112	; 0x70
 8008ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ff4:	9002      	str	r0, [sp, #8]
 8008ff6:	9006      	str	r0, [sp, #24]
 8008ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ffc:	4809      	ldr	r0, [pc, #36]	; (8009024 <siprintf+0x38>)
 8008ffe:	9107      	str	r1, [sp, #28]
 8009000:	9104      	str	r1, [sp, #16]
 8009002:	4909      	ldr	r1, [pc, #36]	; (8009028 <siprintf+0x3c>)
 8009004:	f853 2b04 	ldr.w	r2, [r3], #4
 8009008:	9105      	str	r1, [sp, #20]
 800900a:	6800      	ldr	r0, [r0, #0]
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	a902      	add	r1, sp, #8
 8009010:	f000 f868 	bl	80090e4 <_svfiprintf_r>
 8009014:	9b02      	ldr	r3, [sp, #8]
 8009016:	2200      	movs	r2, #0
 8009018:	701a      	strb	r2, [r3, #0]
 800901a:	b01c      	add	sp, #112	; 0x70
 800901c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009020:	b003      	add	sp, #12
 8009022:	4770      	bx	lr
 8009024:	200000fc 	.word	0x200000fc
 8009028:	ffff0208 	.word	0xffff0208

0800902c <__ssputs_r>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	688e      	ldr	r6, [r1, #8]
 8009032:	429e      	cmp	r6, r3
 8009034:	4682      	mov	sl, r0
 8009036:	460c      	mov	r4, r1
 8009038:	4690      	mov	r8, r2
 800903a:	461f      	mov	r7, r3
 800903c:	d838      	bhi.n	80090b0 <__ssputs_r+0x84>
 800903e:	898a      	ldrh	r2, [r1, #12]
 8009040:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009044:	d032      	beq.n	80090ac <__ssputs_r+0x80>
 8009046:	6825      	ldr	r5, [r4, #0]
 8009048:	6909      	ldr	r1, [r1, #16]
 800904a:	eba5 0901 	sub.w	r9, r5, r1
 800904e:	6965      	ldr	r5, [r4, #20]
 8009050:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009054:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009058:	3301      	adds	r3, #1
 800905a:	444b      	add	r3, r9
 800905c:	106d      	asrs	r5, r5, #1
 800905e:	429d      	cmp	r5, r3
 8009060:	bf38      	it	cc
 8009062:	461d      	movcc	r5, r3
 8009064:	0553      	lsls	r3, r2, #21
 8009066:	d531      	bpl.n	80090cc <__ssputs_r+0xa0>
 8009068:	4629      	mov	r1, r5
 800906a:	f000 fb55 	bl	8009718 <_malloc_r>
 800906e:	4606      	mov	r6, r0
 8009070:	b950      	cbnz	r0, 8009088 <__ssputs_r+0x5c>
 8009072:	230c      	movs	r3, #12
 8009074:	f8ca 3000 	str.w	r3, [sl]
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009088:	6921      	ldr	r1, [r4, #16]
 800908a:	464a      	mov	r2, r9
 800908c:	f7ff ff98 	bl	8008fc0 <memcpy>
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	6126      	str	r6, [r4, #16]
 800909e:	6165      	str	r5, [r4, #20]
 80090a0:	444e      	add	r6, r9
 80090a2:	eba5 0509 	sub.w	r5, r5, r9
 80090a6:	6026      	str	r6, [r4, #0]
 80090a8:	60a5      	str	r5, [r4, #8]
 80090aa:	463e      	mov	r6, r7
 80090ac:	42be      	cmp	r6, r7
 80090ae:	d900      	bls.n	80090b2 <__ssputs_r+0x86>
 80090b0:	463e      	mov	r6, r7
 80090b2:	6820      	ldr	r0, [r4, #0]
 80090b4:	4632      	mov	r2, r6
 80090b6:	4641      	mov	r1, r8
 80090b8:	f000 faa8 	bl	800960c <memmove>
 80090bc:	68a3      	ldr	r3, [r4, #8]
 80090be:	1b9b      	subs	r3, r3, r6
 80090c0:	60a3      	str	r3, [r4, #8]
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	4433      	add	r3, r6
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	2000      	movs	r0, #0
 80090ca:	e7db      	b.n	8009084 <__ssputs_r+0x58>
 80090cc:	462a      	mov	r2, r5
 80090ce:	f000 fb97 	bl	8009800 <_realloc_r>
 80090d2:	4606      	mov	r6, r0
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d1e1      	bne.n	800909c <__ssputs_r+0x70>
 80090d8:	6921      	ldr	r1, [r4, #16]
 80090da:	4650      	mov	r0, sl
 80090dc:	f000 fab0 	bl	8009640 <_free_r>
 80090e0:	e7c7      	b.n	8009072 <__ssputs_r+0x46>
	...

080090e4 <_svfiprintf_r>:
 80090e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	4698      	mov	r8, r3
 80090ea:	898b      	ldrh	r3, [r1, #12]
 80090ec:	061b      	lsls	r3, r3, #24
 80090ee:	b09d      	sub	sp, #116	; 0x74
 80090f0:	4607      	mov	r7, r0
 80090f2:	460d      	mov	r5, r1
 80090f4:	4614      	mov	r4, r2
 80090f6:	d50e      	bpl.n	8009116 <_svfiprintf_r+0x32>
 80090f8:	690b      	ldr	r3, [r1, #16]
 80090fa:	b963      	cbnz	r3, 8009116 <_svfiprintf_r+0x32>
 80090fc:	2140      	movs	r1, #64	; 0x40
 80090fe:	f000 fb0b 	bl	8009718 <_malloc_r>
 8009102:	6028      	str	r0, [r5, #0]
 8009104:	6128      	str	r0, [r5, #16]
 8009106:	b920      	cbnz	r0, 8009112 <_svfiprintf_r+0x2e>
 8009108:	230c      	movs	r3, #12
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	e0d1      	b.n	80092b6 <_svfiprintf_r+0x1d2>
 8009112:	2340      	movs	r3, #64	; 0x40
 8009114:	616b      	str	r3, [r5, #20]
 8009116:	2300      	movs	r3, #0
 8009118:	9309      	str	r3, [sp, #36]	; 0x24
 800911a:	2320      	movs	r3, #32
 800911c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009120:	f8cd 800c 	str.w	r8, [sp, #12]
 8009124:	2330      	movs	r3, #48	; 0x30
 8009126:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80092d0 <_svfiprintf_r+0x1ec>
 800912a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800912e:	f04f 0901 	mov.w	r9, #1
 8009132:	4623      	mov	r3, r4
 8009134:	469a      	mov	sl, r3
 8009136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800913a:	b10a      	cbz	r2, 8009140 <_svfiprintf_r+0x5c>
 800913c:	2a25      	cmp	r2, #37	; 0x25
 800913e:	d1f9      	bne.n	8009134 <_svfiprintf_r+0x50>
 8009140:	ebba 0b04 	subs.w	fp, sl, r4
 8009144:	d00b      	beq.n	800915e <_svfiprintf_r+0x7a>
 8009146:	465b      	mov	r3, fp
 8009148:	4622      	mov	r2, r4
 800914a:	4629      	mov	r1, r5
 800914c:	4638      	mov	r0, r7
 800914e:	f7ff ff6d 	bl	800902c <__ssputs_r>
 8009152:	3001      	adds	r0, #1
 8009154:	f000 80aa 	beq.w	80092ac <_svfiprintf_r+0x1c8>
 8009158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800915a:	445a      	add	r2, fp
 800915c:	9209      	str	r2, [sp, #36]	; 0x24
 800915e:	f89a 3000 	ldrb.w	r3, [sl]
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 80a2 	beq.w	80092ac <_svfiprintf_r+0x1c8>
 8009168:	2300      	movs	r3, #0
 800916a:	f04f 32ff 	mov.w	r2, #4294967295
 800916e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009172:	f10a 0a01 	add.w	sl, sl, #1
 8009176:	9304      	str	r3, [sp, #16]
 8009178:	9307      	str	r3, [sp, #28]
 800917a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800917e:	931a      	str	r3, [sp, #104]	; 0x68
 8009180:	4654      	mov	r4, sl
 8009182:	2205      	movs	r2, #5
 8009184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009188:	4851      	ldr	r0, [pc, #324]	; (80092d0 <_svfiprintf_r+0x1ec>)
 800918a:	f7f7 f831 	bl	80001f0 <memchr>
 800918e:	9a04      	ldr	r2, [sp, #16]
 8009190:	b9d8      	cbnz	r0, 80091ca <_svfiprintf_r+0xe6>
 8009192:	06d0      	lsls	r0, r2, #27
 8009194:	bf44      	itt	mi
 8009196:	2320      	movmi	r3, #32
 8009198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800919c:	0711      	lsls	r1, r2, #28
 800919e:	bf44      	itt	mi
 80091a0:	232b      	movmi	r3, #43	; 0x2b
 80091a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a6:	f89a 3000 	ldrb.w	r3, [sl]
 80091aa:	2b2a      	cmp	r3, #42	; 0x2a
 80091ac:	d015      	beq.n	80091da <_svfiprintf_r+0xf6>
 80091ae:	9a07      	ldr	r2, [sp, #28]
 80091b0:	4654      	mov	r4, sl
 80091b2:	2000      	movs	r0, #0
 80091b4:	f04f 0c0a 	mov.w	ip, #10
 80091b8:	4621      	mov	r1, r4
 80091ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091be:	3b30      	subs	r3, #48	; 0x30
 80091c0:	2b09      	cmp	r3, #9
 80091c2:	d94e      	bls.n	8009262 <_svfiprintf_r+0x17e>
 80091c4:	b1b0      	cbz	r0, 80091f4 <_svfiprintf_r+0x110>
 80091c6:	9207      	str	r2, [sp, #28]
 80091c8:	e014      	b.n	80091f4 <_svfiprintf_r+0x110>
 80091ca:	eba0 0308 	sub.w	r3, r0, r8
 80091ce:	fa09 f303 	lsl.w	r3, r9, r3
 80091d2:	4313      	orrs	r3, r2
 80091d4:	9304      	str	r3, [sp, #16]
 80091d6:	46a2      	mov	sl, r4
 80091d8:	e7d2      	b.n	8009180 <_svfiprintf_r+0x9c>
 80091da:	9b03      	ldr	r3, [sp, #12]
 80091dc:	1d19      	adds	r1, r3, #4
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	9103      	str	r1, [sp, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	bfbb      	ittet	lt
 80091e6:	425b      	neglt	r3, r3
 80091e8:	f042 0202 	orrlt.w	r2, r2, #2
 80091ec:	9307      	strge	r3, [sp, #28]
 80091ee:	9307      	strlt	r3, [sp, #28]
 80091f0:	bfb8      	it	lt
 80091f2:	9204      	strlt	r2, [sp, #16]
 80091f4:	7823      	ldrb	r3, [r4, #0]
 80091f6:	2b2e      	cmp	r3, #46	; 0x2e
 80091f8:	d10c      	bne.n	8009214 <_svfiprintf_r+0x130>
 80091fa:	7863      	ldrb	r3, [r4, #1]
 80091fc:	2b2a      	cmp	r3, #42	; 0x2a
 80091fe:	d135      	bne.n	800926c <_svfiprintf_r+0x188>
 8009200:	9b03      	ldr	r3, [sp, #12]
 8009202:	1d1a      	adds	r2, r3, #4
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	9203      	str	r2, [sp, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	bfb8      	it	lt
 800920c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009210:	3402      	adds	r4, #2
 8009212:	9305      	str	r3, [sp, #20]
 8009214:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092e0 <_svfiprintf_r+0x1fc>
 8009218:	7821      	ldrb	r1, [r4, #0]
 800921a:	2203      	movs	r2, #3
 800921c:	4650      	mov	r0, sl
 800921e:	f7f6 ffe7 	bl	80001f0 <memchr>
 8009222:	b140      	cbz	r0, 8009236 <_svfiprintf_r+0x152>
 8009224:	2340      	movs	r3, #64	; 0x40
 8009226:	eba0 000a 	sub.w	r0, r0, sl
 800922a:	fa03 f000 	lsl.w	r0, r3, r0
 800922e:	9b04      	ldr	r3, [sp, #16]
 8009230:	4303      	orrs	r3, r0
 8009232:	3401      	adds	r4, #1
 8009234:	9304      	str	r3, [sp, #16]
 8009236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800923a:	4826      	ldr	r0, [pc, #152]	; (80092d4 <_svfiprintf_r+0x1f0>)
 800923c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009240:	2206      	movs	r2, #6
 8009242:	f7f6 ffd5 	bl	80001f0 <memchr>
 8009246:	2800      	cmp	r0, #0
 8009248:	d038      	beq.n	80092bc <_svfiprintf_r+0x1d8>
 800924a:	4b23      	ldr	r3, [pc, #140]	; (80092d8 <_svfiprintf_r+0x1f4>)
 800924c:	bb1b      	cbnz	r3, 8009296 <_svfiprintf_r+0x1b2>
 800924e:	9b03      	ldr	r3, [sp, #12]
 8009250:	3307      	adds	r3, #7
 8009252:	f023 0307 	bic.w	r3, r3, #7
 8009256:	3308      	adds	r3, #8
 8009258:	9303      	str	r3, [sp, #12]
 800925a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925c:	4433      	add	r3, r6
 800925e:	9309      	str	r3, [sp, #36]	; 0x24
 8009260:	e767      	b.n	8009132 <_svfiprintf_r+0x4e>
 8009262:	fb0c 3202 	mla	r2, ip, r2, r3
 8009266:	460c      	mov	r4, r1
 8009268:	2001      	movs	r0, #1
 800926a:	e7a5      	b.n	80091b8 <_svfiprintf_r+0xd4>
 800926c:	2300      	movs	r3, #0
 800926e:	3401      	adds	r4, #1
 8009270:	9305      	str	r3, [sp, #20]
 8009272:	4619      	mov	r1, r3
 8009274:	f04f 0c0a 	mov.w	ip, #10
 8009278:	4620      	mov	r0, r4
 800927a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800927e:	3a30      	subs	r2, #48	; 0x30
 8009280:	2a09      	cmp	r2, #9
 8009282:	d903      	bls.n	800928c <_svfiprintf_r+0x1a8>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0c5      	beq.n	8009214 <_svfiprintf_r+0x130>
 8009288:	9105      	str	r1, [sp, #20]
 800928a:	e7c3      	b.n	8009214 <_svfiprintf_r+0x130>
 800928c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009290:	4604      	mov	r4, r0
 8009292:	2301      	movs	r3, #1
 8009294:	e7f0      	b.n	8009278 <_svfiprintf_r+0x194>
 8009296:	ab03      	add	r3, sp, #12
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	462a      	mov	r2, r5
 800929c:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <_svfiprintf_r+0x1f8>)
 800929e:	a904      	add	r1, sp, #16
 80092a0:	4638      	mov	r0, r7
 80092a2:	f3af 8000 	nop.w
 80092a6:	1c42      	adds	r2, r0, #1
 80092a8:	4606      	mov	r6, r0
 80092aa:	d1d6      	bne.n	800925a <_svfiprintf_r+0x176>
 80092ac:	89ab      	ldrh	r3, [r5, #12]
 80092ae:	065b      	lsls	r3, r3, #25
 80092b0:	f53f af2c 	bmi.w	800910c <_svfiprintf_r+0x28>
 80092b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092b6:	b01d      	add	sp, #116	; 0x74
 80092b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092bc:	ab03      	add	r3, sp, #12
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	462a      	mov	r2, r5
 80092c2:	4b06      	ldr	r3, [pc, #24]	; (80092dc <_svfiprintf_r+0x1f8>)
 80092c4:	a904      	add	r1, sp, #16
 80092c6:	4638      	mov	r0, r7
 80092c8:	f000 f87a 	bl	80093c0 <_printf_i>
 80092cc:	e7eb      	b.n	80092a6 <_svfiprintf_r+0x1c2>
 80092ce:	bf00      	nop
 80092d0:	0800994c 	.word	0x0800994c
 80092d4:	08009956 	.word	0x08009956
 80092d8:	00000000 	.word	0x00000000
 80092dc:	0800902d 	.word	0x0800902d
 80092e0:	08009952 	.word	0x08009952

080092e4 <_printf_common>:
 80092e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e8:	4616      	mov	r6, r2
 80092ea:	4699      	mov	r9, r3
 80092ec:	688a      	ldr	r2, [r1, #8]
 80092ee:	690b      	ldr	r3, [r1, #16]
 80092f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092f4:	4293      	cmp	r3, r2
 80092f6:	bfb8      	it	lt
 80092f8:	4613      	movlt	r3, r2
 80092fa:	6033      	str	r3, [r6, #0]
 80092fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009300:	4607      	mov	r7, r0
 8009302:	460c      	mov	r4, r1
 8009304:	b10a      	cbz	r2, 800930a <_printf_common+0x26>
 8009306:	3301      	adds	r3, #1
 8009308:	6033      	str	r3, [r6, #0]
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	0699      	lsls	r1, r3, #26
 800930e:	bf42      	ittt	mi
 8009310:	6833      	ldrmi	r3, [r6, #0]
 8009312:	3302      	addmi	r3, #2
 8009314:	6033      	strmi	r3, [r6, #0]
 8009316:	6825      	ldr	r5, [r4, #0]
 8009318:	f015 0506 	ands.w	r5, r5, #6
 800931c:	d106      	bne.n	800932c <_printf_common+0x48>
 800931e:	f104 0a19 	add.w	sl, r4, #25
 8009322:	68e3      	ldr	r3, [r4, #12]
 8009324:	6832      	ldr	r2, [r6, #0]
 8009326:	1a9b      	subs	r3, r3, r2
 8009328:	42ab      	cmp	r3, r5
 800932a:	dc26      	bgt.n	800937a <_printf_common+0x96>
 800932c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009330:	1e13      	subs	r3, r2, #0
 8009332:	6822      	ldr	r2, [r4, #0]
 8009334:	bf18      	it	ne
 8009336:	2301      	movne	r3, #1
 8009338:	0692      	lsls	r2, r2, #26
 800933a:	d42b      	bmi.n	8009394 <_printf_common+0xb0>
 800933c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009340:	4649      	mov	r1, r9
 8009342:	4638      	mov	r0, r7
 8009344:	47c0      	blx	r8
 8009346:	3001      	adds	r0, #1
 8009348:	d01e      	beq.n	8009388 <_printf_common+0xa4>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	68e5      	ldr	r5, [r4, #12]
 800934e:	6832      	ldr	r2, [r6, #0]
 8009350:	f003 0306 	and.w	r3, r3, #6
 8009354:	2b04      	cmp	r3, #4
 8009356:	bf08      	it	eq
 8009358:	1aad      	subeq	r5, r5, r2
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	6922      	ldr	r2, [r4, #16]
 800935e:	bf0c      	ite	eq
 8009360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009364:	2500      	movne	r5, #0
 8009366:	4293      	cmp	r3, r2
 8009368:	bfc4      	itt	gt
 800936a:	1a9b      	subgt	r3, r3, r2
 800936c:	18ed      	addgt	r5, r5, r3
 800936e:	2600      	movs	r6, #0
 8009370:	341a      	adds	r4, #26
 8009372:	42b5      	cmp	r5, r6
 8009374:	d11a      	bne.n	80093ac <_printf_common+0xc8>
 8009376:	2000      	movs	r0, #0
 8009378:	e008      	b.n	800938c <_printf_common+0xa8>
 800937a:	2301      	movs	r3, #1
 800937c:	4652      	mov	r2, sl
 800937e:	4649      	mov	r1, r9
 8009380:	4638      	mov	r0, r7
 8009382:	47c0      	blx	r8
 8009384:	3001      	adds	r0, #1
 8009386:	d103      	bne.n	8009390 <_printf_common+0xac>
 8009388:	f04f 30ff 	mov.w	r0, #4294967295
 800938c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009390:	3501      	adds	r5, #1
 8009392:	e7c6      	b.n	8009322 <_printf_common+0x3e>
 8009394:	18e1      	adds	r1, r4, r3
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	2030      	movs	r0, #48	; 0x30
 800939a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800939e:	4422      	add	r2, r4
 80093a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093a8:	3302      	adds	r3, #2
 80093aa:	e7c7      	b.n	800933c <_printf_common+0x58>
 80093ac:	2301      	movs	r3, #1
 80093ae:	4622      	mov	r2, r4
 80093b0:	4649      	mov	r1, r9
 80093b2:	4638      	mov	r0, r7
 80093b4:	47c0      	blx	r8
 80093b6:	3001      	adds	r0, #1
 80093b8:	d0e6      	beq.n	8009388 <_printf_common+0xa4>
 80093ba:	3601      	adds	r6, #1
 80093bc:	e7d9      	b.n	8009372 <_printf_common+0x8e>
	...

080093c0 <_printf_i>:
 80093c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093c4:	7e0f      	ldrb	r7, [r1, #24]
 80093c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093c8:	2f78      	cmp	r7, #120	; 0x78
 80093ca:	4691      	mov	r9, r2
 80093cc:	4680      	mov	r8, r0
 80093ce:	460c      	mov	r4, r1
 80093d0:	469a      	mov	sl, r3
 80093d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093d6:	d807      	bhi.n	80093e8 <_printf_i+0x28>
 80093d8:	2f62      	cmp	r7, #98	; 0x62
 80093da:	d80a      	bhi.n	80093f2 <_printf_i+0x32>
 80093dc:	2f00      	cmp	r7, #0
 80093de:	f000 80d8 	beq.w	8009592 <_printf_i+0x1d2>
 80093e2:	2f58      	cmp	r7, #88	; 0x58
 80093e4:	f000 80a3 	beq.w	800952e <_printf_i+0x16e>
 80093e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093f0:	e03a      	b.n	8009468 <_printf_i+0xa8>
 80093f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093f6:	2b15      	cmp	r3, #21
 80093f8:	d8f6      	bhi.n	80093e8 <_printf_i+0x28>
 80093fa:	a101      	add	r1, pc, #4	; (adr r1, 8009400 <_printf_i+0x40>)
 80093fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009400:	08009459 	.word	0x08009459
 8009404:	0800946d 	.word	0x0800946d
 8009408:	080093e9 	.word	0x080093e9
 800940c:	080093e9 	.word	0x080093e9
 8009410:	080093e9 	.word	0x080093e9
 8009414:	080093e9 	.word	0x080093e9
 8009418:	0800946d 	.word	0x0800946d
 800941c:	080093e9 	.word	0x080093e9
 8009420:	080093e9 	.word	0x080093e9
 8009424:	080093e9 	.word	0x080093e9
 8009428:	080093e9 	.word	0x080093e9
 800942c:	08009579 	.word	0x08009579
 8009430:	0800949d 	.word	0x0800949d
 8009434:	0800955b 	.word	0x0800955b
 8009438:	080093e9 	.word	0x080093e9
 800943c:	080093e9 	.word	0x080093e9
 8009440:	0800959b 	.word	0x0800959b
 8009444:	080093e9 	.word	0x080093e9
 8009448:	0800949d 	.word	0x0800949d
 800944c:	080093e9 	.word	0x080093e9
 8009450:	080093e9 	.word	0x080093e9
 8009454:	08009563 	.word	0x08009563
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	1d1a      	adds	r2, r3, #4
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	602a      	str	r2, [r5, #0]
 8009460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009468:	2301      	movs	r3, #1
 800946a:	e0a3      	b.n	80095b4 <_printf_i+0x1f4>
 800946c:	6820      	ldr	r0, [r4, #0]
 800946e:	6829      	ldr	r1, [r5, #0]
 8009470:	0606      	lsls	r6, r0, #24
 8009472:	f101 0304 	add.w	r3, r1, #4
 8009476:	d50a      	bpl.n	800948e <_printf_i+0xce>
 8009478:	680e      	ldr	r6, [r1, #0]
 800947a:	602b      	str	r3, [r5, #0]
 800947c:	2e00      	cmp	r6, #0
 800947e:	da03      	bge.n	8009488 <_printf_i+0xc8>
 8009480:	232d      	movs	r3, #45	; 0x2d
 8009482:	4276      	negs	r6, r6
 8009484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009488:	485e      	ldr	r0, [pc, #376]	; (8009604 <_printf_i+0x244>)
 800948a:	230a      	movs	r3, #10
 800948c:	e019      	b.n	80094c2 <_printf_i+0x102>
 800948e:	680e      	ldr	r6, [r1, #0]
 8009490:	602b      	str	r3, [r5, #0]
 8009492:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009496:	bf18      	it	ne
 8009498:	b236      	sxthne	r6, r6
 800949a:	e7ef      	b.n	800947c <_printf_i+0xbc>
 800949c:	682b      	ldr	r3, [r5, #0]
 800949e:	6820      	ldr	r0, [r4, #0]
 80094a0:	1d19      	adds	r1, r3, #4
 80094a2:	6029      	str	r1, [r5, #0]
 80094a4:	0601      	lsls	r1, r0, #24
 80094a6:	d501      	bpl.n	80094ac <_printf_i+0xec>
 80094a8:	681e      	ldr	r6, [r3, #0]
 80094aa:	e002      	b.n	80094b2 <_printf_i+0xf2>
 80094ac:	0646      	lsls	r6, r0, #25
 80094ae:	d5fb      	bpl.n	80094a8 <_printf_i+0xe8>
 80094b0:	881e      	ldrh	r6, [r3, #0]
 80094b2:	4854      	ldr	r0, [pc, #336]	; (8009604 <_printf_i+0x244>)
 80094b4:	2f6f      	cmp	r7, #111	; 0x6f
 80094b6:	bf0c      	ite	eq
 80094b8:	2308      	moveq	r3, #8
 80094ba:	230a      	movne	r3, #10
 80094bc:	2100      	movs	r1, #0
 80094be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094c2:	6865      	ldr	r5, [r4, #4]
 80094c4:	60a5      	str	r5, [r4, #8]
 80094c6:	2d00      	cmp	r5, #0
 80094c8:	bfa2      	ittt	ge
 80094ca:	6821      	ldrge	r1, [r4, #0]
 80094cc:	f021 0104 	bicge.w	r1, r1, #4
 80094d0:	6021      	strge	r1, [r4, #0]
 80094d2:	b90e      	cbnz	r6, 80094d8 <_printf_i+0x118>
 80094d4:	2d00      	cmp	r5, #0
 80094d6:	d04d      	beq.n	8009574 <_printf_i+0x1b4>
 80094d8:	4615      	mov	r5, r2
 80094da:	fbb6 f1f3 	udiv	r1, r6, r3
 80094de:	fb03 6711 	mls	r7, r3, r1, r6
 80094e2:	5dc7      	ldrb	r7, [r0, r7]
 80094e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094e8:	4637      	mov	r7, r6
 80094ea:	42bb      	cmp	r3, r7
 80094ec:	460e      	mov	r6, r1
 80094ee:	d9f4      	bls.n	80094da <_printf_i+0x11a>
 80094f0:	2b08      	cmp	r3, #8
 80094f2:	d10b      	bne.n	800950c <_printf_i+0x14c>
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	07de      	lsls	r6, r3, #31
 80094f8:	d508      	bpl.n	800950c <_printf_i+0x14c>
 80094fa:	6923      	ldr	r3, [r4, #16]
 80094fc:	6861      	ldr	r1, [r4, #4]
 80094fe:	4299      	cmp	r1, r3
 8009500:	bfde      	ittt	le
 8009502:	2330      	movle	r3, #48	; 0x30
 8009504:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009508:	f105 35ff 	addle.w	r5, r5, #4294967295
 800950c:	1b52      	subs	r2, r2, r5
 800950e:	6122      	str	r2, [r4, #16]
 8009510:	f8cd a000 	str.w	sl, [sp]
 8009514:	464b      	mov	r3, r9
 8009516:	aa03      	add	r2, sp, #12
 8009518:	4621      	mov	r1, r4
 800951a:	4640      	mov	r0, r8
 800951c:	f7ff fee2 	bl	80092e4 <_printf_common>
 8009520:	3001      	adds	r0, #1
 8009522:	d14c      	bne.n	80095be <_printf_i+0x1fe>
 8009524:	f04f 30ff 	mov.w	r0, #4294967295
 8009528:	b004      	add	sp, #16
 800952a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800952e:	4835      	ldr	r0, [pc, #212]	; (8009604 <_printf_i+0x244>)
 8009530:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009534:	6829      	ldr	r1, [r5, #0]
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	f851 6b04 	ldr.w	r6, [r1], #4
 800953c:	6029      	str	r1, [r5, #0]
 800953e:	061d      	lsls	r5, r3, #24
 8009540:	d514      	bpl.n	800956c <_printf_i+0x1ac>
 8009542:	07df      	lsls	r7, r3, #31
 8009544:	bf44      	itt	mi
 8009546:	f043 0320 	orrmi.w	r3, r3, #32
 800954a:	6023      	strmi	r3, [r4, #0]
 800954c:	b91e      	cbnz	r6, 8009556 <_printf_i+0x196>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	f023 0320 	bic.w	r3, r3, #32
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	2310      	movs	r3, #16
 8009558:	e7b0      	b.n	80094bc <_printf_i+0xfc>
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	f043 0320 	orr.w	r3, r3, #32
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	2378      	movs	r3, #120	; 0x78
 8009564:	4828      	ldr	r0, [pc, #160]	; (8009608 <_printf_i+0x248>)
 8009566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800956a:	e7e3      	b.n	8009534 <_printf_i+0x174>
 800956c:	0659      	lsls	r1, r3, #25
 800956e:	bf48      	it	mi
 8009570:	b2b6      	uxthmi	r6, r6
 8009572:	e7e6      	b.n	8009542 <_printf_i+0x182>
 8009574:	4615      	mov	r5, r2
 8009576:	e7bb      	b.n	80094f0 <_printf_i+0x130>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	6826      	ldr	r6, [r4, #0]
 800957c:	6961      	ldr	r1, [r4, #20]
 800957e:	1d18      	adds	r0, r3, #4
 8009580:	6028      	str	r0, [r5, #0]
 8009582:	0635      	lsls	r5, r6, #24
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	d501      	bpl.n	800958c <_printf_i+0x1cc>
 8009588:	6019      	str	r1, [r3, #0]
 800958a:	e002      	b.n	8009592 <_printf_i+0x1d2>
 800958c:	0670      	lsls	r0, r6, #25
 800958e:	d5fb      	bpl.n	8009588 <_printf_i+0x1c8>
 8009590:	8019      	strh	r1, [r3, #0]
 8009592:	2300      	movs	r3, #0
 8009594:	6123      	str	r3, [r4, #16]
 8009596:	4615      	mov	r5, r2
 8009598:	e7ba      	b.n	8009510 <_printf_i+0x150>
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	1d1a      	adds	r2, r3, #4
 800959e:	602a      	str	r2, [r5, #0]
 80095a0:	681d      	ldr	r5, [r3, #0]
 80095a2:	6862      	ldr	r2, [r4, #4]
 80095a4:	2100      	movs	r1, #0
 80095a6:	4628      	mov	r0, r5
 80095a8:	f7f6 fe22 	bl	80001f0 <memchr>
 80095ac:	b108      	cbz	r0, 80095b2 <_printf_i+0x1f2>
 80095ae:	1b40      	subs	r0, r0, r5
 80095b0:	6060      	str	r0, [r4, #4]
 80095b2:	6863      	ldr	r3, [r4, #4]
 80095b4:	6123      	str	r3, [r4, #16]
 80095b6:	2300      	movs	r3, #0
 80095b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095bc:	e7a8      	b.n	8009510 <_printf_i+0x150>
 80095be:	6923      	ldr	r3, [r4, #16]
 80095c0:	462a      	mov	r2, r5
 80095c2:	4649      	mov	r1, r9
 80095c4:	4640      	mov	r0, r8
 80095c6:	47d0      	blx	sl
 80095c8:	3001      	adds	r0, #1
 80095ca:	d0ab      	beq.n	8009524 <_printf_i+0x164>
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	079b      	lsls	r3, r3, #30
 80095d0:	d413      	bmi.n	80095fa <_printf_i+0x23a>
 80095d2:	68e0      	ldr	r0, [r4, #12]
 80095d4:	9b03      	ldr	r3, [sp, #12]
 80095d6:	4298      	cmp	r0, r3
 80095d8:	bfb8      	it	lt
 80095da:	4618      	movlt	r0, r3
 80095dc:	e7a4      	b.n	8009528 <_printf_i+0x168>
 80095de:	2301      	movs	r3, #1
 80095e0:	4632      	mov	r2, r6
 80095e2:	4649      	mov	r1, r9
 80095e4:	4640      	mov	r0, r8
 80095e6:	47d0      	blx	sl
 80095e8:	3001      	adds	r0, #1
 80095ea:	d09b      	beq.n	8009524 <_printf_i+0x164>
 80095ec:	3501      	adds	r5, #1
 80095ee:	68e3      	ldr	r3, [r4, #12]
 80095f0:	9903      	ldr	r1, [sp, #12]
 80095f2:	1a5b      	subs	r3, r3, r1
 80095f4:	42ab      	cmp	r3, r5
 80095f6:	dcf2      	bgt.n	80095de <_printf_i+0x21e>
 80095f8:	e7eb      	b.n	80095d2 <_printf_i+0x212>
 80095fa:	2500      	movs	r5, #0
 80095fc:	f104 0619 	add.w	r6, r4, #25
 8009600:	e7f5      	b.n	80095ee <_printf_i+0x22e>
 8009602:	bf00      	nop
 8009604:	0800995d 	.word	0x0800995d
 8009608:	0800996e 	.word	0x0800996e

0800960c <memmove>:
 800960c:	4288      	cmp	r0, r1
 800960e:	b510      	push	{r4, lr}
 8009610:	eb01 0402 	add.w	r4, r1, r2
 8009614:	d902      	bls.n	800961c <memmove+0x10>
 8009616:	4284      	cmp	r4, r0
 8009618:	4623      	mov	r3, r4
 800961a:	d807      	bhi.n	800962c <memmove+0x20>
 800961c:	1e43      	subs	r3, r0, #1
 800961e:	42a1      	cmp	r1, r4
 8009620:	d008      	beq.n	8009634 <memmove+0x28>
 8009622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800962a:	e7f8      	b.n	800961e <memmove+0x12>
 800962c:	4402      	add	r2, r0
 800962e:	4601      	mov	r1, r0
 8009630:	428a      	cmp	r2, r1
 8009632:	d100      	bne.n	8009636 <memmove+0x2a>
 8009634:	bd10      	pop	{r4, pc}
 8009636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800963a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800963e:	e7f7      	b.n	8009630 <memmove+0x24>

08009640 <_free_r>:
 8009640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009642:	2900      	cmp	r1, #0
 8009644:	d044      	beq.n	80096d0 <_free_r+0x90>
 8009646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800964a:	9001      	str	r0, [sp, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	f1a1 0404 	sub.w	r4, r1, #4
 8009652:	bfb8      	it	lt
 8009654:	18e4      	addlt	r4, r4, r3
 8009656:	f000 f913 	bl	8009880 <__malloc_lock>
 800965a:	4a1e      	ldr	r2, [pc, #120]	; (80096d4 <_free_r+0x94>)
 800965c:	9801      	ldr	r0, [sp, #4]
 800965e:	6813      	ldr	r3, [r2, #0]
 8009660:	b933      	cbnz	r3, 8009670 <_free_r+0x30>
 8009662:	6063      	str	r3, [r4, #4]
 8009664:	6014      	str	r4, [r2, #0]
 8009666:	b003      	add	sp, #12
 8009668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800966c:	f000 b90e 	b.w	800988c <__malloc_unlock>
 8009670:	42a3      	cmp	r3, r4
 8009672:	d908      	bls.n	8009686 <_free_r+0x46>
 8009674:	6825      	ldr	r5, [r4, #0]
 8009676:	1961      	adds	r1, r4, r5
 8009678:	428b      	cmp	r3, r1
 800967a:	bf01      	itttt	eq
 800967c:	6819      	ldreq	r1, [r3, #0]
 800967e:	685b      	ldreq	r3, [r3, #4]
 8009680:	1949      	addeq	r1, r1, r5
 8009682:	6021      	streq	r1, [r4, #0]
 8009684:	e7ed      	b.n	8009662 <_free_r+0x22>
 8009686:	461a      	mov	r2, r3
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	b10b      	cbz	r3, 8009690 <_free_r+0x50>
 800968c:	42a3      	cmp	r3, r4
 800968e:	d9fa      	bls.n	8009686 <_free_r+0x46>
 8009690:	6811      	ldr	r1, [r2, #0]
 8009692:	1855      	adds	r5, r2, r1
 8009694:	42a5      	cmp	r5, r4
 8009696:	d10b      	bne.n	80096b0 <_free_r+0x70>
 8009698:	6824      	ldr	r4, [r4, #0]
 800969a:	4421      	add	r1, r4
 800969c:	1854      	adds	r4, r2, r1
 800969e:	42a3      	cmp	r3, r4
 80096a0:	6011      	str	r1, [r2, #0]
 80096a2:	d1e0      	bne.n	8009666 <_free_r+0x26>
 80096a4:	681c      	ldr	r4, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	6053      	str	r3, [r2, #4]
 80096aa:	4421      	add	r1, r4
 80096ac:	6011      	str	r1, [r2, #0]
 80096ae:	e7da      	b.n	8009666 <_free_r+0x26>
 80096b0:	d902      	bls.n	80096b8 <_free_r+0x78>
 80096b2:	230c      	movs	r3, #12
 80096b4:	6003      	str	r3, [r0, #0]
 80096b6:	e7d6      	b.n	8009666 <_free_r+0x26>
 80096b8:	6825      	ldr	r5, [r4, #0]
 80096ba:	1961      	adds	r1, r4, r5
 80096bc:	428b      	cmp	r3, r1
 80096be:	bf04      	itt	eq
 80096c0:	6819      	ldreq	r1, [r3, #0]
 80096c2:	685b      	ldreq	r3, [r3, #4]
 80096c4:	6063      	str	r3, [r4, #4]
 80096c6:	bf04      	itt	eq
 80096c8:	1949      	addeq	r1, r1, r5
 80096ca:	6021      	streq	r1, [r4, #0]
 80096cc:	6054      	str	r4, [r2, #4]
 80096ce:	e7ca      	b.n	8009666 <_free_r+0x26>
 80096d0:	b003      	add	sp, #12
 80096d2:	bd30      	pop	{r4, r5, pc}
 80096d4:	200020b8 	.word	0x200020b8

080096d8 <sbrk_aligned>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	4e0e      	ldr	r6, [pc, #56]	; (8009714 <sbrk_aligned+0x3c>)
 80096dc:	460c      	mov	r4, r1
 80096de:	6831      	ldr	r1, [r6, #0]
 80096e0:	4605      	mov	r5, r0
 80096e2:	b911      	cbnz	r1, 80096ea <sbrk_aligned+0x12>
 80096e4:	f000 f8bc 	bl	8009860 <_sbrk_r>
 80096e8:	6030      	str	r0, [r6, #0]
 80096ea:	4621      	mov	r1, r4
 80096ec:	4628      	mov	r0, r5
 80096ee:	f000 f8b7 	bl	8009860 <_sbrk_r>
 80096f2:	1c43      	adds	r3, r0, #1
 80096f4:	d00a      	beq.n	800970c <sbrk_aligned+0x34>
 80096f6:	1cc4      	adds	r4, r0, #3
 80096f8:	f024 0403 	bic.w	r4, r4, #3
 80096fc:	42a0      	cmp	r0, r4
 80096fe:	d007      	beq.n	8009710 <sbrk_aligned+0x38>
 8009700:	1a21      	subs	r1, r4, r0
 8009702:	4628      	mov	r0, r5
 8009704:	f000 f8ac 	bl	8009860 <_sbrk_r>
 8009708:	3001      	adds	r0, #1
 800970a:	d101      	bne.n	8009710 <sbrk_aligned+0x38>
 800970c:	f04f 34ff 	mov.w	r4, #4294967295
 8009710:	4620      	mov	r0, r4
 8009712:	bd70      	pop	{r4, r5, r6, pc}
 8009714:	200020bc 	.word	0x200020bc

08009718 <_malloc_r>:
 8009718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971c:	1ccd      	adds	r5, r1, #3
 800971e:	f025 0503 	bic.w	r5, r5, #3
 8009722:	3508      	adds	r5, #8
 8009724:	2d0c      	cmp	r5, #12
 8009726:	bf38      	it	cc
 8009728:	250c      	movcc	r5, #12
 800972a:	2d00      	cmp	r5, #0
 800972c:	4607      	mov	r7, r0
 800972e:	db01      	blt.n	8009734 <_malloc_r+0x1c>
 8009730:	42a9      	cmp	r1, r5
 8009732:	d905      	bls.n	8009740 <_malloc_r+0x28>
 8009734:	230c      	movs	r3, #12
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	2600      	movs	r6, #0
 800973a:	4630      	mov	r0, r6
 800973c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009740:	4e2e      	ldr	r6, [pc, #184]	; (80097fc <_malloc_r+0xe4>)
 8009742:	f000 f89d 	bl	8009880 <__malloc_lock>
 8009746:	6833      	ldr	r3, [r6, #0]
 8009748:	461c      	mov	r4, r3
 800974a:	bb34      	cbnz	r4, 800979a <_malloc_r+0x82>
 800974c:	4629      	mov	r1, r5
 800974e:	4638      	mov	r0, r7
 8009750:	f7ff ffc2 	bl	80096d8 <sbrk_aligned>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	4604      	mov	r4, r0
 8009758:	d14d      	bne.n	80097f6 <_malloc_r+0xde>
 800975a:	6834      	ldr	r4, [r6, #0]
 800975c:	4626      	mov	r6, r4
 800975e:	2e00      	cmp	r6, #0
 8009760:	d140      	bne.n	80097e4 <_malloc_r+0xcc>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	4631      	mov	r1, r6
 8009766:	4638      	mov	r0, r7
 8009768:	eb04 0803 	add.w	r8, r4, r3
 800976c:	f000 f878 	bl	8009860 <_sbrk_r>
 8009770:	4580      	cmp	r8, r0
 8009772:	d13a      	bne.n	80097ea <_malloc_r+0xd2>
 8009774:	6821      	ldr	r1, [r4, #0]
 8009776:	3503      	adds	r5, #3
 8009778:	1a6d      	subs	r5, r5, r1
 800977a:	f025 0503 	bic.w	r5, r5, #3
 800977e:	3508      	adds	r5, #8
 8009780:	2d0c      	cmp	r5, #12
 8009782:	bf38      	it	cc
 8009784:	250c      	movcc	r5, #12
 8009786:	4629      	mov	r1, r5
 8009788:	4638      	mov	r0, r7
 800978a:	f7ff ffa5 	bl	80096d8 <sbrk_aligned>
 800978e:	3001      	adds	r0, #1
 8009790:	d02b      	beq.n	80097ea <_malloc_r+0xd2>
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	442b      	add	r3, r5
 8009796:	6023      	str	r3, [r4, #0]
 8009798:	e00e      	b.n	80097b8 <_malloc_r+0xa0>
 800979a:	6822      	ldr	r2, [r4, #0]
 800979c:	1b52      	subs	r2, r2, r5
 800979e:	d41e      	bmi.n	80097de <_malloc_r+0xc6>
 80097a0:	2a0b      	cmp	r2, #11
 80097a2:	d916      	bls.n	80097d2 <_malloc_r+0xba>
 80097a4:	1961      	adds	r1, r4, r5
 80097a6:	42a3      	cmp	r3, r4
 80097a8:	6025      	str	r5, [r4, #0]
 80097aa:	bf18      	it	ne
 80097ac:	6059      	strne	r1, [r3, #4]
 80097ae:	6863      	ldr	r3, [r4, #4]
 80097b0:	bf08      	it	eq
 80097b2:	6031      	streq	r1, [r6, #0]
 80097b4:	5162      	str	r2, [r4, r5]
 80097b6:	604b      	str	r3, [r1, #4]
 80097b8:	4638      	mov	r0, r7
 80097ba:	f104 060b 	add.w	r6, r4, #11
 80097be:	f000 f865 	bl	800988c <__malloc_unlock>
 80097c2:	f026 0607 	bic.w	r6, r6, #7
 80097c6:	1d23      	adds	r3, r4, #4
 80097c8:	1af2      	subs	r2, r6, r3
 80097ca:	d0b6      	beq.n	800973a <_malloc_r+0x22>
 80097cc:	1b9b      	subs	r3, r3, r6
 80097ce:	50a3      	str	r3, [r4, r2]
 80097d0:	e7b3      	b.n	800973a <_malloc_r+0x22>
 80097d2:	6862      	ldr	r2, [r4, #4]
 80097d4:	42a3      	cmp	r3, r4
 80097d6:	bf0c      	ite	eq
 80097d8:	6032      	streq	r2, [r6, #0]
 80097da:	605a      	strne	r2, [r3, #4]
 80097dc:	e7ec      	b.n	80097b8 <_malloc_r+0xa0>
 80097de:	4623      	mov	r3, r4
 80097e0:	6864      	ldr	r4, [r4, #4]
 80097e2:	e7b2      	b.n	800974a <_malloc_r+0x32>
 80097e4:	4634      	mov	r4, r6
 80097e6:	6876      	ldr	r6, [r6, #4]
 80097e8:	e7b9      	b.n	800975e <_malloc_r+0x46>
 80097ea:	230c      	movs	r3, #12
 80097ec:	603b      	str	r3, [r7, #0]
 80097ee:	4638      	mov	r0, r7
 80097f0:	f000 f84c 	bl	800988c <__malloc_unlock>
 80097f4:	e7a1      	b.n	800973a <_malloc_r+0x22>
 80097f6:	6025      	str	r5, [r4, #0]
 80097f8:	e7de      	b.n	80097b8 <_malloc_r+0xa0>
 80097fa:	bf00      	nop
 80097fc:	200020b8 	.word	0x200020b8

08009800 <_realloc_r>:
 8009800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009804:	4680      	mov	r8, r0
 8009806:	4614      	mov	r4, r2
 8009808:	460e      	mov	r6, r1
 800980a:	b921      	cbnz	r1, 8009816 <_realloc_r+0x16>
 800980c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009810:	4611      	mov	r1, r2
 8009812:	f7ff bf81 	b.w	8009718 <_malloc_r>
 8009816:	b92a      	cbnz	r2, 8009824 <_realloc_r+0x24>
 8009818:	f7ff ff12 	bl	8009640 <_free_r>
 800981c:	4625      	mov	r5, r4
 800981e:	4628      	mov	r0, r5
 8009820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009824:	f000 f838 	bl	8009898 <_malloc_usable_size_r>
 8009828:	4284      	cmp	r4, r0
 800982a:	4607      	mov	r7, r0
 800982c:	d802      	bhi.n	8009834 <_realloc_r+0x34>
 800982e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009832:	d812      	bhi.n	800985a <_realloc_r+0x5a>
 8009834:	4621      	mov	r1, r4
 8009836:	4640      	mov	r0, r8
 8009838:	f7ff ff6e 	bl	8009718 <_malloc_r>
 800983c:	4605      	mov	r5, r0
 800983e:	2800      	cmp	r0, #0
 8009840:	d0ed      	beq.n	800981e <_realloc_r+0x1e>
 8009842:	42bc      	cmp	r4, r7
 8009844:	4622      	mov	r2, r4
 8009846:	4631      	mov	r1, r6
 8009848:	bf28      	it	cs
 800984a:	463a      	movcs	r2, r7
 800984c:	f7ff fbb8 	bl	8008fc0 <memcpy>
 8009850:	4631      	mov	r1, r6
 8009852:	4640      	mov	r0, r8
 8009854:	f7ff fef4 	bl	8009640 <_free_r>
 8009858:	e7e1      	b.n	800981e <_realloc_r+0x1e>
 800985a:	4635      	mov	r5, r6
 800985c:	e7df      	b.n	800981e <_realloc_r+0x1e>
	...

08009860 <_sbrk_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4d06      	ldr	r5, [pc, #24]	; (800987c <_sbrk_r+0x1c>)
 8009864:	2300      	movs	r3, #0
 8009866:	4604      	mov	r4, r0
 8009868:	4608      	mov	r0, r1
 800986a:	602b      	str	r3, [r5, #0]
 800986c:	f7f7 f958 	bl	8000b20 <_sbrk>
 8009870:	1c43      	adds	r3, r0, #1
 8009872:	d102      	bne.n	800987a <_sbrk_r+0x1a>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	b103      	cbz	r3, 800987a <_sbrk_r+0x1a>
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	bd38      	pop	{r3, r4, r5, pc}
 800987c:	200020c0 	.word	0x200020c0

08009880 <__malloc_lock>:
 8009880:	4801      	ldr	r0, [pc, #4]	; (8009888 <__malloc_lock+0x8>)
 8009882:	f000 b811 	b.w	80098a8 <__retarget_lock_acquire_recursive>
 8009886:	bf00      	nop
 8009888:	200020c4 	.word	0x200020c4

0800988c <__malloc_unlock>:
 800988c:	4801      	ldr	r0, [pc, #4]	; (8009894 <__malloc_unlock+0x8>)
 800988e:	f000 b80c 	b.w	80098aa <__retarget_lock_release_recursive>
 8009892:	bf00      	nop
 8009894:	200020c4 	.word	0x200020c4

08009898 <_malloc_usable_size_r>:
 8009898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800989c:	1f18      	subs	r0, r3, #4
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bfbc      	itt	lt
 80098a2:	580b      	ldrlt	r3, [r1, r0]
 80098a4:	18c0      	addlt	r0, r0, r3
 80098a6:	4770      	bx	lr

080098a8 <__retarget_lock_acquire_recursive>:
 80098a8:	4770      	bx	lr

080098aa <__retarget_lock_release_recursive>:
 80098aa:	4770      	bx	lr

080098ac <_init>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr

080098b8 <_fini>:
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ba:	bf00      	nop
 80098bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098be:	bc08      	pop	{r3}
 80098c0:	469e      	mov	lr, r3
 80098c2:	4770      	bx	lr
