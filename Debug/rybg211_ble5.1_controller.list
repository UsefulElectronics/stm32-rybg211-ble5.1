
rybg211_ble5.1_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a44  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c38  08008c38  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008c38  08008c38  00018c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c40  08008c40  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c40  08008c40  00018c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c44  08008c44  00018c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f44  200000fc  08008d44  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002040  08008d44  00022040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132b9  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003200  00000000  00000000  000333e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000365e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00037418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e6e  00000000  00000000  00038110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130b7  00000000  00000000  00050f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c6e  00000000  00000000  00064035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edca3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000392c  00000000  00000000  000edcf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008bc4 	.word	0x08008bc4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008bc4 	.word	0x08008bc4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fac6 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f81e 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8d6 	bl	8000698 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f8ac 	bl	8000648 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 f880 	bl	80005f4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004f4:	f007 fe22 	bl	800813c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80004f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004fc:	4906      	ldr	r1, [pc, #24]	; (8000518 <main+0x3c>)
 80004fe:	4807      	ldr	r0, [pc, #28]	; (800051c <main+0x40>)
 8000500:	f003 f91f 	bl	8003742 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <main+0x44>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <main+0x44>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f022 0208 	bic.w	r2, r2, #8
 8000512:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x38>
 8000516:	bf00      	nop
 8000518:	20001f40 	.word	0x20001f40
 800051c:	20000118 	.word	0x20000118
 8000520:	2000015c 	.word	0x2000015c

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f008 fb3e 	bl	8008bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <SystemClock_Config+0xc8>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a26      	ldr	r2, [pc, #152]	; (80005ec <SystemClock_Config+0xc8>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <SystemClock_Config+0xc8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <SystemClock_Config+0xcc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <SystemClock_Config+0xcc>)
 800056e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000594:	230f      	movs	r3, #15
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000598:	2390      	movs	r3, #144	; 0x90
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800059c:	2304      	movs	r3, #4
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005a0:	2305      	movs	r3, #5
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fc25 	bl	8002df8 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b4:	f000 f8ea 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	2101      	movs	r1, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fe87 	bl	80032e8 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005e0:	f000 f8d4 	bl	800078c <Error_Handler>
  }
}
 80005e4:	bf00      	nop
 80005e6:	3750      	adds	r7, #80	; 0x50
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_USART1_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000600:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800062c:	f003 f83c 	bl	80036a8 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000636:	f000 f8a9 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000118 	.word	0x20000118
 8000644:	40011000 	.word	0x40011000

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_DMA_Init+0x4c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <MX_DMA_Init+0x4c>)
 8000658:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_DMA_Init+0x4c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	203a      	movs	r0, #58	; 0x3a
 8000670:	f000 fb6f 	bl	8000d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000674:	203a      	movs	r0, #58	; 0x3a
 8000676:	f000 fb88 	bl	8000d8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2046      	movs	r0, #70	; 0x46
 8000680:	f000 fb67 	bl	8000d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000684:	2046      	movs	r0, #70	; 0x46
 8000686:	f000 fb80 	bl	8000d8a <HAL_NVIC_EnableIRQ>

}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <MX_GPIO_Init+0x9c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <MX_GPIO_Init+0x9c>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_GPIO_Init+0x9c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_GPIO_Init+0x9c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a18      	ldr	r2, [pc, #96]	; (8000734 <MX_GPIO_Init+0x9c>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_GPIO_Init+0x9c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_GPIO_Init+0x9c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a11      	ldr	r2, [pc, #68]	; (8000734 <MX_GPIO_Init+0x9c>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_GPIO_Init+0x9c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f244 01e0 	movw	r1, #16608	; 0x40e0
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <MX_GPIO_Init+0xa0>)
 800070a:	f001 f8df 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODULE_RESET_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800070e:	f244 03e0 	movw	r3, #16608	; 0x40e0
 8000712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4619      	mov	r1, r3
 8000726:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_GPIO_Init+0xa0>)
 8000728:	f000 ff4c 	bl	80015c4 <HAL_GPIO_Init>

}
 800072c:	bf00      	nop
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40020400 	.word	0x40020400

0800073c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	807b      	strh	r3, [r7, #2]
	hBleModule.controlFlags.flag.packetReceived = ENABLE;
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <HAL_UARTEx_RxEventCallback+0x40>)
 800074a:	7813      	ldrb	r3, [r2, #0]
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	7013      	strb	r3, [r2, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 8000752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000756:	490a      	ldr	r1, [pc, #40]	; (8000780 <HAL_UARTEx_RxEventCallback+0x44>)
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <HAL_UARTEx_RxEventCallback+0x48>)
 800075a:	f002 fff2 	bl	8003742 <HAL_UARTEx_ReceiveToIdle_DMA>

	hBleModule.rxPacketSize = Size;
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_UARTEx_RxEventCallback+0x40>)
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	8093      	strh	r3, [r2, #4]

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <HAL_UARTEx_RxEventCallback+0x4c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0208 	bic.w	r2, r2, #8
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20001e2c 	.word	0x20001e2c
 8000780:	20001f40 	.word	0x20001f40
 8000784:	20000118 	.word	0x20000118
 8000788:	2000015c 	.word	0x2000015c

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ac:	6453      	str	r3, [r2, #68]	; 0x44
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a4c      	ldr	r2, [pc, #304]	; (8000938 <HAL_UART_MspInit+0x150>)
 8000806:	4293      	cmp	r3, r2
 8000808:	f040 8091 	bne.w	800092e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	4b4a      	ldr	r3, [pc, #296]	; (800093c <HAL_UART_MspInit+0x154>)
 8000812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000814:	4a49      	ldr	r2, [pc, #292]	; (800093c <HAL_UART_MspInit+0x154>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6453      	str	r3, [r2, #68]	; 0x44
 800081c:	4b47      	ldr	r3, [pc, #284]	; (800093c <HAL_UART_MspInit+0x154>)
 800081e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000820:	f003 0310 	and.w	r3, r3, #16
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	4b43      	ldr	r3, [pc, #268]	; (800093c <HAL_UART_MspInit+0x154>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	4a42      	ldr	r2, [pc, #264]	; (800093c <HAL_UART_MspInit+0x154>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6313      	str	r3, [r2, #48]	; 0x30
 8000838:	4b40      	ldr	r3, [pc, #256]	; (800093c <HAL_UART_MspInit+0x154>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000844:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000856:	2307      	movs	r3, #7
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4837      	ldr	r0, [pc, #220]	; (8000940 <HAL_UART_MspInit+0x158>)
 8000862:	f000 feaf 	bl	80015c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000866:	4b37      	ldr	r3, [pc, #220]	; (8000944 <HAL_UART_MspInit+0x15c>)
 8000868:	4a37      	ldr	r2, [pc, #220]	; (8000948 <HAL_UART_MspInit+0x160>)
 800086a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800086c:	4b35      	ldr	r3, [pc, #212]	; (8000944 <HAL_UART_MspInit+0x15c>)
 800086e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000872:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <HAL_UART_MspInit+0x15c>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800087a:	4b32      	ldr	r3, [pc, #200]	; (8000944 <HAL_UART_MspInit+0x15c>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000880:	4b30      	ldr	r3, [pc, #192]	; (8000944 <HAL_UART_MspInit+0x15c>)
 8000882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000886:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000888:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <HAL_UART_MspInit+0x15c>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <HAL_UART_MspInit+0x15c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <HAL_UART_MspInit+0x15c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <HAL_UART_MspInit+0x15c>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <HAL_UART_MspInit+0x15c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008a6:	4827      	ldr	r0, [pc, #156]	; (8000944 <HAL_UART_MspInit+0x15c>)
 80008a8:	f000 fa8a 	bl	8000dc0 <HAL_DMA_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80008b2:	f7ff ff6b 	bl	800078c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a22      	ldr	r2, [pc, #136]	; (8000944 <HAL_UART_MspInit+0x15c>)
 80008ba:	639a      	str	r2, [r3, #56]	; 0x38
 80008bc:	4a21      	ldr	r2, [pc, #132]	; (8000944 <HAL_UART_MspInit+0x15c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80008c2:	4b22      	ldr	r3, [pc, #136]	; (800094c <HAL_UART_MspInit+0x164>)
 80008c4:	4a22      	ldr	r2, [pc, #136]	; (8000950 <HAL_UART_MspInit+0x168>)
 80008c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <HAL_UART_MspInit+0x164>)
 80008ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <HAL_UART_MspInit+0x164>)
 80008d2:	2240      	movs	r2, #64	; 0x40
 80008d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <HAL_UART_MspInit+0x164>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <HAL_UART_MspInit+0x164>)
 80008de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_UART_MspInit+0x164>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_UART_MspInit+0x164>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_UART_MspInit+0x164>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_UART_MspInit+0x164>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <HAL_UART_MspInit+0x164>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000902:	4812      	ldr	r0, [pc, #72]	; (800094c <HAL_UART_MspInit+0x164>)
 8000904:	f000 fa5c 	bl	8000dc0 <HAL_DMA_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800090e:	f7ff ff3d 	bl	800078c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <HAL_UART_MspInit+0x164>)
 8000916:	635a      	str	r2, [r3, #52]	; 0x34
 8000918:	4a0c      	ldr	r2, [pc, #48]	; (800094c <HAL_UART_MspInit+0x164>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2025      	movs	r0, #37	; 0x25
 8000924:	f000 fa15 	bl	8000d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000928:	2025      	movs	r0, #37	; 0x25
 800092a:	f000 fa2e 	bl	8000d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40011000 	.word	0x40011000
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000
 8000944:	2000015c 	.word	0x2000015c
 8000948:	40026440 	.word	0x40026440
 800094c:	200001bc 	.word	0x200001bc
 8000950:	400264b8 	.word	0x400264b8

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f8b8 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <USART1_IRQHandler+0x10>)
 80009ae:	f002 ff2d 	bl	800380c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000118 	.word	0x20000118

080009bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <DMA2_Stream2_IRQHandler+0x10>)
 80009c2:	f000 fb95 	bl	80010f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000015c 	.word	0x2000015c

080009d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <OTG_FS_IRQHandler+0x10>)
 80009d6:	f001 f8e2 	bl	8001b9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20001700 	.word	0x20001700

080009e4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <DMA2_Stream7_IRQHandler+0x10>)
 80009ea:	f000 fb81 	bl	80010f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200001bc 	.word	0x200001bc

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a22:	490e      	ldr	r1, [pc, #56]	; (8000a5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a38:	4c0b      	ldr	r4, [pc, #44]	; (8000a68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a46:	f7ff ffd7 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f008 f88f 	bl	8008b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4e:	f7ff fd45 	bl	80004dc <main>
  bx  lr    
 8000a52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a60:	08008c48 	.word	0x08008c48
  ldr r2, =_sbss
 8000a64:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a68:	20002040 	.word	0x20002040

08000a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <HAL_Init+0x40>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_Init+0x40>)
 8000a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x40>)
 8000a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f94f 	bl	8000d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	200f      	movs	r0, #15
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff fe78 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f967 	bl	8000da6 <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 f92f 	bl	8000d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000004 	.word	0x20000004

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	2000021c 	.word	0x2000021c

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2000021c 	.word	0x2000021c

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff ffee 	bl	8000b3c <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffde 	bl	8000b3c <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db0b      	blt.n	8000c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 021f 	and.w	r2, r3, #31
 8000c18:	4907      	ldr	r1, [pc, #28]	; (8000c38 <__NVIC_EnableIRQ+0x38>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	2001      	movs	r0, #1
 8000c22:	fa00 f202 	lsl.w	r2, r0, r2
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	; (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
         );
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	; 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d08:	d301      	bcc.n	8000d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00f      	b.n	8000d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <SysTick_Config+0x40>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d16:	210f      	movs	r1, #15
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f7ff ff8e 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <SysTick_Config+0x40>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SysTick_Config+0x40>)
 8000d28:	2207      	movs	r2, #7
 8000d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	e000e010 	.word	0xe000e010

08000d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff29 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff3e 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ff8e 	bl	8000c90 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff5d 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff31 	bl	8000c00 <__NVIC_EnableIRQ>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffa2 	bl	8000cf8 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff feb6 	bl	8000b3c <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e099      	b.n	8000f10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2202      	movs	r2, #2
 8000de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0201 	bic.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dfc:	e00f      	b.n	8000e1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dfe:	f7ff fe9d 	bl	8000b3c <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b05      	cmp	r3, #5
 8000e0a:	d908      	bls.n	8000e1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2220      	movs	r2, #32
 8000e10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2203      	movs	r2, #3
 8000e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e078      	b.n	8000f10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1e8      	bne.n	8000dfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <HAL_DMA_Init+0x158>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d107      	bne.n	8000e88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4313      	orrs	r3, r2
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f023 0307 	bic.w	r3, r3, #7
 8000e9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	d117      	bne.n	8000ee2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00e      	beq.n	8000ee2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 fb01 	bl	80014cc <DMA_CheckFifoParam>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d008      	beq.n	8000ee2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2240      	movs	r2, #64	; 0x40
 8000ed4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e016      	b.n	8000f10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 fab8 	bl	8001460 <DMA_CalcBaseAndBitshift>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef8:	223f      	movs	r2, #63	; 0x3f
 8000efa:	409a      	lsls	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	f010803f 	.word	0xf010803f

08000f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d101      	bne.n	8000f42 <HAL_DMA_Start_IT+0x26>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e040      	b.n	8000fc4 <HAL_DMA_Start_IT+0xa8>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d12f      	bne.n	8000fb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2200      	movs	r2, #0
 8000f62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f000 fa4a 	bl	8001404 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f74:	223f      	movs	r2, #63	; 0x3f
 8000f76:	409a      	lsls	r2, r3
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0216 	orr.w	r2, r2, #22
 8000f8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d007      	beq.n	8000fa4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0208 	orr.w	r2, r2, #8
 8000fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0201 	orr.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e005      	b.n	8000fc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fda:	f7ff fdaf 	bl	8000b3c <HAL_GetTick>
 8000fde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d008      	beq.n	8000ffe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e052      	b.n	80010a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0216 	bic.w	r2, r2, #22
 800100c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	695a      	ldr	r2, [r3, #20]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800101c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	2b00      	cmp	r3, #0
 8001024:	d103      	bne.n	800102e <HAL_DMA_Abort+0x62>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0208 	bic.w	r2, r2, #8
 800103c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 0201 	bic.w	r2, r2, #1
 800104c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800104e:	e013      	b.n	8001078 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001050:	f7ff fd74 	bl	8000b3c <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b05      	cmp	r3, #5
 800105c:	d90c      	bls.n	8001078 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2220      	movs	r2, #32
 8001062:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e015      	b.n	80010a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1e4      	bne.n	8001050 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108a:	223f      	movs	r2, #63	; 0x3f
 800108c:	409a      	lsls	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d004      	beq.n	80010ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00c      	b.n	80010e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2205      	movs	r2, #5
 80010ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010fc:	4b8e      	ldr	r3, [pc, #568]	; (8001338 <HAL_DMA_IRQHandler+0x248>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a8e      	ldr	r2, [pc, #568]	; (800133c <HAL_DMA_IRQHandler+0x24c>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0a9b      	lsrs	r3, r3, #10
 8001108:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111a:	2208      	movs	r2, #8
 800111c:	409a      	lsls	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d01a      	beq.n	800115c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0204 	bic.w	r2, r2, #4
 8001142:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001148:	2208      	movs	r2, #8
 800114a:	409a      	lsls	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001154:	f043 0201 	orr.w	r2, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001160:	2201      	movs	r2, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d012      	beq.n	8001192 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00b      	beq.n	8001192 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117e:	2201      	movs	r2, #1
 8001180:	409a      	lsls	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118a:	f043 0202 	orr.w	r2, r3, #2
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001196:	2204      	movs	r2, #4
 8001198:	409a      	lsls	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d012      	beq.n	80011c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00b      	beq.n	80011c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b4:	2204      	movs	r2, #4
 80011b6:	409a      	lsls	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c0:	f043 0204 	orr.w	r2, r3, #4
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011cc:	2210      	movs	r2, #16
 80011ce:	409a      	lsls	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d043      	beq.n	8001260 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d03c      	beq.n	8001260 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ea:	2210      	movs	r2, #16
 80011ec:	409a      	lsls	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d018      	beq.n	8001232 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d108      	bne.n	8001220 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	2b00      	cmp	r3, #0
 8001214:	d024      	beq.n	8001260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
 800121e:	e01f      	b.n	8001260 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001224:	2b00      	cmp	r3, #0
 8001226:	d01b      	beq.n	8001260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	4798      	blx	r3
 8001230:	e016      	b.n	8001260 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123c:	2b00      	cmp	r3, #0
 800123e:	d107      	bne.n	8001250 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0208 	bic.w	r2, r2, #8
 800124e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	2220      	movs	r2, #32
 8001266:	409a      	lsls	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 808f 	beq.w	8001390 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 8087 	beq.w	8001390 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001286:	2220      	movs	r2, #32
 8001288:	409a      	lsls	r2, r3
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b05      	cmp	r3, #5
 8001298:	d136      	bne.n	8001308 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0216 	bic.w	r2, r2, #22
 80012a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	695a      	ldr	r2, [r3, #20]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <HAL_DMA_IRQHandler+0x1da>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0208 	bic.w	r2, r2, #8
 80012d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	223f      	movs	r2, #63	; 0x3f
 80012e0:	409a      	lsls	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d07e      	beq.n	80013fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4798      	blx	r3
        }
        return;
 8001306:	e079      	b.n	80013fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01d      	beq.n	8001352 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10d      	bne.n	8001340 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	2b00      	cmp	r3, #0
 800132a:	d031      	beq.n	8001390 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	4798      	blx	r3
 8001334:	e02c      	b.n	8001390 <HAL_DMA_IRQHandler+0x2a0>
 8001336:	bf00      	nop
 8001338:	20000000 	.word	0x20000000
 800133c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001344:	2b00      	cmp	r3, #0
 8001346:	d023      	beq.n	8001390 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	4798      	blx	r3
 8001350:	e01e      	b.n	8001390 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10f      	bne.n	8001380 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0210 	bic.w	r2, r2, #16
 800136e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001394:	2b00      	cmp	r3, #0
 8001396:	d032      	beq.n	80013fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d022      	beq.n	80013ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2205      	movs	r2, #5
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	3301      	adds	r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d307      	bcc.n	80013d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f2      	bne.n	80013bc <HAL_DMA_IRQHandler+0x2cc>
 80013d6:	e000      	b.n	80013da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	4798      	blx	r3
 80013fa:	e000      	b.n	80013fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80013fc:	bf00      	nop
    }
  }
}
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001420:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b40      	cmp	r3, #64	; 0x40
 8001430:	d108      	bne.n	8001444 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001442:	e007      	b.n	8001454 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	60da      	str	r2, [r3, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	3b10      	subs	r3, #16
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <DMA_CalcBaseAndBitshift+0x68>)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d909      	bls.n	80014a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001496:	f023 0303 	bic.w	r3, r3, #3
 800149a:	1d1a      	adds	r2, r3, #4
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	659a      	str	r2, [r3, #88]	; 0x58
 80014a0:	e007      	b.n	80014b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014aa:	f023 0303 	bic.w	r3, r3, #3
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	aaaaaaab 	.word	0xaaaaaaab
 80014c8:	08008c30 	.word	0x08008c30

080014cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d11f      	bne.n	8001526 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d856      	bhi.n	800159a <DMA_CheckFifoParam+0xce>
 80014ec:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <DMA_CheckFifoParam+0x28>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	08001505 	.word	0x08001505
 80014f8:	08001517 	.word	0x08001517
 80014fc:	08001505 	.word	0x08001505
 8001500:	0800159b 	.word	0x0800159b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d046      	beq.n	800159e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001514:	e043      	b.n	800159e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800151e:	d140      	bne.n	80015a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001524:	e03d      	b.n	80015a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800152e:	d121      	bne.n	8001574 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d837      	bhi.n	80015a6 <DMA_CheckFifoParam+0xda>
 8001536:	a201      	add	r2, pc, #4	; (adr r2, 800153c <DMA_CheckFifoParam+0x70>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	0800154d 	.word	0x0800154d
 8001540:	08001553 	.word	0x08001553
 8001544:	0800154d 	.word	0x0800154d
 8001548:	08001565 	.word	0x08001565
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
      break;
 8001550:	e030      	b.n	80015b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d025      	beq.n	80015aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001562:	e022      	b.n	80015aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800156c:	d11f      	bne.n	80015ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001572:	e01c      	b.n	80015ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d903      	bls.n	8001582 <DMA_CheckFifoParam+0xb6>
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d003      	beq.n	8001588 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001580:	e018      	b.n	80015b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
      break;
 8001586:	e015      	b.n	80015b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00e      	beq.n	80015b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
      break;
 8001598:	e00b      	b.n	80015b2 <DMA_CheckFifoParam+0xe6>
      break;
 800159a:	bf00      	nop
 800159c:	e00a      	b.n	80015b4 <DMA_CheckFifoParam+0xe8>
      break;
 800159e:	bf00      	nop
 80015a0:	e008      	b.n	80015b4 <DMA_CheckFifoParam+0xe8>
      break;
 80015a2:	bf00      	nop
 80015a4:	e006      	b.n	80015b4 <DMA_CheckFifoParam+0xe8>
      break;
 80015a6:	bf00      	nop
 80015a8:	e004      	b.n	80015b4 <DMA_CheckFifoParam+0xe8>
      break;
 80015aa:	bf00      	nop
 80015ac:	e002      	b.n	80015b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80015ae:	bf00      	nop
 80015b0:	e000      	b.n	80015b4 <DMA_CheckFifoParam+0xe8>
      break;
 80015b2:	bf00      	nop
    }
  } 
  
  return status; 
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	e159      	b.n	8001894 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 8148 	bne.w	800188e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d005      	beq.n	8001616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001612:	2b02      	cmp	r3, #2
 8001614:	d130      	bne.n	8001678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 0201 	and.w	r2, r3, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b03      	cmp	r3, #3
 8001682:	d017      	beq.n	80016b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d123      	bne.n	8001708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	69b9      	ldr	r1, [r7, #24]
 8001704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80a2 	beq.w	800188e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b57      	ldr	r3, [pc, #348]	; (80018ac <HAL_GPIO_Init+0x2e8>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a56      	ldr	r2, [pc, #344]	; (80018ac <HAL_GPIO_Init+0x2e8>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b54      	ldr	r3, [pc, #336]	; (80018ac <HAL_GPIO_Init+0x2e8>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001766:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_GPIO_Init+0x2ec>)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a49      	ldr	r2, [pc, #292]	; (80018b4 <HAL_GPIO_Init+0x2f0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d019      	beq.n	80017c6 <HAL_GPIO_Init+0x202>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a48      	ldr	r2, [pc, #288]	; (80018b8 <HAL_GPIO_Init+0x2f4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x1fe>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a47      	ldr	r2, [pc, #284]	; (80018bc <HAL_GPIO_Init+0x2f8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x1fa>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a46      	ldr	r2, [pc, #280]	; (80018c0 <HAL_GPIO_Init+0x2fc>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x1f6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a45      	ldr	r2, [pc, #276]	; (80018c4 <HAL_GPIO_Init+0x300>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x1f2>
 80017b2:	2304      	movs	r3, #4
 80017b4:	e008      	b.n	80017c8 <HAL_GPIO_Init+0x204>
 80017b6:	2307      	movs	r3, #7
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x204>
 80017ba:	2303      	movs	r3, #3
 80017bc:	e004      	b.n	80017c8 <HAL_GPIO_Init+0x204>
 80017be:	2302      	movs	r3, #2
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_Init+0x204>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_GPIO_Init+0x204>
 80017c6:	2300      	movs	r3, #0
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f002 0203 	and.w	r2, r2, #3
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	4093      	lsls	r3, r2
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d8:	4935      	ldr	r1, [pc, #212]	; (80018b0 <HAL_GPIO_Init+0x2ec>)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e6:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <HAL_GPIO_Init+0x304>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800180a:	4a2f      	ldr	r2, [pc, #188]	; (80018c8 <HAL_GPIO_Init+0x304>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_GPIO_Init+0x304>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001834:	4a24      	ldr	r2, [pc, #144]	; (80018c8 <HAL_GPIO_Init+0x304>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_GPIO_Init+0x304>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800185e:	4a1a      	ldr	r2, [pc, #104]	; (80018c8 <HAL_GPIO_Init+0x304>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_GPIO_Init+0x304>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <HAL_GPIO_Init+0x304>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3301      	adds	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	2b0f      	cmp	r3, #15
 8001898:	f67f aea2 	bls.w	80015e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40013800 	.word	0x40013800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020400 	.word	0x40020400
 80018bc:	40020800 	.word	0x40020800
 80018c0:	40020c00 	.word	0x40020c00
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40013c00 	.word	0x40013c00

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	619a      	str	r2, [r3, #24]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001900:	b08f      	sub	sp, #60	; 0x3c
 8001902:	af0a      	add	r7, sp, #40	; 0x28
 8001904:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e10f      	b.n	8001b30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f006 fe14 	bl	8008558 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2203      	movs	r2, #3
 8001934:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 f8f3 	bl	8004b3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	687e      	ldr	r6, [r7, #4]
 800195c:	466d      	mov	r5, sp
 800195e:	f106 0410 	add.w	r4, r6, #16
 8001962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800196e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001972:	1d33      	adds	r3, r6, #4
 8001974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001976:	6838      	ldr	r0, [r7, #0]
 8001978:	f002 ffca 	bl	8004910 <USB_CoreInit>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2202      	movs	r2, #2
 8001986:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0d0      	b.n	8001b30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f003 f8e1 	bl	8004b5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e04a      	b.n	8001a36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	333d      	adds	r3, #61	; 0x3d
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	333c      	adds	r3, #60	; 0x3c
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	b298      	uxth	r0, r3
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	3344      	adds	r3, #68	; 0x44
 80019dc:	4602      	mov	r2, r0
 80019de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	3340      	adds	r3, #64	; 0x40
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	3348      	adds	r3, #72	; 0x48
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	334c      	adds	r3, #76	; 0x4c
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3354      	adds	r3, #84	; 0x54
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	3301      	adds	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d3af      	bcc.n	80019a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e044      	b.n	8001ad0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	3301      	adds	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d3b5      	bcc.n	8001a46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	687e      	ldr	r6, [r7, #4]
 8001ae2:	466d      	mov	r5, sp
 8001ae4:	f106 0410 	add.w	r4, r6, #16
 8001ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001af8:	1d33      	adds	r3, r6, #4
 8001afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001afc:	6838      	ldr	r0, [r7, #0]
 8001afe:	f003 f879 	bl	8004bf4 <USB_DevInit>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e00d      	b.n	8001b30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 f9c8 	bl	8005ebe <USB_DevDisconnect>

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_PCD_Start+0x1c>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e020      	b.n	8001b96 <HAL_PCD_Start+0x5e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d109      	bne.n	8001b78 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d005      	beq.n	8001b78 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 ffcb 	bl	8004b18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 f978 	bl	8005e7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b9e:	b590      	push	{r4, r7, lr}
 8001ba0:	b08d      	sub	sp, #52	; 0x34
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f004 fa36 	bl	8006026 <USB_GetMode>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 848a 	bne.w	80024d6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f004 f99a 	bl	8005f00 <USB_ReadInterrupts>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8480 	beq.w	80024d4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f004 f987 	bl	8005f00 <USB_ReadInterrupts>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d107      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f002 0202 	and.w	r2, r2, #2
 8001c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f004 f975 	bl	8005f00 <USB_ReadInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b10      	cmp	r3, #16
 8001c1e:	d161      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699a      	ldr	r2, [r3, #24]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0210 	bic.w	r2, r2, #16
 8001c2e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f003 020f 	and.w	r2, r3, #15
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	0c5b      	lsrs	r3, r3, #17
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d124      	bne.n	8001ca6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d035      	beq.n	8001cd4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	6a38      	ldr	r0, [r7, #32]
 8001c7c:	f003 ffac 	bl	8005bd8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c8c:	441a      	add	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	6a1a      	ldr	r2, [r3, #32]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c9e:	441a      	add	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	621a      	str	r2, [r3, #32]
 8001ca4:	e016      	b.n	8001cd4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	0c5b      	lsrs	r3, r3, #17
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d110      	bne.n	8001cd4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001cb8:	2208      	movs	r2, #8
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6a38      	ldr	r0, [r7, #32]
 8001cbe:	f003 ff8b 	bl	8005bd8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	6a1a      	ldr	r2, [r3, #32]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cce:	441a      	add	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0210 	orr.w	r2, r2, #16
 8001ce2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 f909 	bl	8005f00 <USB_ReadInterrupts>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cf8:	f040 80a7 	bne.w	8001e4a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f004 f90e 	bl	8005f26 <USB_ReadDevAllOutEpInterrupt>
 8001d0a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d0c:	e099      	b.n	8001e42 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 808e 	beq.w	8001e36 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 f932 	bl	8005f8e <USB_ReadDevOutEPInterrupt>
 8001d2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d42:	461a      	mov	r2, r3
 8001d44:	2301      	movs	r3, #1
 8001d46:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fec2 	bl	8002ad4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d66:	461a      	mov	r2, r3
 8001d68:	2308      	movs	r3, #8
 8001d6a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 ff98 	bl	8002ca4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d030      	beq.n	8001dfc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	d109      	bne.n	8001dba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	3304      	adds	r3, #4
 8001dce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	78db      	ldrb	r3, [r3, #3]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d108      	bne.n	8001dea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f006 fcb3 	bl	8008750 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df6:	461a      	mov	r2, r3
 8001df8:	2302      	movs	r3, #2
 8001dfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d008      	beq.n	8001e18 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e12:	461a      	mov	r2, r3
 8001e14:	2320      	movs	r3, #32
 8001e16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e34:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	3301      	adds	r3, #1
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	085b      	lsrs	r3, r3, #1
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f47f af62 	bne.w	8001d0e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 f856 	bl	8005f00 <USB_ReadInterrupts>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e5e:	f040 80db 	bne.w	8002018 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f004 f877 	bl	8005f5a <USB_ReadDevAllInEpInterrupt>
 8001e6c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e72:	e0cd      	b.n	8002010 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 80c2 	beq.w	8002004 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 f89d 	bl	8005fca <USB_ReadDevInEPInterrupt>
 8001e90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d057      	beq.n	8001f4c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69f9      	ldr	r1, [r7, #28]
 8001eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2301      	movs	r3, #1
 8001ed0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d132      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	334c      	adds	r3, #76	; 0x4c
 8001eea:	6819      	ldr	r1, [r3, #0]
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4403      	add	r3, r0
 8001efa:	3348      	adds	r3, #72	; 0x48
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4419      	add	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4403      	add	r3, r0
 8001f0e:	334c      	adds	r3, #76	; 0x4c
 8001f10:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d113      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x3a2>
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	3354      	adds	r3, #84	; 0x54
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d108      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	f004 f8a4 	bl	8006088 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f006 fb87 	bl	800865a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f62:	461a      	mov	r2, r3
 8001f64:	2308      	movs	r3, #8
 8001f66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2310      	movs	r3, #16
 8001f82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2340      	movs	r3, #64	; 0x40
 8001f9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d023      	beq.n	8001ff2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fac:	6a38      	ldr	r0, [r7, #32]
 8001fae:	f002 ff85 	bl	8004ebc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	3338      	adds	r3, #56	; 0x38
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	78db      	ldrb	r3, [r3, #3]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d108      	bne.n	8001fe0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f006 fbca 	bl	8008774 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fec:	461a      	mov	r2, r3
 8001fee:	2302      	movs	r3, #2
 8001ff0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fcdb 	bl	80029ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	3301      	adds	r3, #1
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	2b00      	cmp	r3, #0
 8002014:	f47f af2e 	bne.w	8001e74 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 ff6f 	bl	8005f00 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800202c:	d122      	bne.n	8002074 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002048:	2b01      	cmp	r3, #1
 800204a:	d108      	bne.n	800205e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002054:	2100      	movs	r1, #0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fec2 	bl	8002de0 <HAL_PCDEx_LPM_Callback>
 800205c:	e002      	b.n	8002064 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f006 fb68 	bl	8008734 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f003 ff41 	bl	8005f00 <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002088:	d112      	bne.n	80020b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f006 fb24 	bl	80086e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80020ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 ff23 	bl	8005f00 <USB_ReadInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c4:	f040 80b7 	bne.w	8002236 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2110      	movs	r1, #16
 80020e2:	4618      	mov	r0, r3
 80020e4:	f002 feea 	bl	8004ebc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ec:	e046      	b.n	800217c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80020ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020fa:	461a      	mov	r2, r3
 80020fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002100:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002112:	0151      	lsls	r1, r2, #5
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	440a      	add	r2, r1
 8002118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800211c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002120:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212e:	461a      	mov	r2, r3
 8002130:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002134:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002146:	0151      	lsls	r1, r2, #5
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	440a      	add	r2, r1
 800214c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002150:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002154:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002166:	0151      	lsls	r1, r2, #5
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	440a      	add	r2, r1
 800216c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002170:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002174:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002178:	3301      	adds	r3, #1
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002182:	429a      	cmp	r2, r3
 8002184:	d3b3      	bcc.n	80020ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002194:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002198:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d016      	beq.n	80021d0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021b2:	f043 030b 	orr.w	r3, r3, #11
 80021b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c8:	f043 030b 	orr.w	r3, r3, #11
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	e015      	b.n	80021fc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80021e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021f6:	f043 030b 	orr.w	r3, r3, #11
 80021fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800220a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800220e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002220:	461a      	mov	r2, r3
 8002222:	f003 ff31 	bl	8006088 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002234:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f003 fe60 	bl	8005f00 <USB_ReadInterrupts>
 8002240:	4603      	mov	r3, r0
 8002242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800224a:	d124      	bne.n	8002296 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f003 fef6 	bl	8006042 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f002 feab 	bl	8004fb6 <USB_GetDevSpeed>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681c      	ldr	r4, [r3, #0]
 800226c:	f001 f9e8 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8002270:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	4620      	mov	r0, r4
 800227c:	f002 fbaa 	bl	80049d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f006 fa12 	bl	80086aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002294:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f003 fe30 	bl	8005f00 <USB_ReadInterrupts>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d10a      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f006 f9ef 	bl	800868e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f002 0208 	and.w	r2, r2, #8
 80022be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fe1b 	bl	8005f00 <USB_ReadInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d122      	bne.n	800231a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022e0:	2301      	movs	r3, #1
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
 80022e4:	e014      	b.n	8002310 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d105      	bne.n	800230a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fb27 	bl	8002958 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	3301      	adds	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002316:	429a      	cmp	r2, r3
 8002318:	d3e5      	bcc.n	80022e6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fdee 	bl	8005f00 <USB_ReadInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800232e:	d13b      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002330:	2301      	movs	r3, #1
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
 8002334:	e02b      	b.n	800238e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	3340      	adds	r3, #64	; 0x40
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d115      	bne.n	8002388 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800235c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800235e:	2b00      	cmp	r3, #0
 8002360:	da12      	bge.n	8002388 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	333f      	adds	r3, #63	; 0x3f
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fae8 	bl	8002958 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	3301      	adds	r3, #1
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002394:	429a      	cmp	r2, r3
 8002396:	d3ce      	bcc.n	8002336 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80023a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fda7 	bl	8005f00 <USB_ReadInterrupts>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023bc:	d155      	bne.n	800246a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023be:	2301      	movs	r3, #1
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
 80023c2:	e045      	b.n	8002450 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d12e      	bne.n	800244a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80023ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	da2b      	bge.n	800244a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80023fe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002402:	429a      	cmp	r2, r3
 8002404:	d121      	bne.n	800244a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10a      	bne.n	800244a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002446:	6053      	str	r3, [r2, #4]
            break;
 8002448:	e007      	b.n	800245a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	3301      	adds	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	429a      	cmp	r2, r3
 8002458:	d3b4      	bcc.n	80023c4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f003 fd46 	bl	8005f00 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247e:	d10a      	bne.n	8002496 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f006 f989 	bl	8008798 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fd30 	bl	8005f00 <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d115      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f006 f979 	bl	80087b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	e000      	b.n	80024d6 <HAL_PCD_IRQHandler+0x938>
      return;
 80024d4:	bf00      	nop
    }
  }
}
 80024d6:	3734      	adds	r7, #52	; 0x34
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd90      	pop	{r4, r7, pc}

080024dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_PCD_SetAddress+0x1a>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e013      	b.n	800251e <HAL_PCD_SetAddress+0x42>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f003 fc8e 	bl	8005e30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	4608      	mov	r0, r1
 8002530:	4611      	mov	r1, r2
 8002532:	461a      	mov	r2, r3
 8002534:	4603      	mov	r3, r0
 8002536:	70fb      	strb	r3, [r7, #3]
 8002538:	460b      	mov	r3, r1
 800253a:	803b      	strh	r3, [r7, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002548:	2b00      	cmp	r3, #0
 800254a:	da0f      	bge.n	800256c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	f003 020f 	and.w	r2, r3, #15
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	3338      	adds	r3, #56	; 0x38
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	705a      	strb	r2, [r3, #1]
 800256a:	e00f      	b.n	800258c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	f003 020f 	and.w	r2, r3, #15
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	3304      	adds	r3, #4
 8002584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	b2da      	uxtb	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002598:	883a      	ldrh	r2, [r7, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	78ba      	ldrb	r2, [r7, #2]
 80025a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	785b      	ldrb	r3, [r3, #1]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025b6:	78bb      	ldrb	r3, [r7, #2]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d102      	bne.n	80025c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_PCD_EP_Open+0xaa>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e00e      	b.n	80025ee <HAL_PCD_EP_Open+0xc8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68f9      	ldr	r1, [r7, #12]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fd0e 	bl	8005000 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80025ec:	7afb      	ldrb	r3, [r7, #11]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002606:	2b00      	cmp	r3, #0
 8002608:	da0f      	bge.n	800262a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	f003 020f 	and.w	r2, r3, #15
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	3338      	adds	r3, #56	; 0x38
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	3304      	adds	r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	705a      	strb	r2, [r3, #1]
 8002628:	e00f      	b.n	800264a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	f003 020f 	and.w	r2, r3, #15
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	4413      	add	r3, r2
 8002640:	3304      	adds	r3, #4
 8002642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	b2da      	uxtb	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_PCD_EP_Close+0x6e>
 8002660:	2302      	movs	r3, #2
 8002662:	e00e      	b.n	8002682 <HAL_PCD_EP_Close+0x8c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68f9      	ldr	r1, [r7, #12]
 8002672:	4618      	mov	r0, r3
 8002674:	f002 fd4c 	bl	8005110 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	460b      	mov	r3, r1
 8002698:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800269a:	7afb      	ldrb	r3, [r7, #11]
 800269c:	f003 020f 	and.w	r2, r3, #15
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	3304      	adds	r3, #4
 80026b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2200      	movs	r2, #0
 80026c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2200      	movs	r2, #0
 80026ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026cc:	7afb      	ldrb	r3, [r7, #11]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d102      	bne.n	80026e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026e6:	7afb      	ldrb	r3, [r7, #11]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	6979      	ldr	r1, [r7, #20]
 80026fe:	f003 f82b 	bl	8005758 <USB_EP0StartXfer>
 8002702:	e008      	b.n	8002716 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	6979      	ldr	r1, [r7, #20]
 8002712:	f002 fdd9 	bl	80052c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	f003 020f 	and.w	r2, r3, #15
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	460b      	mov	r3, r1
 800275e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002760:	7afb      	ldrb	r3, [r7, #11]
 8002762:	f003 020f 	and.w	r2, r3, #15
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	3338      	adds	r3, #56	; 0x38
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	3304      	adds	r3, #4
 8002776:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2200      	movs	r2, #0
 8002788:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2201      	movs	r2, #1
 800278e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002790:	7afb      	ldrb	r3, [r7, #11]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	b2da      	uxtb	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d102      	bne.n	80027aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	6979      	ldr	r1, [r7, #20]
 80027c2:	f002 ffc9 	bl	8005758 <USB_EP0StartXfer>
 80027c6:	e008      	b.n	80027da <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	6979      	ldr	r1, [r7, #20]
 80027d6:	f002 fd77 	bl	80052c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	f003 020f 	and.w	r2, r3, #15
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d901      	bls.n	8002802 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e050      	b.n	80028a4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002806:	2b00      	cmp	r3, #0
 8002808:	da0f      	bge.n	800282a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	3338      	adds	r3, #56	; 0x38
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	3304      	adds	r3, #4
 8002820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	705a      	strb	r2, [r3, #1]
 8002828:	e00d      	b.n	8002846 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	3304      	adds	r3, #4
 800283e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	b2da      	uxtb	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_PCD_EP_SetStall+0x82>
 8002862:	2302      	movs	r3, #2
 8002864:	e01e      	b.n	80028a4 <HAL_PCD_EP_SetStall+0xc0>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68f9      	ldr	r1, [r7, #12]
 8002874:	4618      	mov	r0, r3
 8002876:	f003 fa07 	bl	8005c88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	b2d9      	uxtb	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002894:	461a      	mov	r2, r3
 8002896:	f003 fbf7 	bl	8006088 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	f003 020f 	and.w	r2, r3, #15
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d901      	bls.n	80028ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e042      	b.n	8002950 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da0f      	bge.n	80028f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 020f 	and.w	r2, r3, #15
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	3338      	adds	r3, #56	; 0x38
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	3304      	adds	r3, #4
 80028e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	705a      	strb	r2, [r3, #1]
 80028f0:	e00f      	b.n	8002912 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 020f 	and.w	r2, r3, #15
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	3304      	adds	r3, #4
 800290a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_PCD_EP_ClrStall+0x86>
 800292e:	2302      	movs	r3, #2
 8002930:	e00e      	b.n	8002950 <HAL_PCD_EP_ClrStall+0xa4>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	4618      	mov	r0, r3
 8002942:	f003 fa0f 	bl	8005d64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002968:	2b00      	cmp	r3, #0
 800296a:	da0c      	bge.n	8002986 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	3338      	adds	r3, #56	; 0x38
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	3304      	adds	r3, #4
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e00c      	b.n	80029a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 020f 	and.w	r2, r3, #15
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	3304      	adds	r3, #4
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68f9      	ldr	r1, [r7, #12]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 f82e 	bl	8005a08 <USB_EPStopXfer>
 80029ac:	4603      	mov	r3, r0
 80029ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029b0:	7afb      	ldrb	r3, [r7, #11]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b08a      	sub	sp, #40	; 0x28
 80029be:	af02      	add	r7, sp, #8
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3338      	adds	r3, #56	; 0x38
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a1a      	ldr	r2, [r3, #32]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d901      	bls.n	80029f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06c      	b.n	8002acc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d902      	bls.n	8002a0e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3303      	adds	r3, #3
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a16:	e02b      	b.n	8002a70 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d902      	bls.n	8002a34 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	3303      	adds	r3, #3
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6919      	ldr	r1, [r3, #16]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4603      	mov	r3, r0
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f003 f882 	bl	8005b5c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	441a      	add	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a1a      	ldr	r2, [r3, #32]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d809      	bhi.n	8002a9a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d203      	bcs.n	8002a9a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1be      	bne.n	8002a18 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d811      	bhi.n	8002aca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	2201      	movs	r2, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	6939      	ldr	r1, [r7, #16]
 8002ac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	333c      	adds	r3, #60	; 0x3c
 8002aec:	3304      	adds	r3, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d17b      	bne.n	8002c02 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	4a61      	ldr	r2, [pc, #388]	; (8002c9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	f240 80b9 	bls.w	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80b3 	beq.w	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b36:	461a      	mov	r2, r3
 8002b38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b3c:	6093      	str	r3, [r2, #8]
 8002b3e:	e0a7      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b56:	461a      	mov	r2, r3
 8002b58:	2320      	movs	r3, #32
 8002b5a:	6093      	str	r3, [r2, #8]
 8002b5c:	e098      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 8093 	bne.w	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	; (8002c9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d90f      	bls.n	8002b92 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b8e:	6093      	str	r3, [r2, #8]
 8002b90:	e07e      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	0159      	lsls	r1, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbe:	1ad2      	subs	r2, r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d114      	bne.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2101      	movs	r1, #1
 8002be0:	f003 fa52 	bl	8006088 <USB_EP0_OutStart>
 8002be4:	e006      	b.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	441a      	add	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f005 fd12 	bl	8008624 <HAL_PCD_DataOutStageCallback>
 8002c00:	e046      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d124      	bne.n	8002c54 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c20:	461a      	mov	r2, r3
 8002c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c26:	6093      	str	r3, [r2, #8]
 8002c28:	e032      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c40:	461a      	mov	r2, r3
 8002c42:	2320      	movs	r3, #32
 8002c44:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f005 fce9 	bl	8008624 <HAL_PCD_DataOutStageCallback>
 8002c52:	e01d      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d114      	bne.n	8002c84 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f003 fa02 	bl	8006088 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f005 fcca 	bl	8008624 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	4f54300a 	.word	0x4f54300a
 8002ca0:	4f54310a 	.word	0x4f54310a

08002ca4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	333c      	adds	r3, #60	; 0x3c
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <PCD_EP_OutSetupPacket_int+0x88>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d90e      	bls.n	8002cf8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cf6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f005 fc81 	bl	8008600 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d90c      	bls.n	8002d20 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d108      	bne.n	8002d20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	f003 f9b4 	bl	8006088 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	4f54300a 	.word	0x4f54300a

08002d30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d107      	bne.n	8002d5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d4e:	883b      	ldrh	r3, [r7, #0]
 8002d50:	0419      	lsls	r1, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d5c:	e028      	b.n	8002db0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4413      	add	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e00d      	b.n	8002d8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	3340      	adds	r3, #64	; 0x40
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	4413      	add	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d3ec      	bcc.n	8002d72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d98:	883b      	ldrh	r3, [r7, #0]
 8002d9a:	0418      	lsls	r0, r3, #16
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	4302      	orrs	r2, r0
 8002da8:	3340      	adds	r3, #64	; 0x40
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e267      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d075      	beq.n	8002f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e16:	4b88      	ldr	r3, [pc, #544]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d00c      	beq.n	8002e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e22:	4b85      	ldr	r3, [pc, #532]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d112      	bne.n	8002e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2e:	4b82      	ldr	r3, [pc, #520]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e3a:	d10b      	bne.n	8002e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	4b7e      	ldr	r3, [pc, #504]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d05b      	beq.n	8002f00 <HAL_RCC_OscConfig+0x108>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d157      	bne.n	8002f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e242      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCC_OscConfig+0x74>
 8002e5e:	4b76      	ldr	r3, [pc, #472]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a75      	ldr	r2, [pc, #468]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e01d      	b.n	8002ea8 <HAL_RCC_OscConfig+0xb0>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x98>
 8002e76:	4b70      	ldr	r3, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6f      	ldr	r2, [pc, #444]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b6d      	ldr	r3, [pc, #436]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a6c      	ldr	r2, [pc, #432]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCC_OscConfig+0xb0>
 8002e90:	4b69      	ldr	r3, [pc, #420]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a68      	ldr	r2, [pc, #416]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b66      	ldr	r3, [pc, #408]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a65      	ldr	r2, [pc, #404]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fd fe44 	bl	8000b3c <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fd fe40 	bl	8000b3c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e207      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b5b      	ldr	r3, [pc, #364]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xc0>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fd fe30 	bl	8000b3c <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fd fe2c 	bl	8000b3c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1f3      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	4b51      	ldr	r3, [pc, #324]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xe8>
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d063      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0e:	4b4a      	ldr	r3, [pc, #296]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d11c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f26:	4b44      	ldr	r3, [pc, #272]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCC_OscConfig+0x152>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1c7      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4937      	ldr	r1, [pc, #220]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	e03a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f68:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_OscConfig+0x244>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fd fde5 	bl	8000b3c <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f76:	f7fd fde1 	bl	8000b3c <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1a8      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b28      	ldr	r3, [pc, #160]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4925      	ldr	r1, [pc, #148]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_OscConfig+0x244>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fd fdc4 	bl	8000b3c <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fd fdc0 	bl	8000b3c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e187      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d036      	beq.n	8003050 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_RCC_OscConfig+0x248>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fd fda4 	bl	8000b3c <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fd fda0 	bl	8000b3c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e167      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 800300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x200>
 8003016:	e01b      	b.n	8003050 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_RCC_OscConfig+0x248>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7fd fd8d 	bl	8000b3c <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	e00e      	b.n	8003044 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003026:	f7fd fd89 	bl	8000b3c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d907      	bls.n	8003044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e150      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
 8003038:	40023800 	.word	0x40023800
 800303c:	42470000 	.word	0x42470000
 8003040:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ea      	bne.n	8003026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8097 	beq.w	800318c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003062:	4b81      	ldr	r3, [pc, #516]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	4b7d      	ldr	r3, [pc, #500]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a7c      	ldr	r2, [pc, #496]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b7a      	ldr	r3, [pc, #488]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308e:	4b77      	ldr	r3, [pc, #476]	; (800326c <HAL_RCC_OscConfig+0x474>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309a:	4b74      	ldr	r3, [pc, #464]	; (800326c <HAL_RCC_OscConfig+0x474>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a73      	ldr	r2, [pc, #460]	; (800326c <HAL_RCC_OscConfig+0x474>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7fd fd49 	bl	8000b3c <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7fd fd45 	bl	8000b3c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e10c      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <HAL_RCC_OscConfig+0x474>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x2ea>
 80030d4:	4b64      	ldr	r3, [pc, #400]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	4a63      	ldr	r2, [pc, #396]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6713      	str	r3, [r2, #112]	; 0x70
 80030e0:	e01c      	b.n	800311c <HAL_RCC_OscConfig+0x324>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b05      	cmp	r3, #5
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x30c>
 80030ea:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	4a5e      	ldr	r2, [pc, #376]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030f0:	f043 0304 	orr.w	r3, r3, #4
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
 80030f6:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a5b      	ldr	r2, [pc, #364]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0x324>
 8003104:	4b58      	ldr	r3, [pc, #352]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a57      	ldr	r2, [pc, #348]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
 8003110:	4b55      	ldr	r3, [pc, #340]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a54      	ldr	r2, [pc, #336]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003116:	f023 0304 	bic.w	r3, r3, #4
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fd fd0a 	bl	8000b3c <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7fd fd06 	bl	8000b3c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0cb      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ee      	beq.n	800312c <HAL_RCC_OscConfig+0x334>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003150:	f7fd fcf4 	bl	8000b3c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fd fcf0 	bl	8000b3c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0b5      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316e:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ee      	bne.n	8003158 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003180:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	4a38      	ldr	r2, [pc, #224]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80a1 	beq.w	80032d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003196:	4b34      	ldr	r3, [pc, #208]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d05c      	beq.n	800325c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d141      	bne.n	800322e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b31      	ldr	r3, [pc, #196]	; (8003270 <HAL_RCC_OscConfig+0x478>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fd fcc4 	bl	8000b3c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fd fcc0 	bl	8000b3c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e087      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	4b27      	ldr	r3, [pc, #156]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	019b      	lsls	r3, r3, #6
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	3b01      	subs	r3, #1
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	491b      	ldr	r1, [pc, #108]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_RCC_OscConfig+0x478>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003206:	f7fd fc99 	bl	8000b3c <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320e:	f7fd fc95 	bl	8000b3c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e05c      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x416>
 800322c:	e054      	b.n	80032d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_RCC_OscConfig+0x478>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fd fc82 	bl	8000b3c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323c:	f7fd fc7e 	bl	8000b3c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e045      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x444>
 800325a:	e03d      	b.n	80032d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d107      	bne.n	8003274 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e038      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
 8003268:	40023800 	.word	0x40023800
 800326c:	40007000 	.word	0x40007000
 8003270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x4ec>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d028      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d121      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d11a      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032a4:	4013      	ands	r3, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d111      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	3b01      	subs	r3, #1
 80032be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0cc      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b68      	ldr	r3, [pc, #416]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d90c      	bls.n	8003324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b65      	ldr	r3, [pc, #404]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b63      	ldr	r3, [pc, #396]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0b8      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800333c:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a58      	ldr	r2, [pc, #352]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003354:	4b53      	ldr	r3, [pc, #332]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a52      	ldr	r2, [pc, #328]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800335e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003360:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	494d      	ldr	r1, [pc, #308]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d044      	beq.n	8003408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b47      	ldr	r3, [pc, #284]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d119      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e07f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d003      	beq.n	80033a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b6:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e067      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c6:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f023 0203 	bic.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4934      	ldr	r1, [pc, #208]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d8:	f7fd fbb0 	bl	8000b3c <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7fd fbac 	bl	8000b3c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e04f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 020c 	and.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	429a      	cmp	r2, r3
 8003406:	d1eb      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d20c      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e032      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4916      	ldr	r1, [pc, #88]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345a:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	490e      	ldr	r1, [pc, #56]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800346e:	f000 f821 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8003472:	4602      	mov	r2, r0
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	490a      	ldr	r1, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	5ccb      	ldrb	r3, [r1, r3]
 8003482:	fa22 f303 	lsr.w	r3, r2, r3
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fb10 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023c00 	.word	0x40023c00
 80034a4:	40023800 	.word	0x40023800
 80034a8:	08008c18 	.word	0x08008c18
 80034ac:	20000000 	.word	0x20000000
 80034b0:	20000004 	.word	0x20000004

080034b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b8:	b090      	sub	sp, #64	; 0x40
 80034ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	637b      	str	r3, [r7, #52]	; 0x34
 80034c0:	2300      	movs	r3, #0
 80034c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c4:	2300      	movs	r3, #0
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034cc:	4b59      	ldr	r3, [pc, #356]	; (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d00d      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x40>
 80034d8:	2b08      	cmp	r3, #8
 80034da:	f200 80a1 	bhi.w	8003620 <HAL_RCC_GetSysClockFreq+0x16c>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x34>
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d003      	beq.n	80034ee <HAL_RCC_GetSysClockFreq+0x3a>
 80034e6:	e09b      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80034ec:	e09b      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ee:	4b53      	ldr	r3, [pc, #332]	; (800363c <HAL_RCC_GetSysClockFreq+0x188>)
 80034f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034f2:	e098      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f4:	4b4f      	ldr	r3, [pc, #316]	; (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fe:	4b4d      	ldr	r3, [pc, #308]	; (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d028      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	2200      	movs	r2, #0
 8003512:	623b      	str	r3, [r7, #32]
 8003514:	627a      	str	r2, [r7, #36]	; 0x24
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800351c:	2100      	movs	r1, #0
 800351e:	4b47      	ldr	r3, [pc, #284]	; (800363c <HAL_RCC_GetSysClockFreq+0x188>)
 8003520:	fb03 f201 	mul.w	r2, r3, r1
 8003524:	2300      	movs	r3, #0
 8003526:	fb00 f303 	mul.w	r3, r0, r3
 800352a:	4413      	add	r3, r2
 800352c:	4a43      	ldr	r2, [pc, #268]	; (800363c <HAL_RCC_GetSysClockFreq+0x188>)
 800352e:	fba0 1202 	umull	r1, r2, r0, r2
 8003532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003534:	460a      	mov	r2, r1
 8003536:	62ba      	str	r2, [r7, #40]	; 0x28
 8003538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800353a:	4413      	add	r3, r2
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800353e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003540:	2200      	movs	r2, #0
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	61fa      	str	r2, [r7, #28]
 8003546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800354a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800354e:	f7fc fe43 	bl	80001d8 <__aeabi_uldivmod>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4613      	mov	r3, r2
 8003558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800355a:	e053      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	2200      	movs	r2, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	617a      	str	r2, [r7, #20]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800356e:	f04f 0b00 	mov.w	fp, #0
 8003572:	4652      	mov	r2, sl
 8003574:	465b      	mov	r3, fp
 8003576:	f04f 0000 	mov.w	r0, #0
 800357a:	f04f 0100 	mov.w	r1, #0
 800357e:	0159      	lsls	r1, r3, #5
 8003580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003584:	0150      	lsls	r0, r2, #5
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	ebb2 080a 	subs.w	r8, r2, sl
 800358e:	eb63 090b 	sbc.w	r9, r3, fp
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800359e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035a6:	ebb2 0408 	subs.w	r4, r2, r8
 80035aa:	eb63 0509 	sbc.w	r5, r3, r9
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	00eb      	lsls	r3, r5, #3
 80035b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035bc:	00e2      	lsls	r2, r4, #3
 80035be:	4614      	mov	r4, r2
 80035c0:	461d      	mov	r5, r3
 80035c2:	eb14 030a 	adds.w	r3, r4, sl
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	eb45 030b 	adc.w	r3, r5, fp
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035da:	4629      	mov	r1, r5
 80035dc:	028b      	lsls	r3, r1, #10
 80035de:	4621      	mov	r1, r4
 80035e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035e4:	4621      	mov	r1, r4
 80035e6:	028a      	lsls	r2, r1, #10
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	2200      	movs	r2, #0
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	60fa      	str	r2, [r7, #12]
 80035f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f8:	f7fc fdee 	bl	80001d8 <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4613      	mov	r3, r2
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	3301      	adds	r3, #1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800361e:	e002      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetSysClockFreq+0x184>)
 8003622:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003628:	4618      	mov	r0, r3
 800362a:	3740      	adds	r7, #64	; 0x40
 800362c:	46bd      	mov	sp, r7
 800362e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	00f42400 	.word	0x00f42400
 800363c:	017d7840 	.word	0x017d7840

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <HAL_RCC_GetHCLKFreq+0x14>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000000 	.word	0x20000000

08003658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800365c:	f7ff fff0 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0a9b      	lsrs	r3, r3, #10
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	; (800367c <HAL_RCC_GetPCLK1Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	08008c28 	.word	0x08008c28

08003680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003684:	f7ff ffdc 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0b5b      	lsrs	r3, r3, #13
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4903      	ldr	r1, [pc, #12]	; (80036a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	08008c28 	.word	0x08008c28

080036a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e03f      	b.n	800373a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd f88a 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	; 0x24
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fe9b 	bl	8004428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b08c      	sub	sp, #48	; 0x30
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	4613      	mov	r3, r2
 800374e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b20      	cmp	r3, #32
 800375a:	d152      	bne.n	8003802 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e04b      	b.n	8003804 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003776:	2302      	movs	r3, #2
 8003778:	e044      	b.n	8003804 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	461a      	mov	r2, r3
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fbea 	bl	8003f68 <UART_Start_Receive_DMA>
 8003794:	4603      	mov	r3, r0
 8003796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800379a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d12c      	bne.n	80037fc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d125      	bne.n	80037f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	617b      	str	r3, [r7, #20]
   return(result);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f043 0310 	orr.w	r3, r3, #16
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e0:	627a      	str	r2, [r7, #36]	; 0x24
 80037e2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6a39      	ldr	r1, [r7, #32]
 80037e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80037f4:	e002      	b.n	80037fc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80037fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003800:	e000      	b.n	8003804 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003802:	2302      	movs	r3, #2
  }
}
 8003804:	4618      	mov	r0, r3
 8003806:	3730      	adds	r7, #48	; 0x30
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b0ba      	sub	sp, #232	; 0xe8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800383e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800384a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_UART_IRQHandler+0x66>
 800385e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fd21 	bl	80042b2 <UART_Receive_IT>
      return;
 8003870:	e256      	b.n	8003d20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80de 	beq.w	8003a38 <HAL_UART_IRQHandler+0x22c>
 800387c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d106      	bne.n	8003896 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800388c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80d1 	beq.w	8003a38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_UART_IRQHandler+0xae>
 80038a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <HAL_UART_IRQHandler+0xd2>
 80038c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f043 0202 	orr.w	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_UART_IRQHandler+0xf6>
 80038ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f043 0204 	orr.w	r2, r3, #4
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d011      	beq.n	8003932 <HAL_UART_IRQHandler+0x126>
 800390e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800391a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0208 	orr.w	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 81ed 	beq.w	8003d16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800393c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_UART_IRQHandler+0x14e>
 8003948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fcac 	bl	80042b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <HAL_UART_IRQHandler+0x17a>
 800397e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d04f      	beq.n	8003a26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fbb4 	bl	80040f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d141      	bne.n	8003a1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3314      	adds	r3, #20
 80039a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1d9      	bne.n	800399a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d013      	beq.n	8003a16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	4a7d      	ldr	r2, [pc, #500]	; (8003be8 <HAL_UART_IRQHandler+0x3dc>)
 80039f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fb56 	bl	80010ac <HAL_DMA_Abort_IT>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d016      	beq.n	8003a34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a10:	4610      	mov	r0, r2
 8003a12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a14:	e00e      	b.n	8003a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f9a4 	bl	8003d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1c:	e00a      	b.n	8003a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f9a0 	bl	8003d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	e006      	b.n	8003a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f99c 	bl	8003d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a32:	e170      	b.n	8003d16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	bf00      	nop
    return;
 8003a36:	e16e      	b.n	8003d16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	f040 814a 	bne.w	8003cd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8143 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 813c 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b40      	cmp	r3, #64	; 0x40
 8003a80:	f040 80b4 	bne.w	8003bec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8140 	beq.w	8003d1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	f080 8139 	bcs.w	8003d1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aba:	f000 8088 	beq.w	8003bce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003aea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1d9      	bne.n	8003abe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3314      	adds	r3, #20
 8003b10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3314      	adds	r3, #20
 8003b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e1      	bne.n	8003b0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3314      	adds	r3, #20
 8003b4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3314      	adds	r3, #20
 8003b66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e3      	bne.n	8003b46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b9e:	f023 0310 	bic.w	r3, r3, #16
 8003ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e3      	bne.n	8003b8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fd f9ff 	bl	8000fcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fc fdac 	bl	800073c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003be4:	e099      	b.n	8003d1a <HAL_UART_IRQHandler+0x50e>
 8003be6:	bf00      	nop
 8003be8:	080041bb 	.word	0x080041bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 808b 	beq.w	8003d1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8086 	beq.w	8003d1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	330c      	adds	r3, #12
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c36:	647a      	str	r2, [r7, #68]	; 0x44
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e3      	bne.n	8003c12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3314      	adds	r3, #20
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	623b      	str	r3, [r7, #32]
   return(result);
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3314      	adds	r3, #20
 8003c6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c6e:	633a      	str	r2, [r7, #48]	; 0x30
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e3      	bne.n	8003c4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	330c      	adds	r3, #12
 8003c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0310 	bic.w	r3, r3, #16
 8003ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	330c      	adds	r3, #12
 8003cb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cb4:	61fa      	str	r2, [r7, #28]
 8003cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	69b9      	ldr	r1, [r7, #24]
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e3      	bne.n	8003c90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ccc:	4619      	mov	r1, r3
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fc fd34 	bl	800073c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd4:	e023      	b.n	8003d1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x4ea>
 8003ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fa77 	bl	80041e2 <UART_Transmit_IT>
    return;
 8003cf4:	e014      	b.n	8003d20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00e      	beq.n	8003d20 <HAL_UART_IRQHandler+0x514>
 8003d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fab7 	bl	8004282 <UART_EndTransmit_IT>
    return;
 8003d14:	e004      	b.n	8003d20 <HAL_UART_IRQHandler+0x514>
    return;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <HAL_UART_IRQHandler+0x514>
      return;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <HAL_UART_IRQHandler+0x514>
      return;
 8003d1e:	bf00      	nop
  }
}
 8003d20:	37e8      	adds	r7, #232	; 0xe8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop

08003d28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b09c      	sub	sp, #112	; 0x70
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d172      	bne.n	8003e7a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d96:	2200      	movs	r2, #0
 8003d98:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dba:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dbc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e5      	bne.n	8003d9a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3314      	adds	r3, #20
 8003dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	667b      	str	r3, [r7, #100]	; 0x64
 8003de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3314      	adds	r3, #20
 8003dec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003dee:	647a      	str	r2, [r7, #68]	; 0x44
 8003df0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e5      	bne.n	8003dce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3314      	adds	r3, #20
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	623b      	str	r3, [r7, #32]
   return(result);
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e18:	663b      	str	r3, [r7, #96]	; 0x60
 8003e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3314      	adds	r3, #20
 8003e20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e22:	633a      	str	r2, [r7, #48]	; 0x30
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e5      	bne.n	8003e02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d119      	bne.n	8003e7a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f023 0310 	bic.w	r3, r3, #16
 8003e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e66:	61fa      	str	r2, [r7, #28]
 8003e68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	69b9      	ldr	r1, [r7, #24]
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	617b      	str	r3, [r7, #20]
   return(result);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e5      	bne.n	8003e46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d106      	bne.n	8003e90 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e86:	4619      	mov	r1, r3
 8003e88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e8a:	f7fc fc57 	bl	800073c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e8e:	e002      	b.n	8003e96 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003e90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e92:	f7ff ff53 	bl	8003d3c <HAL_UART_RxCpltCallback>
}
 8003e96:	bf00      	nop
 8003e98:	3770      	adds	r7, #112	; 0x70
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d108      	bne.n	8003ec6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eb8:	085b      	lsrs	r3, r3, #1
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7fc fc3c 	bl	800073c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ec4:	e002      	b.n	8003ecc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff ff42 	bl	8003d50 <HAL_UART_RxHalfCpltCallback>
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b21      	cmp	r3, #33	; 0x21
 8003f06:	d108      	bne.n	8003f1a <UART_DMAError+0x46>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2200      	movs	r2, #0
 8003f12:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f14:	68b8      	ldr	r0, [r7, #8]
 8003f16:	f000 f8c5 	bl	80040a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b22      	cmp	r3, #34	; 0x22
 8003f3a:	d108      	bne.n	8003f4e <UART_DMAError+0x7a>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2200      	movs	r2, #0
 8003f46:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f48:	68b8      	ldr	r0, [r7, #8]
 8003f4a:	f000 f8d3 	bl	80040f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0210 	orr.w	r2, r3, #16
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f5a:	68b8      	ldr	r0, [r7, #8]
 8003f5c:	f7ff ff02 	bl	8003d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b098      	sub	sp, #96	; 0x60
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	88fa      	ldrh	r2, [r7, #6]
 8003f80:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2222      	movs	r2, #34	; 0x22
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	4a40      	ldr	r2, [pc, #256]	; (8004098 <UART_Start_Receive_DMA+0x130>)
 8003f96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	4a3f      	ldr	r2, [pc, #252]	; (800409c <UART_Start_Receive_DMA+0x134>)
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	4a3e      	ldr	r2, [pc, #248]	; (80040a0 <UART_Start_Receive_DMA+0x138>)
 8003fa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	2200      	movs	r2, #0
 8003fae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003fb0:	f107 0308 	add.w	r3, r7, #8
 8003fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	f7fc ffa8 	bl	8000f1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d019      	beq.n	8004026 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	330c      	adds	r3, #12
 8003ff8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004008:	65bb      	str	r3, [r7, #88]	; 0x58
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004012:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004014:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e5      	bne.n	8003ff2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3314      	adds	r3, #20
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	657b      	str	r3, [r7, #84]	; 0x54
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3314      	adds	r3, #20
 8004044:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004046:	63ba      	str	r2, [r7, #56]	; 0x38
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800404c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e5      	bne.n	8004026 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3314      	adds	r3, #20
 8004060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	617b      	str	r3, [r7, #20]
   return(result);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004070:	653b      	str	r3, [r7, #80]	; 0x50
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800407a:	627a      	str	r2, [r7, #36]	; 0x24
 800407c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	6a39      	ldr	r1, [r7, #32]
 8004080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	61fb      	str	r3, [r7, #28]
   return(result);
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e5      	bne.n	800405a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3760      	adds	r7, #96	; 0x60
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	08003d79 	.word	0x08003d79
 800409c:	08003e9f 	.word	0x08003e9f
 80040a0:	08003ed5 	.word	0x08003ed5

080040a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	330c      	adds	r3, #12
 80040b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	61ba      	str	r2, [r7, #24]
 80040ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6979      	ldr	r1, [r7, #20]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	613b      	str	r3, [r7, #16]
   return(result);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e5      	bne.n	80040ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80040e8:	bf00      	nop
 80040ea:	3724      	adds	r7, #36	; 0x24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b095      	sub	sp, #84	; 0x54
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800411c:	643a      	str	r2, [r7, #64]	; 0x40
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e5      	bne.n	80040fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	64bb      	str	r3, [r7, #72]	; 0x48
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3314      	adds	r3, #20
 800414e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004150:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	2b01      	cmp	r3, #1
 800416a:	d119      	bne.n	80041a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	60bb      	str	r3, [r7, #8]
   return(result);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f023 0310 	bic.w	r3, r3, #16
 8004182:	647b      	str	r3, [r7, #68]	; 0x44
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800418c:	61ba      	str	r2, [r7, #24]
 800418e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6979      	ldr	r1, [r7, #20]
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	613b      	str	r3, [r7, #16]
   return(result);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041ae:	bf00      	nop
 80041b0:	3754      	adds	r7, #84	; 0x54
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff fdc5 	bl	8003d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b21      	cmp	r3, #33	; 0x21
 80041f4:	d13e      	bne.n	8004274 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fe:	d114      	bne.n	800422a <UART_Transmit_IT+0x48>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d110      	bne.n	800422a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800421c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	1c9a      	adds	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	621a      	str	r2, [r3, #32]
 8004228:	e008      	b.n	800423c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	1c59      	adds	r1, r3, #1
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6211      	str	r1, [r2, #32]
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29b      	uxth	r3, r3
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	4619      	mov	r1, r3
 800424a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10f      	bne.n	8004270 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800425e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800426e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004298:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff fd40 	bl	8003d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b08c      	sub	sp, #48	; 0x30
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b22      	cmp	r3, #34	; 0x22
 80042c4:	f040 80ab 	bne.w	800441e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d0:	d117      	bne.n	8004302 <UART_Receive_IT+0x50>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d113      	bne.n	8004302 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	1c9a      	adds	r2, r3, #2
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004300:	e026      	b.n	8004350 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004314:	d007      	beq.n	8004326 <UART_Receive_IT+0x74>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <UART_Receive_IT+0x82>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e008      	b.n	8004346 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004340:	b2da      	uxtb	r2, r3
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29b      	uxth	r3, r3
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	4619      	mov	r1, r3
 800435e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004360:	2b00      	cmp	r3, #0
 8004362:	d15a      	bne.n	800441a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0220 	bic.w	r2, r2, #32
 8004372:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0201 	bic.w	r2, r2, #1
 8004392:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d135      	bne.n	8004410 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f023 0310 	bic.w	r3, r3, #16
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	330c      	adds	r3, #12
 80043c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ca:	623a      	str	r2, [r7, #32]
 80043cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	69f9      	ldr	r1, [r7, #28]
 80043d0:	6a3a      	ldr	r2, [r7, #32]
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e5      	bne.n	80043aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d10a      	bne.n	8004402 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7fc f997 	bl	800073c <HAL_UARTEx_RxEventCallback>
 800440e:	e002      	b.n	8004416 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff fc93 	bl	8003d3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e002      	b.n	8004420 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e000      	b.n	8004420 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800441e:	2302      	movs	r3, #2
  }
}
 8004420:	4618      	mov	r0, r3
 8004422:	3730      	adds	r7, #48	; 0x30
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800442c:	b0c0      	sub	sp, #256	; 0x100
 800442e:	af00      	add	r7, sp, #0
 8004430:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	68d9      	ldr	r1, [r3, #12]
 8004446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	ea40 0301 	orr.w	r3, r0, r1
 8004450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	431a      	orrs	r2, r3
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	431a      	orrs	r2, r3
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004480:	f021 010c 	bic.w	r1, r1, #12
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800448e:	430b      	orrs	r3, r1
 8004490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a2:	6999      	ldr	r1, [r3, #24]
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	ea40 0301 	orr.w	r3, r0, r1
 80044ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b8f      	ldr	r3, [pc, #572]	; (80046f4 <UART_SetConfig+0x2cc>)
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d005      	beq.n	80044c8 <UART_SetConfig+0xa0>
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b8d      	ldr	r3, [pc, #564]	; (80046f8 <UART_SetConfig+0x2d0>)
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d104      	bne.n	80044d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044c8:	f7ff f8da 	bl	8003680 <HAL_RCC_GetPCLK2Freq>
 80044cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044d0:	e003      	b.n	80044da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044d2:	f7ff f8c1 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 80044d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e4:	f040 810c 	bne.w	8004700 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044fa:	4622      	mov	r2, r4
 80044fc:	462b      	mov	r3, r5
 80044fe:	1891      	adds	r1, r2, r2
 8004500:	65b9      	str	r1, [r7, #88]	; 0x58
 8004502:	415b      	adcs	r3, r3
 8004504:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800450a:	4621      	mov	r1, r4
 800450c:	eb12 0801 	adds.w	r8, r2, r1
 8004510:	4629      	mov	r1, r5
 8004512:	eb43 0901 	adc.w	r9, r3, r1
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800452a:	4690      	mov	r8, r2
 800452c:	4699      	mov	r9, r3
 800452e:	4623      	mov	r3, r4
 8004530:	eb18 0303 	adds.w	r3, r8, r3
 8004534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004538:	462b      	mov	r3, r5
 800453a:	eb49 0303 	adc.w	r3, r9, r3
 800453e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800454e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004556:	460b      	mov	r3, r1
 8004558:	18db      	adds	r3, r3, r3
 800455a:	653b      	str	r3, [r7, #80]	; 0x50
 800455c:	4613      	mov	r3, r2
 800455e:	eb42 0303 	adc.w	r3, r2, r3
 8004562:	657b      	str	r3, [r7, #84]	; 0x54
 8004564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800456c:	f7fb fe34 	bl	80001d8 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4b61      	ldr	r3, [pc, #388]	; (80046fc <UART_SetConfig+0x2d4>)
 8004576:	fba3 2302 	umull	r2, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	011c      	lsls	r4, r3, #4
 800457e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004582:	2200      	movs	r2, #0
 8004584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004588:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800458c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004590:	4642      	mov	r2, r8
 8004592:	464b      	mov	r3, r9
 8004594:	1891      	adds	r1, r2, r2
 8004596:	64b9      	str	r1, [r7, #72]	; 0x48
 8004598:	415b      	adcs	r3, r3
 800459a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800459c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045a0:	4641      	mov	r1, r8
 80045a2:	eb12 0a01 	adds.w	sl, r2, r1
 80045a6:	4649      	mov	r1, r9
 80045a8:	eb43 0b01 	adc.w	fp, r3, r1
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045c0:	4692      	mov	sl, r2
 80045c2:	469b      	mov	fp, r3
 80045c4:	4643      	mov	r3, r8
 80045c6:	eb1a 0303 	adds.w	r3, sl, r3
 80045ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ce:	464b      	mov	r3, r9
 80045d0:	eb4b 0303 	adc.w	r3, fp, r3
 80045d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045ec:	460b      	mov	r3, r1
 80045ee:	18db      	adds	r3, r3, r3
 80045f0:	643b      	str	r3, [r7, #64]	; 0x40
 80045f2:	4613      	mov	r3, r2
 80045f4:	eb42 0303 	adc.w	r3, r2, r3
 80045f8:	647b      	str	r3, [r7, #68]	; 0x44
 80045fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004602:	f7fb fde9 	bl	80001d8 <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4611      	mov	r1, r2
 800460c:	4b3b      	ldr	r3, [pc, #236]	; (80046fc <UART_SetConfig+0x2d4>)
 800460e:	fba3 2301 	umull	r2, r3, r3, r1
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2264      	movs	r2, #100	; 0x64
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	1acb      	subs	r3, r1, r3
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004622:	4b36      	ldr	r3, [pc, #216]	; (80046fc <UART_SetConfig+0x2d4>)
 8004624:	fba3 2302 	umull	r2, r3, r3, r2
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004630:	441c      	add	r4, r3
 8004632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800463c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004640:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004644:	4642      	mov	r2, r8
 8004646:	464b      	mov	r3, r9
 8004648:	1891      	adds	r1, r2, r2
 800464a:	63b9      	str	r1, [r7, #56]	; 0x38
 800464c:	415b      	adcs	r3, r3
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004654:	4641      	mov	r1, r8
 8004656:	1851      	adds	r1, r2, r1
 8004658:	6339      	str	r1, [r7, #48]	; 0x30
 800465a:	4649      	mov	r1, r9
 800465c:	414b      	adcs	r3, r1
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800466c:	4659      	mov	r1, fp
 800466e:	00cb      	lsls	r3, r1, #3
 8004670:	4651      	mov	r1, sl
 8004672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004676:	4651      	mov	r1, sl
 8004678:	00ca      	lsls	r2, r1, #3
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	4603      	mov	r3, r0
 8004680:	4642      	mov	r2, r8
 8004682:	189b      	adds	r3, r3, r2
 8004684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004688:	464b      	mov	r3, r9
 800468a:	460a      	mov	r2, r1
 800468c:	eb42 0303 	adc.w	r3, r2, r3
 8004690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046a8:	460b      	mov	r3, r1
 80046aa:	18db      	adds	r3, r3, r3
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ae:	4613      	mov	r3, r2
 80046b0:	eb42 0303 	adc.w	r3, r2, r3
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046be:	f7fb fd8b 	bl	80001d8 <__aeabi_uldivmod>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <UART_SetConfig+0x2d4>)
 80046c8:	fba3 1302 	umull	r1, r3, r3, r2
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	2164      	movs	r1, #100	; 0x64
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	3332      	adds	r3, #50	; 0x32
 80046da:	4a08      	ldr	r2, [pc, #32]	; (80046fc <UART_SetConfig+0x2d4>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	f003 0207 	and.w	r2, r3, #7
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4422      	add	r2, r4
 80046ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046f0:	e105      	b.n	80048fe <UART_SetConfig+0x4d6>
 80046f2:	bf00      	nop
 80046f4:	40011000 	.word	0x40011000
 80046f8:	40011400 	.word	0x40011400
 80046fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004704:	2200      	movs	r2, #0
 8004706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800470a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800470e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004712:	4642      	mov	r2, r8
 8004714:	464b      	mov	r3, r9
 8004716:	1891      	adds	r1, r2, r2
 8004718:	6239      	str	r1, [r7, #32]
 800471a:	415b      	adcs	r3, r3
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
 800471e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004722:	4641      	mov	r1, r8
 8004724:	1854      	adds	r4, r2, r1
 8004726:	4649      	mov	r1, r9
 8004728:	eb43 0501 	adc.w	r5, r3, r1
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	00eb      	lsls	r3, r5, #3
 8004736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800473a:	00e2      	lsls	r2, r4, #3
 800473c:	4614      	mov	r4, r2
 800473e:	461d      	mov	r5, r3
 8004740:	4643      	mov	r3, r8
 8004742:	18e3      	adds	r3, r4, r3
 8004744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004748:	464b      	mov	r3, r9
 800474a:	eb45 0303 	adc.w	r3, r5, r3
 800474e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800475e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800476e:	4629      	mov	r1, r5
 8004770:	008b      	lsls	r3, r1, #2
 8004772:	4621      	mov	r1, r4
 8004774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004778:	4621      	mov	r1, r4
 800477a:	008a      	lsls	r2, r1, #2
 800477c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004780:	f7fb fd2a 	bl	80001d8 <__aeabi_uldivmod>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4b60      	ldr	r3, [pc, #384]	; (800490c <UART_SetConfig+0x4e4>)
 800478a:	fba3 2302 	umull	r2, r3, r3, r2
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	011c      	lsls	r4, r3, #4
 8004792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004796:	2200      	movs	r2, #0
 8004798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800479c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047a4:	4642      	mov	r2, r8
 80047a6:	464b      	mov	r3, r9
 80047a8:	1891      	adds	r1, r2, r2
 80047aa:	61b9      	str	r1, [r7, #24]
 80047ac:	415b      	adcs	r3, r3
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047b4:	4641      	mov	r1, r8
 80047b6:	1851      	adds	r1, r2, r1
 80047b8:	6139      	str	r1, [r7, #16]
 80047ba:	4649      	mov	r1, r9
 80047bc:	414b      	adcs	r3, r1
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047cc:	4659      	mov	r1, fp
 80047ce:	00cb      	lsls	r3, r1, #3
 80047d0:	4651      	mov	r1, sl
 80047d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047d6:	4651      	mov	r1, sl
 80047d8:	00ca      	lsls	r2, r1, #3
 80047da:	4610      	mov	r0, r2
 80047dc:	4619      	mov	r1, r3
 80047de:	4603      	mov	r3, r0
 80047e0:	4642      	mov	r2, r8
 80047e2:	189b      	adds	r3, r3, r2
 80047e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047e8:	464b      	mov	r3, r9
 80047ea:	460a      	mov	r2, r1
 80047ec:	eb42 0303 	adc.w	r3, r2, r3
 80047f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80047fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800480c:	4649      	mov	r1, r9
 800480e:	008b      	lsls	r3, r1, #2
 8004810:	4641      	mov	r1, r8
 8004812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004816:	4641      	mov	r1, r8
 8004818:	008a      	lsls	r2, r1, #2
 800481a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800481e:	f7fb fcdb 	bl	80001d8 <__aeabi_uldivmod>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4b39      	ldr	r3, [pc, #228]	; (800490c <UART_SetConfig+0x4e4>)
 8004828:	fba3 1302 	umull	r1, r3, r3, r2
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	2164      	movs	r1, #100	; 0x64
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	3332      	adds	r3, #50	; 0x32
 800483a:	4a34      	ldr	r2, [pc, #208]	; (800490c <UART_SetConfig+0x4e4>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004846:	441c      	add	r4, r3
 8004848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800484c:	2200      	movs	r2, #0
 800484e:	673b      	str	r3, [r7, #112]	; 0x70
 8004850:	677a      	str	r2, [r7, #116]	; 0x74
 8004852:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004856:	4642      	mov	r2, r8
 8004858:	464b      	mov	r3, r9
 800485a:	1891      	adds	r1, r2, r2
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	415b      	adcs	r3, r3
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004866:	4641      	mov	r1, r8
 8004868:	1851      	adds	r1, r2, r1
 800486a:	6039      	str	r1, [r7, #0]
 800486c:	4649      	mov	r1, r9
 800486e:	414b      	adcs	r3, r1
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800487e:	4659      	mov	r1, fp
 8004880:	00cb      	lsls	r3, r1, #3
 8004882:	4651      	mov	r1, sl
 8004884:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004888:	4651      	mov	r1, sl
 800488a:	00ca      	lsls	r2, r1, #3
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	4603      	mov	r3, r0
 8004892:	4642      	mov	r2, r8
 8004894:	189b      	adds	r3, r3, r2
 8004896:	66bb      	str	r3, [r7, #104]	; 0x68
 8004898:	464b      	mov	r3, r9
 800489a:	460a      	mov	r2, r1
 800489c:	eb42 0303 	adc.w	r3, r2, r3
 80048a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	663b      	str	r3, [r7, #96]	; 0x60
 80048ac:	667a      	str	r2, [r7, #100]	; 0x64
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048ba:	4649      	mov	r1, r9
 80048bc:	008b      	lsls	r3, r1, #2
 80048be:	4641      	mov	r1, r8
 80048c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048c4:	4641      	mov	r1, r8
 80048c6:	008a      	lsls	r2, r1, #2
 80048c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048cc:	f7fb fc84 	bl	80001d8 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4b0d      	ldr	r3, [pc, #52]	; (800490c <UART_SetConfig+0x4e4>)
 80048d6:	fba3 1302 	umull	r1, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2164      	movs	r1, #100	; 0x64
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	3332      	adds	r3, #50	; 0x32
 80048e8:	4a08      	ldr	r2, [pc, #32]	; (800490c <UART_SetConfig+0x4e4>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	f003 020f 	and.w	r2, r3, #15
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4422      	add	r2, r4
 80048fc:	609a      	str	r2, [r3, #8]
}
 80048fe:	bf00      	nop
 8004900:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004904:	46bd      	mov	sp, r7
 8004906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800490a:	bf00      	nop
 800490c:	51eb851f 	.word	0x51eb851f

08004910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004910:	b084      	sub	sp, #16
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	f107 001c 	add.w	r0, r7, #28
 800491e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	2b01      	cmp	r3, #1
 8004926:	d122      	bne.n	800496e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800493c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d105      	bne.n	8004962 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 fbee 	bl	8006144 <USB_CoreReset>
 8004968:	4603      	mov	r3, r0
 800496a:	73fb      	strb	r3, [r7, #15]
 800496c:	e01a      	b.n	80049a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f001 fbe2 	bl	8006144 <USB_CoreReset>
 8004980:	4603      	mov	r3, r0
 8004982:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
 8004996:	e005      	b.n	80049a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d10b      	bne.n	80049c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f043 0206 	orr.w	r2, r3, #6
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049ce:	b004      	add	sp, #16
 80049d0:	4770      	bx	lr
	...

080049d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d165      	bne.n	8004ab4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4a41      	ldr	r2, [pc, #260]	; (8004af0 <USB_SetTurnaroundTime+0x11c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d906      	bls.n	80049fe <USB_SetTurnaroundTime+0x2a>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4a40      	ldr	r2, [pc, #256]	; (8004af4 <USB_SetTurnaroundTime+0x120>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d202      	bcs.n	80049fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049f8:	230f      	movs	r3, #15
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	e062      	b.n	8004ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4a3c      	ldr	r2, [pc, #240]	; (8004af4 <USB_SetTurnaroundTime+0x120>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d306      	bcc.n	8004a14 <USB_SetTurnaroundTime+0x40>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4a3b      	ldr	r2, [pc, #236]	; (8004af8 <USB_SetTurnaroundTime+0x124>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d202      	bcs.n	8004a14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a0e:	230e      	movs	r3, #14
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e057      	b.n	8004ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4a38      	ldr	r2, [pc, #224]	; (8004af8 <USB_SetTurnaroundTime+0x124>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d306      	bcc.n	8004a2a <USB_SetTurnaroundTime+0x56>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4a37      	ldr	r2, [pc, #220]	; (8004afc <USB_SetTurnaroundTime+0x128>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d202      	bcs.n	8004a2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a24:	230d      	movs	r3, #13
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	e04c      	b.n	8004ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4a33      	ldr	r2, [pc, #204]	; (8004afc <USB_SetTurnaroundTime+0x128>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d306      	bcc.n	8004a40 <USB_SetTurnaroundTime+0x6c>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4a32      	ldr	r2, [pc, #200]	; (8004b00 <USB_SetTurnaroundTime+0x12c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d802      	bhi.n	8004a40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a3a:	230c      	movs	r3, #12
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e041      	b.n	8004ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4a2f      	ldr	r2, [pc, #188]	; (8004b00 <USB_SetTurnaroundTime+0x12c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d906      	bls.n	8004a56 <USB_SetTurnaroundTime+0x82>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4a2e      	ldr	r2, [pc, #184]	; (8004b04 <USB_SetTurnaroundTime+0x130>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d802      	bhi.n	8004a56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a50:	230b      	movs	r3, #11
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e036      	b.n	8004ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <USB_SetTurnaroundTime+0x130>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d906      	bls.n	8004a6c <USB_SetTurnaroundTime+0x98>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4a29      	ldr	r2, [pc, #164]	; (8004b08 <USB_SetTurnaroundTime+0x134>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d802      	bhi.n	8004a6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a66:	230a      	movs	r3, #10
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	e02b      	b.n	8004ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4a26      	ldr	r2, [pc, #152]	; (8004b08 <USB_SetTurnaroundTime+0x134>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d906      	bls.n	8004a82 <USB_SetTurnaroundTime+0xae>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4a25      	ldr	r2, [pc, #148]	; (8004b0c <USB_SetTurnaroundTime+0x138>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d202      	bcs.n	8004a82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a7c:	2309      	movs	r3, #9
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e020      	b.n	8004ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4a21      	ldr	r2, [pc, #132]	; (8004b0c <USB_SetTurnaroundTime+0x138>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d306      	bcc.n	8004a98 <USB_SetTurnaroundTime+0xc4>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4a20      	ldr	r2, [pc, #128]	; (8004b10 <USB_SetTurnaroundTime+0x13c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d802      	bhi.n	8004a98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a92:	2308      	movs	r3, #8
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	e015      	b.n	8004ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4a1d      	ldr	r2, [pc, #116]	; (8004b10 <USB_SetTurnaroundTime+0x13c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d906      	bls.n	8004aae <USB_SetTurnaroundTime+0xda>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4a1c      	ldr	r2, [pc, #112]	; (8004b14 <USB_SetTurnaroundTime+0x140>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d202      	bcs.n	8004aae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004aa8:	2307      	movs	r3, #7
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e00a      	b.n	8004ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004aae:	2306      	movs	r3, #6
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e007      	b.n	8004ac4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004aba:	2309      	movs	r3, #9
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e001      	b.n	8004ac4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ac0:	2309      	movs	r3, #9
 8004ac2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	029b      	lsls	r3, r3, #10
 8004ad8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004adc:	431a      	orrs	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	00d8acbf 	.word	0x00d8acbf
 8004af4:	00e4e1c0 	.word	0x00e4e1c0
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	01067380 	.word	0x01067380
 8004b00:	011a499f 	.word	0x011a499f
 8004b04:	01312cff 	.word	0x01312cff
 8004b08:	014ca43f 	.word	0x014ca43f
 8004b0c:	016e3600 	.word	0x016e3600
 8004b10:	01a6ab1f 	.word	0x01a6ab1f
 8004b14:	01e84800 	.word	0x01e84800

08004b18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f043 0201 	orr.w	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f023 0201 	bic.w	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d115      	bne.n	8004baa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b8a:	2001      	movs	r0, #1
 8004b8c:	f7fb ffe2 	bl	8000b54 <HAL_Delay>
      ms++;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3301      	adds	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f001 fa45 	bl	8006026 <USB_GetMode>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d01e      	beq.n	8004be0 <USB_SetCurrentMode+0x84>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b31      	cmp	r3, #49	; 0x31
 8004ba6:	d9f0      	bls.n	8004b8a <USB_SetCurrentMode+0x2e>
 8004ba8:	e01a      	b.n	8004be0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d115      	bne.n	8004bdc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	f7fb ffc9 	bl	8000b54 <HAL_Delay>
      ms++;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f001 fa2c 	bl	8006026 <USB_GetMode>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <USB_SetCurrentMode+0x84>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b31      	cmp	r3, #49	; 0x31
 8004bd8:	d9f0      	bls.n	8004bbc <USB_SetCurrentMode+0x60>
 8004bda:	e001      	b.n	8004be0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e005      	b.n	8004bec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b32      	cmp	r3, #50	; 0x32
 8004be4:	d101      	bne.n	8004bea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b086      	sub	sp, #24
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	e009      	b.n	8004c28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	3340      	adds	r3, #64	; 0x40
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	2200      	movs	r2, #0
 8004c20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	3301      	adds	r3, #1
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b0e      	cmp	r3, #14
 8004c2c:	d9f2      	bls.n	8004c14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11c      	bne.n	8004c6e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c42:	f043 0302 	orr.w	r3, r3, #2
 8004c46:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c6c:	e00b      	b.n	8004c86 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c98:	4619      	mov	r1, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	680b      	ldr	r3, [r1, #0]
 8004ca4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d10c      	bne.n	8004cc6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f965 	bl	8004f84 <USB_SetDevSpeed>
 8004cba:	e008      	b.n	8004cce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f960 	bl	8004f84 <USB_SetDevSpeed>
 8004cc4:	e003      	b.n	8004cce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cc6:	2103      	movs	r1, #3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f95b 	bl	8004f84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cce:	2110      	movs	r1, #16
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f8f3 	bl	8004ebc <USB_FlushTxFifo>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f91f 	bl	8004f24 <USB_FlushRxFifo>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d02:	461a      	mov	r2, r3
 8004d04:	2300      	movs	r3, #0
 8004d06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2300      	movs	r3, #0
 8004d12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d14:	2300      	movs	r3, #0
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	e043      	b.n	8004da2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d30:	d118      	bne.n	8004d64 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	461a      	mov	r2, r3
 8004d46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	e013      	b.n	8004d76 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	e008      	b.n	8004d76 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	461a      	mov	r2, r3
 8004d72:	2300      	movs	r3, #0
 8004d74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	461a      	mov	r2, r3
 8004d84:	2300      	movs	r3, #0
 8004d86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	461a      	mov	r2, r3
 8004d96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d3b7      	bcc.n	8004d1a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	e043      	b.n	8004e38 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc6:	d118      	bne.n	8004dfa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e013      	b.n	8004e0c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df0:	461a      	mov	r2, r3
 8004df2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	e008      	b.n	8004e0c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	461a      	mov	r2, r3
 8004e08:	2300      	movs	r3, #0
 8004e0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	461a      	mov	r2, r3
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	3301      	adds	r3, #1
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d3b7      	bcc.n	8004db0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	f043 0210 	orr.w	r2, r3, #16
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <USB_DevInit+0x2c4>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f043 0208 	orr.w	r2, r3, #8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d107      	bne.n	8004ea8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea0:	f043 0304 	orr.w	r3, r3, #4
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb4:	b004      	add	sp, #16
 8004eb6:	4770      	bx	lr
 8004eb8:	803c3800 	.word	0x803c3800

08004ebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <USB_FlushTxFifo+0x64>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e01b      	b.n	8004f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	daf2      	bge.n	8004eca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	019b      	lsls	r3, r3, #6
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <USB_FlushTxFifo+0x64>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e006      	b.n	8004f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d0f0      	beq.n	8004ef4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	00030d40 	.word	0x00030d40

08004f24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3301      	adds	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a11      	ldr	r2, [pc, #68]	; (8004f80 <USB_FlushRxFifo+0x5c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e018      	b.n	8004f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	daf2      	bge.n	8004f30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2210      	movs	r2, #16
 8004f52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3301      	adds	r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <USB_FlushRxFifo+0x5c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e006      	b.n	8004f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d0f0      	beq.n	8004f54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	00030d40 	.word	0x00030d40

08004f84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0306 	and.w	r3, r3, #6
 8004fce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	75fb      	strb	r3, [r7, #23]
 8004fda:	e00a      	b.n	8004ff2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d002      	beq.n	8004fe8 <USB_GetDevSpeed+0x32>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b06      	cmp	r3, #6
 8004fe6:	d102      	bne.n	8004fee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	75fb      	strb	r3, [r7, #23]
 8004fec:	e001      	b.n	8004ff2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004fee:	230f      	movs	r3, #15
 8004ff0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d13a      	bne.n	8005092 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	2101      	movs	r1, #1
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	b29b      	uxth	r3, r3
 8005034:	68f9      	ldr	r1, [r7, #12]
 8005036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800503a:	4313      	orrs	r3, r2
 800503c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d155      	bne.n	8005100 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	791b      	ldrb	r3, [r3, #4]
 800506e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005070:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	059b      	lsls	r3, r3, #22
 8005076:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005078:	4313      	orrs	r3, r2
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	e036      	b.n	8005100 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005098:	69da      	ldr	r2, [r3, #28]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	2101      	movs	r1, #1
 80050a4:	fa01 f303 	lsl.w	r3, r1, r3
 80050a8:	041b      	lsls	r3, r3, #16
 80050aa:	68f9      	ldr	r1, [r7, #12]
 80050ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d11a      	bne.n	8005100 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	791b      	ldrb	r3, [r3, #4]
 80050e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050e6:	430b      	orrs	r3, r1
 80050e8:	4313      	orrs	r3, r2
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d161      	bne.n	80051f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800513e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005142:	d11f      	bne.n	8005184 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	440a      	add	r2, r1
 800515a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800515e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005162:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800517e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005182:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	2101      	movs	r1, #1
 8005196:	fa01 f303 	lsl.w	r3, r1, r3
 800519a:	b29b      	uxth	r3, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	68f9      	ldr	r1, [r7, #12]
 80051a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051a4:	4013      	ands	r3, r2
 80051a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	2101      	movs	r1, #1
 80051ba:	fa01 f303 	lsl.w	r3, r1, r3
 80051be:	b29b      	uxth	r3, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051c8:	4013      	ands	r3, r2
 80051ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	0159      	lsls	r1, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	440b      	add	r3, r1
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	4619      	mov	r1, r3
 80051e8:	4b35      	ldr	r3, [pc, #212]	; (80052c0 <USB_DeactivateEndpoint+0x1b0>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]
 80051ee:	e060      	b.n	80052b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005206:	d11f      	bne.n	8005248 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005222:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005226:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	0151      	lsls	r1, r2, #5
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	440a      	add	r2, r1
 800523e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005242:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005246:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	2101      	movs	r1, #1
 800525a:	fa01 f303 	lsl.w	r3, r1, r3
 800525e:	041b      	lsls	r3, r3, #16
 8005260:	43db      	mvns	r3, r3
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005268:	4013      	ands	r3, r2
 800526a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	2101      	movs	r1, #1
 800527e:	fa01 f303 	lsl.w	r3, r1, r3
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	43db      	mvns	r3, r3
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800528c:	4013      	ands	r3, r2
 800528e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	0159      	lsls	r1, r3, #5
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	440b      	add	r3, r1
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	4619      	mov	r1, r3
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <USB_DeactivateEndpoint+0x1b4>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	ec337800 	.word	0xec337800
 80052c4:	eff37800 	.word	0xeff37800

080052c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	f040 815c 	bne.w	80055a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d132      	bne.n	8005358 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005310:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005314:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	440a      	add	r2, r1
 800532c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005330:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005334:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	0151      	lsls	r1, r2, #5
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	440a      	add	r2, r1
 800534c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005350:	0cdb      	lsrs	r3, r3, #19
 8005352:	04db      	lsls	r3, r3, #19
 8005354:	6113      	str	r3, [r2, #16]
 8005356:	e074      	b.n	8005442 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005372:	0cdb      	lsrs	r3, r3, #19
 8005374:	04db      	lsls	r3, r3, #19
 8005376:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	0151      	lsls	r1, r2, #5
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	440a      	add	r2, r1
 800538e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005392:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005396:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800539a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	6999      	ldr	r1, [r3, #24]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	440b      	add	r3, r1
 80053b4:	1e59      	subs	r1, r3, #1
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80053be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053c0:	4b9d      	ldr	r3, [pc, #628]	; (8005638 <USB_EPStartXfer+0x370>)
 80053c2:	400b      	ands	r3, r1
 80053c4:	69b9      	ldr	r1, [r7, #24]
 80053c6:	0148      	lsls	r0, r1, #5
 80053c8:	69f9      	ldr	r1, [r7, #28]
 80053ca:	4401      	add	r1, r0
 80053cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053d0:	4313      	orrs	r3, r2
 80053d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ea:	69b9      	ldr	r1, [r7, #24]
 80053ec:	0148      	lsls	r0, r1, #5
 80053ee:	69f9      	ldr	r1, [r7, #28]
 80053f0:	4401      	add	r1, r0
 80053f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053f6:	4313      	orrs	r3, r2
 80053f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	791b      	ldrb	r3, [r3, #4]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d11f      	bne.n	8005442 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005420:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	440a      	add	r2, r1
 8005438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005440:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d14b      	bne.n	80054e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d009      	beq.n	8005464 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	461a      	mov	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	791b      	ldrb	r3, [r3, #4]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d128      	bne.n	80054be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d110      	bne.n	800549e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005496:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	e00f      	b.n	80054be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	e133      	b.n	8005748 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	791b      	ldrb	r3, [r3, #4]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d015      	beq.n	8005534 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 811b 	beq.w	8005748 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	2101      	movs	r1, #1
 8005524:	fa01 f303 	lsl.w	r3, r1, r3
 8005528:	69f9      	ldr	r1, [r7, #28]
 800552a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800552e:	4313      	orrs	r3, r2
 8005530:	634b      	str	r3, [r1, #52]	; 0x34
 8005532:	e109      	b.n	8005748 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d110      	bne.n	8005566 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	440a      	add	r2, r1
 800555a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e00f      	b.n	8005586 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005584:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6919      	ldr	r1, [r3, #16]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	781a      	ldrb	r2, [r3, #0]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	b298      	uxth	r0, r3
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	4603      	mov	r3, r0
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fade 	bl	8005b5c <USB_WritePacket>
 80055a0:	e0d2      	b.n	8005748 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055bc:	0cdb      	lsrs	r3, r3, #19
 80055be:	04db      	lsls	r3, r3, #19
 80055c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d126      	bne.n	800563c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005604:	69b9      	ldr	r1, [r7, #24]
 8005606:	0148      	lsls	r0, r1, #5
 8005608:	69f9      	ldr	r1, [r7, #28]
 800560a:	4401      	add	r1, r0
 800560c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005610:	4313      	orrs	r3, r2
 8005612:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005632:	6113      	str	r3, [r2, #16]
 8005634:	e03a      	b.n	80056ac <USB_EPStartXfer+0x3e4>
 8005636:	bf00      	nop
 8005638:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4413      	add	r3, r2
 8005646:	1e5a      	subs	r2, r3, #1
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005650:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	8afa      	ldrh	r2, [r7, #22]
 8005658:	fb03 f202 	mul.w	r2, r3, r2
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	8afb      	ldrh	r3, [r7, #22]
 8005670:	04d9      	lsls	r1, r3, #19
 8005672:	4b38      	ldr	r3, [pc, #224]	; (8005754 <USB_EPStartXfer+0x48c>)
 8005674:	400b      	ands	r3, r1
 8005676:	69b9      	ldr	r1, [r7, #24]
 8005678:	0148      	lsls	r0, r1, #5
 800567a:	69f9      	ldr	r1, [r7, #28]
 800567c:	4401      	add	r1, r0
 800567e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005682:	4313      	orrs	r3, r2
 8005684:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800569c:	69b9      	ldr	r1, [r7, #24]
 800569e:	0148      	lsls	r0, r1, #5
 80056a0:	69f9      	ldr	r1, [r7, #28]
 80056a2:	4401      	add	r1, r0
 80056a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056a8:	4313      	orrs	r3, r2
 80056aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d10d      	bne.n	80056ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6919      	ldr	r1, [r3, #16]
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	460a      	mov	r2, r1
 80056cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	791b      	ldrb	r3, [r3, #4]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d128      	bne.n	8005728 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d110      	bne.n	8005708 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005700:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e00f      	b.n	8005728 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005726:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005742:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005746:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	1ff80000 	.word	0x1ff80000

08005758 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b01      	cmp	r3, #1
 8005776:	f040 80ce 	bne.w	8005916 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d132      	bne.n	80057e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e0:	0cdb      	lsrs	r3, r3, #19
 80057e2:	04db      	lsls	r3, r3, #19
 80057e4:	6113      	str	r3, [r2, #16]
 80057e6:	e04e      	b.n	8005886 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	0cdb      	lsrs	r3, r3, #19
 8005804:	04db      	lsls	r3, r3, #19
 8005806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005822:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005826:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800582a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	429a      	cmp	r2, r3
 8005836:	d903      	bls.n	8005840 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800585e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005876:	6939      	ldr	r1, [r7, #16]
 8005878:	0148      	lsls	r0, r1, #5
 800587a:	6979      	ldr	r1, [r7, #20]
 800587c:	4401      	add	r1, r0
 800587e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005882:	4313      	orrs	r3, r2
 8005884:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d11e      	bne.n	80058ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d009      	beq.n	80058a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	461a      	mov	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	e097      	b.n	80059fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8083 	beq.w	80059fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	2101      	movs	r1, #1
 8005906:	fa01 f303 	lsl.w	r3, r1, r3
 800590a:	6979      	ldr	r1, [r7, #20]
 800590c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005910:	4313      	orrs	r3, r2
 8005912:	634b      	str	r3, [r1, #52]	; 0x34
 8005914:	e071      	b.n	80059fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005930:	0cdb      	lsrs	r3, r3, #19
 8005932:	04db      	lsls	r3, r3, #19
 8005934:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005958:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005990:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a8:	6939      	ldr	r1, [r7, #16]
 80059aa:	0148      	lsls	r0, r1, #5
 80059ac:	6979      	ldr	r1, [r7, #20]
 80059ae:	4401      	add	r1, r0
 80059b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059b4:	4313      	orrs	r3, r2
 80059b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d10d      	bne.n	80059da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6919      	ldr	r1, [r3, #16]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	460a      	mov	r2, r1
 80059d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d14a      	bne.n	8005abc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a3e:	f040 8086 	bne.w	8005b4e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	7812      	ldrb	r2, [r2, #0]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a64:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	7812      	ldrb	r2, [r2, #0]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d902      	bls.n	8005aa0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a9e:	e056      	b.n	8005b4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab8:	d0e7      	beq.n	8005a8a <USB_EPStopXfer+0x82>
 8005aba:	e048      	b.n	8005b4e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ad4:	d13b      	bne.n	8005b4e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	7812      	ldrb	r2, [r2, #0]
 8005aea:	0151      	lsls	r1, r2, #5
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	440a      	add	r2, r1
 8005af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005af8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	7812      	ldrb	r2, [r2, #0]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d902      	bls.n	8005b34 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	75fb      	strb	r3, [r7, #23]
          break;
 8005b32:	e00c      	b.n	8005b4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b4c:	d0e7      	beq.n	8005b1e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b089      	sub	sp, #36	; 0x24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	4611      	mov	r1, r2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	71fb      	strb	r3, [r7, #7]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d123      	bne.n	8005bca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b82:	88bb      	ldrh	r3, [r7, #4]
 8005b84:	3303      	adds	r3, #3
 8005b86:	089b      	lsrs	r3, r3, #2
 8005b88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	e018      	b.n	8005bc2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	031a      	lsls	r2, r3, #12
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	3301      	adds	r3, #1
 8005bae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d3e2      	bcc.n	8005b90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3724      	adds	r7, #36	; 0x24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b08b      	sub	sp, #44	; 0x2c
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	089b      	lsrs	r3, r3, #2
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bfe:	2300      	movs	r3, #0
 8005c00:	623b      	str	r3, [r7, #32]
 8005c02:	e014      	b.n	8005c2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	3301      	adds	r3, #1
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	3301      	adds	r3, #1
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	3301      	adds	r3, #1
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	3301      	adds	r3, #1
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	623b      	str	r3, [r7, #32]
 8005c2e:	6a3a      	ldr	r2, [r7, #32]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d3e6      	bcc.n	8005c04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c36:	8bfb      	ldrh	r3, [r7, #30]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01e      	beq.n	8005c7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c46:	461a      	mov	r2, r3
 8005c48:	f107 0310 	add.w	r3, r7, #16
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	701a      	strb	r2, [r3, #0]
      i++;
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	3301      	adds	r3, #1
 8005c66:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c6e:	8bfb      	ldrh	r3, [r7, #30]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c74:	8bfb      	ldrh	r3, [r7, #30]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1ea      	bne.n	8005c50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	372c      	adds	r7, #44	; 0x2c
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	785b      	ldrb	r3, [r3, #1]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d12c      	bne.n	8005cfe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	db12      	blt.n	8005cdc <USB_EPSetStall+0x54>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00f      	beq.n	8005cdc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cda:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	e02b      	b.n	8005d56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	db12      	blt.n	8005d36 <USB_EPSetStall+0xae>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00f      	beq.n	8005d36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d128      	bne.n	8005dd2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	791b      	ldrb	r3, [r3, #4]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d003      	beq.n	8005db0 <USB_EPClearStall+0x4c>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	791b      	ldrb	r3, [r3, #4]
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d138      	bne.n	8005e22 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	e027      	b.n	8005e22 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005df0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	791b      	ldrb	r3, [r3, #4]
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d003      	beq.n	8005e02 <USB_EPClearStall+0x9e>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	791b      	ldrb	r3, [r3, #4]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d10f      	bne.n	8005e22 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e20:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e52:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e64:	68f9      	ldr	r1, [r7, #12]
 8005e66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e96:	f023 0303 	bic.w	r3, r3, #3
 8005e9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eaa:	f023 0302 	bic.w	r3, r3, #2
 8005eae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ed8:	f023 0303 	bic.w	r3, r3, #3
 8005edc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eec:	f043 0302 	orr.w	r3, r3, #2
 8005ef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4013      	ands	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f18:	68fb      	ldr	r3, [r7, #12]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	4013      	ands	r3, r2
 8005f48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	0c1b      	lsrs	r3, r3, #16
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b085      	sub	sp, #20
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	b29b      	uxth	r3, r3
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b087      	sub	sp, #28
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	f003 030f 	and.w	r3, r3, #15
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffa:	01db      	lsls	r3, r3, #7
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4013      	ands	r3, r2
 8006016:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006018:	68bb      	ldr	r3, [r7, #8]
}
 800601a:	4618      	mov	r0, r3
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	f003 0301 	and.w	r3, r3, #1
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006060:	f023 0307 	bic.w	r3, r3, #7
 8006064:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006078:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	460b      	mov	r3, r1
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	333c      	adds	r3, #60	; 0x3c
 800609e:	3304      	adds	r3, #4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	4a26      	ldr	r2, [pc, #152]	; (8006140 <USB_EP0_OutStart+0xb8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d90a      	bls.n	80060c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060bc:	d101      	bne.n	80060c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	e037      	b.n	8006132 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c8:	461a      	mov	r2, r3
 80060ca:	2300      	movs	r3, #0
 80060cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f0:	f043 0318 	orr.w	r3, r3, #24
 80060f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006104:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006108:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800610a:	7afb      	ldrb	r3, [r7, #11]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10f      	bne.n	8006130 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006116:	461a      	mov	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800612a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800612e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	4f54300a 	.word	0x4f54300a

08006144 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3301      	adds	r3, #1
 8006154:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4a13      	ldr	r2, [pc, #76]	; (80061a8 <USB_CoreReset+0x64>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d901      	bls.n	8006162 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e01b      	b.n	800619a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	daf2      	bge.n	8006150 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f043 0201 	orr.w	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4a09      	ldr	r2, [pc, #36]	; (80061a8 <USB_CoreReset+0x64>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d901      	bls.n	800618c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e006      	b.n	800619a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b01      	cmp	r3, #1
 8006196:	d0f0      	beq.n	800617a <USB_CoreReset+0x36>

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	00030d40 	.word	0x00030d40

080061ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80061b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80061bc:	f002 fc92 	bl	8008ae4 <USBD_static_malloc>
 80061c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	32b0      	adds	r2, #176	; 0xb0
 80061d2:	2100      	movs	r1, #0
 80061d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80061d8:	2302      	movs	r3, #2
 80061da:	e0d4      	b.n	8006386 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80061dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80061e0:	2100      	movs	r1, #0
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f002 fce6 	bl	8008bb4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	32b0      	adds	r2, #176	; 0xb0
 80061f2:	68f9      	ldr	r1, [r7, #12]
 80061f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	32b0      	adds	r2, #176	; 0xb0
 8006202:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	7c1b      	ldrb	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d138      	bne.n	8006286 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006214:	4b5e      	ldr	r3, [pc, #376]	; (8006390 <USBD_CDC_Init+0x1e4>)
 8006216:	7819      	ldrb	r1, [r3, #0]
 8006218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800621c:	2202      	movs	r2, #2
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f002 fb3d 	bl	800889e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006224:	4b5a      	ldr	r3, [pc, #360]	; (8006390 <USBD_CDC_Init+0x1e4>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f003 020f 	and.w	r2, r3, #15
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	3324      	adds	r3, #36	; 0x24
 800623a:	2201      	movs	r2, #1
 800623c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800623e:	4b55      	ldr	r3, [pc, #340]	; (8006394 <USBD_CDC_Init+0x1e8>)
 8006240:	7819      	ldrb	r1, [r3, #0]
 8006242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006246:	2202      	movs	r2, #2
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f002 fb28 	bl	800889e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800624e:	4b51      	ldr	r3, [pc, #324]	; (8006394 <USBD_CDC_Init+0x1e8>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	f003 020f 	and.w	r2, r3, #15
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006266:	2201      	movs	r2, #1
 8006268:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800626a:	4b4b      	ldr	r3, [pc, #300]	; (8006398 <USBD_CDC_Init+0x1ec>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	f003 020f 	and.w	r2, r3, #15
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	3326      	adds	r3, #38	; 0x26
 8006280:	2210      	movs	r2, #16
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	e035      	b.n	80062f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006286:	4b42      	ldr	r3, [pc, #264]	; (8006390 <USBD_CDC_Init+0x1e4>)
 8006288:	7819      	ldrb	r1, [r3, #0]
 800628a:	2340      	movs	r3, #64	; 0x40
 800628c:	2202      	movs	r2, #2
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f002 fb05 	bl	800889e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006294:	4b3e      	ldr	r3, [pc, #248]	; (8006390 <USBD_CDC_Init+0x1e4>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f003 020f 	and.w	r2, r3, #15
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	3324      	adds	r3, #36	; 0x24
 80062aa:	2201      	movs	r2, #1
 80062ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062ae:	4b39      	ldr	r3, [pc, #228]	; (8006394 <USBD_CDC_Init+0x1e8>)
 80062b0:	7819      	ldrb	r1, [r3, #0]
 80062b2:	2340      	movs	r3, #64	; 0x40
 80062b4:	2202      	movs	r2, #2
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f002 faf1 	bl	800889e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062bc:	4b35      	ldr	r3, [pc, #212]	; (8006394 <USBD_CDC_Init+0x1e8>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f003 020f 	and.w	r2, r3, #15
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	440b      	add	r3, r1
 80062d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062d4:	2201      	movs	r2, #1
 80062d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80062d8:	4b2f      	ldr	r3, [pc, #188]	; (8006398 <USBD_CDC_Init+0x1ec>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	f003 020f 	and.w	r2, r3, #15
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	3326      	adds	r3, #38	; 0x26
 80062ee:	2210      	movs	r2, #16
 80062f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062f2:	4b29      	ldr	r3, [pc, #164]	; (8006398 <USBD_CDC_Init+0x1ec>)
 80062f4:	7819      	ldrb	r1, [r3, #0]
 80062f6:	2308      	movs	r3, #8
 80062f8:	2203      	movs	r2, #3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f002 facf 	bl	800889e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006300:	4b25      	ldr	r3, [pc, #148]	; (8006398 <USBD_CDC_Init+0x1ec>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	f003 020f 	and.w	r2, r3, #15
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	3324      	adds	r3, #36	; 0x24
 8006316:	2201      	movs	r2, #1
 8006318:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	33b0      	adds	r3, #176	; 0xb0
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006350:	2302      	movs	r3, #2
 8006352:	e018      	b.n	8006386 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	7c1b      	ldrb	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10a      	bne.n	8006372 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800635c:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <USBD_CDC_Init+0x1e8>)
 800635e:	7819      	ldrb	r1, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f002 fb86 	bl	8008a7c <USBD_LL_PrepareReceive>
 8006370:	e008      	b.n	8006384 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006372:	4b08      	ldr	r3, [pc, #32]	; (8006394 <USBD_CDC_Init+0x1e8>)
 8006374:	7819      	ldrb	r1, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800637c:	2340      	movs	r3, #64	; 0x40
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f002 fb7c 	bl	8008a7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000093 	.word	0x20000093
 8006394:	20000094 	.word	0x20000094
 8006398:	20000095 	.word	0x20000095

0800639c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80063a8:	4b3a      	ldr	r3, [pc, #232]	; (8006494 <USBD_CDC_DeInit+0xf8>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f002 fa9b 	bl	80088ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80063b4:	4b37      	ldr	r3, [pc, #220]	; (8006494 <USBD_CDC_DeInit+0xf8>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f003 020f 	and.w	r2, r3, #15
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	3324      	adds	r3, #36	; 0x24
 80063ca:	2200      	movs	r2, #0
 80063cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80063ce:	4b32      	ldr	r3, [pc, #200]	; (8006498 <USBD_CDC_DeInit+0xfc>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f002 fa88 	bl	80088ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80063da:	4b2f      	ldr	r3, [pc, #188]	; (8006498 <USBD_CDC_DeInit+0xfc>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f003 020f 	and.w	r2, r3, #15
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063f2:	2200      	movs	r2, #0
 80063f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80063f6:	4b29      	ldr	r3, [pc, #164]	; (800649c <USBD_CDC_DeInit+0x100>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f002 fa74 	bl	80088ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006402:	4b26      	ldr	r3, [pc, #152]	; (800649c <USBD_CDC_DeInit+0x100>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f003 020f 	and.w	r2, r3, #15
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	3324      	adds	r3, #36	; 0x24
 8006418:	2200      	movs	r2, #0
 800641a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800641c:	4b1f      	ldr	r3, [pc, #124]	; (800649c <USBD_CDC_DeInit+0x100>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f003 020f 	and.w	r2, r3, #15
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	440b      	add	r3, r1
 8006430:	3326      	adds	r3, #38	; 0x26
 8006432:	2200      	movs	r2, #0
 8006434:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	32b0      	adds	r2, #176	; 0xb0
 8006440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01f      	beq.n	8006488 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	33b0      	adds	r3, #176	; 0xb0
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	32b0      	adds	r2, #176	; 0xb0
 8006466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646a:	4618      	mov	r0, r3
 800646c:	f002 fb48 	bl	8008b00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	32b0      	adds	r2, #176	; 0xb0
 800647a:	2100      	movs	r1, #0
 800647c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000093 	.word	0x20000093
 8006498:	20000094 	.word	0x20000094
 800649c:	20000095 	.word	0x20000095

080064a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	32b0      	adds	r2, #176	; 0xb0
 80064b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e0bf      	b.n	8006650 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d050      	beq.n	800657e <USBD_CDC_Setup+0xde>
 80064dc:	2b20      	cmp	r3, #32
 80064de:	f040 80af 	bne.w	8006640 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	88db      	ldrh	r3, [r3, #6]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d03a      	beq.n	8006560 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	b25b      	sxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	da1b      	bge.n	800652c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	33b0      	adds	r3, #176	; 0xb0
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800650a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	88d2      	ldrh	r2, [r2, #6]
 8006510:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	88db      	ldrh	r3, [r3, #6]
 8006516:	2b07      	cmp	r3, #7
 8006518:	bf28      	it	cs
 800651a:	2307      	movcs	r3, #7
 800651c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	89fa      	ldrh	r2, [r7, #14]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fd89 	bl	800803c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800652a:	e090      	b.n	800664e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	785a      	ldrb	r2, [r3, #1]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	88db      	ldrh	r3, [r3, #6]
 800653a:	2b3f      	cmp	r3, #63	; 0x3f
 800653c:	d803      	bhi.n	8006546 <USBD_CDC_Setup+0xa6>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	88db      	ldrh	r3, [r3, #6]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	e000      	b.n	8006548 <USBD_CDC_Setup+0xa8>
 8006546:	2240      	movs	r2, #64	; 0x40
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800654e:	6939      	ldr	r1, [r7, #16]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006556:	461a      	mov	r2, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fd9b 	bl	8008094 <USBD_CtlPrepareRx>
      break;
 800655e:	e076      	b.n	800664e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	33b0      	adds	r3, #176	; 0xb0
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	7850      	ldrb	r0, [r2, #1]
 8006576:	2200      	movs	r2, #0
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	4798      	blx	r3
      break;
 800657c:	e067      	b.n	800664e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	2b0b      	cmp	r3, #11
 8006584:	d851      	bhi.n	800662a <USBD_CDC_Setup+0x18a>
 8006586:	a201      	add	r2, pc, #4	; (adr r2, 800658c <USBD_CDC_Setup+0xec>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065bd 	.word	0x080065bd
 8006590:	08006639 	.word	0x08006639
 8006594:	0800662b 	.word	0x0800662b
 8006598:	0800662b 	.word	0x0800662b
 800659c:	0800662b 	.word	0x0800662b
 80065a0:	0800662b 	.word	0x0800662b
 80065a4:	0800662b 	.word	0x0800662b
 80065a8:	0800662b 	.word	0x0800662b
 80065ac:	0800662b 	.word	0x0800662b
 80065b0:	0800662b 	.word	0x0800662b
 80065b4:	080065e7 	.word	0x080065e7
 80065b8:	08006611 	.word	0x08006611
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d107      	bne.n	80065d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065c8:	f107 030a 	add.w	r3, r7, #10
 80065cc:	2202      	movs	r2, #2
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 fd33 	bl	800803c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065d6:	e032      	b.n	800663e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f001 fcbd 	bl	8007f5a <USBD_CtlError>
            ret = USBD_FAIL;
 80065e0:	2303      	movs	r3, #3
 80065e2:	75fb      	strb	r3, [r7, #23]
          break;
 80065e4:	e02b      	b.n	800663e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d107      	bne.n	8006602 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80065f2:	f107 030d 	add.w	r3, r7, #13
 80065f6:	2201      	movs	r2, #1
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 fd1e 	bl	800803c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006600:	e01d      	b.n	800663e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fca8 	bl	8007f5a <USBD_CtlError>
            ret = USBD_FAIL;
 800660a:	2303      	movs	r3, #3
 800660c:	75fb      	strb	r3, [r7, #23]
          break;
 800660e:	e016      	b.n	800663e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b03      	cmp	r3, #3
 800661a:	d00f      	beq.n	800663c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 fc9b 	bl	8007f5a <USBD_CtlError>
            ret = USBD_FAIL;
 8006624:	2303      	movs	r3, #3
 8006626:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006628:	e008      	b.n	800663c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 fc94 	bl	8007f5a <USBD_CtlError>
          ret = USBD_FAIL;
 8006632:	2303      	movs	r3, #3
 8006634:	75fb      	strb	r3, [r7, #23]
          break;
 8006636:	e002      	b.n	800663e <USBD_CDC_Setup+0x19e>
          break;
 8006638:	bf00      	nop
 800663a:	e008      	b.n	800664e <USBD_CDC_Setup+0x1ae>
          break;
 800663c:	bf00      	nop
      }
      break;
 800663e:	e006      	b.n	800664e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fc89 	bl	8007f5a <USBD_CtlError>
      ret = USBD_FAIL;
 8006648:	2303      	movs	r3, #3
 800664a:	75fb      	strb	r3, [r7, #23]
      break;
 800664c:	bf00      	nop
  }

  return (uint8_t)ret;
 800664e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800666a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	32b0      	adds	r2, #176	; 0xb0
 8006676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800667e:	2303      	movs	r3, #3
 8006680:	e065      	b.n	800674e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	32b0      	adds	r2, #176	; 0xb0
 800668c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006690:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	f003 020f 	and.w	r2, r3, #15
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	3318      	adds	r3, #24
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d02f      	beq.n	800670c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	f003 020f 	and.w	r2, r3, #15
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	3318      	adds	r3, #24
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	f003 010f 	and.w	r1, r3, #15
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	460b      	mov	r3, r1
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	440b      	add	r3, r1
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4403      	add	r3, r0
 80066d4:	3348      	adds	r3, #72	; 0x48
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80066dc:	fb01 f303 	mul.w	r3, r1, r3
 80066e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d112      	bne.n	800670c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	f003 020f 	and.w	r2, r3, #15
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	3318      	adds	r3, #24
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066fe:	78f9      	ldrb	r1, [r7, #3]
 8006700:	2300      	movs	r3, #0
 8006702:	2200      	movs	r2, #0
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f002 f998 	bl	8008a3a <USBD_LL_Transmit>
 800670a:	e01f      	b.n	800674c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	33b0      	adds	r3, #176	; 0xb0
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d010      	beq.n	800674c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	33b0      	adds	r3, #176	; 0xb0
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	32b0      	adds	r2, #176	; 0xb0
 800676c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006770:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	32b0      	adds	r2, #176	; 0xb0
 800677c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006784:	2303      	movs	r3, #3
 8006786:	e01a      	b.n	80067be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f002 f996 	bl	8008abe <USBD_LL_GetRxDataSize>
 8006792:	4602      	mov	r2, r0
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	33b0      	adds	r3, #176	; 0xb0
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80067b8:	4611      	mov	r1, r2
 80067ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	32b0      	adds	r2, #176	; 0xb0
 80067d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e025      	b.n	8006834 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	33b0      	adds	r3, #176	; 0xb0
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01a      	beq.n	8006832 <USBD_CDC_EP0_RxReady+0x6c>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006802:	2bff      	cmp	r3, #255	; 0xff
 8006804:	d015      	beq.n	8006832 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	33b0      	adds	r3, #176	; 0xb0
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800681e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006826:	b292      	uxth	r2, r2
 8006828:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	22ff      	movs	r2, #255	; 0xff
 800682e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006844:	2182      	movs	r1, #130	; 0x82
 8006846:	4818      	ldr	r0, [pc, #96]	; (80068a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006848:	f000 fd4f 	bl	80072ea <USBD_GetEpDesc>
 800684c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800684e:	2101      	movs	r1, #1
 8006850:	4815      	ldr	r0, [pc, #84]	; (80068a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006852:	f000 fd4a 	bl	80072ea <USBD_GetEpDesc>
 8006856:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006858:	2181      	movs	r1, #129	; 0x81
 800685a:	4813      	ldr	r0, [pc, #76]	; (80068a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800685c:	f000 fd45 	bl	80072ea <USBD_GetEpDesc>
 8006860:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2210      	movs	r2, #16
 800686c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d006      	beq.n	8006882 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2200      	movs	r2, #0
 8006878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800687c:	711a      	strb	r2, [r3, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d006      	beq.n	8006896 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006890:	711a      	strb	r2, [r3, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2243      	movs	r2, #67	; 0x43
 800689a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800689c:	4b02      	ldr	r3, [pc, #8]	; (80068a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000050 	.word	0x20000050

080068ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068b4:	2182      	movs	r1, #130	; 0x82
 80068b6:	4818      	ldr	r0, [pc, #96]	; (8006918 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068b8:	f000 fd17 	bl	80072ea <USBD_GetEpDesc>
 80068bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068be:	2101      	movs	r1, #1
 80068c0:	4815      	ldr	r0, [pc, #84]	; (8006918 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068c2:	f000 fd12 	bl	80072ea <USBD_GetEpDesc>
 80068c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068c8:	2181      	movs	r1, #129	; 0x81
 80068ca:	4813      	ldr	r0, [pc, #76]	; (8006918 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068cc:	f000 fd0d 	bl	80072ea <USBD_GetEpDesc>
 80068d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2210      	movs	r2, #16
 80068dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	2200      	movs	r2, #0
 80068e8:	711a      	strb	r2, [r3, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f042 0202 	orr.w	r2, r2, #2
 80068f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d006      	beq.n	8006906 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	711a      	strb	r2, [r3, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f042 0202 	orr.w	r2, r2, #2
 8006904:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2243      	movs	r2, #67	; 0x43
 800690a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800690c:	4b02      	ldr	r3, [pc, #8]	; (8006918 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20000050 	.word	0x20000050

0800691c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006924:	2182      	movs	r1, #130	; 0x82
 8006926:	4818      	ldr	r0, [pc, #96]	; (8006988 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006928:	f000 fcdf 	bl	80072ea <USBD_GetEpDesc>
 800692c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800692e:	2101      	movs	r1, #1
 8006930:	4815      	ldr	r0, [pc, #84]	; (8006988 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006932:	f000 fcda 	bl	80072ea <USBD_GetEpDesc>
 8006936:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006938:	2181      	movs	r1, #129	; 0x81
 800693a:	4813      	ldr	r0, [pc, #76]	; (8006988 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800693c:	f000 fcd5 	bl	80072ea <USBD_GetEpDesc>
 8006940:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2210      	movs	r2, #16
 800694c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d006      	beq.n	8006962 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2200      	movs	r2, #0
 8006958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800695c:	711a      	strb	r2, [r3, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d006      	beq.n	8006976 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006970:	711a      	strb	r2, [r3, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2243      	movs	r2, #67	; 0x43
 800697a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800697c:	4b02      	ldr	r3, [pc, #8]	; (8006988 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800697e:	4618      	mov	r0, r3
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000050 	.word	0x20000050

0800698c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	220a      	movs	r2, #10
 8006998:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800699a:	4b03      	ldr	r3, [pc, #12]	; (80069a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	2000000c 	.word	0x2000000c

080069ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80069bc:	2303      	movs	r3, #3
 80069be:	e009      	b.n	80069d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	33b0      	adds	r3, #176	; 0xb0
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	32b0      	adds	r2, #176	; 0xb0
 80069f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e008      	b.n	8006a18 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	32b0      	adds	r2, #176	; 0xb0
 8006a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e004      	b.n	8006a52 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
	...

08006a60 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	32b0      	adds	r2, #176	; 0xb0
 8006a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a76:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	32b0      	adds	r2, #176	; 0xb0
 8006a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e025      	b.n	8006ade <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d11f      	bne.n	8006adc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006aa4:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <USBD_CDC_TransmitPacket+0x88>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	f003 020f 	and.w	r2, r3, #15
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4403      	add	r3, r0
 8006abe:	3318      	adds	r3, #24
 8006ac0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006ac2:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <USBD_CDC_TransmitPacket+0x88>)
 8006ac4:	7819      	ldrb	r1, [r3, #0]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 ffb1 	bl	8008a3a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000093 	.word	0x20000093

08006aec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	32b0      	adds	r2, #176	; 0xb0
 8006afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	32b0      	adds	r2, #176	; 0xb0
 8006b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e018      	b.n	8006b4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	7c1b      	ldrb	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10a      	bne.n	8006b38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <USBD_CDC_ReceivePacket+0x68>)
 8006b24:	7819      	ldrb	r1, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 ffa3 	bl	8008a7c <USBD_LL_PrepareReceive>
 8006b36:	e008      	b.n	8006b4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <USBD_CDC_ReceivePacket+0x68>)
 8006b3a:	7819      	ldrb	r1, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b42:	2340      	movs	r3, #64	; 0x40
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 ff99 	bl	8008a7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20000094 	.word	0x20000094

08006b58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e01f      	b.n	8006bb0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	79fa      	ldrb	r2, [r7, #7]
 8006ba2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f001 fe13 	bl	80087d0 <USBD_LL_Init>
 8006baa:	4603      	mov	r3, r0
 8006bac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e025      	b.n	8006c1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	32ae      	adds	r2, #174	; 0xae
 8006be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00f      	beq.n	8006c0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	32ae      	adds	r2, #174	; 0xae
 8006bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	f107 020e 	add.w	r2, r7, #14
 8006c00:	4610      	mov	r0, r2
 8006c02:	4798      	blx	r3
 8006c04:	4602      	mov	r2, r0
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 fe1b 	bl	8008868 <USBD_LL_Start>
 8006c32:	4603      	mov	r3, r0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d009      	beq.n	8006c80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	78fa      	ldrb	r2, [r7, #3]
 8006c76:	4611      	mov	r1, r2
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	4798      	blx	r3
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	460b      	mov	r3, r1
 8006c94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	78fa      	ldrb	r2, [r7, #3]
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	4798      	blx	r3
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f001 f908 	bl	8007ee6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cf2:	f003 031f 	and.w	r3, r3, #31
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d01a      	beq.n	8006d30 <USBD_LL_SetupStage+0x72>
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d822      	bhi.n	8006d44 <USBD_LL_SetupStage+0x86>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <USBD_LL_SetupStage+0x4a>
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d00a      	beq.n	8006d1c <USBD_LL_SetupStage+0x5e>
 8006d06:	e01d      	b.n	8006d44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fb5f 	bl	80073d4 <USBD_StdDevReq>
 8006d16:	4603      	mov	r3, r0
 8006d18:	73fb      	strb	r3, [r7, #15]
      break;
 8006d1a:	e020      	b.n	8006d5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fbc7 	bl	80074b8 <USBD_StdItfReq>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2e:	e016      	b.n	8006d5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fc29 	bl	8007590 <USBD_StdEPReq>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73fb      	strb	r3, [r7, #15]
      break;
 8006d42:	e00c      	b.n	8006d5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fde8 	bl	8008928 <USBD_LL_StallEP>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5c:	bf00      	nop
  }

  return ret;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	460b      	mov	r3, r1
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006d7a:	7afb      	ldrb	r3, [r7, #11]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d16e      	bne.n	8006e5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	f040 8098 	bne.w	8006ec4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d913      	bls.n	8006dc8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	1ad2      	subs	r2, r2, r3
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	4293      	cmp	r3, r2
 8006db8:	bf28      	it	cs
 8006dba:	4613      	movcs	r3, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f001 f984 	bl	80080ce <USBD_CtlContinueRx>
 8006dc6:	e07d      	b.n	8006ec4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dce:	f003 031f 	and.w	r3, r3, #31
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d014      	beq.n	8006e00 <USBD_LL_DataOutStage+0x98>
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d81d      	bhi.n	8006e16 <USBD_LL_DataOutStage+0xae>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <USBD_LL_DataOutStage+0x7c>
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d003      	beq.n	8006dea <USBD_LL_DataOutStage+0x82>
 8006de2:	e018      	b.n	8006e16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	75bb      	strb	r3, [r7, #22]
            break;
 8006de8:	e018      	b.n	8006e1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	4619      	mov	r1, r3
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 fa5e 	bl	80072b6 <USBD_CoreFindIF>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75bb      	strb	r3, [r7, #22]
            break;
 8006dfe:	e00d      	b.n	8006e1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	4619      	mov	r1, r3
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 fa60 	bl	80072d0 <USBD_CoreFindEP>
 8006e10:	4603      	mov	r3, r0
 8006e12:	75bb      	strb	r3, [r7, #22]
            break;
 8006e14:	e002      	b.n	8006e1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	75bb      	strb	r3, [r7, #22]
            break;
 8006e1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e1c:	7dbb      	ldrb	r3, [r7, #22]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d119      	bne.n	8006e56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d113      	bne.n	8006e56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e2e:	7dba      	ldrb	r2, [r7, #22]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	32ae      	adds	r2, #174	; 0xae
 8006e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00b      	beq.n	8006e56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e3e:	7dba      	ldrb	r2, [r7, #22]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e46:	7dba      	ldrb	r2, [r7, #22]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	32ae      	adds	r2, #174	; 0xae
 8006e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f001 f94a 	bl	80080f0 <USBD_CtlSendStatus>
 8006e5c:	e032      	b.n	8006ec4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
 8006e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	4619      	mov	r1, r3
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 fa31 	bl	80072d0 <USBD_CoreFindEP>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e72:	7dbb      	ldrb	r3, [r7, #22]
 8006e74:	2bff      	cmp	r3, #255	; 0xff
 8006e76:	d025      	beq.n	8006ec4 <USBD_LL_DataOutStage+0x15c>
 8006e78:	7dbb      	ldrb	r3, [r7, #22]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d122      	bne.n	8006ec4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d117      	bne.n	8006eba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006e8a:	7dba      	ldrb	r2, [r7, #22]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	32ae      	adds	r2, #174	; 0xae
 8006e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00f      	beq.n	8006eba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006e9a:	7dba      	ldrb	r2, [r7, #22]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006ea2:	7dba      	ldrb	r2, [r7, #22]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	32ae      	adds	r2, #174	; 0xae
 8006ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	7afa      	ldrb	r2, [r7, #11]
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	4798      	blx	r3
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
 8006ec2:	e000      	b.n	8006ec6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b086      	sub	sp, #24
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	607a      	str	r2, [r7, #4]
 8006eda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006edc:	7afb      	ldrb	r3, [r7, #11]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d16f      	bne.n	8006fc2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3314      	adds	r3, #20
 8006ee6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d15a      	bne.n	8006fa8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d914      	bls.n	8006f28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	461a      	mov	r2, r3
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f001 f8ac 	bl	8008072 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2100      	movs	r1, #0
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f001 fdab 	bl	8008a7c <USBD_LL_PrepareReceive>
 8006f26:	e03f      	b.n	8006fa8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d11c      	bne.n	8006f6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d316      	bcc.n	8006f6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d20f      	bcs.n	8006f6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2100      	movs	r1, #0
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f001 f88d 	bl	8008072 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f60:	2300      	movs	r3, #0
 8006f62:	2200      	movs	r2, #0
 8006f64:	2100      	movs	r1, #0
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f001 fd88 	bl	8008a7c <USBD_LL_PrepareReceive>
 8006f6c:	e01c      	b.n	8006fa8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d10f      	bne.n	8006f9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d009      	beq.n	8006f9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f9a:	2180      	movs	r1, #128	; 0x80
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f001 fcc3 	bl	8008928 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f001 f8b7 	bl	8008116 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d03a      	beq.n	8007028 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff fe42 	bl	8006c3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006fc0:	e032      	b.n	8007028 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006fc2:	7afb      	ldrb	r3, [r7, #11]
 8006fc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	4619      	mov	r1, r3
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f97f 	bl	80072d0 <USBD_CoreFindEP>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	2bff      	cmp	r3, #255	; 0xff
 8006fda:	d025      	beq.n	8007028 <USBD_LL_DataInStage+0x15a>
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d122      	bne.n	8007028 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d11c      	bne.n	8007028 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006fee:	7dfa      	ldrb	r2, [r7, #23]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	32ae      	adds	r2, #174	; 0xae
 8006ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d014      	beq.n	8007028 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006ffe:	7dfa      	ldrb	r2, [r7, #23]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007006:	7dfa      	ldrb	r2, [r7, #23]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	32ae      	adds	r2, #174	; 0xae
 800700c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	7afa      	ldrb	r2, [r7, #11]
 8007014:	4611      	mov	r1, r2
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	4798      	blx	r3
 800701a:	4603      	mov	r3, r0
 800701c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800701e:	7dbb      	ldrb	r3, [r7, #22]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007024:	7dbb      	ldrb	r3, [r7, #22]
 8007026:	e000      	b.n	800702a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d014      	beq.n	8007098 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00e      	beq.n	8007098 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6852      	ldr	r2, [r2, #4]
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	4611      	mov	r1, r2
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007094:	2303      	movs	r3, #3
 8007096:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007098:	2340      	movs	r3, #64	; 0x40
 800709a:	2200      	movs	r2, #0
 800709c:	2100      	movs	r1, #0
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 fbfd 	bl	800889e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2240      	movs	r2, #64	; 0x40
 80070b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070b4:	2340      	movs	r3, #64	; 0x40
 80070b6:	2200      	movs	r2, #0
 80070b8:	2180      	movs	r1, #128	; 0x80
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 fbef 	bl	800889e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2240      	movs	r2, #64	; 0x40
 80070ca:	621a      	str	r2, [r3, #32]

  return ret;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	460b      	mov	r3, r1
 80070e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	78fa      	ldrb	r2, [r7, #3]
 80070e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007104:	b2da      	uxtb	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2204      	movs	r2, #4
 8007110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b04      	cmp	r3, #4
 8007134:	d106      	bne.n	8007144 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800713c:	b2da      	uxtb	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b03      	cmp	r3, #3
 8007164:	d110      	bne.n	8007188 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	460b      	mov	r3, r1
 800719c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	32ae      	adds	r2, #174	; 0xae
 80071a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e01c      	b.n	80071ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d115      	bne.n	80071ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	32ae      	adds	r2, #174	; 0xae
 80071ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00b      	beq.n	80071ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	32ae      	adds	r2, #174	; 0xae
 80071de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	78fa      	ldrb	r2, [r7, #3]
 80071e6:	4611      	mov	r1, r2
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	32ae      	adds	r2, #174	; 0xae
 800720c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007214:	2303      	movs	r3, #3
 8007216:	e01c      	b.n	8007252 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b03      	cmp	r3, #3
 8007222:	d115      	bne.n	8007250 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	32ae      	adds	r2, #174	; 0xae
 800722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00b      	beq.n	8007250 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	32ae      	adds	r2, #174	; 0xae
 8007242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	78fa      	ldrb	r2, [r7, #3]
 800724a:	4611      	mov	r1, r2
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00e      	beq.n	80072ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6852      	ldr	r2, [r2, #4]
 800729a:	b2d2      	uxtb	r2, r2
 800729c:	4611      	mov	r1, r2
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80072a8:	2303      	movs	r3, #3
 80072aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	885b      	ldrh	r3, [r3, #2]
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	429a      	cmp	r2, r3
 8007310:	d920      	bls.n	8007354 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800731a:	e013      	b.n	8007344 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800731c:	f107 030a 	add.w	r3, r7, #10
 8007320:	4619      	mov	r1, r3
 8007322:	6978      	ldr	r0, [r7, #20]
 8007324:	f000 f81b 	bl	800735e <USBD_GetNextDesc>
 8007328:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	785b      	ldrb	r3, [r3, #1]
 800732e:	2b05      	cmp	r3, #5
 8007330:	d108      	bne.n	8007344 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	789b      	ldrb	r3, [r3, #2]
 800733a:	78fa      	ldrb	r2, [r7, #3]
 800733c:	429a      	cmp	r2, r3
 800733e:	d008      	beq.n	8007352 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	885b      	ldrh	r3, [r3, #2]
 8007348:	b29a      	uxth	r2, r3
 800734a:	897b      	ldrh	r3, [r7, #10]
 800734c:	429a      	cmp	r2, r3
 800734e:	d8e5      	bhi.n	800731c <USBD_GetEpDesc+0x32>
 8007350:	e000      	b.n	8007354 <USBD_GetEpDesc+0x6a>
          break;
 8007352:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007354:	693b      	ldr	r3, [r7, #16]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	881a      	ldrh	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	4413      	add	r3, r2
 8007378:	b29a      	uxth	r2, r3
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4413      	add	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800738a:	68fb      	ldr	r3, [r7, #12]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	3301      	adds	r3, #1
 80073ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073b6:	8a3b      	ldrh	r3, [r7, #16]
 80073b8:	021b      	lsls	r3, r3, #8
 80073ba:	b21a      	sxth	r2, r3
 80073bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	b21b      	sxth	r3, r3
 80073c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073c6:	89fb      	ldrh	r3, [r7, #14]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ea:	2b40      	cmp	r3, #64	; 0x40
 80073ec:	d005      	beq.n	80073fa <USBD_StdDevReq+0x26>
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d857      	bhi.n	80074a2 <USBD_StdDevReq+0xce>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00f      	beq.n	8007416 <USBD_StdDevReq+0x42>
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d153      	bne.n	80074a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	32ae      	adds	r2, #174	; 0xae
 8007404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	4798      	blx	r3
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]
      break;
 8007414:	e04a      	b.n	80074ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	785b      	ldrb	r3, [r3, #1]
 800741a:	2b09      	cmp	r3, #9
 800741c:	d83b      	bhi.n	8007496 <USBD_StdDevReq+0xc2>
 800741e:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <USBD_StdDevReq+0x50>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	08007479 	.word	0x08007479
 8007428:	0800748d 	.word	0x0800748d
 800742c:	08007497 	.word	0x08007497
 8007430:	08007483 	.word	0x08007483
 8007434:	08007497 	.word	0x08007497
 8007438:	08007457 	.word	0x08007457
 800743c:	0800744d 	.word	0x0800744d
 8007440:	08007497 	.word	0x08007497
 8007444:	0800746f 	.word	0x0800746f
 8007448:	08007461 	.word	0x08007461
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa3c 	bl	80078cc <USBD_GetDescriptor>
          break;
 8007454:	e024      	b.n	80074a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fba1 	bl	8007ba0 <USBD_SetAddress>
          break;
 800745e:	e01f      	b.n	80074a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fbe0 	bl	8007c28 <USBD_SetConfig>
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]
          break;
 800746c:	e018      	b.n	80074a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fc83 	bl	8007d7c <USBD_GetConfig>
          break;
 8007476:	e013      	b.n	80074a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fcb4 	bl	8007de8 <USBD_GetStatus>
          break;
 8007480:	e00e      	b.n	80074a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fce3 	bl	8007e50 <USBD_SetFeature>
          break;
 800748a:	e009      	b.n	80074a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fd07 	bl	8007ea2 <USBD_ClrFeature>
          break;
 8007494:	e004      	b.n	80074a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fd5e 	bl	8007f5a <USBD_CtlError>
          break;
 800749e:	bf00      	nop
      }
      break;
 80074a0:	e004      	b.n	80074ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fd58 	bl	8007f5a <USBD_CtlError>
      break;
 80074aa:	bf00      	nop
  }

  return ret;
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop

080074b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	d005      	beq.n	80074de <USBD_StdItfReq+0x26>
 80074d2:	2b40      	cmp	r3, #64	; 0x40
 80074d4:	d852      	bhi.n	800757c <USBD_StdItfReq+0xc4>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <USBD_StdItfReq+0x26>
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d14e      	bne.n	800757c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d840      	bhi.n	800756e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	889b      	ldrh	r3, [r3, #4]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d836      	bhi.n	8007564 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	889b      	ldrh	r3, [r3, #4]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff fed9 	bl	80072b6 <USBD_CoreFindIF>
 8007504:	4603      	mov	r3, r0
 8007506:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	2bff      	cmp	r3, #255	; 0xff
 800750c:	d01d      	beq.n	800754a <USBD_StdItfReq+0x92>
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d11a      	bne.n	800754a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007514:	7bba      	ldrb	r2, [r7, #14]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	32ae      	adds	r2, #174	; 0xae
 800751a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00f      	beq.n	8007544 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007524:	7bba      	ldrb	r2, [r7, #14]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800752c:	7bba      	ldrb	r2, [r7, #14]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	32ae      	adds	r2, #174	; 0xae
 8007532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
 800753e:	4603      	mov	r3, r0
 8007540:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007542:	e004      	b.n	800754e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007544:	2303      	movs	r3, #3
 8007546:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007548:	e001      	b.n	800754e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800754a:	2303      	movs	r3, #3
 800754c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	88db      	ldrh	r3, [r3, #6]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d110      	bne.n	8007578 <USBD_StdItfReq+0xc0>
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10d      	bne.n	8007578 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fdc7 	bl	80080f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007562:	e009      	b.n	8007578 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fcf7 	bl	8007f5a <USBD_CtlError>
          break;
 800756c:	e004      	b.n	8007578 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fcf2 	bl	8007f5a <USBD_CtlError>
          break;
 8007576:	e000      	b.n	800757a <USBD_StdItfReq+0xc2>
          break;
 8007578:	bf00      	nop
      }
      break;
 800757a:	e004      	b.n	8007586 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fceb 	bl	8007f5a <USBD_CtlError>
      break;
 8007584:	bf00      	nop
  }

  return ret;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	889b      	ldrh	r3, [r3, #4]
 80075a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d007      	beq.n	80075c0 <USBD_StdEPReq+0x30>
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	f200 817f 	bhi.w	80078b4 <USBD_StdEPReq+0x324>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d02a      	beq.n	8007610 <USBD_StdEPReq+0x80>
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	f040 817a 	bne.w	80078b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff fe83 	bl	80072d0 <USBD_CoreFindEP>
 80075ca:	4603      	mov	r3, r0
 80075cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075ce:	7b7b      	ldrb	r3, [r7, #13]
 80075d0:	2bff      	cmp	r3, #255	; 0xff
 80075d2:	f000 8174 	beq.w	80078be <USBD_StdEPReq+0x32e>
 80075d6:	7b7b      	ldrb	r3, [r7, #13]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f040 8170 	bne.w	80078be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80075de:	7b7a      	ldrb	r2, [r7, #13]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80075e6:	7b7a      	ldrb	r2, [r7, #13]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	32ae      	adds	r2, #174	; 0xae
 80075ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 8163 	beq.w	80078be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80075f8:	7b7a      	ldrb	r2, [r7, #13]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	32ae      	adds	r2, #174	; 0xae
 80075fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	4798      	blx	r3
 800760a:	4603      	mov	r3, r0
 800760c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800760e:	e156      	b.n	80078be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	2b03      	cmp	r3, #3
 8007616:	d008      	beq.n	800762a <USBD_StdEPReq+0x9a>
 8007618:	2b03      	cmp	r3, #3
 800761a:	f300 8145 	bgt.w	80078a8 <USBD_StdEPReq+0x318>
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 809b 	beq.w	800775a <USBD_StdEPReq+0x1ca>
 8007624:	2b01      	cmp	r3, #1
 8007626:	d03c      	beq.n	80076a2 <USBD_StdEPReq+0x112>
 8007628:	e13e      	b.n	80078a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d002      	beq.n	800763c <USBD_StdEPReq+0xac>
 8007636:	2b03      	cmp	r3, #3
 8007638:	d016      	beq.n	8007668 <USBD_StdEPReq+0xd8>
 800763a:	e02c      	b.n	8007696 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00d      	beq.n	800765e <USBD_StdEPReq+0xce>
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	2b80      	cmp	r3, #128	; 0x80
 8007646:	d00a      	beq.n	800765e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 f96b 	bl	8008928 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007652:	2180      	movs	r1, #128	; 0x80
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 f967 	bl	8008928 <USBD_LL_StallEP>
 800765a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800765c:	e020      	b.n	80076a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fc7a 	bl	8007f5a <USBD_CtlError>
              break;
 8007666:	e01b      	b.n	80076a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	885b      	ldrh	r3, [r3, #2]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10e      	bne.n	800768e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <USBD_StdEPReq+0xfe>
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b80      	cmp	r3, #128	; 0x80
 800767a:	d008      	beq.n	800768e <USBD_StdEPReq+0xfe>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	88db      	ldrh	r3, [r3, #6]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 f94d 	bl	8008928 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fd2e 	bl	80080f0 <USBD_CtlSendStatus>

              break;
 8007694:	e004      	b.n	80076a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fc5e 	bl	8007f5a <USBD_CtlError>
              break;
 800769e:	bf00      	nop
          }
          break;
 80076a0:	e107      	b.n	80078b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d002      	beq.n	80076b4 <USBD_StdEPReq+0x124>
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d016      	beq.n	80076e0 <USBD_StdEPReq+0x150>
 80076b2:	e04b      	b.n	800774c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00d      	beq.n	80076d6 <USBD_StdEPReq+0x146>
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b80      	cmp	r3, #128	; 0x80
 80076be:	d00a      	beq.n	80076d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 f92f 	bl	8008928 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ca:	2180      	movs	r1, #128	; 0x80
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 f92b 	bl	8008928 <USBD_LL_StallEP>
 80076d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076d4:	e040      	b.n	8007758 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fc3e 	bl	8007f5a <USBD_CtlError>
              break;
 80076de:	e03b      	b.n	8007758 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	885b      	ldrh	r3, [r3, #2]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d136      	bne.n	8007756 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d004      	beq.n	80076fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076f2:	7bbb      	ldrb	r3, [r7, #14]
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 f935 	bl	8008966 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fcf7 	bl	80080f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fde2 	bl	80072d0 <USBD_CoreFindEP>
 800770c:	4603      	mov	r3, r0
 800770e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007710:	7b7b      	ldrb	r3, [r7, #13]
 8007712:	2bff      	cmp	r3, #255	; 0xff
 8007714:	d01f      	beq.n	8007756 <USBD_StdEPReq+0x1c6>
 8007716:	7b7b      	ldrb	r3, [r7, #13]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d11c      	bne.n	8007756 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800771c:	7b7a      	ldrb	r2, [r7, #13]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007724:	7b7a      	ldrb	r2, [r7, #13]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	32ae      	adds	r2, #174	; 0xae
 800772a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d010      	beq.n	8007756 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007734:	7b7a      	ldrb	r2, [r7, #13]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	32ae      	adds	r2, #174	; 0xae
 800773a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
 8007746:	4603      	mov	r3, r0
 8007748:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800774a:	e004      	b.n	8007756 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fc03 	bl	8007f5a <USBD_CtlError>
              break;
 8007754:	e000      	b.n	8007758 <USBD_StdEPReq+0x1c8>
              break;
 8007756:	bf00      	nop
          }
          break;
 8007758:	e0ab      	b.n	80078b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d002      	beq.n	800776c <USBD_StdEPReq+0x1dc>
 8007766:	2b03      	cmp	r3, #3
 8007768:	d032      	beq.n	80077d0 <USBD_StdEPReq+0x240>
 800776a:	e097      	b.n	800789c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d007      	beq.n	8007782 <USBD_StdEPReq+0x1f2>
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	2b80      	cmp	r3, #128	; 0x80
 8007776:	d004      	beq.n	8007782 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fbed 	bl	8007f5a <USBD_CtlError>
                break;
 8007780:	e091      	b.n	80078a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007786:	2b00      	cmp	r3, #0
 8007788:	da0b      	bge.n	80077a2 <USBD_StdEPReq+0x212>
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	3310      	adds	r3, #16
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	4413      	add	r3, r2
 800779e:	3304      	adds	r3, #4
 80077a0:	e00b      	b.n	80077ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	4413      	add	r3, r2
 80077b8:	3304      	adds	r3, #4
 80077ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2202      	movs	r2, #2
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fc37 	bl	800803c <USBD_CtlSendData>
              break;
 80077ce:	e06a      	b.n	80078a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da11      	bge.n	80077fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	f003 020f 	and.w	r2, r3, #15
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	3324      	adds	r3, #36	; 0x24
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d117      	bne.n	8007822 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fbb0 	bl	8007f5a <USBD_CtlError>
                  break;
 80077fa:	e054      	b.n	80078a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	f003 020f 	and.w	r2, r3, #15
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	4613      	mov	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	440b      	add	r3, r1
 800780e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d104      	bne.n	8007822 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fb9d 	bl	8007f5a <USBD_CtlError>
                  break;
 8007820:	e041      	b.n	80078a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007826:	2b00      	cmp	r3, #0
 8007828:	da0b      	bge.n	8007842 <USBD_StdEPReq+0x2b2>
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	3310      	adds	r3, #16
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	3304      	adds	r3, #4
 8007840:	e00b      	b.n	800785a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	3304      	adds	r3, #4
 800785a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <USBD_StdEPReq+0x2d8>
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b80      	cmp	r3, #128	; 0x80
 8007866:	d103      	bne.n	8007870 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	e00e      	b.n	800788e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 f895 	bl	80089a4 <USBD_LL_IsStallEP>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2201      	movs	r2, #1
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e002      	b.n	800788e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2202      	movs	r2, #2
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fbd1 	bl	800803c <USBD_CtlSendData>
              break;
 800789a:	e004      	b.n	80078a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fb5b 	bl	8007f5a <USBD_CtlError>
              break;
 80078a4:	bf00      	nop
          }
          break;
 80078a6:	e004      	b.n	80078b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fb55 	bl	8007f5a <USBD_CtlError>
          break;
 80078b0:	bf00      	nop
      }
      break;
 80078b2:	e005      	b.n	80078c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fb4f 	bl	8007f5a <USBD_CtlError>
      break;
 80078bc:	e000      	b.n	80078c0 <USBD_StdEPReq+0x330>
      break;
 80078be:	bf00      	nop
  }

  return ret;
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	885b      	ldrh	r3, [r3, #2]
 80078e6:	0a1b      	lsrs	r3, r3, #8
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	2b06      	cmp	r3, #6
 80078ee:	f200 8128 	bhi.w	8007b42 <USBD_GetDescriptor+0x276>
 80078f2:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <USBD_GetDescriptor+0x2c>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007915 	.word	0x08007915
 80078fc:	0800792d 	.word	0x0800792d
 8007900:	0800796d 	.word	0x0800796d
 8007904:	08007b43 	.word	0x08007b43
 8007908:	08007b43 	.word	0x08007b43
 800790c:	08007ae3 	.word	0x08007ae3
 8007910:	08007b0f 	.word	0x08007b0f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
      break;
 800792a:	e112      	b.n	8007b52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	7c1b      	ldrb	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10d      	bne.n	8007950 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	f107 0208 	add.w	r2, r7, #8
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
 8007944:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3301      	adds	r3, #1
 800794a:	2202      	movs	r2, #2
 800794c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800794e:	e100      	b.n	8007b52 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	f107 0208 	add.w	r2, r7, #8
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3301      	adds	r3, #1
 8007966:	2202      	movs	r2, #2
 8007968:	701a      	strb	r2, [r3, #0]
      break;
 800796a:	e0f2      	b.n	8007b52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	885b      	ldrh	r3, [r3, #2]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b05      	cmp	r3, #5
 8007974:	f200 80ac 	bhi.w	8007ad0 <USBD_GetDescriptor+0x204>
 8007978:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <USBD_GetDescriptor+0xb4>)
 800797a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797e:	bf00      	nop
 8007980:	08007999 	.word	0x08007999
 8007984:	080079cd 	.word	0x080079cd
 8007988:	08007a01 	.word	0x08007a01
 800798c:	08007a35 	.word	0x08007a35
 8007990:	08007a69 	.word	0x08007a69
 8007994:	08007a9d 	.word	0x08007a9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	7c12      	ldrb	r2, [r2, #16]
 80079b0:	f107 0108 	add.w	r1, r7, #8
 80079b4:	4610      	mov	r0, r2
 80079b6:	4798      	blx	r3
 80079b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ba:	e091      	b.n	8007ae0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 facb 	bl	8007f5a <USBD_CtlError>
            err++;
 80079c4:	7afb      	ldrb	r3, [r7, #11]
 80079c6:	3301      	adds	r3, #1
 80079c8:	72fb      	strb	r3, [r7, #11]
          break;
 80079ca:	e089      	b.n	8007ae0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00b      	beq.n	80079f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	7c12      	ldrb	r2, [r2, #16]
 80079e4:	f107 0108 	add.w	r1, r7, #8
 80079e8:	4610      	mov	r0, r2
 80079ea:	4798      	blx	r3
 80079ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ee:	e077      	b.n	8007ae0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fab1 	bl	8007f5a <USBD_CtlError>
            err++;
 80079f8:	7afb      	ldrb	r3, [r7, #11]
 80079fa:	3301      	adds	r3, #1
 80079fc:	72fb      	strb	r3, [r7, #11]
          break;
 80079fe:	e06f      	b.n	8007ae0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	7c12      	ldrb	r2, [r2, #16]
 8007a18:	f107 0108 	add.w	r1, r7, #8
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	4798      	blx	r3
 8007a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a22:	e05d      	b.n	8007ae0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa97 	bl	8007f5a <USBD_CtlError>
            err++;
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	72fb      	strb	r3, [r7, #11]
          break;
 8007a32:	e055      	b.n	8007ae0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	7c12      	ldrb	r2, [r2, #16]
 8007a4c:	f107 0108 	add.w	r1, r7, #8
 8007a50:	4610      	mov	r0, r2
 8007a52:	4798      	blx	r3
 8007a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a56:	e043      	b.n	8007ae0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fa7d 	bl	8007f5a <USBD_CtlError>
            err++;
 8007a60:	7afb      	ldrb	r3, [r7, #11]
 8007a62:	3301      	adds	r3, #1
 8007a64:	72fb      	strb	r3, [r7, #11]
          break;
 8007a66:	e03b      	b.n	8007ae0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	7c12      	ldrb	r2, [r2, #16]
 8007a80:	f107 0108 	add.w	r1, r7, #8
 8007a84:	4610      	mov	r0, r2
 8007a86:	4798      	blx	r3
 8007a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a8a:	e029      	b.n	8007ae0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa63 	bl	8007f5a <USBD_CtlError>
            err++;
 8007a94:	7afb      	ldrb	r3, [r7, #11]
 8007a96:	3301      	adds	r3, #1
 8007a98:	72fb      	strb	r3, [r7, #11]
          break;
 8007a9a:	e021      	b.n	8007ae0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	7c12      	ldrb	r2, [r2, #16]
 8007ab4:	f107 0108 	add.w	r1, r7, #8
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
 8007abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007abe:	e00f      	b.n	8007ae0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa49 	bl	8007f5a <USBD_CtlError>
            err++;
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	3301      	adds	r3, #1
 8007acc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ace:	e007      	b.n	8007ae0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa41 	bl	8007f5a <USBD_CtlError>
          err++;
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	3301      	adds	r3, #1
 8007adc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ade:	bf00      	nop
      }
      break;
 8007ae0:	e037      	b.n	8007b52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	7c1b      	ldrb	r3, [r3, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d109      	bne.n	8007afe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af2:	f107 0208 	add.w	r2, r7, #8
 8007af6:	4610      	mov	r0, r2
 8007af8:	4798      	blx	r3
 8007afa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007afc:	e029      	b.n	8007b52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fa2a 	bl	8007f5a <USBD_CtlError>
        err++;
 8007b06:	7afb      	ldrb	r3, [r7, #11]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b0c:	e021      	b.n	8007b52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	7c1b      	ldrb	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10d      	bne.n	8007b32 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1e:	f107 0208 	add.w	r2, r7, #8
 8007b22:	4610      	mov	r0, r2
 8007b24:	4798      	blx	r3
 8007b26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	2207      	movs	r2, #7
 8007b2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b30:	e00f      	b.n	8007b52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fa10 	bl	8007f5a <USBD_CtlError>
        err++;
 8007b3a:	7afb      	ldrb	r3, [r7, #11]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b40:	e007      	b.n	8007b52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fa08 	bl	8007f5a <USBD_CtlError>
      err++;
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b50:	bf00      	nop
  }

  if (err != 0U)
 8007b52:	7afb      	ldrb	r3, [r7, #11]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d11e      	bne.n	8007b96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	88db      	ldrh	r3, [r3, #6]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d016      	beq.n	8007b8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007b60:	893b      	ldrh	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00e      	beq.n	8007b84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	88da      	ldrh	r2, [r3, #6]
 8007b6a:	893b      	ldrh	r3, [r7, #8]
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	bf28      	it	cs
 8007b70:	4613      	movcs	r3, r2
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b76:	893b      	ldrh	r3, [r7, #8]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	68f9      	ldr	r1, [r7, #12]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fa5d 	bl	800803c <USBD_CtlSendData>
 8007b82:	e009      	b.n	8007b98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f9e7 	bl	8007f5a <USBD_CtlError>
 8007b8c:	e004      	b.n	8007b98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 faae 	bl	80080f0 <USBD_CtlSendStatus>
 8007b94:	e000      	b.n	8007b98 <USBD_GetDescriptor+0x2cc>
    return;
 8007b96:	bf00      	nop
  }
}
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop

08007ba0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	889b      	ldrh	r3, [r3, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d131      	bne.n	8007c16 <USBD_SetAddress+0x76>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	88db      	ldrh	r3, [r3, #6]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d12d      	bne.n	8007c16 <USBD_SetAddress+0x76>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	885b      	ldrh	r3, [r3, #2]
 8007bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8007bc0:	d829      	bhi.n	8007c16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	885b      	ldrh	r3, [r3, #2]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d104      	bne.n	8007be4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f9bc 	bl	8007f5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be2:	e01d      	b.n	8007c20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7bfa      	ldrb	r2, [r7, #15]
 8007be8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 ff03 	bl	80089fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fa7a 	bl	80080f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2202      	movs	r2, #2
 8007c06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0a:	e009      	b.n	8007c20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c14:	e004      	b.n	8007c20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f99e 	bl	8007f5a <USBD_CtlError>
  }
}
 8007c1e:	bf00      	nop
 8007c20:	bf00      	nop
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	885b      	ldrh	r3, [r3, #2]
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	4b4e      	ldr	r3, [pc, #312]	; (8007d78 <USBD_SetConfig+0x150>)
 8007c3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c40:	4b4d      	ldr	r3, [pc, #308]	; (8007d78 <USBD_SetConfig+0x150>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d905      	bls.n	8007c54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f985 	bl	8007f5a <USBD_CtlError>
    return USBD_FAIL;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e08c      	b.n	8007d6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d002      	beq.n	8007c66 <USBD_SetConfig+0x3e>
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d029      	beq.n	8007cb8 <USBD_SetConfig+0x90>
 8007c64:	e075      	b.n	8007d52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c66:	4b44      	ldr	r3, [pc, #272]	; (8007d78 <USBD_SetConfig+0x150>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d020      	beq.n	8007cb0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007c6e:	4b42      	ldr	r3, [pc, #264]	; (8007d78 <USBD_SetConfig+0x150>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c78:	4b3f      	ldr	r3, [pc, #252]	; (8007d78 <USBD_SetConfig+0x150>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7fe ffe7 	bl	8006c52 <USBD_SetClassConfig>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f962 	bl	8007f5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c9e:	e065      	b.n	8007d6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fa25 	bl	80080f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2203      	movs	r2, #3
 8007caa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007cae:	e05d      	b.n	8007d6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa1d 	bl	80080f0 <USBD_CtlSendStatus>
      break;
 8007cb6:	e059      	b.n	8007d6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cb8:	4b2f      	ldr	r3, [pc, #188]	; (8007d78 <USBD_SetConfig+0x150>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d112      	bne.n	8007ce6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007cc8:	4b2b      	ldr	r3, [pc, #172]	; (8007d78 <USBD_SetConfig+0x150>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cd2:	4b29      	ldr	r3, [pc, #164]	; (8007d78 <USBD_SetConfig+0x150>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fe ffd6 	bl	8006c8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa06 	bl	80080f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ce4:	e042      	b.n	8007d6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007ce6:	4b24      	ldr	r3, [pc, #144]	; (8007d78 <USBD_SetConfig+0x150>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d02a      	beq.n	8007d4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7fe ffc4 	bl	8006c8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d02:	4b1d      	ldr	r3, [pc, #116]	; (8007d78 <USBD_SetConfig+0x150>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d0c:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <USBD_SetConfig+0x150>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7fe ff9d 	bl	8006c52 <USBD_SetClassConfig>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00f      	beq.n	8007d42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f918 	bl	8007f5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7fe ffa9 	bl	8006c8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d40:	e014      	b.n	8007d6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f9d4 	bl	80080f0 <USBD_CtlSendStatus>
      break;
 8007d48:	e010      	b.n	8007d6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f9d0 	bl	80080f0 <USBD_CtlSendStatus>
      break;
 8007d50:	e00c      	b.n	8007d6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f900 	bl	8007f5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d5a:	4b07      	ldr	r3, [pc, #28]	; (8007d78 <USBD_SetConfig+0x150>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7fe ff92 	bl	8006c8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d66:	2303      	movs	r3, #3
 8007d68:	73fb      	strb	r3, [r7, #15]
      break;
 8007d6a:	bf00      	nop
  }

  return ret;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20000220 	.word	0x20000220

08007d7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	88db      	ldrh	r3, [r3, #6]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d004      	beq.n	8007d98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f8e2 	bl	8007f5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d96:	e023      	b.n	8007de0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	dc02      	bgt.n	8007daa <USBD_GetConfig+0x2e>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dc03      	bgt.n	8007db0 <USBD_GetConfig+0x34>
 8007da8:	e015      	b.n	8007dd6 <USBD_GetConfig+0x5a>
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d00b      	beq.n	8007dc6 <USBD_GetConfig+0x4a>
 8007dae:	e012      	b.n	8007dd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3308      	adds	r3, #8
 8007dba:	2201      	movs	r2, #1
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f93c 	bl	800803c <USBD_CtlSendData>
        break;
 8007dc4:	e00c      	b.n	8007de0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	2201      	movs	r2, #1
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f934 	bl	800803c <USBD_CtlSendData>
        break;
 8007dd4:	e004      	b.n	8007de0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f8be 	bl	8007f5a <USBD_CtlError>
        break;
 8007dde:	bf00      	nop
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d81e      	bhi.n	8007e3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	88db      	ldrh	r3, [r3, #6]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d004      	beq.n	8007e12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f8a5 	bl	8007f5a <USBD_CtlError>
        break;
 8007e10:	e01a      	b.n	8007e48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d005      	beq.n	8007e2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f043 0202 	orr.w	r2, r3, #2
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	330c      	adds	r3, #12
 8007e32:	2202      	movs	r2, #2
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f900 	bl	800803c <USBD_CtlSendData>
      break;
 8007e3c:	e004      	b.n	8007e48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f88a 	bl	8007f5a <USBD_CtlError>
      break;
 8007e46:	bf00      	nop
  }
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	885b      	ldrh	r3, [r3, #2]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d107      	bne.n	8007e72 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f940 	bl	80080f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007e70:	e013      	b.n	8007e9a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d10b      	bne.n	8007e92 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	889b      	ldrh	r3, [r3, #4]
 8007e7e:	0a1b      	lsrs	r3, r3, #8
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f930 	bl	80080f0 <USBD_CtlSendStatus>
}
 8007e90:	e003      	b.n	8007e9a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f860 	bl	8007f5a <USBD_CtlError>
}
 8007e9a:	bf00      	nop
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d80b      	bhi.n	8007ed2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	885b      	ldrh	r3, [r3, #2]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d10c      	bne.n	8007edc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f910 	bl	80080f0 <USBD_CtlSendStatus>
      }
      break;
 8007ed0:	e004      	b.n	8007edc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f840 	bl	8007f5a <USBD_CtlError>
      break;
 8007eda:	e000      	b.n	8007ede <USBD_ClrFeature+0x3c>
      break;
 8007edc:	bf00      	nop
  }
}
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	781a      	ldrb	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	781a      	ldrb	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7ff fa41 	bl	8007398 <SWAPBYTE>
 8007f16:	4603      	mov	r3, r0
 8007f18:	461a      	mov	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3301      	adds	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	3301      	adds	r3, #1
 8007f28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f7ff fa34 	bl	8007398 <SWAPBYTE>
 8007f30:	4603      	mov	r3, r0
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3301      	adds	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f7ff fa27 	bl	8007398 <SWAPBYTE>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	80da      	strh	r2, [r3, #6]
}
 8007f52:	bf00      	nop
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f64:	2180      	movs	r1, #128	; 0x80
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fcde 	bl	8008928 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fcda 	bl	8008928 <USBD_LL_StallEP>
}
 8007f74:	bf00      	nop
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d036      	beq.n	8008000 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f96:	6938      	ldr	r0, [r7, #16]
 8007f98:	f000 f836 	bl	8008008 <USBD_GetLen>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	4413      	add	r3, r2
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	7812      	ldrb	r2, [r2, #0]
 8007fb4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007fcc:	e013      	b.n	8007ff6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	7812      	ldrb	r2, [r2, #0]
 8007fd8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	613b      	str	r3, [r7, #16]
    idx++;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	4413      	add	r3, r2
 8007fec:	2200      	movs	r2, #0
 8007fee:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e7      	bne.n	8007fce <USBD_GetString+0x52>
 8007ffe:	e000      	b.n	8008002 <USBD_GetString+0x86>
    return;
 8008000:	bf00      	nop
  }
}
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008018:	e005      	b.n	8008026 <USBD_GetLen+0x1e>
  {
    len++;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	3301      	adds	r3, #1
 800801e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	3301      	adds	r3, #1
 8008024:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1f5      	bne.n	800801a <USBD_GetLen+0x12>
  }

  return len;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2202      	movs	r2, #2
 800804c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	2100      	movs	r1, #0
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 fce9 	bl	8008a3a <USBD_LL_Transmit>

  return USBD_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	2100      	movs	r1, #0
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fcd8 	bl	8008a3a <USBD_LL_Transmit>

  return USBD_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2203      	movs	r2, #3
 80080a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	2100      	movs	r1, #0
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 fcdc 	bl	8008a7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	2100      	movs	r1, #0
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 fccb 	bl	8008a7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2204      	movs	r2, #4
 80080fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008100:	2300      	movs	r3, #0
 8008102:	2200      	movs	r2, #0
 8008104:	2100      	movs	r1, #0
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fc97 	bl	8008a3a <USBD_LL_Transmit>

  return USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2205      	movs	r2, #5
 8008122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008126:	2300      	movs	r3, #0
 8008128:	2200      	movs	r2, #0
 800812a:	2100      	movs	r1, #0
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fca5 	bl	8008a7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008140:	2200      	movs	r2, #0
 8008142:	4912      	ldr	r1, [pc, #72]	; (800818c <MX_USB_DEVICE_Init+0x50>)
 8008144:	4812      	ldr	r0, [pc, #72]	; (8008190 <MX_USB_DEVICE_Init+0x54>)
 8008146:	f7fe fd07 	bl	8006b58 <USBD_Init>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008150:	f7f8 fb1c 	bl	800078c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008154:	490f      	ldr	r1, [pc, #60]	; (8008194 <MX_USB_DEVICE_Init+0x58>)
 8008156:	480e      	ldr	r0, [pc, #56]	; (8008190 <MX_USB_DEVICE_Init+0x54>)
 8008158:	f7fe fd2e 	bl	8006bb8 <USBD_RegisterClass>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008162:	f7f8 fb13 	bl	800078c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008166:	490c      	ldr	r1, [pc, #48]	; (8008198 <MX_USB_DEVICE_Init+0x5c>)
 8008168:	4809      	ldr	r0, [pc, #36]	; (8008190 <MX_USB_DEVICE_Init+0x54>)
 800816a:	f7fe fc1f 	bl	80069ac <USBD_CDC_RegisterInterface>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008174:	f7f8 fb0a 	bl	800078c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008178:	4805      	ldr	r0, [pc, #20]	; (8008190 <MX_USB_DEVICE_Init+0x54>)
 800817a:	f7fe fd53 	bl	8006c24 <USBD_Start>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008184:	f7f8 fb02 	bl	800078c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008188:	bf00      	nop
 800818a:	bd80      	pop	{r7, pc}
 800818c:	200000ac 	.word	0x200000ac
 8008190:	20000224 	.word	0x20000224
 8008194:	20000018 	.word	0x20000018
 8008198:	20000098 	.word	0x20000098

0800819c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081a0:	2200      	movs	r2, #0
 80081a2:	4905      	ldr	r1, [pc, #20]	; (80081b8 <CDC_Init_FS+0x1c>)
 80081a4:	4805      	ldr	r0, [pc, #20]	; (80081bc <CDC_Init_FS+0x20>)
 80081a6:	f7fe fc1b 	bl	80069e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081aa:	4905      	ldr	r1, [pc, #20]	; (80081c0 <CDC_Init_FS+0x24>)
 80081ac:	4803      	ldr	r0, [pc, #12]	; (80081bc <CDC_Init_FS+0x20>)
 80081ae:	f7fe fc39 	bl	8006a24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20000d00 	.word	0x20000d00
 80081bc:	20000224 	.word	0x20000224
 80081c0:	20000500 	.word	0x20000500

080081c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
 80081e0:	4613      	mov	r3, r2
 80081e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	2b23      	cmp	r3, #35	; 0x23
 80081e8:	d84a      	bhi.n	8008280 <CDC_Control_FS+0xac>
 80081ea:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <CDC_Control_FS+0x1c>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	08008281 	.word	0x08008281
 80081f4:	08008281 	.word	0x08008281
 80081f8:	08008281 	.word	0x08008281
 80081fc:	08008281 	.word	0x08008281
 8008200:	08008281 	.word	0x08008281
 8008204:	08008281 	.word	0x08008281
 8008208:	08008281 	.word	0x08008281
 800820c:	08008281 	.word	0x08008281
 8008210:	08008281 	.word	0x08008281
 8008214:	08008281 	.word	0x08008281
 8008218:	08008281 	.word	0x08008281
 800821c:	08008281 	.word	0x08008281
 8008220:	08008281 	.word	0x08008281
 8008224:	08008281 	.word	0x08008281
 8008228:	08008281 	.word	0x08008281
 800822c:	08008281 	.word	0x08008281
 8008230:	08008281 	.word	0x08008281
 8008234:	08008281 	.word	0x08008281
 8008238:	08008281 	.word	0x08008281
 800823c:	08008281 	.word	0x08008281
 8008240:	08008281 	.word	0x08008281
 8008244:	08008281 	.word	0x08008281
 8008248:	08008281 	.word	0x08008281
 800824c:	08008281 	.word	0x08008281
 8008250:	08008281 	.word	0x08008281
 8008254:	08008281 	.word	0x08008281
 8008258:	08008281 	.word	0x08008281
 800825c:	08008281 	.word	0x08008281
 8008260:	08008281 	.word	0x08008281
 8008264:	08008281 	.word	0x08008281
 8008268:	08008281 	.word	0x08008281
 800826c:	08008281 	.word	0x08008281
 8008270:	08008281 	.word	0x08008281
 8008274:	08008281 	.word	0x08008281
 8008278:	08008281 	.word	0x08008281
 800827c:	08008281 	.word	0x08008281
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008280:	bf00      	nop
  }

  return (USBD_OK);
 8008282:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	4809      	ldr	r0, [pc, #36]	; (80082c4 <CDC_Receive_FS+0x34>)
 800829e:	f7fe fbc1 	bl	8006a24 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082a2:	4808      	ldr	r0, [pc, #32]	; (80082c4 <CDC_Receive_FS+0x34>)
 80082a4:	f7fe fc22 	bl	8006aec <USBD_CDC_ReceivePacket>
	CDC_Transmit_FS(Buf, hUsbDeviceFS.ep0_data_len);
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <CDC_Receive_FS+0x34>)
 80082aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f808 	bl	80082c8 <CDC_Transmit_FS>

	return (USBD_OK);
 80082b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20000224 	.word	0x20000224

080082c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80082d8:	4b0d      	ldr	r3, [pc, #52]	; (8008310 <CDC_Transmit_FS+0x48>)
 80082da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e00b      	b.n	8008306 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80082ee:	887b      	ldrh	r3, [r7, #2]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	4806      	ldr	r0, [pc, #24]	; (8008310 <CDC_Transmit_FS+0x48>)
 80082f6:	f7fe fb73 	bl	80069e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80082fa:	4805      	ldr	r0, [pc, #20]	; (8008310 <CDC_Transmit_FS+0x48>)
 80082fc:	f7fe fbb0 	bl	8006a60 <USBD_CDC_TransmitPacket>
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20000224 	.word	0x20000224

08008314 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	4613      	mov	r3, r2
 8008320:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800832a:	4618      	mov	r0, r3
 800832c:	371c      	adds	r7, #28
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
	...

08008338 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	6039      	str	r1, [r7, #0]
 8008342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2212      	movs	r2, #18
 8008348:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800834a:	4b03      	ldr	r3, [pc, #12]	; (8008358 <USBD_FS_DeviceDescriptor+0x20>)
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	200000c8 	.word	0x200000c8

0800835c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2204      	movs	r2, #4
 800836c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800836e:	4b03      	ldr	r3, [pc, #12]	; (800837c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	200000dc 	.word	0x200000dc

08008380 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	6039      	str	r1, [r7, #0]
 800838a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	4907      	ldr	r1, [pc, #28]	; (80083b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008396:	4808      	ldr	r0, [pc, #32]	; (80083b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008398:	f7ff fdf0 	bl	8007f7c <USBD_GetString>
 800839c:	e004      	b.n	80083a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4904      	ldr	r1, [pc, #16]	; (80083b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80083a2:	4805      	ldr	r0, [pc, #20]	; (80083b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80083a4:	f7ff fdea 	bl	8007f7c <USBD_GetString>
  }
  return USBD_StrDesc;
 80083a8:	4b02      	ldr	r3, [pc, #8]	; (80083b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20001500 	.word	0x20001500
 80083b8:	08008bdc 	.word	0x08008bdc

080083bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	6039      	str	r1, [r7, #0]
 80083c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	4904      	ldr	r1, [pc, #16]	; (80083dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083cc:	4804      	ldr	r0, [pc, #16]	; (80083e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083ce:	f7ff fdd5 	bl	8007f7c <USBD_GetString>
  return USBD_StrDesc;
 80083d2:	4b02      	ldr	r3, [pc, #8]	; (80083dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20001500 	.word	0x20001500
 80083e0:	08008be8 	.word	0x08008be8

080083e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	6039      	str	r1, [r7, #0]
 80083ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	221a      	movs	r2, #26
 80083f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083f6:	f000 f843 	bl	8008480 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083fa:	4b02      	ldr	r3, [pc, #8]	; (8008404 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	200000e0 	.word	0x200000e0

08008408 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	6039      	str	r1, [r7, #0]
 8008412:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d105      	bne.n	8008426 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	4907      	ldr	r1, [pc, #28]	; (800843c <USBD_FS_ConfigStrDescriptor+0x34>)
 800841e:	4808      	ldr	r0, [pc, #32]	; (8008440 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008420:	f7ff fdac 	bl	8007f7c <USBD_GetString>
 8008424:	e004      	b.n	8008430 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	4904      	ldr	r1, [pc, #16]	; (800843c <USBD_FS_ConfigStrDescriptor+0x34>)
 800842a:	4805      	ldr	r0, [pc, #20]	; (8008440 <USBD_FS_ConfigStrDescriptor+0x38>)
 800842c:	f7ff fda6 	bl	8007f7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008430:	4b02      	ldr	r3, [pc, #8]	; (800843c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20001500 	.word	0x20001500
 8008440:	08008bfc 	.word	0x08008bfc

08008444 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d105      	bne.n	8008462 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	4907      	ldr	r1, [pc, #28]	; (8008478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800845a:	4808      	ldr	r0, [pc, #32]	; (800847c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800845c:	f7ff fd8e 	bl	8007f7c <USBD_GetString>
 8008460:	e004      	b.n	800846c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	4904      	ldr	r1, [pc, #16]	; (8008478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008466:	4805      	ldr	r0, [pc, #20]	; (800847c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008468:	f7ff fd88 	bl	8007f7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800846c:	4b02      	ldr	r3, [pc, #8]	; (8008478 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20001500 	.word	0x20001500
 800847c:	08008c08 	.word	0x08008c08

08008480 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008486:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <Get_SerialNum+0x44>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800848c:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <Get_SerialNum+0x48>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008492:	4b0e      	ldr	r3, [pc, #56]	; (80084cc <Get_SerialNum+0x4c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d009      	beq.n	80084ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084a6:	2208      	movs	r2, #8
 80084a8:	4909      	ldr	r1, [pc, #36]	; (80084d0 <Get_SerialNum+0x50>)
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f814 	bl	80084d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084b0:	2204      	movs	r2, #4
 80084b2:	4908      	ldr	r1, [pc, #32]	; (80084d4 <Get_SerialNum+0x54>)
 80084b4:	68b8      	ldr	r0, [r7, #8]
 80084b6:	f000 f80f 	bl	80084d8 <IntToUnicode>
  }
}
 80084ba:	bf00      	nop
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	1fff7a10 	.word	0x1fff7a10
 80084c8:	1fff7a14 	.word	0x1fff7a14
 80084cc:	1fff7a18 	.word	0x1fff7a18
 80084d0:	200000e2 	.word	0x200000e2
 80084d4:	200000f2 	.word	0x200000f2

080084d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084ea:	2300      	movs	r3, #0
 80084ec:	75fb      	strb	r3, [r7, #23]
 80084ee:	e027      	b.n	8008540 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	0f1b      	lsrs	r3, r3, #28
 80084f4:	2b09      	cmp	r3, #9
 80084f6:	d80b      	bhi.n	8008510 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	0f1b      	lsrs	r3, r3, #28
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	7dfb      	ldrb	r3, [r7, #23]
 8008500:	005b      	lsls	r3, r3, #1
 8008502:	4619      	mov	r1, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	440b      	add	r3, r1
 8008508:	3230      	adds	r2, #48	; 0x30
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	701a      	strb	r2, [r3, #0]
 800850e:	e00a      	b.n	8008526 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	0f1b      	lsrs	r3, r3, #28
 8008514:	b2da      	uxtb	r2, r3
 8008516:	7dfb      	ldrb	r3, [r7, #23]
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	4619      	mov	r1, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	440b      	add	r3, r1
 8008520:	3237      	adds	r2, #55	; 0x37
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	011b      	lsls	r3, r3, #4
 800852a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	3301      	adds	r3, #1
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	4413      	add	r3, r2
 8008536:	2200      	movs	r2, #0
 8008538:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800853a:	7dfb      	ldrb	r3, [r7, #23]
 800853c:	3301      	adds	r3, #1
 800853e:	75fb      	strb	r3, [r7, #23]
 8008540:	7dfa      	ldrb	r2, [r7, #23]
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	429a      	cmp	r2, r3
 8008546:	d3d3      	bcc.n	80084f0 <IntToUnicode+0x18>
  }
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
	...

08008558 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08a      	sub	sp, #40	; 0x28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008560:	f107 0314 	add.w	r3, r7, #20
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	605a      	str	r2, [r3, #4]
 800856a:	609a      	str	r2, [r3, #8]
 800856c:	60da      	str	r2, [r3, #12]
 800856e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008578:	d13a      	bne.n	80085f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800857a:	2300      	movs	r3, #0
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	4b1e      	ldr	r3, [pc, #120]	; (80085f8 <HAL_PCD_MspInit+0xa0>)
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	4a1d      	ldr	r2, [pc, #116]	; (80085f8 <HAL_PCD_MspInit+0xa0>)
 8008584:	f043 0301 	orr.w	r3, r3, #1
 8008588:	6313      	str	r3, [r2, #48]	; 0x30
 800858a:	4b1b      	ldr	r3, [pc, #108]	; (80085f8 <HAL_PCD_MspInit+0xa0>)
 800858c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	613b      	str	r3, [r7, #16]
 8008594:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008596:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800859a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800859c:	2302      	movs	r3, #2
 800859e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a0:	2300      	movs	r3, #0
 80085a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085a4:	2303      	movs	r3, #3
 80085a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085a8:	230a      	movs	r3, #10
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ac:	f107 0314 	add.w	r3, r7, #20
 80085b0:	4619      	mov	r1, r3
 80085b2:	4812      	ldr	r0, [pc, #72]	; (80085fc <HAL_PCD_MspInit+0xa4>)
 80085b4:	f7f9 f806 	bl	80015c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085b8:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <HAL_PCD_MspInit+0xa0>)
 80085ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085bc:	4a0e      	ldr	r2, [pc, #56]	; (80085f8 <HAL_PCD_MspInit+0xa0>)
 80085be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c2:	6353      	str	r3, [r2, #52]	; 0x34
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <HAL_PCD_MspInit+0xa0>)
 80085ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085cc:	4a0a      	ldr	r2, [pc, #40]	; (80085f8 <HAL_PCD_MspInit+0xa0>)
 80085ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085d2:	6453      	str	r3, [r2, #68]	; 0x44
 80085d4:	4b08      	ldr	r3, [pc, #32]	; (80085f8 <HAL_PCD_MspInit+0xa0>)
 80085d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085e0:	2200      	movs	r2, #0
 80085e2:	2100      	movs	r1, #0
 80085e4:	2043      	movs	r0, #67	; 0x43
 80085e6:	f7f8 fbb4 	bl	8000d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085ea:	2043      	movs	r0, #67	; 0x43
 80085ec:	f7f8 fbcd 	bl	8000d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085f0:	bf00      	nop
 80085f2:	3728      	adds	r7, #40	; 0x28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	40023800 	.word	0x40023800
 80085fc:	40020000 	.word	0x40020000

08008600 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008614:	4619      	mov	r1, r3
 8008616:	4610      	mov	r0, r2
 8008618:	f7fe fb51 	bl	8006cbe <USBD_LL_SetupStage>
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008636:	78fa      	ldrb	r2, [r7, #3]
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	4613      	mov	r3, r2
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	440b      	add	r3, r1
 8008644:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	4619      	mov	r1, r3
 800864e:	f7fe fb8b 	bl	8006d68 <USBD_LL_DataOutStage>
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	460b      	mov	r3, r1
 8008664:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800866c:	78fa      	ldrb	r2, [r7, #3]
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4613      	mov	r3, r2
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	440b      	add	r3, r1
 800867a:	334c      	adds	r3, #76	; 0x4c
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	4619      	mov	r1, r3
 8008682:	f7fe fc24 	bl	8006ece <USBD_LL_DataInStage>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800869c:	4618      	mov	r0, r3
 800869e:	f7fe fd58 	bl	8007152 <USBD_LL_SOF>
}
 80086a2:	bf00      	nop
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086b2:	2301      	movs	r3, #1
 80086b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d001      	beq.n	80086c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086be:	f7f8 f865 	bl	800078c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086c8:	7bfa      	ldrb	r2, [r7, #15]
 80086ca:	4611      	mov	r1, r2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe fd02 	bl	80070d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe fcaa 	bl	8007032 <USBD_LL_Reset>
}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fcfd 	bl	80070f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	6812      	ldr	r2, [r2, #0]
 800870a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d005      	beq.n	8008728 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800871c:	4b04      	ldr	r3, [pc, #16]	; (8008730 <HAL_PCD_SuspendCallback+0x48>)
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	4a03      	ldr	r2, [pc, #12]	; (8008730 <HAL_PCD_SuspendCallback+0x48>)
 8008722:	f043 0306 	orr.w	r3, r3, #6
 8008726:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	e000ed00 	.word	0xe000ed00

08008734 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe fced 	bl	8007122 <USBD_LL_Resume>
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	4611      	mov	r1, r2
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe fd45 	bl	80071f6 <USBD_LL_IsoOUTIncomplete>
}
 800876c:	bf00      	nop
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008786:	78fa      	ldrb	r2, [r7, #3]
 8008788:	4611      	mov	r1, r2
 800878a:	4618      	mov	r0, r3
 800878c:	f7fe fd01 	bl	8007192 <USBD_LL_IsoINIncomplete>
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe fd57 	bl	800725a <USBD_LL_DevConnected>
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe fd54 	bl	8007270 <USBD_LL_DevDisconnected>
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d13c      	bne.n	800885a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80087e0:	4a20      	ldr	r2, [pc, #128]	; (8008864 <USBD_LL_Init+0x94>)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a1e      	ldr	r2, [pc, #120]	; (8008864 <USBD_LL_Init+0x94>)
 80087ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087f0:	4b1c      	ldr	r3, [pc, #112]	; (8008864 <USBD_LL_Init+0x94>)
 80087f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80087f8:	4b1a      	ldr	r3, [pc, #104]	; (8008864 <USBD_LL_Init+0x94>)
 80087fa:	2204      	movs	r2, #4
 80087fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80087fe:	4b19      	ldr	r3, [pc, #100]	; (8008864 <USBD_LL_Init+0x94>)
 8008800:	2202      	movs	r2, #2
 8008802:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008804:	4b17      	ldr	r3, [pc, #92]	; (8008864 <USBD_LL_Init+0x94>)
 8008806:	2200      	movs	r2, #0
 8008808:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800880a:	4b16      	ldr	r3, [pc, #88]	; (8008864 <USBD_LL_Init+0x94>)
 800880c:	2202      	movs	r2, #2
 800880e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008810:	4b14      	ldr	r3, [pc, #80]	; (8008864 <USBD_LL_Init+0x94>)
 8008812:	2200      	movs	r2, #0
 8008814:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008816:	4b13      	ldr	r3, [pc, #76]	; (8008864 <USBD_LL_Init+0x94>)
 8008818:	2200      	movs	r2, #0
 800881a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800881c:	4b11      	ldr	r3, [pc, #68]	; (8008864 <USBD_LL_Init+0x94>)
 800881e:	2200      	movs	r2, #0
 8008820:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008822:	4b10      	ldr	r3, [pc, #64]	; (8008864 <USBD_LL_Init+0x94>)
 8008824:	2200      	movs	r2, #0
 8008826:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008828:	4b0e      	ldr	r3, [pc, #56]	; (8008864 <USBD_LL_Init+0x94>)
 800882a:	2200      	movs	r2, #0
 800882c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800882e:	480d      	ldr	r0, [pc, #52]	; (8008864 <USBD_LL_Init+0x94>)
 8008830:	f7f9 f865 	bl	80018fe <HAL_PCD_Init>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800883a:	f7f7 ffa7 	bl	800078c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800883e:	2180      	movs	r1, #128	; 0x80
 8008840:	4808      	ldr	r0, [pc, #32]	; (8008864 <USBD_LL_Init+0x94>)
 8008842:	f7fa fabc 	bl	8002dbe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008846:	2240      	movs	r2, #64	; 0x40
 8008848:	2100      	movs	r1, #0
 800884a:	4806      	ldr	r0, [pc, #24]	; (8008864 <USBD_LL_Init+0x94>)
 800884c:	f7fa fa70 	bl	8002d30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008850:	2280      	movs	r2, #128	; 0x80
 8008852:	2101      	movs	r1, #1
 8008854:	4803      	ldr	r0, [pc, #12]	; (8008864 <USBD_LL_Init+0x94>)
 8008856:	f7fa fa6b 	bl	8002d30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20001700 	.word	0x20001700

08008868 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800887e:	4618      	mov	r0, r3
 8008880:	f7f9 f95a 	bl	8001b38 <HAL_PCD_Start>
 8008884:	4603      	mov	r3, r0
 8008886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 f942 	bl	8008b14 <USBD_Get_USB_Status>
 8008890:	4603      	mov	r3, r0
 8008892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008894:	7bbb      	ldrb	r3, [r7, #14]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	4608      	mov	r0, r1
 80088a8:	4611      	mov	r1, r2
 80088aa:	461a      	mov	r2, r3
 80088ac:	4603      	mov	r3, r0
 80088ae:	70fb      	strb	r3, [r7, #3]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70bb      	strb	r3, [r7, #2]
 80088b4:	4613      	mov	r3, r2
 80088b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80088c6:	78bb      	ldrb	r3, [r7, #2]
 80088c8:	883a      	ldrh	r2, [r7, #0]
 80088ca:	78f9      	ldrb	r1, [r7, #3]
 80088cc:	f7f9 fe2b 	bl	8002526 <HAL_PCD_EP_Open>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 f91c 	bl	8008b14 <USBD_Get_USB_Status>
 80088dc:	4603      	mov	r3, r0
 80088de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	460b      	mov	r3, r1
 80088f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008904:	78fa      	ldrb	r2, [r7, #3]
 8008906:	4611      	mov	r1, r2
 8008908:	4618      	mov	r0, r3
 800890a:	f7f9 fe74 	bl	80025f6 <HAL_PCD_EP_Close>
 800890e:	4603      	mov	r3, r0
 8008910:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	4618      	mov	r0, r3
 8008916:	f000 f8fd 	bl	8008b14 <USBD_Get_USB_Status>
 800891a:	4603      	mov	r3, r0
 800891c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800891e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008942:	78fa      	ldrb	r2, [r7, #3]
 8008944:	4611      	mov	r1, r2
 8008946:	4618      	mov	r0, r3
 8008948:	f7f9 ff4c 	bl	80027e4 <HAL_PCD_EP_SetStall>
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	4618      	mov	r0, r3
 8008954:	f000 f8de 	bl	8008b14 <USBD_Get_USB_Status>
 8008958:	4603      	mov	r3, r0
 800895a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800895c:	7bbb      	ldrb	r3, [r7, #14]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	460b      	mov	r3, r1
 8008970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008980:	78fa      	ldrb	r2, [r7, #3]
 8008982:	4611      	mov	r1, r2
 8008984:	4618      	mov	r0, r3
 8008986:	f7f9 ff91 	bl	80028ac <HAL_PCD_EP_ClrStall>
 800898a:	4603      	mov	r3, r0
 800898c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898e:	7bfb      	ldrb	r3, [r7, #15]
 8008990:	4618      	mov	r0, r3
 8008992:	f000 f8bf 	bl	8008b14 <USBD_Get_USB_Status>
 8008996:	4603      	mov	r3, r0
 8008998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800899a:	7bbb      	ldrb	r3, [r7, #14]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	da0b      	bge.n	80089d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089c6:	68f9      	ldr	r1, [r7, #12]
 80089c8:	4613      	mov	r3, r2
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	333e      	adds	r3, #62	; 0x3e
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	e00b      	b.n	80089f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089de:	68f9      	ldr	r1, [r7, #12]
 80089e0:	4613      	mov	r3, r2
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80089ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	4611      	mov	r1, r2
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7f9 fd5e 	bl	80024dc <HAL_PCD_SetAddress>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 f874 	bl	8008b14 <USBD_Get_USB_Status>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b086      	sub	sp, #24
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	60f8      	str	r0, [r7, #12]
 8008a42:	607a      	str	r2, [r7, #4]
 8008a44:	603b      	str	r3, [r7, #0]
 8008a46:	460b      	mov	r3, r1
 8008a48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a58:	7af9      	ldrb	r1, [r7, #11]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	f7f9 fe77 	bl	8002750 <HAL_PCD_EP_Transmit>
 8008a62:	4603      	mov	r3, r0
 8008a64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a66:	7dfb      	ldrb	r3, [r7, #23]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f853 	bl	8008b14 <USBD_Get_USB_Status>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a72:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	607a      	str	r2, [r7, #4]
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a9a:	7af9      	ldrb	r1, [r7, #11]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	f7f9 fdf3 	bl	800268a <HAL_PCD_EP_Receive>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f832 	bl	8008b14 <USBD_Get_USB_Status>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ab4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ad0:	78fa      	ldrb	r2, [r7, #3]
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7f9 fe23 	bl	8002720 <HAL_PCD_EP_GetRxCount>
 8008ada:	4603      	mov	r3, r0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008aec:	4b03      	ldr	r3, [pc, #12]	; (8008afc <USBD_static_malloc+0x18>)
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	20001c0c 	.word	0x20001c0c

08008b00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]

}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d817      	bhi.n	8008b58 <USBD_Get_USB_Status+0x44>
 8008b28:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <USBD_Get_USB_Status+0x1c>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b41 	.word	0x08008b41
 8008b34:	08008b47 	.word	0x08008b47
 8008b38:	08008b4d 	.word	0x08008b4d
 8008b3c:	08008b53 	.word	0x08008b53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73fb      	strb	r3, [r7, #15]
    break;
 8008b44:	e00b      	b.n	8008b5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b46:	2303      	movs	r3, #3
 8008b48:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4a:	e008      	b.n	8008b5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b50:	e005      	b.n	8008b5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b52:	2303      	movs	r3, #3
 8008b54:	73fb      	strb	r3, [r7, #15]
    break;
 8008b56:	e002      	b.n	8008b5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5c:	bf00      	nop
  }
  return usb_status;
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <__libc_init_array>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	4d0d      	ldr	r5, [pc, #52]	; (8008ba4 <__libc_init_array+0x38>)
 8008b70:	4c0d      	ldr	r4, [pc, #52]	; (8008ba8 <__libc_init_array+0x3c>)
 8008b72:	1b64      	subs	r4, r4, r5
 8008b74:	10a4      	asrs	r4, r4, #2
 8008b76:	2600      	movs	r6, #0
 8008b78:	42a6      	cmp	r6, r4
 8008b7a:	d109      	bne.n	8008b90 <__libc_init_array+0x24>
 8008b7c:	4d0b      	ldr	r5, [pc, #44]	; (8008bac <__libc_init_array+0x40>)
 8008b7e:	4c0c      	ldr	r4, [pc, #48]	; (8008bb0 <__libc_init_array+0x44>)
 8008b80:	f000 f820 	bl	8008bc4 <_init>
 8008b84:	1b64      	subs	r4, r4, r5
 8008b86:	10a4      	asrs	r4, r4, #2
 8008b88:	2600      	movs	r6, #0
 8008b8a:	42a6      	cmp	r6, r4
 8008b8c:	d105      	bne.n	8008b9a <__libc_init_array+0x2e>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b94:	4798      	blx	r3
 8008b96:	3601      	adds	r6, #1
 8008b98:	e7ee      	b.n	8008b78 <__libc_init_array+0xc>
 8008b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b9e:	4798      	blx	r3
 8008ba0:	3601      	adds	r6, #1
 8008ba2:	e7f2      	b.n	8008b8a <__libc_init_array+0x1e>
 8008ba4:	08008c40 	.word	0x08008c40
 8008ba8:	08008c40 	.word	0x08008c40
 8008bac:	08008c40 	.word	0x08008c40
 8008bb0:	08008c44 	.word	0x08008c44

08008bb4 <memset>:
 8008bb4:	4402      	add	r2, r0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d100      	bne.n	8008bbe <memset+0xa>
 8008bbc:	4770      	bx	lr
 8008bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc2:	e7f9      	b.n	8008bb8 <memset+0x4>

08008bc4 <_init>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr

08008bd0 <_fini>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	bf00      	nop
 8008bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd6:	bc08      	pop	{r3}
 8008bd8:	469e      	mov	lr, r3
 8008bda:	4770      	bx	lr
