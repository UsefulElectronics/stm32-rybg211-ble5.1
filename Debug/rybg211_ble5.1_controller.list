
rybg211_ble5.1_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08009d50  08009d50  00019d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f54  08009f54  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009f54  08009f54  00019f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f5c  08009f5c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f5c  08009f5c  00019f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f60  08009f60  00019f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000217c  20000160  0800a0c4  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022dc  0800a0c4  000222dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a5e  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f1  00000000  00000000  00033bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00036fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00037e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019388  00000000  00000000  00038c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a62  00000000  00000000  00051f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad89  00000000  00000000  000659f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f077b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f5c  00000000  00000000  000f07cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d38 	.word	0x08009d38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08009d38 	.word	0x08009d38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc20 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f832 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8ea 	bl	8000778 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8c0 	bl	8000728 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f894 	bl	80006d4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005ac:	f008 f87c 	bl	80086a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  CDC_Handler_Init_FS	(main_UsbRxTask);
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <main+0x58>)
 80005b2:	f008 f983 	bl	80088bc <CDC_Handler_Init_FS>

  rybg211_bleModuleInit();
 80005b6:	f008 fdc7 	bl	8009148 <rybg211_bleModuleInit>

  rybg211_setDeviceName(hBleModule.txBuffer, "BLE Bridge");
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <main+0x5c>)
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <main+0x60>)
 80005be:	f008 fdd7 	bl	8009170 <rybg211_setDeviceName>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 80005c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c6:	490c      	ldr	r1, [pc, #48]	; (80005f8 <main+0x64>)
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <main+0x68>)
 80005ca:	f003 fb09 	bl	8003be0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <main+0x6c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x6c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f022 0208 	bic.w	r2, r2, #8
 80005dc:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  main_UartTxTask();
 80005de:	f000 f945 	bl	800086c <main_UartTxTask>

	  main_UartRxTask();
 80005e2:	f000 f96f 	bl	80008c4 <main_UartRxTask>

	  main_bridgeDataTransfare();
 80005e6:	f000 f9cf 	bl	8000988 <main_bridgeDataTransfare>
	  main_UartTxTask();
 80005ea:	e7f8      	b.n	80005de <main+0x4a>
 80005ec:	08000935 	.word	0x08000935
 80005f0:	08009d50 	.word	0x08009d50
 80005f4:	200020c9 	.word	0x200020c9
 80005f8:	200021c9 	.word	0x200021c9
 80005fc:	2000017c 	.word	0x2000017c
 8000600:	200001c0 	.word	0x200001c0

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f008 ff28 	bl	8009468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <SystemClock_Config+0xc8>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xcc>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000674:	230f      	movs	r3, #15
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000678:	2390      	movs	r3, #144	; 0x90
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067c:	2304      	movs	r3, #4
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000680:	2305      	movs	r3, #5
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fd85 	bl	8003198 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 f9fa 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2101      	movs	r1, #1
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 ffe7 	bl	8003688 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c0:	f000 f9e4 	bl	8000a8c <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART1_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 800070c:	f003 f99c 	bl	8003a48 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f9b9 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000017c 	.word	0x2000017c
 8000724:	40011000 	.word	0x40011000

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_DMA_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <MX_DMA_Init+0x4c>)
 8000738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_DMA_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	203a      	movs	r0, #58	; 0x3a
 8000750:	f000 fcb5 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000754:	203a      	movs	r0, #58	; 0x3a
 8000756:	f000 fcce 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2046      	movs	r0, #70	; 0x46
 8000760:	f000 fcad 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000764:	2046      	movs	r0, #70	; 0x46
 8000766:	f000 fcc6 	bl	80010f6 <HAL_NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f244 01e0 	movw	r1, #16608	; 0x40e0
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007ea:	f001 fa25 	bl	8001c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODULE_RESET_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = MODULE_RESET_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80007ee:	f244 03e0 	movw	r3, #16608	; 0x40e0
 80007f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0xa0>)
 8000808:	f001 f892 	bl	8001930 <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400

0800081c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	807b      	strh	r3, [r7, #2]
	hBleModule.controlFlags.flag.packetReceived = ENABLE;
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <HAL_UARTEx_RxEventCallback+0x40>)
 800082a:	7813      	ldrb	r3, [r2, #0]
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	7013      	strb	r3, [r2, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hBleModule.rxBuffer, BLE_MODULE_BUFFER_SIZE);
 8000832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000836:	490a      	ldr	r1, [pc, #40]	; (8000860 <HAL_UARTEx_RxEventCallback+0x44>)
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <HAL_UARTEx_RxEventCallback+0x48>)
 800083a:	f003 f9d1 	bl	8003be0 <HAL_UARTEx_ReceiveToIdle_DMA>

	hBleModule.rxPacketSize = Size;
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_UARTEx_RxEventCallback+0x40>)
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	8093      	strh	r3, [r2, #4]

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_UARTEx_RxEventCallback+0x4c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f022 0208 	bic.w	r2, r2, #8
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200020b4 	.word	0x200020b4
 8000860:	200021c9 	.word	0x200021c9
 8000864:	2000017c 	.word	0x2000017c
 8000868:	200001c0 	.word	0x200001c0

0800086c <main_UartTxTask>:
/**
 * @brief Module AT UART command transmission task
 *
 */
static void main_UartTxTask()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hBleModule.txTimer > 1000))
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <main_UartTxTask+0x4c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d019      	beq.n	80008b2 <main_UartTxTask+0x46>
 800087e:	f000 fb13 	bl	8000ea8 <HAL_GetTick>
 8000882:	4602      	mov	r2, r0
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <main_UartTxTask+0x4c>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800088e:	d910      	bls.n	80008b2 <main_UartTxTask+0x46>
	{
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <main_UartTxTask+0x4c>)
 8000892:	885b      	ldrh	r3, [r3, #2]
 8000894:	461a      	mov	r2, r3
 8000896:	4909      	ldr	r1, [pc, #36]	; (80008bc <main_UartTxTask+0x50>)
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <main_UartTxTask+0x54>)
 800089a:	f003 f923 	bl	8003ae4 <HAL_UART_Transmit_DMA>

		hBleModule.controlFlags.flag.packetToTransmit = DISABLE;
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <main_UartTxTask+0x4c>)
 80008a0:	7813      	ldrb	r3, [r2, #0]
 80008a2:	f36f 0341 	bfc	r3, #1, #1
 80008a6:	7013      	strb	r3, [r2, #0]

		hBleModule.txTimer = HAL_GetTick();
 80008a8:	f000 fafe 	bl	8000ea8 <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a02      	ldr	r2, [pc, #8]	; (80008b8 <main_UartTxTask+0x4c>)
 80008b0:	60d3      	str	r3, [r2, #12]
	}
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200020b4 	.word	0x200020b4
 80008bc:	200020c9 	.word	0x200020c9
 80008c0:	2000017c 	.word	0x2000017c

080008c4 <main_UartRxTask>:
/**
 * @brief Module AT UART reception task
 *
 */
static void main_UartRxTask()
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	if(hBleModule.controlFlags.flag.packetReceived)
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <main_UartRxTask+0x60>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d024      	beq.n	8000920 <main_UartRxTask+0x5c>
	{
		if(rybg211_rxPacketParser(hBleModule.rxBuffer, hBleModule.rxPacketSize))
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <main_UartRxTask+0x60>)
 80008d8:	889b      	ldrh	r3, [r3, #4]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <main_UartRxTask+0x64>)
 80008e0:	f008 fc7c 	bl	80091dc <rybg211_rxPacketParser>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d015      	beq.n	8000916 <main_UartRxTask+0x52>
		{
			hBridge.blePacketSize = (uint16_t)rybg211_rxDataRead(hBleModule.rxBuffer, hBridge.bleBuffer);
 80008ea:	4910      	ldr	r1, [pc, #64]	; (800092c <main_UartRxTask+0x68>)
 80008ec:	480e      	ldr	r0, [pc, #56]	; (8000928 <main_UartRxTask+0x64>)
 80008ee:	f008 fd1f 	bl	8009330 <rybg211_rxDataRead>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <main_UartRxTask+0x6c>)
 80008f8:	805a      	strh	r2, [r3, #2]

			if(CDC_UsbConnectionCheck())
 80008fa:	f007 fffb 	bl	80088f4 <CDC_UsbConnectionCheck>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d005      	beq.n	8000910 <main_UartRxTask+0x4c>
			{
				hBridge.controlFlags.flag.bleToUsb = ENABLE;
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <main_UartRxTask+0x6c>)
 8000906:	7813      	ldrb	r3, [r2, #0]
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	7013      	strb	r3, [r2, #0]
 800090e:	e002      	b.n	8000916 <main_UartRxTask+0x52>
			}
			else
			{
				main_bleCommandControl((uint8_t*) hBridge.bleBuffer);
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <main_UartRxTask+0x68>)
 8000912:	f000 f881 	bl	8000a18 <main_bleCommandControl>
			}

		}

		hBleModule.controlFlags.flag.packetReceived = DISABLE;
 8000916:	4a03      	ldr	r2, [pc, #12]	; (8000924 <main_UartRxTask+0x60>)
 8000918:	7813      	ldrb	r3, [r2, #0]
 800091a:	f36f 0300 	bfc	r3, #0, #1
 800091e:	7013      	strb	r3, [r2, #0]

	}
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200020b4 	.word	0x200020b4
 8000928:	200021c9 	.word	0x200021c9
 800092c:	2000028c 	.word	0x2000028c
 8000930:	20000280 	.word	0x20000280

08000934 <main_UsbRxTask>:
 * @param 	cdcRxBuffer	:	Buffer will carry the data received over USB.
 *
 * @param 	packetSize	:	The size of the received packet.
 */
static void main_UsbRxTask(char* cdcRxBuffer, uint16_t packetSize)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	807b      	strh	r3, [r7, #2]
	if(hBleModule.ConnectedDevice)
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <main_UsbRxTask+0x44>)
 8000942:	7d1b      	ldrb	r3, [r3, #20]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00e      	beq.n	8000966 <main_UsbRxTask+0x32>
	{
		memcpy(hBridge.usbBuffer, cdcRxBuffer, packetSize);
 8000948:	887b      	ldrh	r3, [r7, #2]
 800094a:	461a      	mov	r2, r3
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	480b      	ldr	r0, [pc, #44]	; (800097c <main_UsbRxTask+0x48>)
 8000950:	f008 fd7c 	bl	800944c <memcpy>

		hBridge.usbPacketSize = packetSize;
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <main_UsbRxTask+0x4c>)
 8000956:	887b      	ldrh	r3, [r7, #2]
 8000958:	8093      	strh	r3, [r2, #4]

		hBridge.controlFlags.flag.usbToBle = ENABLE;
 800095a:	4a09      	ldr	r2, [pc, #36]	; (8000980 <main_UsbRxTask+0x4c>)
 800095c:	7813      	ldrb	r3, [r2, #0]
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	7013      	strb	r3, [r2, #0]
	}
	else
	{
		CDC_Transmit_FS(BLE_NO_CONNECTION_MESSAGE, strlen(BLE_NO_CONNECTION_MESSAGE));
	}
}
 8000964:	e003      	b.n	800096e <main_UsbRxTask+0x3a>
		CDC_Transmit_FS(BLE_NO_CONNECTION_MESSAGE, strlen(BLE_NO_CONNECTION_MESSAGE));
 8000966:	2112      	movs	r1, #18
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <main_UsbRxTask+0x50>)
 800096a:	f007 ff6f 	bl	800884c <CDC_Transmit_FS>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200020b4 	.word	0x200020b4
 800097c:	2000038c 	.word	0x2000038c
 8000980:	20000280 	.word	0x20000280
 8000984:	08009d5c 	.word	0x08009d5c

08000988 <main_bridgeDataTransfare>:

static void main_bridgeDataTransfare()
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	if(hBridge.controlFlags.flag.bleToUsb)
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <main_bridgeDataTransfare+0x78>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d016      	beq.n	80009c8 <main_bridgeDataTransfare+0x40>
	{
		hBridge.controlFlags.flag.bleToUsb = DISABLE;
 800099a:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <main_bridgeDataTransfare+0x78>)
 800099c:	7813      	ldrb	r3, [r2, #0]
 800099e:	f36f 0300 	bfc	r3, #0, #1
 80009a2:	7013      	strb	r3, [r2, #0]

		//Place feedline character at the end of the packet and increment the size by 1.
		hBridge.bleBuffer[hBridge.blePacketSize++] = '\n';
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <main_bridgeDataTransfare+0x78>)
 80009a6:	885b      	ldrh	r3, [r3, #2]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	b291      	uxth	r1, r2
 80009ac:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <main_bridgeDataTransfare+0x78>)
 80009ae:	8051      	strh	r1, [r2, #2]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <main_bridgeDataTransfare+0x78>)
 80009b4:	4413      	add	r3, r2
 80009b6:	220a      	movs	r2, #10
 80009b8:	731a      	strb	r2, [r3, #12]

		CDC_Transmit_FS((uint8_t*) hBridge.bleBuffer, (uint16_t)hBridge.blePacketSize);
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <main_bridgeDataTransfare+0x78>)
 80009bc:	885b      	ldrh	r3, [r3, #2]
 80009be:	4619      	mov	r1, r3
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <main_bridgeDataTransfare+0x7c>)
 80009c2:	f007 ff43 	bl	800884c <CDC_Transmit_FS>

		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);

		hBridge.controlFlags.flag.usbToBle = DISABLE;
	}
}
 80009c6:	e018      	b.n	80009fa <main_bridgeDataTransfare+0x72>
	else if(hBridge.controlFlags.flag.usbToBle)
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <main_bridgeDataTransfare+0x78>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	f003 0302 	and.w	r3, r3, #2
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d011      	beq.n	80009fa <main_bridgeDataTransfare+0x72>
		rybg211_txDataSend(hBridge.usbBuffer, hBridge.usbPacketSize);
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <main_bridgeDataTransfare+0x78>)
 80009d8:	889b      	ldrh	r3, [r3, #4]
 80009da:	4619      	mov	r1, r3
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <main_bridgeDataTransfare+0x80>)
 80009de:	f008 fccb 	bl	8009378 <rybg211_txDataSend>
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hBleModule.txBuffer, hBleModule.txPacketSize);
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <main_bridgeDataTransfare+0x84>)
 80009e4:	885b      	ldrh	r3, [r3, #2]
 80009e6:	461a      	mov	r2, r3
 80009e8:	4909      	ldr	r1, [pc, #36]	; (8000a10 <main_bridgeDataTransfare+0x88>)
 80009ea:	480a      	ldr	r0, [pc, #40]	; (8000a14 <main_bridgeDataTransfare+0x8c>)
 80009ec:	f003 f87a 	bl	8003ae4 <HAL_UART_Transmit_DMA>
		hBridge.controlFlags.flag.usbToBle = DISABLE;
 80009f0:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <main_bridgeDataTransfare+0x78>)
 80009f2:	7813      	ldrb	r3, [r2, #0]
 80009f4:	f36f 0341 	bfc	r3, #1, #1
 80009f8:	7013      	strb	r3, [r2, #0]
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000280 	.word	0x20000280
 8000a04:	2000028c 	.word	0x2000028c
 8000a08:	2000038c 	.word	0x2000038c
 8000a0c:	200020b4 	.word	0x200020b4
 8000a10:	200020c9 	.word	0x200020c9
 8000a14:	2000017c 	.word	0x2000017c

08000a18 <main_bleCommandControl>:


static void main_bleCommandControl(uint8_t* cmd)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	switch (cmd[0])
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d82a      	bhi.n	8000a7e <main_bleCommandControl+0x66>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <main_bleCommandControl+0x18>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a41 	.word	0x08000a41
 8000a34:	08000a61 	.word	0x08000a61
 8000a38:	08000a6b 	.word	0x08000a6b
 8000a3c:	08000a75 	.word	0x08000a75
	{
		case 0:
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2120      	movs	r1, #32
 8000a44:	4810      	ldr	r0, [pc, #64]	; (8000a88 <main_bleCommandControl+0x70>)
 8000a46:	f001 f8f7 	bl	8001c38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <main_bleCommandControl+0x70>)
 8000a50:	f001 f8f2 	bl	8001c38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <main_bleCommandControl+0x70>)
 8000a5a:	f001 f8ed 	bl	8001c38 <HAL_GPIO_WritePin>
			break;
 8000a5e:	e00f      	b.n	8000a80 <main_bleCommandControl+0x68>
		case 1:
			HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 8000a60:	2120      	movs	r1, #32
 8000a62:	4809      	ldr	r0, [pc, #36]	; (8000a88 <main_bleCommandControl+0x70>)
 8000a64:	f001 f901 	bl	8001c6a <HAL_GPIO_TogglePin>
			break;
 8000a68:	e00a      	b.n	8000a80 <main_bleCommandControl+0x68>
		case 2:
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000a6a:	2140      	movs	r1, #64	; 0x40
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <main_bleCommandControl+0x70>)
 8000a6e:	f001 f8fc 	bl	8001c6a <HAL_GPIO_TogglePin>
			break;
 8000a72:	e005      	b.n	8000a80 <main_bleCommandControl+0x68>
		case 3:
			HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <main_bleCommandControl+0x70>)
 8000a78:	f001 f8f7 	bl	8001c6a <HAL_GPIO_TogglePin>
			break;
 8000a7c:	e000      	b.n	8000a80 <main_bleCommandControl+0x68>
		default:
			break;
 8000a7e:	bf00      	nop
	}
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40020400 	.word	0x40020400

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a4c      	ldr	r2, [pc, #304]	; (8000c38 <HAL_UART_MspInit+0x150>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	f040 8091 	bne.w	8000c2e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <HAL_UART_MspInit+0x154>)
 8000b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b14:	4a49      	ldr	r2, [pc, #292]	; (8000c3c <HAL_UART_MspInit+0x154>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1c:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <HAL_UART_MspInit+0x154>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <HAL_UART_MspInit+0x154>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <HAL_UART_MspInit+0x154>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b40      	ldr	r3, [pc, #256]	; (8000c3c <HAL_UART_MspInit+0x154>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b56:	2307      	movs	r3, #7
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4837      	ldr	r0, [pc, #220]	; (8000c40 <HAL_UART_MspInit+0x158>)
 8000b62:	f000 fee5 	bl	8001930 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000b66:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000b68:	4a37      	ldr	r2, [pc, #220]	; (8000c48 <HAL_UART_MspInit+0x160>)
 8000b6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b6c:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b72:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b74:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b7a:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b80:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000b82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b86:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b88:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b94:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ba6:	4827      	ldr	r0, [pc, #156]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000ba8:	f000 fac0 	bl	800112c <HAL_DMA_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000bb2:	f7ff ff6b 	bl	8000a8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000bba:	639a      	str	r2, [r3, #56]	; 0x38
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <HAL_UART_MspInit+0x15c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000bc4:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <HAL_UART_MspInit+0x168>)
 8000bc6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000bca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000bd2:	2240      	movs	r2, #64	; 0x40
 8000bd4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c02:	4812      	ldr	r0, [pc, #72]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000c04:	f000 fa92 	bl	800112c <HAL_DMA_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000c0e:	f7ff ff3d 	bl	8000a8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34
 8000c18:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <HAL_UART_MspInit+0x164>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2025      	movs	r0, #37	; 0x25
 8000c24:	f000 fa4b 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c28:	2025      	movs	r0, #37	; 0x25
 8000c2a:	f000 fa64 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	200001c0 	.word	0x200001c0
 8000c48:	40026440 	.word	0x40026440
 8000c4c:	20000220 	.word	0x20000220
 8000c50:	400264b8 	.word	0x400264b8

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca0:	f000 f8ee 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <USART1_IRQHandler+0x10>)
 8000cae:	f002 fffd 	bl	8003cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000017c 	.word	0x2000017c

08000cbc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <DMA2_Stream2_IRQHandler+0x10>)
 8000cc2:	f000 fbcb 	bl	800145c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200001c0 	.word	0x200001c0

08000cd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <OTG_FS_IRQHandler+0x10>)
 8000cd6:	f001 f932 	bl	8001f3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20001988 	.word	0x20001988

08000ce4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <DMA2_Stream7_IRQHandler+0x10>)
 8000cea:	f000 fbb7 	bl	800145c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000220 	.word	0x20000220

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f008 fb56 	bl	80093d8 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20020000 	.word	0x20020000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	2000048c 	.word	0x2000048c
 8000d60:	200022e0 	.word	0x200022e0

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8e:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da4:	4c0b      	ldr	r4, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db2:	f7ff ffd7 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f008 fb15 	bl	80093e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fbeb 	bl	8000594 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000dcc:	08009f64 	.word	0x08009f64
  ldr r2, =_sbss
 8000dd0:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000dd4:	200022dc 	.word	0x200022dc

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f94f 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe42 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f967 	bl	8001112 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f92f 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000490 	.word	0x20000490

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000490 	.word	0x20000490

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff3e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff31 	bl	8000f6c <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff feb6 	bl	8000ea8 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e099      	b.n	800127c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001168:	e00f      	b.n	800118a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800116a:	f7ff fe9d 	bl	8000ea8 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b05      	cmp	r3, #5
 8001176:	d908      	bls.n	800118a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2220      	movs	r2, #32
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2203      	movs	r2, #3
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e078      	b.n	800127c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e8      	bne.n	800116a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_DMA_Init+0x158>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d107      	bne.n	80011f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4313      	orrs	r3, r2
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f023 0307 	bic.w	r3, r3, #7
 800120a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	4313      	orrs	r3, r2
 8001214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	2b04      	cmp	r3, #4
 800121c:	d117      	bne.n	800124e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00e      	beq.n	800124e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fb01 	bl	8001838 <DMA_CheckFifoParam>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2240      	movs	r2, #64	; 0x40
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800124a:	2301      	movs	r3, #1
 800124c:	e016      	b.n	800127c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 fab8 	bl	80017cc <DMA_CalcBaseAndBitshift>
 800125c:	4603      	mov	r3, r0
 800125e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	223f      	movs	r2, #63	; 0x3f
 8001266:	409a      	lsls	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	f010803f 	.word	0xf010803f

08001288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_DMA_Start_IT+0x26>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e040      	b.n	8001330 <HAL_DMA_Start_IT+0xa8>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d12f      	bne.n	8001322 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2202      	movs	r2, #2
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 fa4a 	bl	8001770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e0:	223f      	movs	r2, #63	; 0x3f
 80012e2:	409a      	lsls	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0216 	orr.w	r2, r2, #22
 80012f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d007      	beq.n	8001310 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0208 	orr.w	r2, r2, #8
 800130e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e005      	b.n	800132e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800132a:	2302      	movs	r3, #2
 800132c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001344:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001346:	f7ff fdaf 	bl	8000ea8 <HAL_GetTick>
 800134a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d008      	beq.n	800136a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e052      	b.n	8001410 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0216 	bic.w	r2, r2, #22
 8001378:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	695a      	ldr	r2, [r3, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001388:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	2b00      	cmp	r3, #0
 8001390:	d103      	bne.n	800139a <HAL_DMA_Abort+0x62>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001396:	2b00      	cmp	r3, #0
 8001398:	d007      	beq.n	80013aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0208 	bic.w	r2, r2, #8
 80013a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0201 	bic.w	r2, r2, #1
 80013b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ba:	e013      	b.n	80013e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013bc:	f7ff fd74 	bl	8000ea8 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d90c      	bls.n	80013e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2220      	movs	r2, #32
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e015      	b.n	8001410 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1e4      	bne.n	80013bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f6:	223f      	movs	r2, #63	; 0x3f
 80013f8:	409a      	lsls	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d004      	beq.n	8001436 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00c      	b.n	8001450 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2205      	movs	r2, #5
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0201 	bic.w	r2, r2, #1
 800144c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001468:	4b8e      	ldr	r3, [pc, #568]	; (80016a4 <HAL_DMA_IRQHandler+0x248>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a8e      	ldr	r2, [pc, #568]	; (80016a8 <HAL_DMA_IRQHandler+0x24c>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0a9b      	lsrs	r3, r3, #10
 8001474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001486:	2208      	movs	r2, #8
 8001488:	409a      	lsls	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01a      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0204 	bic.w	r2, r2, #4
 80014ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	2208      	movs	r2, #8
 80014b6:	409a      	lsls	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014cc:	2201      	movs	r2, #1
 80014ce:	409a      	lsls	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d012      	beq.n	80014fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ea:	2201      	movs	r2, #1
 80014ec:	409a      	lsls	r2, r3
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f6:	f043 0202 	orr.w	r2, r3, #2
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	2204      	movs	r2, #4
 8001504:	409a      	lsls	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d012      	beq.n	8001534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001520:	2204      	movs	r2, #4
 8001522:	409a      	lsls	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152c:	f043 0204 	orr.w	r2, r3, #4
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001538:	2210      	movs	r2, #16
 800153a:	409a      	lsls	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d043      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d03c      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001556:	2210      	movs	r2, #16
 8001558:	409a      	lsls	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d018      	beq.n	800159e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d108      	bne.n	800158c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	2b00      	cmp	r3, #0
 8001580:	d024      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	4798      	blx	r3
 800158a:	e01f      	b.n	80015cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001590:	2b00      	cmp	r3, #0
 8001592:	d01b      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	4798      	blx	r3
 800159c:	e016      	b.n	80015cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0208 	bic.w	r2, r2, #8
 80015ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	2220      	movs	r2, #32
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 808f 	beq.w	80016fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8087 	beq.w	80016fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f2:	2220      	movs	r2, #32
 80015f4:	409a      	lsls	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b05      	cmp	r3, #5
 8001604:	d136      	bne.n	8001674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0216 	bic.w	r2, r2, #22
 8001614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	2b00      	cmp	r3, #0
 800162c:	d103      	bne.n	8001636 <HAL_DMA_IRQHandler+0x1da>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0208 	bic.w	r2, r2, #8
 8001644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	223f      	movs	r2, #63	; 0x3f
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001666:	2b00      	cmp	r3, #0
 8001668:	d07e      	beq.n	8001768 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
        }
        return;
 8001672:	e079      	b.n	8001768 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d01d      	beq.n	80016be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10d      	bne.n	80016ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	2b00      	cmp	r3, #0
 8001696:	d031      	beq.n	80016fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
 80016a0:	e02c      	b.n	80016fc <HAL_DMA_IRQHandler+0x2a0>
 80016a2:	bf00      	nop
 80016a4:	20000000 	.word	0x20000000
 80016a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d023      	beq.n	80016fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
 80016bc:	e01e      	b.n	80016fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10f      	bne.n	80016ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0210 	bic.w	r2, r2, #16
 80016da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	2b00      	cmp	r3, #0
 8001702:	d032      	beq.n	800176a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d022      	beq.n	8001756 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2205      	movs	r2, #5
 8001714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3301      	adds	r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	d307      	bcc.n	8001744 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f2      	bne.n	8001728 <HAL_DMA_IRQHandler+0x2cc>
 8001742:	e000      	b.n	8001746 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001744:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
 8001766:	e000      	b.n	800176a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001768:	bf00      	nop
    }
  }
}
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800178c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b40      	cmp	r3, #64	; 0x40
 800179c:	d108      	bne.n	80017b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017ae:	e007      	b.n	80017c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	3b10      	subs	r3, #16
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <DMA_CalcBaseAndBitshift+0x64>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <DMA_CalcBaseAndBitshift+0x68>)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d909      	bls.n	800180e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	1d1a      	adds	r2, r3, #4
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	659a      	str	r2, [r3, #88]	; 0x58
 800180c:	e007      	b.n	800181e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001816:	f023 0303 	bic.w	r3, r3, #3
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	aaaaaaab 	.word	0xaaaaaaab
 8001834:	08009e18 	.word	0x08009e18

08001838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d11f      	bne.n	8001892 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d856      	bhi.n	8001906 <DMA_CheckFifoParam+0xce>
 8001858:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <DMA_CheckFifoParam+0x28>)
 800185a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185e:	bf00      	nop
 8001860:	08001871 	.word	0x08001871
 8001864:	08001883 	.word	0x08001883
 8001868:	08001871 	.word	0x08001871
 800186c:	08001907 	.word	0x08001907
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d046      	beq.n	800190a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001880:	e043      	b.n	800190a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800188a:	d140      	bne.n	800190e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001890:	e03d      	b.n	800190e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800189a:	d121      	bne.n	80018e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d837      	bhi.n	8001912 <DMA_CheckFifoParam+0xda>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <DMA_CheckFifoParam+0x70>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	080018b9 	.word	0x080018b9
 80018ac:	080018bf 	.word	0x080018bf
 80018b0:	080018b9 	.word	0x080018b9
 80018b4:	080018d1 	.word	0x080018d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
      break;
 80018bc:	e030      	b.n	8001920 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d025      	beq.n	8001916 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ce:	e022      	b.n	8001916 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018d8:	d11f      	bne.n	800191a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018de:	e01c      	b.n	800191a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d903      	bls.n	80018ee <DMA_CheckFifoParam+0xb6>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d003      	beq.n	80018f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018ec:	e018      	b.n	8001920 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
      break;
 80018f2:	e015      	b.n	8001920 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00e      	beq.n	800191e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
      break;
 8001904:	e00b      	b.n	800191e <DMA_CheckFifoParam+0xe6>
      break;
 8001906:	bf00      	nop
 8001908:	e00a      	b.n	8001920 <DMA_CheckFifoParam+0xe8>
      break;
 800190a:	bf00      	nop
 800190c:	e008      	b.n	8001920 <DMA_CheckFifoParam+0xe8>
      break;
 800190e:	bf00      	nop
 8001910:	e006      	b.n	8001920 <DMA_CheckFifoParam+0xe8>
      break;
 8001912:	bf00      	nop
 8001914:	e004      	b.n	8001920 <DMA_CheckFifoParam+0xe8>
      break;
 8001916:	bf00      	nop
 8001918:	e002      	b.n	8001920 <DMA_CheckFifoParam+0xe8>
      break;   
 800191a:	bf00      	nop
 800191c:	e000      	b.n	8001920 <DMA_CheckFifoParam+0xe8>
      break;
 800191e:	bf00      	nop
    }
  } 
  
  return status; 
 8001920:	7bfb      	ldrb	r3, [r7, #15]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e159      	b.n	8001c00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	f040 8148 	bne.w	8001bfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d005      	beq.n	8001982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197e:	2b02      	cmp	r3, #2
 8001980:	d130      	bne.n	80019e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 0201 	and.w	r2, r3, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d017      	beq.n	8001a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d123      	bne.n	8001a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	08da      	lsrs	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3208      	adds	r2, #8
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	69b9      	ldr	r1, [r7, #24]
 8001a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80a2 	beq.w	8001bfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <HAL_GPIO_Init+0x2e8>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a56      	ldr	r2, [pc, #344]	; (8001c18 <HAL_GPIO_Init+0x2e8>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <HAL_GPIO_Init+0x2e8>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad2:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_GPIO_Init+0x2ec>)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a49      	ldr	r2, [pc, #292]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d019      	beq.n	8001b32 <HAL_GPIO_Init+0x202>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a48      	ldr	r2, [pc, #288]	; (8001c24 <HAL_GPIO_Init+0x2f4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d013      	beq.n	8001b2e <HAL_GPIO_Init+0x1fe>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a47      	ldr	r2, [pc, #284]	; (8001c28 <HAL_GPIO_Init+0x2f8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d00d      	beq.n	8001b2a <HAL_GPIO_Init+0x1fa>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a46      	ldr	r2, [pc, #280]	; (8001c2c <HAL_GPIO_Init+0x2fc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d007      	beq.n	8001b26 <HAL_GPIO_Init+0x1f6>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a45      	ldr	r2, [pc, #276]	; (8001c30 <HAL_GPIO_Init+0x300>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d101      	bne.n	8001b22 <HAL_GPIO_Init+0x1f2>
 8001b1e:	2304      	movs	r3, #4
 8001b20:	e008      	b.n	8001b34 <HAL_GPIO_Init+0x204>
 8001b22:	2307      	movs	r3, #7
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x204>
 8001b26:	2303      	movs	r3, #3
 8001b28:	e004      	b.n	8001b34 <HAL_GPIO_Init+0x204>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_Init+0x204>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_GPIO_Init+0x204>
 8001b32:	2300      	movs	r3, #0
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	f002 0203 	and.w	r2, r2, #3
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b44:	4935      	ldr	r1, [pc, #212]	; (8001c1c <HAL_GPIO_Init+0x2ec>)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_GPIO_Init+0x304>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b76:	4a2f      	ldr	r2, [pc, #188]	; (8001c34 <HAL_GPIO_Init+0x304>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_GPIO_Init+0x304>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba0:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <HAL_GPIO_Init+0x304>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_GPIO_Init+0x304>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bca:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <HAL_GPIO_Init+0x304>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_GPIO_Init+0x304>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf4:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_GPIO_Init+0x304>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	2b0f      	cmp	r3, #15
 8001c04:	f67f aea2 	bls.w	800194c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40013800 	.word	0x40013800
 8001c20:	40020000 	.word	0x40020000
 8001c24:	40020400 	.word	0x40020400
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	40020c00 	.word	0x40020c00
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40013c00 	.word	0x40013c00

08001c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
 8001c44:	4613      	mov	r3, r2
 8001c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c48:	787b      	ldrb	r3, [r7, #1]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c54:	e003      	b.n	8001c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c56:	887b      	ldrh	r3, [r7, #2]
 8001c58:	041a      	lsls	r2, r3, #16
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	619a      	str	r2, [r3, #24]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c7c:	887a      	ldrh	r2, [r7, #2]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	041a      	lsls	r2, r3, #16
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	887b      	ldrh	r3, [r7, #2]
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	619a      	str	r2, [r3, #24]
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca0:	b08f      	sub	sp, #60	; 0x3c
 8001ca2:	af0a      	add	r7, sp, #40	; 0x28
 8001ca4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e10f      	b.n	8001ed0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f006 ff32 	bl	8008b34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 f9d9 	bl	80050a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	687e      	ldr	r6, [r7, #4]
 8001cfc:	466d      	mov	r5, sp
 8001cfe:	f106 0410 	add.w	r4, r6, #16
 8001d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d12:	1d33      	adds	r3, r6, #4
 8001d14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d16:	6838      	ldr	r0, [r7, #0]
 8001d18:	f003 f8b0 	bl	8004e7c <USB_CoreInit>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0d0      	b.n	8001ed0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 f9c7 	bl	80050c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e04a      	b.n	8001dd6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	333d      	adds	r3, #61	; 0x3d
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	333c      	adds	r3, #60	; 0x3c
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	b298      	uxth	r0, r3
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	3344      	adds	r3, #68	; 0x44
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3340      	adds	r3, #64	; 0x40
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3348      	adds	r3, #72	; 0x48
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	334c      	adds	r3, #76	; 0x4c
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3354      	adds	r3, #84	; 0x54
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d3af      	bcc.n	8001d40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e044      	b.n	8001e70 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d3b5      	bcc.n	8001de6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	687e      	ldr	r6, [r7, #4]
 8001e82:	466d      	mov	r5, sp
 8001e84:	f106 0410 	add.w	r4, r6, #16
 8001e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e94:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e98:	1d33      	adds	r3, r6, #4
 8001e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e9c:	6838      	ldr	r0, [r7, #0]
 8001e9e:	f003 f95f 	bl	8005160 <USB_DevInit>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e00d      	b.n	8001ed0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f004 faae 	bl	800642a <USB_DevDisconnect>

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ed8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_PCD_Start+0x1c>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e020      	b.n	8001f36 <HAL_PCD_Start+0x5e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d109      	bne.n	8001f18 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d005      	beq.n	8001f18 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 f8b1 	bl	8005084 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 fa5e 	bl	80063e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f3e:	b590      	push	{r4, r7, lr}
 8001f40:	b08d      	sub	sp, #52	; 0x34
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f004 fb1c 	bl	8006592 <USB_GetMode>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 848a 	bne.w	8002876 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f004 fa80 	bl	800646c <USB_ReadInterrupts>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8480 	beq.w	8002874 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 fa6d 	bl	800646c <USB_ReadInterrupts>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d107      	bne.n	8001fac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f002 0202 	and.w	r2, r2, #2
 8001faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f004 fa5b 	bl	800646c <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d161      	bne.n	8002084 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0210 	bic.w	r2, r2, #16
 8001fce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	3304      	adds	r3, #4
 8001fee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	0c5b      	lsrs	r3, r3, #17
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d124      	bne.n	8002046 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d035      	beq.n	8002074 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	6a38      	ldr	r0, [r7, #32]
 800201c:	f004 f892 	bl	8006144 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800202c:	441a      	add	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	6a1a      	ldr	r2, [r3, #32]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800203e:	441a      	add	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	621a      	str	r2, [r3, #32]
 8002044:	e016      	b.n	8002074 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	0c5b      	lsrs	r3, r3, #17
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	2b06      	cmp	r3, #6
 8002050:	d110      	bne.n	8002074 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002058:	2208      	movs	r2, #8
 800205a:	4619      	mov	r1, r3
 800205c:	6a38      	ldr	r0, [r7, #32]
 800205e:	f004 f871 	bl	8006144 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	6a1a      	ldr	r2, [r3, #32]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800206e:	441a      	add	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0210 	orr.w	r2, r2, #16
 8002082:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f004 f9ef 	bl	800646c <USB_ReadInterrupts>
 800208e:	4603      	mov	r3, r0
 8002090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002094:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002098:	f040 80a7 	bne.w	80021ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f004 f9f4 	bl	8006492 <USB_ReadDevAllOutEpInterrupt>
 80020aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020ac:	e099      	b.n	80021e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 808e 	beq.w	80021d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 fa18 	bl	80064fa <USB_ReadDevOutEPInterrupt>
 80020ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e2:	461a      	mov	r2, r3
 80020e4:	2301      	movs	r3, #1
 80020e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fec2 	bl	8002e74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	4413      	add	r3, r2
 8002102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002106:	461a      	mov	r2, r3
 8002108:	2308      	movs	r3, #8
 800210a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800210c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 ff98 	bl	8003044 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d008      	beq.n	8002130 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212a:	461a      	mov	r2, r3
 800212c:	2310      	movs	r3, #16
 800212e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d030      	beq.n	800219c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002142:	2b80      	cmp	r3, #128	; 0x80
 8002144:	d109      	bne.n	800215a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002154:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002158:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800215a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	3304      	adds	r3, #4
 800216e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	78db      	ldrb	r3, [r3, #3]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d108      	bne.n	800218a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2200      	movs	r2, #0
 800217c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	b2db      	uxtb	r3, r3
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f006 fdd1 	bl	8008d2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002196:	461a      	mov	r2, r3
 8002198:	2302      	movs	r3, #2
 800219a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b2:	461a      	mov	r2, r3
 80021b4:	2320      	movs	r3, #32
 80021b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ce:	461a      	mov	r2, r3
 80021d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	3301      	adds	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f47f af62 	bne.w	80020ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 f93c 	bl	800646c <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021fe:	f040 80db 	bne.w	80023b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f004 f95d 	bl	80064c6 <USB_ReadDevAllInEpInterrupt>
 800220c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002212:	e0cd      	b.n	80023b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80c2 	beq.w	80023a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f004 f983 	bl	8006536 <USB_ReadDevInEPInterrupt>
 8002230:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d057      	beq.n	80022ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	2201      	movs	r2, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	43db      	mvns	r3, r3
 8002256:	69f9      	ldr	r1, [r7, #28]
 8002258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800225c:	4013      	ands	r3, r2
 800225e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800226c:	461a      	mov	r2, r3
 800226e:	2301      	movs	r3, #1
 8002270:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d132      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	334c      	adds	r3, #76	; 0x4c
 800228a:	6819      	ldr	r1, [r3, #0]
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4403      	add	r3, r0
 800229a:	3348      	adds	r3, #72	; 0x48
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4419      	add	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4403      	add	r3, r0
 80022ae:	334c      	adds	r3, #76	; 0x4c
 80022b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d113      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x3a2>
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3354      	adds	r3, #84	; 0x54
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022d8:	461a      	mov	r2, r3
 80022da:	2101      	movs	r1, #1
 80022dc:	f004 f98a 	bl	80065f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f006 fca5 	bl	8008c36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002302:	461a      	mov	r2, r3
 8002304:	2308      	movs	r3, #8
 8002306:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231e:	461a      	mov	r2, r3
 8002320:	2310      	movs	r3, #16
 8002322:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800233a:	461a      	mov	r2, r3
 800233c:	2340      	movs	r3, #64	; 0x40
 800233e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d023      	beq.n	8002392 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800234a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234c:	6a38      	ldr	r0, [r7, #32]
 800234e:	f003 f86b 	bl	8005428 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	3338      	adds	r3, #56	; 0x38
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	3304      	adds	r3, #4
 8002364:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	78db      	ldrb	r3, [r3, #3]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2200      	movs	r2, #0
 8002372:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	b2db      	uxtb	r3, r3
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f006 fce8 	bl	8008d50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800238c:	461a      	mov	r2, r3
 800238e:	2302      	movs	r3, #2
 8002390:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800239c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fcdb 	bl	8002d5a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	3301      	adds	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f47f af2e 	bne.w	8002214 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 f855 	bl	800646c <USB_ReadInterrupts>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023cc:	d122      	bne.n	8002414 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d108      	bne.n	80023fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023f4:	2100      	movs	r1, #0
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fec2 	bl	8003180 <HAL_PCDEx_LPM_Callback>
 80023fc:	e002      	b.n	8002404 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f006 fc86 	bl	8008d10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002412:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f004 f827 	bl	800646c <USB_ReadInterrupts>
 800241e:	4603      	mov	r3, r0
 8002420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002428:	d112      	bne.n	8002450 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d102      	bne.n	8002440 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f006 fc42 	bl	8008cc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800244e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f004 f809 	bl	800646c <USB_ReadInterrupts>
 800245a:	4603      	mov	r3, r0
 800245c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002464:	f040 80b7 	bne.w	80025d6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2110      	movs	r1, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f002 ffd0 	bl	8005428 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248c:	e046      	b.n	800251c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800249a:	461a      	mov	r2, r3
 800249c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b2:	0151      	lsls	r1, r2, #5
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	440a      	add	r2, r1
 80024b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ce:	461a      	mov	r2, r3
 80024d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e6:	0151      	lsls	r1, r2, #5
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	440a      	add	r2, r1
 80024ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002506:	0151      	lsls	r1, r2, #5
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	440a      	add	r2, r1
 800250c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002510:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002514:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	3301      	adds	r3, #1
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002522:	429a      	cmp	r2, r3
 8002524:	d3b3      	bcc.n	800248e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002534:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002538:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	2b00      	cmp	r3, #0
 8002540:	d016      	beq.n	8002570 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002552:	f043 030b 	orr.w	r3, r3, #11
 8002556:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002568:	f043 030b 	orr.w	r3, r3, #11
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	e015      	b.n	800259c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800257e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002582:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002586:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002596:	f043 030b 	orr.w	r3, r3, #11
 800259a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025c0:	461a      	mov	r2, r3
 80025c2:	f004 f817 	bl	80065f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 ff46 	bl	800646c <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ea:	d124      	bne.n	8002636 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 ffdc 	bl	80065ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 ff91 	bl	8005522 <USB_GetDevSpeed>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681c      	ldr	r4, [r3, #0]
 800260c:	f001 f9e8 	bl	80039e0 <HAL_RCC_GetHCLKFreq>
 8002610:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	4620      	mov	r0, r4
 800261c:	f002 fc90 	bl	8004f40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f006 fb30 	bl	8008c86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002634:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f003 ff16 	bl	800646c <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b08      	cmp	r3, #8
 8002648:	d10a      	bne.n	8002660 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f006 fb0d 	bl	8008c6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f002 0208 	and.w	r2, r2, #8
 800265e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f003 ff01 	bl	800646c <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002670:	2b80      	cmp	r3, #128	; 0x80
 8002672:	d122      	bne.n	80026ba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002680:	2301      	movs	r3, #1
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
 8002684:	e014      	b.n	80026b0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d105      	bne.n	80026aa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fb27 	bl	8002cf8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	3301      	adds	r3, #1
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3e5      	bcc.n	8002686 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 fed4 	bl	800646c <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ce:	d13b      	bne.n	8002748 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026d0:	2301      	movs	r3, #1
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	e02b      	b.n	800272e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3340      	adds	r3, #64	; 0x40
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d115      	bne.n	8002728 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80026fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da12      	bge.n	8002728 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	333f      	adds	r3, #63	; 0x3f
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4619      	mov	r1, r3
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fae8 	bl	8002cf8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	3301      	adds	r3, #1
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	429a      	cmp	r2, r3
 8002736:	d3ce      	bcc.n	80026d6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fe8d 	bl	800646c <USB_ReadInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800275c:	d155      	bne.n	800280a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800275e:	2301      	movs	r3, #1
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	e045      	b.n	80027f0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d12e      	bne.n	80027ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800278c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800278e:	2b00      	cmp	r3, #0
 8002790:	da2b      	bge.n	80027ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800279e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d121      	bne.n	80027ea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e6:	6053      	str	r3, [r2, #4]
            break;
 80027e8:	e007      	b.n	80027fa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	3301      	adds	r3, #1
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d3b4      	bcc.n	8002764 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f003 fe2c 	bl	800646c <USB_ReadInterrupts>
 8002814:	4603      	mov	r3, r0
 8002816:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281e:	d10a      	bne.n	8002836 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f006 faa7 	bl	8008d74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f003 fe16 	bl	800646c <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b04      	cmp	r3, #4
 8002848:	d115      	bne.n	8002876 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f006 fa97 	bl	8008d90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	e000      	b.n	8002876 <HAL_PCD_IRQHandler+0x938>
      return;
 8002874:	bf00      	nop
    }
  }
}
 8002876:	3734      	adds	r7, #52	; 0x34
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}

0800287c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_PCD_SetAddress+0x1a>
 8002892:	2302      	movs	r3, #2
 8002894:	e013      	b.n	80028be <HAL_PCD_SetAddress+0x42>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 fd74 	bl	800639c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	4608      	mov	r0, r1
 80028d0:	4611      	mov	r1, r2
 80028d2:	461a      	mov	r2, r3
 80028d4:	4603      	mov	r3, r0
 80028d6:	70fb      	strb	r3, [r7, #3]
 80028d8:	460b      	mov	r3, r1
 80028da:	803b      	strh	r3, [r7, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	da0f      	bge.n	800290c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	f003 020f 	and.w	r2, r3, #15
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	3338      	adds	r3, #56	; 0x38
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	3304      	adds	r3, #4
 8002902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	705a      	strb	r2, [r3, #1]
 800290a:	e00f      	b.n	800292c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	3304      	adds	r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	b2da      	uxtb	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002938:	883a      	ldrh	r2, [r7, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	78ba      	ldrb	r2, [r7, #2]
 8002942:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	785b      	ldrb	r3, [r3, #1]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002956:	78bb      	ldrb	r3, [r7, #2]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d102      	bne.n	8002962 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_PCD_EP_Open+0xaa>
 800296c:	2302      	movs	r3, #2
 800296e:	e00e      	b.n	800298e <HAL_PCD_EP_Open+0xc8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68f9      	ldr	r1, [r7, #12]
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fdf4 	bl	800556c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800298c:	7afb      	ldrb	r3, [r7, #11]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	da0f      	bge.n	80029ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 020f 	and.w	r2, r3, #15
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	3338      	adds	r3, #56	; 0x38
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	3304      	adds	r3, #4
 80029c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	705a      	strb	r2, [r3, #1]
 80029c8:	e00f      	b.n	80029ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 020f 	and.w	r2, r3, #15
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	3304      	adds	r3, #4
 80029e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_PCD_EP_Close+0x6e>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e00e      	b.n	8002a22 <HAL_PCD_EP_Close+0x8c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68f9      	ldr	r1, [r7, #12]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f002 fe32 	bl	800567c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	460b      	mov	r3, r1
 8002a38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a3a:	7afb      	ldrb	r3, [r7, #11]
 8002a3c:	f003 020f 	and.w	r2, r3, #15
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	3304      	adds	r3, #4
 8002a52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2200      	movs	r2, #0
 8002a64:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d102      	bne.n	8002a86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a86:	7afb      	ldrb	r3, [r7, #11]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6979      	ldr	r1, [r7, #20]
 8002a9e:	f003 f911 	bl	8005cc4 <USB_EP0StartXfer>
 8002aa2:	e008      	b.n	8002ab6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6979      	ldr	r1, [r7, #20]
 8002ab2:	f002 febf 	bl	8005834 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	f003 020f 	and.w	r2, r3, #15
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	460b      	mov	r3, r1
 8002afe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b00:	7afb      	ldrb	r3, [r7, #11]
 8002b02:	f003 020f 	and.w	r2, r3, #15
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	3338      	adds	r3, #56	; 0x38
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4413      	add	r3, r2
 8002b14:	3304      	adds	r3, #4
 8002b16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2200      	movs	r2, #0
 8002b28:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b30:	7afb      	ldrb	r3, [r7, #11]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d102      	bne.n	8002b4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	6979      	ldr	r1, [r7, #20]
 8002b62:	f003 f8af 	bl	8005cc4 <USB_EP0StartXfer>
 8002b66:	e008      	b.n	8002b7a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	6979      	ldr	r1, [r7, #20]
 8002b76:	f002 fe5d 	bl	8005834 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	f003 020f 	and.w	r2, r3, #15
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d901      	bls.n	8002ba2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e050      	b.n	8002c44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	da0f      	bge.n	8002bca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	3338      	adds	r3, #56	; 0x38
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	705a      	strb	r2, [r3, #1]
 8002bc8:	e00d      	b.n	8002be6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	3304      	adds	r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_PCD_EP_SetStall+0x82>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e01e      	b.n	8002c44 <HAL_PCD_EP_SetStall+0xc0>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68f9      	ldr	r1, [r7, #12]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 faed 	bl	80061f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	b2d9      	uxtb	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c34:	461a      	mov	r2, r3
 8002c36:	f003 fcdd 	bl	80065f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	f003 020f 	and.w	r2, r3, #15
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d901      	bls.n	8002c6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e042      	b.n	8002cf0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	da0f      	bge.n	8002c92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	3338      	adds	r3, #56	; 0x38
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	3304      	adds	r3, #4
 8002c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	705a      	strb	r2, [r3, #1]
 8002c90:	e00f      	b.n	8002cb2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 020f 	and.w	r2, r3, #15
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3304      	adds	r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_PCD_EP_ClrStall+0x86>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e00e      	b.n	8002cf0 <HAL_PCD_EP_ClrStall+0xa4>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68f9      	ldr	r1, [r7, #12]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f003 faf5 	bl	80062d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	da0c      	bge.n	8002d26 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f003 020f 	and.w	r2, r3, #15
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	3338      	adds	r3, #56	; 0x38
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	3304      	adds	r3, #4
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e00c      	b.n	8002d40 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 020f 	and.w	r2, r3, #15
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68f9      	ldr	r1, [r7, #12]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 f914 	bl	8005f74 <USB_EPStopXfer>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d50:	7afb      	ldrb	r3, [r7, #11]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b08a      	sub	sp, #40	; 0x28
 8002d5e:	af02      	add	r7, sp, #8
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	3338      	adds	r3, #56	; 0x38
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3304      	adds	r3, #4
 8002d80:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1a      	ldr	r2, [r3, #32]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d901      	bls.n	8002d92 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06c      	b.n	8002e6c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d902      	bls.n	8002dae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3303      	adds	r3, #3
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002db6:	e02b      	b.n	8002e10 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d902      	bls.n	8002dd4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	3303      	adds	r3, #3
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6919      	ldr	r1, [r3, #16]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	4603      	mov	r3, r0
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f003 f968 	bl	80060c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	441a      	add	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d809      	bhi.n	8002e3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d203      	bcs.n	8002e3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1be      	bne.n	8002db8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d811      	bhi.n	8002e6a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	6939      	ldr	r1, [r7, #16]
 8002e62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e66:	4013      	ands	r3, r2
 8002e68:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	333c      	adds	r3, #60	; 0x3c
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d17b      	bne.n	8002fa2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	4a61      	ldr	r2, [pc, #388]	; (800303c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	f240 80b9 	bls.w	8003030 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80b3 	beq.w	8003030 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002edc:	6093      	str	r3, [r2, #8]
 8002ede:	e0a7      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2320      	movs	r3, #32
 8002efa:	6093      	str	r3, [r2, #8]
 8002efc:	e098      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 8093 	bne.w	8003030 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	4a4b      	ldr	r2, [pc, #300]	; (800303c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d90f      	bls.n	8002f32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2e:	6093      	str	r3, [r2, #8]
 8002f30:	e07e      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	3304      	adds	r3, #4
 8002f46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	69da      	ldr	r2, [r3, #28]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	0159      	lsls	r1, r3, #5
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	440b      	add	r3, r1
 8002f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	1ad2      	subs	r2, r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d114      	bne.n	8002f94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2101      	movs	r1, #1
 8002f80:	f003 fb38 	bl	80065f4 <USB_EP0_OutStart>
 8002f84:	e006      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	441a      	add	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f005 fe30 	bl	8008c00 <HAL_PCD_DataOutStageCallback>
 8002fa0:	e046      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	4a26      	ldr	r2, [pc, #152]	; (8003040 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d124      	bne.n	8002ff4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc6:	6093      	str	r3, [r2, #8]
 8002fc8:	e032      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2320      	movs	r3, #32
 8002fe4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f005 fe07 	bl	8008c00 <HAL_PCD_DataOutStageCallback>
 8002ff2:	e01d      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d114      	bne.n	8003024 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d108      	bne.n	8003024 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800301c:	461a      	mov	r2, r3
 800301e:	2100      	movs	r1, #0
 8003020:	f003 fae8 	bl	80065f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f005 fde8 	bl	8008c00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	4f54300a 	.word	0x4f54300a
 8003040:	4f54310a 	.word	0x4f54310a

08003044 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	333c      	adds	r3, #60	; 0x3c
 800305c:	3304      	adds	r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4a15      	ldr	r2, [pc, #84]	; (80030cc <PCD_EP_OutSetupPacket_int+0x88>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d90e      	bls.n	8003098 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003080:	2b00      	cmp	r3, #0
 8003082:	d009      	beq.n	8003098 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003090:	461a      	mov	r2, r3
 8003092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003096:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f005 fd9f 	bl	8008bdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <PCD_EP_OutSetupPacket_int+0x88>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d90c      	bls.n	80030c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d108      	bne.n	80030c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030b8:	461a      	mov	r2, r3
 80030ba:	2101      	movs	r1, #1
 80030bc:	f003 fa9a 	bl	80065f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	4f54300a 	.word	0x4f54300a

080030d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
 80030dc:	4613      	mov	r3, r2
 80030de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d107      	bne.n	80030fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030ee:	883b      	ldrh	r3, [r7, #0]
 80030f0:	0419      	lsls	r1, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
 80030fc:	e028      	b.n	8003150 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	4413      	add	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
 8003110:	e00d      	b.n	800312e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	3340      	adds	r3, #64	; 0x40
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4413      	add	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	3301      	adds	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	3b01      	subs	r3, #1
 8003134:	429a      	cmp	r2, r3
 8003136:	d3ec      	bcc.n	8003112 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003138:	883b      	ldrh	r3, [r7, #0]
 800313a:	0418      	lsls	r0, r3, #16
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	3b01      	subs	r3, #1
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	4302      	orrs	r2, r0
 8003148:	3340      	adds	r3, #64	; 0x40
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e267      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d075      	beq.n	80032a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031b6:	4b88      	ldr	r3, [pc, #544]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d00c      	beq.n	80031dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c2:	4b85      	ldr	r3, [pc, #532]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d112      	bne.n	80031f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ce:	4b82      	ldr	r3, [pc, #520]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031da:	d10b      	bne.n	80031f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	4b7e      	ldr	r3, [pc, #504]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d05b      	beq.n	80032a0 <HAL_RCC_OscConfig+0x108>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d157      	bne.n	80032a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e242      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d106      	bne.n	800320c <HAL_RCC_OscConfig+0x74>
 80031fe:	4b76      	ldr	r3, [pc, #472]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a75      	ldr	r2, [pc, #468]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 8003204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e01d      	b.n	8003248 <HAL_RCC_OscConfig+0xb0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x98>
 8003216:	4b70      	ldr	r3, [pc, #448]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6f      	ldr	r2, [pc, #444]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 800321c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b6d      	ldr	r3, [pc, #436]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a6c      	ldr	r2, [pc, #432]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e00b      	b.n	8003248 <HAL_RCC_OscConfig+0xb0>
 8003230:	4b69      	ldr	r3, [pc, #420]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a68      	ldr	r2, [pc, #416]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 8003236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a65      	ldr	r2, [pc, #404]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 8003242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fd fe2a 	bl	8000ea8 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003258:	f7fd fe26 	bl	8000ea8 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e207      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b5b      	ldr	r3, [pc, #364]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0xc0>
 8003276:	e014      	b.n	80032a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fd fe16 	bl	8000ea8 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003280:	f7fd fe12 	bl	8000ea8 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e1f3      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	4b51      	ldr	r3, [pc, #324]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0xe8>
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d063      	beq.n	8003376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ae:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d11c      	bne.n	8003300 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c6:	4b44      	ldr	r3, [pc, #272]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d116      	bne.n	8003300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d2:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_RCC_OscConfig+0x152>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d001      	beq.n	80032ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e1c7      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ea:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4937      	ldr	r1, [pc, #220]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	e03a      	b.n	8003376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d020      	beq.n	800334a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003308:	4b34      	ldr	r3, [pc, #208]	; (80033dc <HAL_RCC_OscConfig+0x244>)
 800330a:	2201      	movs	r2, #1
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fd fdcb 	bl	8000ea8 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003316:	f7fd fdc7 	bl	8000ea8 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e1a8      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003334:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4925      	ldr	r1, [pc, #148]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]
 8003348:	e015      	b.n	8003376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCC_OscConfig+0x244>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fd fdaa 	bl	8000ea8 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003358:	f7fd fda6 	bl	8000ea8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e187      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d036      	beq.n	80033f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d016      	beq.n	80033b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_RCC_OscConfig+0x248>)
 800338c:	2201      	movs	r2, #1
 800338e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fd fd8a 	bl	8000ea8 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003398:	f7fd fd86 	bl	8000ea8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e167      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCC_OscConfig+0x240>)
 80033ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x200>
 80033b6:	e01b      	b.n	80033f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_OscConfig+0x248>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033be:	f7fd fd73 	bl	8000ea8 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c4:	e00e      	b.n	80033e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c6:	f7fd fd6f 	bl	8000ea8 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d907      	bls.n	80033e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e150      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
 80033d8:	40023800 	.word	0x40023800
 80033dc:	42470000 	.word	0x42470000
 80033e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e4:	4b88      	ldr	r3, [pc, #544]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 80033e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ea      	bne.n	80033c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8097 	beq.w	800352c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003402:	4b81      	ldr	r3, [pc, #516]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10f      	bne.n	800342e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	4b7d      	ldr	r3, [pc, #500]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	4a7c      	ldr	r2, [pc, #496]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 8003418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341c:	6413      	str	r3, [r2, #64]	; 0x40
 800341e:	4b7a      	ldr	r3, [pc, #488]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342a:	2301      	movs	r3, #1
 800342c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342e:	4b77      	ldr	r3, [pc, #476]	; (800360c <HAL_RCC_OscConfig+0x474>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d118      	bne.n	800346c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800343a:	4b74      	ldr	r3, [pc, #464]	; (800360c <HAL_RCC_OscConfig+0x474>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a73      	ldr	r2, [pc, #460]	; (800360c <HAL_RCC_OscConfig+0x474>)
 8003440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003446:	f7fd fd2f 	bl	8000ea8 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344e:	f7fd fd2b 	bl	8000ea8 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e10c      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	4b6a      	ldr	r3, [pc, #424]	; (800360c <HAL_RCC_OscConfig+0x474>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x2ea>
 8003474:	4b64      	ldr	r3, [pc, #400]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	4a63      	ldr	r2, [pc, #396]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6713      	str	r3, [r2, #112]	; 0x70
 8003480:	e01c      	b.n	80034bc <HAL_RCC_OscConfig+0x324>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b05      	cmp	r3, #5
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x30c>
 800348a:	4b5f      	ldr	r3, [pc, #380]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a5e      	ldr	r2, [pc, #376]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 8003490:	f043 0304 	orr.w	r3, r3, #4
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	4b5c      	ldr	r3, [pc, #368]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	4a5b      	ldr	r2, [pc, #364]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6713      	str	r3, [r2, #112]	; 0x70
 80034a2:	e00b      	b.n	80034bc <HAL_RCC_OscConfig+0x324>
 80034a4:	4b58      	ldr	r3, [pc, #352]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a57      	ldr	r2, [pc, #348]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
 80034b0:	4b55      	ldr	r3, [pc, #340]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	4a54      	ldr	r2, [pc, #336]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 80034b6:	f023 0304 	bic.w	r3, r3, #4
 80034ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d015      	beq.n	80034f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fd fcf0 	bl	8000ea8 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fd fcec 	bl	8000ea8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e0cb      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e2:	4b49      	ldr	r3, [pc, #292]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0ee      	beq.n	80034cc <HAL_RCC_OscConfig+0x334>
 80034ee:	e014      	b.n	800351a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f0:	f7fd fcda 	bl	8000ea8 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fd fcd6 	bl	8000ea8 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0b5      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350e:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1ee      	bne.n	80034f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003520:	4b39      	ldr	r3, [pc, #228]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	4a38      	ldr	r2, [pc, #224]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 8003526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80a1 	beq.w	8003678 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003536:	4b34      	ldr	r3, [pc, #208]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b08      	cmp	r3, #8
 8003540:	d05c      	beq.n	80035fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d141      	bne.n	80035ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b31      	ldr	r3, [pc, #196]	; (8003610 <HAL_RCC_OscConfig+0x478>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fd fcaa 	bl	8000ea8 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003558:	f7fd fca6 	bl	8000ea8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e087      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	4b27      	ldr	r3, [pc, #156]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	019b      	lsls	r3, r3, #6
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	3b01      	subs	r3, #1
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	491b      	ldr	r1, [pc, #108]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <HAL_RCC_OscConfig+0x478>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a6:	f7fd fc7f 	bl	8000ea8 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ae:	f7fd fc7b 	bl	8000ea8 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e05c      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x416>
 80035cc:	e054      	b.n	8003678 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <HAL_RCC_OscConfig+0x478>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fd fc68 	bl	8000ea8 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035dc:	f7fd fc64 	bl	8000ea8 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e045      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_RCC_OscConfig+0x470>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x444>
 80035fa:	e03d      	b.n	8003678 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d107      	bne.n	8003614 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e038      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
 8003608:	40023800 	.word	0x40023800
 800360c:	40007000 	.word	0x40007000
 8003610:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003614:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x4ec>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d028      	beq.n	8003674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d121      	bne.n	8003674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d11a      	bne.n	8003674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003644:	4013      	ands	r3, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800364a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800364c:	4293      	cmp	r3, r2
 800364e:	d111      	bne.n	8003674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	085b      	lsrs	r3, r3, #1
 800365c:	3b01      	subs	r3, #1
 800365e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d107      	bne.n	8003674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800

08003688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0cc      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800369c:	4b68      	ldr	r3, [pc, #416]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d90c      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b65      	ldr	r3, [pc, #404]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b2:	4b63      	ldr	r3, [pc, #396]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0b8      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d020      	beq.n	8003712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036dc:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4a58      	ldr	r2, [pc, #352]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f4:	4b53      	ldr	r3, [pc, #332]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a52      	ldr	r2, [pc, #328]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003700:	4b50      	ldr	r3, [pc, #320]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	494d      	ldr	r1, [pc, #308]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d044      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d119      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e07f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d003      	beq.n	8003746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003742:	2b03      	cmp	r3, #3
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e06f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003756:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e067      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003766:	4b37      	ldr	r3, [pc, #220]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f023 0203 	bic.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4934      	ldr	r1, [pc, #208]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	4313      	orrs	r3, r2
 8003776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003778:	f7fd fb96 	bl	8000ea8 <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	e00a      	b.n	8003796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003780:	f7fd fb92 	bl	8000ea8 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	; 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e04f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 020c 	and.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d1eb      	bne.n	8003780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d20c      	bcs.n	80037d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e032      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4916      	ldr	r1, [pc, #88]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	490e      	ldr	r1, [pc, #56]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800380e:	f000 f821 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8003812:	4602      	mov	r2, r0
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	490a      	ldr	r1, [pc, #40]	; (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	5ccb      	ldrb	r3, [r1, r3]
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x1c8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd faf6 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023c00 	.word	0x40023c00
 8003844:	40023800 	.word	0x40023800
 8003848:	08009e00 	.word	0x08009e00
 800384c:	20000000 	.word	0x20000000
 8003850:	20000004 	.word	0x20000004

08003854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003858:	b090      	sub	sp, #64	; 0x40
 800385a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
 8003860:	2300      	movs	r3, #0
 8003862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003864:	2300      	movs	r3, #0
 8003866:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800386c:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d00d      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x40>
 8003878:	2b08      	cmp	r3, #8
 800387a:	f200 80a1 	bhi.w	80039c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x34>
 8003882:	2b04      	cmp	r3, #4
 8003884:	d003      	beq.n	800388e <HAL_RCC_GetSysClockFreq+0x3a>
 8003886:	e09b      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800388a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800388c:	e09b      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800388e:	4b53      	ldr	r3, [pc, #332]	; (80039dc <HAL_RCC_GetSysClockFreq+0x188>)
 8003890:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003892:	e098      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003894:	4b4f      	ldr	r3, [pc, #316]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800389c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800389e:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d028      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038aa:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	099b      	lsrs	r3, r3, #6
 80038b0:	2200      	movs	r2, #0
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	627a      	str	r2, [r7, #36]	; 0x24
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038bc:	2100      	movs	r1, #0
 80038be:	4b47      	ldr	r3, [pc, #284]	; (80039dc <HAL_RCC_GetSysClockFreq+0x188>)
 80038c0:	fb03 f201 	mul.w	r2, r3, r1
 80038c4:	2300      	movs	r3, #0
 80038c6:	fb00 f303 	mul.w	r3, r0, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	4a43      	ldr	r2, [pc, #268]	; (80039dc <HAL_RCC_GetSysClockFreq+0x188>)
 80038ce:	fba0 1202 	umull	r1, r2, r0, r2
 80038d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d4:	460a      	mov	r2, r1
 80038d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80038d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038da:	4413      	add	r3, r2
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	2200      	movs	r2, #0
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	61fa      	str	r2, [r7, #28]
 80038e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038ee:	f7fc fccf 	bl	8000290 <__aeabi_uldivmod>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4613      	mov	r3, r2
 80038f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038fa:	e053      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038fc:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	099b      	lsrs	r3, r3, #6
 8003902:	2200      	movs	r2, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	617a      	str	r2, [r7, #20]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800390e:	f04f 0b00 	mov.w	fp, #0
 8003912:	4652      	mov	r2, sl
 8003914:	465b      	mov	r3, fp
 8003916:	f04f 0000 	mov.w	r0, #0
 800391a:	f04f 0100 	mov.w	r1, #0
 800391e:	0159      	lsls	r1, r3, #5
 8003920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003924:	0150      	lsls	r0, r2, #5
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	ebb2 080a 	subs.w	r8, r2, sl
 800392e:	eb63 090b 	sbc.w	r9, r3, fp
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800393e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003942:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003946:	ebb2 0408 	subs.w	r4, r2, r8
 800394a:	eb63 0509 	sbc.w	r5, r3, r9
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	00eb      	lsls	r3, r5, #3
 8003958:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800395c:	00e2      	lsls	r2, r4, #3
 800395e:	4614      	mov	r4, r2
 8003960:	461d      	mov	r5, r3
 8003962:	eb14 030a 	adds.w	r3, r4, sl
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	eb45 030b 	adc.w	r3, r5, fp
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800397a:	4629      	mov	r1, r5
 800397c:	028b      	lsls	r3, r1, #10
 800397e:	4621      	mov	r1, r4
 8003980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003984:	4621      	mov	r1, r4
 8003986:	028a      	lsls	r2, r1, #10
 8003988:	4610      	mov	r0, r2
 800398a:	4619      	mov	r1, r3
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	2200      	movs	r2, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	60fa      	str	r2, [r7, #12]
 8003994:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003998:	f7fc fc7a 	bl	8000290 <__aeabi_uldivmod>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4613      	mov	r3, r2
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	3301      	adds	r3, #1
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039be:	e002      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80039c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3740      	adds	r7, #64	; 0x40
 80039cc:	46bd      	mov	sp, r7
 80039ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	00f42400 	.word	0x00f42400
 80039dc:	017d7840 	.word	0x017d7840

080039e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039e6:	681b      	ldr	r3, [r3, #0]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000000 	.word	0x20000000

080039f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039fc:	f7ff fff0 	bl	80039e0 <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	0a9b      	lsrs	r3, r3, #10
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4903      	ldr	r1, [pc, #12]	; (8003a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	08009e10 	.word	0x08009e10

08003a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a24:	f7ff ffdc 	bl	80039e0 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0b5b      	lsrs	r3, r3, #13
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4903      	ldr	r1, [pc, #12]	; (8003a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	08009e10 	.word	0x08009e10

08003a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e03f      	b.n	8003ada <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fd f83a 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2224      	movs	r2, #36	; 0x24
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 ff81 	bl	8004994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695a      	ldr	r2, [r3, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08c      	sub	sp, #48	; 0x30
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d165      	bne.n	8003bca <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_UART_Transmit_DMA+0x26>
 8003b04:	88fb      	ldrh	r3, [r7, #6]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e05e      	b.n	8003bcc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_UART_Transmit_DMA+0x38>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e057      	b.n	8003bcc <HAL_UART_Transmit_DMA+0xe8>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	88fa      	ldrh	r2, [r7, #6]
 8003b2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	88fa      	ldrh	r2, [r7, #6]
 8003b34:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2221      	movs	r2, #33	; 0x21
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b48:	4a22      	ldr	r2, [pc, #136]	; (8003bd4 <HAL_UART_Transmit_DMA+0xf0>)
 8003b4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <HAL_UART_Transmit_DMA+0xf4>)
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b58:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <HAL_UART_Transmit_DMA+0xf8>)
 8003b5a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	2200      	movs	r2, #0
 8003b62:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003b64:	f107 0308 	add.w	r3, r7, #8
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3304      	adds	r3, #4
 8003b78:	461a      	mov	r2, r3
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	f7fd fb84 	bl	8001288 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b88:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb2:	627a      	str	r2, [r7, #36]	; 0x24
 8003bb4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6a39      	ldr	r1, [r7, #32]
 8003bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e5      	bne.n	8003b92 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3730      	adds	r7, #48	; 0x30
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	0800422d 	.word	0x0800422d
 8003bd8:	080042c7 	.word	0x080042c7
 8003bdc:	0800443f 	.word	0x0800443f

08003be0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	; 0x30
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d152      	bne.n	8003ca0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e04b      	b.n	8003ca2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e044      	b.n	8003ca2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fc51 	bl	80044d4 <UART_Start_Receive_DMA>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d12c      	bne.n	8003c9a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d125      	bne.n	8003c94 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f043 0310 	orr.w	r3, r3, #16
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c7e:	627a      	str	r2, [r7, #36]	; 0x24
 8003c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6a39      	ldr	r1, [r7, #32]
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e5      	bne.n	8003c5e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003c92:	e002      	b.n	8003c9a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c9e:	e000      	b.n	8003ca2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
  }
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3730      	adds	r7, #48	; 0x30
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b0ba      	sub	sp, #232	; 0xe8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_UART_IRQHandler+0x66>
 8003cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fd87 	bl	800481e <UART_Receive_IT>
      return;
 8003d10:	e256      	b.n	80041c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80de 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x22c>
 8003d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80d1 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <HAL_UART_IRQHandler+0xae>
 8003d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_UART_IRQHandler+0xd2>
 8003d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f043 0202 	orr.w	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00b      	beq.n	8003da2 <HAL_UART_IRQHandler+0xf6>
 8003d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f043 0204 	orr.w	r2, r3, #4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d011      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x126>
 8003dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f043 0208 	orr.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 81ed 	beq.w	80041b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_UART_IRQHandler+0x14e>
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fd12 	bl	800481e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_UART_IRQHandler+0x17a>
 8003e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d04f      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fc1a 	bl	8004660 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d141      	bne.n	8003ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1d9      	bne.n	8003e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d013      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	4a7d      	ldr	r2, [pc, #500]	; (8004088 <HAL_UART_IRQHandler+0x3dc>)
 8003e94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd fabc 	bl	8001418 <HAL_DMA_Abort_IT>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e00e      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f9ae 	bl	8004218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e00a      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9aa 	bl	8004218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e006      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f9a6 	bl	8004218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ed2:	e170      	b.n	80041b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	bf00      	nop
    return;
 8003ed6:	e16e      	b.n	80041b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f040 814a 	bne.w	8004176 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8143 	beq.w	8004176 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 813c 	beq.w	8004176 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	f040 80b4 	bne.w	800408c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8140 	beq.w	80041ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f42:	429a      	cmp	r2, r3
 8003f44:	f080 8139 	bcs.w	80041ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5a:	f000 8088 	beq.w	800406e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1d9      	bne.n	8003f5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3314      	adds	r3, #20
 8003fb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e1      	bne.n	8003faa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3314      	adds	r3, #20
 8003fec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800400a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800400c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004010:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e3      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800403c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800403e:	f023 0310 	bic.w	r3, r3, #16
 8004042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004050:	65ba      	str	r2, [r7, #88]	; 0x58
 8004052:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800405e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e3      	bne.n	800402c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	4618      	mov	r0, r3
 800406a:	f7fd f965 	bl	8001338 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004076:	b29b      	uxth	r3, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	b29b      	uxth	r3, r3
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc fbcc 	bl	800081c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004084:	e099      	b.n	80041ba <HAL_UART_IRQHandler+0x50e>
 8004086:	bf00      	nop
 8004088:	08004727 	.word	0x08004727
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004094:	b29b      	uxth	r3, r3
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 808b 	beq.w	80041be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8086 	beq.w	80041be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	330c      	adds	r3, #12
 80040b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	330c      	adds	r3, #12
 80040d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040d6:	647a      	str	r2, [r7, #68]	; 0x44
 80040d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e3      	bne.n	80040b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3314      	adds	r3, #20
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	623b      	str	r3, [r7, #32]
   return(result);
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3314      	adds	r3, #20
 800410a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800410e:	633a      	str	r2, [r7, #48]	; 0x30
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e3      	bne.n	80040ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0310 	bic.w	r3, r3, #16
 8004146:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004154:	61fa      	str	r2, [r7, #28]
 8004156:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	69b9      	ldr	r1, [r7, #24]
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	617b      	str	r3, [r7, #20]
   return(result);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e3      	bne.n	8004130 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc fb54 	bl	800081c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004174:	e023      	b.n	80041be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_UART_IRQHandler+0x4ea>
 8004182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fadd 	bl	800474e <UART_Transmit_IT>
    return;
 8004194:	e014      	b.n	80041c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00e      	beq.n	80041c0 <HAL_UART_IRQHandler+0x514>
 80041a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fb1d 	bl	80047ee <UART_EndTransmit_IT>
    return;
 80041b4:	e004      	b.n	80041c0 <HAL_UART_IRQHandler+0x514>
    return;
 80041b6:	bf00      	nop
 80041b8:	e002      	b.n	80041c0 <HAL_UART_IRQHandler+0x514>
      return;
 80041ba:	bf00      	nop
 80041bc:	e000      	b.n	80041c0 <HAL_UART_IRQHandler+0x514>
      return;
 80041be:	bf00      	nop
  }
}
 80041c0:	37e8      	adds	r7, #232	; 0xe8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop

080041c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b090      	sub	sp, #64	; 0x40
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d137      	bne.n	80042b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424a:	2200      	movs	r2, #0
 800424c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800424e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	623b      	str	r3, [r7, #32]
   return(result);
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004264:	63bb      	str	r3, [r7, #56]	; 0x38
 8004266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3314      	adds	r3, #20
 800426c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800426e:	633a      	str	r2, [r7, #48]	; 0x30
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	60fb      	str	r3, [r7, #12]
   return(result);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004298:	637b      	str	r3, [r7, #52]	; 0x34
 800429a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042a2:	61fa      	str	r2, [r7, #28]
 80042a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	69b9      	ldr	r1, [r7, #24]
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	617b      	str	r3, [r7, #20]
   return(result);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e5      	bne.n	8004282 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042b6:	e002      	b.n	80042be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80042b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80042ba:	f7ff ff85 	bl	80041c8 <HAL_UART_TxCpltCallback>
}
 80042be:	bf00      	nop
 80042c0:	3740      	adds	r7, #64	; 0x40
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7ff ff81 	bl	80041dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b09c      	sub	sp, #112	; 0x70
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d172      	bne.n	80043e4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80042fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004300:	2200      	movs	r2, #0
 8004302:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	330c      	adds	r3, #12
 800430a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431a:	66bb      	str	r3, [r7, #104]	; 0x68
 800431c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004324:	65ba      	str	r2, [r7, #88]	; 0x58
 8004326:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800432a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e5      	bne.n	8004304 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3314      	adds	r3, #20
 800433e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	667b      	str	r3, [r7, #100]	; 0x64
 8004350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3314      	adds	r3, #20
 8004356:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004358:	647a      	str	r2, [r7, #68]	; 0x44
 800435a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800435e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	623b      	str	r3, [r7, #32]
   return(result);
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004382:	663b      	str	r3, [r7, #96]	; 0x60
 8004384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800438c:	633a      	str	r2, [r7, #48]	; 0x30
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d119      	bne.n	80043e4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	60fb      	str	r3, [r7, #12]
   return(result);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0310 	bic.w	r3, r3, #16
 80043c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043d0:	61fa      	str	r2, [r7, #28]
 80043d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	617b      	str	r3, [r7, #20]
   return(result);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e5      	bne.n	80043b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d106      	bne.n	80043fa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043f0:	4619      	mov	r1, r3
 80043f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80043f4:	f7fc fa12 	bl	800081c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043f8:	e002      	b.n	8004400 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80043fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80043fc:	f7ff fef8 	bl	80041f0 <HAL_UART_RxCpltCallback>
}
 8004400:	bf00      	nop
 8004402:	3770      	adds	r7, #112	; 0x70
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	2b01      	cmp	r3, #1
 800441c:	d108      	bne.n	8004430 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	b29b      	uxth	r3, r3
 8004426:	4619      	mov	r1, r3
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7fc f9f7 	bl	800081c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800442e:	e002      	b.n	8004436 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff fee7 	bl	8004204 <HAL_UART_RxHalfCpltCallback>
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	bf0c      	ite	eq
 800445e:	2301      	moveq	r3, #1
 8004460:	2300      	movne	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b21      	cmp	r3, #33	; 0x21
 8004470:	d108      	bne.n	8004484 <UART_DMAError+0x46>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2200      	movs	r2, #0
 800447c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800447e:	68b8      	ldr	r0, [r7, #8]
 8004480:	f000 f8c6 	bl	8004610 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	bf0c      	ite	eq
 8004492:	2301      	moveq	r3, #1
 8004494:	2300      	movne	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b22      	cmp	r3, #34	; 0x22
 80044a4:	d108      	bne.n	80044b8 <UART_DMAError+0x7a>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2200      	movs	r2, #0
 80044b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80044b2:	68b8      	ldr	r0, [r7, #8]
 80044b4:	f000 f8d4 	bl	8004660 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f043 0210 	orr.w	r2, r3, #16
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044c4:	68b8      	ldr	r0, [r7, #8]
 80044c6:	f7ff fea7 	bl	8004218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b098      	sub	sp, #96	; 0x60
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	4613      	mov	r3, r2
 80044e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	88fa      	ldrh	r2, [r7, #6]
 80044ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2222      	movs	r2, #34	; 0x22
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	4a40      	ldr	r2, [pc, #256]	; (8004604 <UART_Start_Receive_DMA+0x130>)
 8004502:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	4a3f      	ldr	r2, [pc, #252]	; (8004608 <UART_Start_Receive_DMA+0x134>)
 800450a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	4a3e      	ldr	r2, [pc, #248]	; (800460c <UART_Start_Receive_DMA+0x138>)
 8004512:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	2200      	movs	r2, #0
 800451a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800451c:	f107 0308 	add.w	r3, r7, #8
 8004520:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3304      	adds	r3, #4
 800452c:	4619      	mov	r1, r3
 800452e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	f7fc fea8 	bl	8001288 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004538:	2300      	movs	r3, #0
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d019      	beq.n	8004592 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800456e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004574:	65bb      	str	r3, [r7, #88]	; 0x58
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800457e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004580:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004584:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800458c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e5      	bne.n	800455e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3314      	adds	r3, #20
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	657b      	str	r3, [r7, #84]	; 0x54
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3314      	adds	r3, #20
 80045b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e5      	bne.n	8004592 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	617b      	str	r3, [r7, #20]
   return(result);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045dc:	653b      	str	r3, [r7, #80]	; 0x50
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3314      	adds	r3, #20
 80045e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045e6:	627a      	str	r2, [r7, #36]	; 0x24
 80045e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6a39      	ldr	r1, [r7, #32]
 80045ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e5      	bne.n	80045c6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3760      	adds	r7, #96	; 0x60
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	080042e3 	.word	0x080042e3
 8004608:	08004409 	.word	0x08004409
 800460c:	0800443f 	.word	0x0800443f

08004610 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	60bb      	str	r3, [r7, #8]
   return(result);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	61ba      	str	r2, [r7, #24]
 800463a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	613b      	str	r3, [r7, #16]
   return(result);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e5      	bne.n	8004618 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004654:	bf00      	nop
 8004656:	3724      	adds	r7, #36	; 0x24
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b095      	sub	sp, #84	; 0x54
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800467e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	330c      	adds	r3, #12
 8004686:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004688:	643a      	str	r2, [r7, #64]	; 0x40
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800468e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3314      	adds	r3, #20
 80046a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3314      	adds	r3, #20
 80046ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d119      	bne.n	800470c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f023 0310 	bic.w	r3, r3, #16
 80046ee:	647b      	str	r3, [r7, #68]	; 0x44
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	330c      	adds	r3, #12
 80046f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046f8:	61ba      	str	r2, [r7, #24]
 80046fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6979      	ldr	r1, [r7, #20]
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	613b      	str	r3, [r7, #16]
   return(result);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
}
 800471a:	bf00      	nop
 800471c:	3754      	adds	r7, #84	; 0x54
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f7ff fd69 	bl	8004218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b21      	cmp	r3, #33	; 0x21
 8004760:	d13e      	bne.n	80047e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	d114      	bne.n	8004796 <UART_Transmit_IT+0x48>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d110      	bne.n	8004796 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004788:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	1c9a      	adds	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	621a      	str	r2, [r3, #32]
 8004794:	e008      	b.n	80047a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	1c59      	adds	r1, r3, #1
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6211      	str	r1, [r2, #32]
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	4619      	mov	r1, r3
 80047b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10f      	bne.n	80047dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	e000      	b.n	80047e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
  }
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004804:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fcda 	bl	80041c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b08c      	sub	sp, #48	; 0x30
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b22      	cmp	r3, #34	; 0x22
 8004830:	f040 80ab 	bne.w	800498a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483c:	d117      	bne.n	800486e <UART_Receive_IT+0x50>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d113      	bne.n	800486e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	b29b      	uxth	r3, r3
 8004858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485c:	b29a      	uxth	r2, r3
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	1c9a      	adds	r2, r3, #2
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28
 800486c:	e026      	b.n	80048bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004880:	d007      	beq.n	8004892 <UART_Receive_IT+0x74>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <UART_Receive_IT+0x82>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e008      	b.n	80048b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	4619      	mov	r1, r3
 80048ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d15a      	bne.n	8004986 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0220 	bic.w	r2, r2, #32
 80048de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695a      	ldr	r2, [r3, #20]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	2b01      	cmp	r3, #1
 800490e:	d135      	bne.n	800497c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	613b      	str	r3, [r7, #16]
   return(result);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f023 0310 	bic.w	r3, r3, #16
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	623a      	str	r2, [r7, #32]
 8004938:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	69f9      	ldr	r1, [r7, #28]
 800493c:	6a3a      	ldr	r2, [r7, #32]
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	61bb      	str	r3, [r7, #24]
   return(result);
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e5      	bne.n	8004916 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d10a      	bne.n	800496e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fb ff51 	bl	800081c <HAL_UARTEx_RxEventCallback>
 800497a:	e002      	b.n	8004982 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fc37 	bl	80041f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e002      	b.n	800498c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e000      	b.n	800498c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800498a:	2302      	movs	r3, #2
  }
}
 800498c:	4618      	mov	r0, r3
 800498e:	3730      	adds	r7, #48	; 0x30
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004998:	b0c0      	sub	sp, #256	; 0x100
 800499a:	af00      	add	r7, sp, #0
 800499c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	68d9      	ldr	r1, [r3, #12]
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	ea40 0301 	orr.w	r3, r0, r1
 80049bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049ec:	f021 010c 	bic.w	r1, r1, #12
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049fa:	430b      	orrs	r3, r1
 80049fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0e:	6999      	ldr	r1, [r3, #24]
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	ea40 0301 	orr.w	r3, r0, r1
 8004a1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	4b8f      	ldr	r3, [pc, #572]	; (8004c60 <UART_SetConfig+0x2cc>)
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d005      	beq.n	8004a34 <UART_SetConfig+0xa0>
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b8d      	ldr	r3, [pc, #564]	; (8004c64 <UART_SetConfig+0x2d0>)
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d104      	bne.n	8004a3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a34:	f7fe fff4 	bl	8003a20 <HAL_RCC_GetPCLK2Freq>
 8004a38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a3c:	e003      	b.n	8004a46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a3e:	f7fe ffdb 	bl	80039f8 <HAL_RCC_GetPCLK1Freq>
 8004a42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a50:	f040 810c 	bne.w	8004c6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a66:	4622      	mov	r2, r4
 8004a68:	462b      	mov	r3, r5
 8004a6a:	1891      	adds	r1, r2, r2
 8004a6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a6e:	415b      	adcs	r3, r3
 8004a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a76:	4621      	mov	r1, r4
 8004a78:	eb12 0801 	adds.w	r8, r2, r1
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	eb43 0901 	adc.w	r9, r3, r1
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a96:	4690      	mov	r8, r2
 8004a98:	4699      	mov	r9, r3
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	eb18 0303 	adds.w	r3, r8, r3
 8004aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004aa4:	462b      	mov	r3, r5
 8004aa6:	eb49 0303 	adc.w	r3, r9, r3
 8004aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004abe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	18db      	adds	r3, r3, r3
 8004ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac8:	4613      	mov	r3, r2
 8004aca:	eb42 0303 	adc.w	r3, r2, r3
 8004ace:	657b      	str	r3, [r7, #84]	; 0x54
 8004ad0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ad4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ad8:	f7fb fbda 	bl	8000290 <__aeabi_uldivmod>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4b61      	ldr	r3, [pc, #388]	; (8004c68 <UART_SetConfig+0x2d4>)
 8004ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	011c      	lsls	r4, r3, #4
 8004aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004af4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004af8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004afc:	4642      	mov	r2, r8
 8004afe:	464b      	mov	r3, r9
 8004b00:	1891      	adds	r1, r2, r2
 8004b02:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b04:	415b      	adcs	r3, r3
 8004b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b12:	4649      	mov	r1, r9
 8004b14:	eb43 0b01 	adc.w	fp, r3, r1
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b2c:	4692      	mov	sl, r2
 8004b2e:	469b      	mov	fp, r3
 8004b30:	4643      	mov	r3, r8
 8004b32:	eb1a 0303 	adds.w	r3, sl, r3
 8004b36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	18db      	adds	r3, r3, r3
 8004b5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b5e:	4613      	mov	r3, r2
 8004b60:	eb42 0303 	adc.w	r3, r2, r3
 8004b64:	647b      	str	r3, [r7, #68]	; 0x44
 8004b66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b6e:	f7fb fb8f 	bl	8000290 <__aeabi_uldivmod>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4611      	mov	r1, r2
 8004b78:	4b3b      	ldr	r3, [pc, #236]	; (8004c68 <UART_SetConfig+0x2d4>)
 8004b7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	2264      	movs	r2, #100	; 0x64
 8004b82:	fb02 f303 	mul.w	r3, r2, r3
 8004b86:	1acb      	subs	r3, r1, r3
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b8e:	4b36      	ldr	r3, [pc, #216]	; (8004c68 <UART_SetConfig+0x2d4>)
 8004b90:	fba3 2302 	umull	r2, r3, r3, r2
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b9c:	441c      	add	r4, r3
 8004b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ba8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bb0:	4642      	mov	r2, r8
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	1891      	adds	r1, r2, r2
 8004bb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bb8:	415b      	adcs	r3, r3
 8004bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	1851      	adds	r1, r2, r1
 8004bc4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	414b      	adcs	r3, r1
 8004bca:	637b      	str	r3, [r7, #52]	; 0x34
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bd8:	4659      	mov	r1, fp
 8004bda:	00cb      	lsls	r3, r1, #3
 8004bdc:	4651      	mov	r1, sl
 8004bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004be2:	4651      	mov	r1, sl
 8004be4:	00ca      	lsls	r2, r1, #3
 8004be6:	4610      	mov	r0, r2
 8004be8:	4619      	mov	r1, r3
 8004bea:	4603      	mov	r3, r0
 8004bec:	4642      	mov	r2, r8
 8004bee:	189b      	adds	r3, r3, r2
 8004bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	460a      	mov	r2, r1
 8004bf8:	eb42 0303 	adc.w	r3, r2, r3
 8004bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c14:	460b      	mov	r3, r1
 8004c16:	18db      	adds	r3, r3, r3
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	eb42 0303 	adc.w	r3, r2, r3
 8004c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c2a:	f7fb fb31 	bl	8000290 <__aeabi_uldivmod>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <UART_SetConfig+0x2d4>)
 8004c34:	fba3 1302 	umull	r1, r3, r3, r2
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	2164      	movs	r1, #100	; 0x64
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	3332      	adds	r3, #50	; 0x32
 8004c46:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <UART_SetConfig+0x2d4>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	f003 0207 	and.w	r2, r3, #7
 8004c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4422      	add	r2, r4
 8004c5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c5c:	e105      	b.n	8004e6a <UART_SetConfig+0x4d6>
 8004c5e:	bf00      	nop
 8004c60:	40011000 	.word	0x40011000
 8004c64:	40011400 	.word	0x40011400
 8004c68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c7e:	4642      	mov	r2, r8
 8004c80:	464b      	mov	r3, r9
 8004c82:	1891      	adds	r1, r2, r2
 8004c84:	6239      	str	r1, [r7, #32]
 8004c86:	415b      	adcs	r3, r3
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c8e:	4641      	mov	r1, r8
 8004c90:	1854      	adds	r4, r2, r1
 8004c92:	4649      	mov	r1, r9
 8004c94:	eb43 0501 	adc.w	r5, r3, r1
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	00eb      	lsls	r3, r5, #3
 8004ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ca6:	00e2      	lsls	r2, r4, #3
 8004ca8:	4614      	mov	r4, r2
 8004caa:	461d      	mov	r5, r3
 8004cac:	4643      	mov	r3, r8
 8004cae:	18e3      	adds	r3, r4, r3
 8004cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cb4:	464b      	mov	r3, r9
 8004cb6:	eb45 0303 	adc.w	r3, r5, r3
 8004cba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cda:	4629      	mov	r1, r5
 8004cdc:	008b      	lsls	r3, r1, #2
 8004cde:	4621      	mov	r1, r4
 8004ce0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	008a      	lsls	r2, r1, #2
 8004ce8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cec:	f7fb fad0 	bl	8000290 <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4b60      	ldr	r3, [pc, #384]	; (8004e78 <UART_SetConfig+0x4e4>)
 8004cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	011c      	lsls	r4, r3, #4
 8004cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d10:	4642      	mov	r2, r8
 8004d12:	464b      	mov	r3, r9
 8004d14:	1891      	adds	r1, r2, r2
 8004d16:	61b9      	str	r1, [r7, #24]
 8004d18:	415b      	adcs	r3, r3
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d20:	4641      	mov	r1, r8
 8004d22:	1851      	adds	r1, r2, r1
 8004d24:	6139      	str	r1, [r7, #16]
 8004d26:	4649      	mov	r1, r9
 8004d28:	414b      	adcs	r3, r1
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d38:	4659      	mov	r1, fp
 8004d3a:	00cb      	lsls	r3, r1, #3
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d42:	4651      	mov	r1, sl
 8004d44:	00ca      	lsls	r2, r1, #3
 8004d46:	4610      	mov	r0, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	189b      	adds	r3, r3, r2
 8004d50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d54:	464b      	mov	r3, r9
 8004d56:	460a      	mov	r2, r1
 8004d58:	eb42 0303 	adc.w	r3, r2, r3
 8004d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d78:	4649      	mov	r1, r9
 8004d7a:	008b      	lsls	r3, r1, #2
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d82:	4641      	mov	r1, r8
 8004d84:	008a      	lsls	r2, r1, #2
 8004d86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d8a:	f7fb fa81 	bl	8000290 <__aeabi_uldivmod>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <UART_SetConfig+0x4e4>)
 8004d94:	fba3 1302 	umull	r1, r3, r3, r2
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	2164      	movs	r1, #100	; 0x64
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	3332      	adds	r3, #50	; 0x32
 8004da6:	4a34      	ldr	r2, [pc, #208]	; (8004e78 <UART_SetConfig+0x4e4>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db2:	441c      	add	r4, r3
 8004db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db8:	2200      	movs	r2, #0
 8004dba:	673b      	str	r3, [r7, #112]	; 0x70
 8004dbc:	677a      	str	r2, [r7, #116]	; 0x74
 8004dbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	1891      	adds	r1, r2, r2
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	415b      	adcs	r3, r3
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	1851      	adds	r1, r2, r1
 8004dd6:	6039      	str	r1, [r7, #0]
 8004dd8:	4649      	mov	r1, r9
 8004dda:	414b      	adcs	r3, r1
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dea:	4659      	mov	r1, fp
 8004dec:	00cb      	lsls	r3, r1, #3
 8004dee:	4651      	mov	r1, sl
 8004df0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004df4:	4651      	mov	r1, sl
 8004df6:	00ca      	lsls	r2, r1, #3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4642      	mov	r2, r8
 8004e00:	189b      	adds	r3, r3, r2
 8004e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e04:	464b      	mov	r3, r9
 8004e06:	460a      	mov	r2, r1
 8004e08:	eb42 0303 	adc.w	r3, r2, r3
 8004e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	663b      	str	r3, [r7, #96]	; 0x60
 8004e18:	667a      	str	r2, [r7, #100]	; 0x64
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e26:	4649      	mov	r1, r9
 8004e28:	008b      	lsls	r3, r1, #2
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e30:	4641      	mov	r1, r8
 8004e32:	008a      	lsls	r2, r1, #2
 8004e34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e38:	f7fb fa2a 	bl	8000290 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <UART_SetConfig+0x4e4>)
 8004e42:	fba3 1302 	umull	r1, r3, r3, r2
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	2164      	movs	r1, #100	; 0x64
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	3332      	adds	r3, #50	; 0x32
 8004e54:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <UART_SetConfig+0x4e4>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	f003 020f 	and.w	r2, r3, #15
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4422      	add	r2, r4
 8004e68:	609a      	str	r2, [r3, #8]
}
 8004e6a:	bf00      	nop
 8004e6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e70:	46bd      	mov	sp, r7
 8004e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e76:	bf00      	nop
 8004e78:	51eb851f 	.word	0x51eb851f

08004e7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	f107 001c 	add.w	r0, r7, #28
 8004e8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d122      	bne.n	8004eda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d105      	bne.n	8004ece <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 fbee 	bl	80066b0 <USB_CoreReset>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	73fb      	strb	r3, [r7, #15]
 8004ed8:	e01a      	b.n	8004f10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f001 fbe2 	bl	80066b0 <USB_CoreReset>
 8004eec:	4603      	mov	r3, r0
 8004eee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38
 8004f02:	e005      	b.n	8004f10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d10b      	bne.n	8004f2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f043 0206 	orr.w	r2, r3, #6
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f043 0220 	orr.w	r2, r3, #32
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f3a:	b004      	add	sp, #16
 8004f3c:	4770      	bx	lr
	...

08004f40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d165      	bne.n	8005020 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4a41      	ldr	r2, [pc, #260]	; (800505c <USB_SetTurnaroundTime+0x11c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d906      	bls.n	8004f6a <USB_SetTurnaroundTime+0x2a>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4a40      	ldr	r2, [pc, #256]	; (8005060 <USB_SetTurnaroundTime+0x120>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d202      	bcs.n	8004f6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f64:	230f      	movs	r3, #15
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e062      	b.n	8005030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4a3c      	ldr	r2, [pc, #240]	; (8005060 <USB_SetTurnaroundTime+0x120>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d306      	bcc.n	8004f80 <USB_SetTurnaroundTime+0x40>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4a3b      	ldr	r2, [pc, #236]	; (8005064 <USB_SetTurnaroundTime+0x124>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d202      	bcs.n	8004f80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f7a:	230e      	movs	r3, #14
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	e057      	b.n	8005030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4a38      	ldr	r2, [pc, #224]	; (8005064 <USB_SetTurnaroundTime+0x124>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d306      	bcc.n	8004f96 <USB_SetTurnaroundTime+0x56>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4a37      	ldr	r2, [pc, #220]	; (8005068 <USB_SetTurnaroundTime+0x128>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d202      	bcs.n	8004f96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f90:	230d      	movs	r3, #13
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	e04c      	b.n	8005030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4a33      	ldr	r2, [pc, #204]	; (8005068 <USB_SetTurnaroundTime+0x128>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d306      	bcc.n	8004fac <USB_SetTurnaroundTime+0x6c>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	4a32      	ldr	r2, [pc, #200]	; (800506c <USB_SetTurnaroundTime+0x12c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d802      	bhi.n	8004fac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004fa6:	230c      	movs	r3, #12
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e041      	b.n	8005030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a2f      	ldr	r2, [pc, #188]	; (800506c <USB_SetTurnaroundTime+0x12c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d906      	bls.n	8004fc2 <USB_SetTurnaroundTime+0x82>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4a2e      	ldr	r2, [pc, #184]	; (8005070 <USB_SetTurnaroundTime+0x130>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d802      	bhi.n	8004fc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004fbc:	230b      	movs	r3, #11
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	e036      	b.n	8005030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <USB_SetTurnaroundTime+0x130>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d906      	bls.n	8004fd8 <USB_SetTurnaroundTime+0x98>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	4a29      	ldr	r2, [pc, #164]	; (8005074 <USB_SetTurnaroundTime+0x134>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d802      	bhi.n	8004fd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004fd2:	230a      	movs	r3, #10
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	e02b      	b.n	8005030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4a26      	ldr	r2, [pc, #152]	; (8005074 <USB_SetTurnaroundTime+0x134>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d906      	bls.n	8004fee <USB_SetTurnaroundTime+0xae>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4a25      	ldr	r2, [pc, #148]	; (8005078 <USB_SetTurnaroundTime+0x138>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d202      	bcs.n	8004fee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004fe8:	2309      	movs	r3, #9
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	e020      	b.n	8005030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	4a21      	ldr	r2, [pc, #132]	; (8005078 <USB_SetTurnaroundTime+0x138>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d306      	bcc.n	8005004 <USB_SetTurnaroundTime+0xc4>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4a20      	ldr	r2, [pc, #128]	; (800507c <USB_SetTurnaroundTime+0x13c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d802      	bhi.n	8005004 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ffe:	2308      	movs	r3, #8
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e015      	b.n	8005030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4a1d      	ldr	r2, [pc, #116]	; (800507c <USB_SetTurnaroundTime+0x13c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d906      	bls.n	800501a <USB_SetTurnaroundTime+0xda>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4a1c      	ldr	r2, [pc, #112]	; (8005080 <USB_SetTurnaroundTime+0x140>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d202      	bcs.n	800501a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005014:	2307      	movs	r3, #7
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	e00a      	b.n	8005030 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800501a:	2306      	movs	r3, #6
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	e007      	b.n	8005030 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d102      	bne.n	800502c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005026:	2309      	movs	r3, #9
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	e001      	b.n	8005030 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800502c:	2309      	movs	r3, #9
 800502e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	029b      	lsls	r3, r3, #10
 8005044:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005048:	431a      	orrs	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	00d8acbf 	.word	0x00d8acbf
 8005060:	00e4e1c0 	.word	0x00e4e1c0
 8005064:	00f42400 	.word	0x00f42400
 8005068:	01067380 	.word	0x01067380
 800506c:	011a499f 	.word	0x011a499f
 8005070:	01312cff 	.word	0x01312cff
 8005074:	014ca43f 	.word	0x014ca43f
 8005078:	016e3600 	.word	0x016e3600
 800507c:	01a6ab1f 	.word	0x01a6ab1f
 8005080:	01e84800 	.word	0x01e84800

08005084 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f043 0201 	orr.w	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f023 0201 	bic.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d115      	bne.n	8005116 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050f6:	2001      	movs	r0, #1
 80050f8:	f7fb fee2 	bl	8000ec0 <HAL_Delay>
      ms++;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3301      	adds	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 fa45 	bl	8006592 <USB_GetMode>
 8005108:	4603      	mov	r3, r0
 800510a:	2b01      	cmp	r3, #1
 800510c:	d01e      	beq.n	800514c <USB_SetCurrentMode+0x84>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b31      	cmp	r3, #49	; 0x31
 8005112:	d9f0      	bls.n	80050f6 <USB_SetCurrentMode+0x2e>
 8005114:	e01a      	b.n	800514c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d115      	bne.n	8005148 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005128:	2001      	movs	r0, #1
 800512a:	f7fb fec9 	bl	8000ec0 <HAL_Delay>
      ms++;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3301      	adds	r3, #1
 8005132:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f001 fa2c 	bl	8006592 <USB_GetMode>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <USB_SetCurrentMode+0x84>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b31      	cmp	r3, #49	; 0x31
 8005144:	d9f0      	bls.n	8005128 <USB_SetCurrentMode+0x60>
 8005146:	e001      	b.n	800514c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e005      	b.n	8005158 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b32      	cmp	r3, #50	; 0x32
 8005150:	d101      	bne.n	8005156 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005160:	b084      	sub	sp, #16
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800516e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800517a:	2300      	movs	r3, #0
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	e009      	b.n	8005194 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	3340      	adds	r3, #64	; 0x40
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	2200      	movs	r2, #0
 800518c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	3301      	adds	r3, #1
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b0e      	cmp	r3, #14
 8005198:	d9f2      	bls.n	8005180 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800519a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d11c      	bne.n	80051da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ae:	f043 0302 	orr.w	r3, r3, #2
 80051b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
 80051d8:	e00b      	b.n	80051f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051f8:	461a      	mov	r2, r3
 80051fa:	2300      	movs	r3, #0
 80051fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005204:	4619      	mov	r1, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	461a      	mov	r2, r3
 800520e:	680b      	ldr	r3, [r1, #0]
 8005210:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	2b01      	cmp	r3, #1
 8005216:	d10c      	bne.n	8005232 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800521e:	2100      	movs	r1, #0
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f965 	bl	80054f0 <USB_SetDevSpeed>
 8005226:	e008      	b.n	800523a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005228:	2101      	movs	r1, #1
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f960 	bl	80054f0 <USB_SetDevSpeed>
 8005230:	e003      	b.n	800523a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005232:	2103      	movs	r1, #3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f95b 	bl	80054f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800523a:	2110      	movs	r1, #16
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f8f3 	bl	8005428 <USB_FlushTxFifo>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f91f 	bl	8005490 <USB_FlushRxFifo>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	461a      	mov	r2, r3
 8005264:	2300      	movs	r3, #0
 8005266:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526e:	461a      	mov	r2, r3
 8005270:	2300      	movs	r3, #0
 8005272:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527a:	461a      	mov	r2, r3
 800527c:	2300      	movs	r3, #0
 800527e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	e043      	b.n	800530e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800529c:	d118      	bne.n	80052d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	461a      	mov	r2, r3
 80052b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	e013      	b.n	80052e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	461a      	mov	r2, r3
 80052c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e008      	b.n	80052e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	461a      	mov	r2, r3
 80052de:	2300      	movs	r3, #0
 80052e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ee:	461a      	mov	r2, r3
 80052f0:	2300      	movs	r3, #0
 80052f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005300:	461a      	mov	r2, r3
 8005302:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005306:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	3301      	adds	r3, #1
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	429a      	cmp	r2, r3
 8005314:	d3b7      	bcc.n	8005286 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	e043      	b.n	80053a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005332:	d118      	bne.n	8005366 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	461a      	mov	r2, r3
 8005348:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e013      	b.n	8005378 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	e008      	b.n	8005378 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	461a      	mov	r2, r3
 8005374:	2300      	movs	r3, #0
 8005376:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005384:	461a      	mov	r2, r3
 8005386:	2300      	movs	r3, #0
 8005388:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005396:	461a      	mov	r2, r3
 8005398:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800539c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	3301      	adds	r3, #1
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d3b7      	bcc.n	800531c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d105      	bne.n	80053e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f043 0210 	orr.w	r2, r3, #16
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <USB_DevInit+0x2c4>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f043 0208 	orr.w	r2, r3, #8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d107      	bne.n	8005414 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005414:	7dfb      	ldrb	r3, [r7, #23]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005420:	b004      	add	sp, #16
 8005422:	4770      	bx	lr
 8005424:	803c3800 	.word	0x803c3800

08005428 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a13      	ldr	r2, [pc, #76]	; (800548c <USB_FlushTxFifo+0x64>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e01b      	b.n	8005480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	daf2      	bge.n	8005436 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	019b      	lsls	r3, r3, #6
 8005458:	f043 0220 	orr.w	r2, r3, #32
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a08      	ldr	r2, [pc, #32]	; (800548c <USB_FlushTxFifo+0x64>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e006      	b.n	8005480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b20      	cmp	r3, #32
 800547c:	d0f0      	beq.n	8005460 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	00030d40 	.word	0x00030d40

08005490 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a11      	ldr	r2, [pc, #68]	; (80054ec <USB_FlushRxFifo+0x5c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e018      	b.n	80054e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	daf2      	bge.n	800549c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2210      	movs	r2, #16
 80054be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <USB_FlushRxFifo+0x5c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e006      	b.n	80054e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d0f0      	beq.n	80054c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	00030d40 	.word	0x00030d40

080054f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005510:	4313      	orrs	r3, r2
 8005512:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005522:	b480      	push	{r7}
 8005524:	b087      	sub	sp, #28
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0306 	and.w	r3, r3, #6
 800553a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005542:	2300      	movs	r3, #0
 8005544:	75fb      	strb	r3, [r7, #23]
 8005546:	e00a      	b.n	800555e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d002      	beq.n	8005554 <USB_GetDevSpeed+0x32>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b06      	cmp	r3, #6
 8005552:	d102      	bne.n	800555a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005554:	2302      	movs	r3, #2
 8005556:	75fb      	strb	r3, [r7, #23]
 8005558:	e001      	b.n	800555e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800555a:	230f      	movs	r3, #15
 800555c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800555e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005560:	4618      	mov	r0, r3
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d13a      	bne.n	80055fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	2101      	movs	r1, #1
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	b29b      	uxth	r3, r3
 80055a0:	68f9      	ldr	r1, [r7, #12]
 80055a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055a6:	4313      	orrs	r3, r2
 80055a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d155      	bne.n	800566c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	791b      	ldrb	r3, [r3, #4]
 80055da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	059b      	lsls	r3, r3, #22
 80055e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055e4:	4313      	orrs	r3, r2
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	e036      	b.n	800566c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005604:	69da      	ldr	r2, [r3, #28]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	2101      	movs	r1, #1
 8005610:	fa01 f303 	lsl.w	r3, r1, r3
 8005614:	041b      	lsls	r3, r3, #16
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800561c:	4313      	orrs	r3, r2
 800561e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d11a      	bne.n	800566c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	791b      	ldrb	r3, [r3, #4]
 8005650:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005652:	430b      	orrs	r3, r1
 8005654:	4313      	orrs	r3, r2
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d161      	bne.n	800575c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ae:	d11f      	bne.n	80056f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	2101      	movs	r1, #1
 8005702:	fa01 f303 	lsl.w	r3, r1, r3
 8005706:	b29b      	uxth	r3, r3
 8005708:	43db      	mvns	r3, r3
 800570a:	68f9      	ldr	r1, [r7, #12]
 800570c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005710:	4013      	ands	r3, r2
 8005712:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	2101      	movs	r1, #1
 8005726:	fa01 f303 	lsl.w	r3, r1, r3
 800572a:	b29b      	uxth	r3, r3
 800572c:	43db      	mvns	r3, r3
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005734:	4013      	ands	r3, r2
 8005736:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	0159      	lsls	r1, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	440b      	add	r3, r1
 800574e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005752:	4619      	mov	r1, r3
 8005754:	4b35      	ldr	r3, [pc, #212]	; (800582c <USB_DeactivateEndpoint+0x1b0>)
 8005756:	4013      	ands	r3, r2
 8005758:	600b      	str	r3, [r1, #0]
 800575a:	e060      	b.n	800581e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800576e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005772:	d11f      	bne.n	80057b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800578e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005792:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	2101      	movs	r1, #1
 80057c6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ca:	041b      	lsls	r3, r3, #16
 80057cc:	43db      	mvns	r3, r3
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d4:	4013      	ands	r3, r2
 80057d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	2101      	movs	r1, #1
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	041b      	lsls	r3, r3, #16
 80057f0:	43db      	mvns	r3, r3
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f8:	4013      	ands	r3, r2
 80057fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	0159      	lsls	r1, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	440b      	add	r3, r1
 8005812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005816:	4619      	mov	r1, r3
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <USB_DeactivateEndpoint+0x1b4>)
 800581a:	4013      	ands	r3, r2
 800581c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	ec337800 	.word	0xec337800
 8005830:	eff37800 	.word	0xeff37800

08005834 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08a      	sub	sp, #40	; 0x28
 8005838:	af02      	add	r7, sp, #8
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	4613      	mov	r3, r2
 8005840:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	785b      	ldrb	r3, [r3, #1]
 8005850:	2b01      	cmp	r3, #1
 8005852:	f040 815c 	bne.w	8005b0e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d132      	bne.n	80058c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	440a      	add	r2, r1
 8005874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005878:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800587c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005880:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	440a      	add	r2, r1
 8005898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058bc:	0cdb      	lsrs	r3, r3, #19
 80058be:	04db      	lsls	r3, r3, #19
 80058c0:	6113      	str	r3, [r2, #16]
 80058c2:	e074      	b.n	80059ae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058de:	0cdb      	lsrs	r3, r3, #19
 80058e0:	04db      	lsls	r3, r3, #19
 80058e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005902:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005906:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005914:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6999      	ldr	r1, [r3, #24]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	440b      	add	r3, r1
 8005920:	1e59      	subs	r1, r3, #1
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	fbb1 f3f3 	udiv	r3, r1, r3
 800592a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800592c:	4b9d      	ldr	r3, [pc, #628]	; (8005ba4 <USB_EPStartXfer+0x370>)
 800592e:	400b      	ands	r3, r1
 8005930:	69b9      	ldr	r1, [r7, #24]
 8005932:	0148      	lsls	r0, r1, #5
 8005934:	69f9      	ldr	r1, [r7, #28]
 8005936:	4401      	add	r1, r0
 8005938:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800593c:	4313      	orrs	r3, r2
 800593e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005956:	69b9      	ldr	r1, [r7, #24]
 8005958:	0148      	lsls	r0, r1, #5
 800595a:	69f9      	ldr	r1, [r7, #28]
 800595c:	4401      	add	r1, r0
 800595e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005962:	4313      	orrs	r3, r2
 8005964:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	791b      	ldrb	r3, [r3, #4]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d11f      	bne.n	80059ae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005988:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800598c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d14b      	bne.n	8005a4c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d009      	beq.n	80059d0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	461a      	mov	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	791b      	ldrb	r3, [r3, #4]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d128      	bne.n	8005a2a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d110      	bne.n	8005a0a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	e00f      	b.n	8005a2a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	0151      	lsls	r1, r2, #5
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	440a      	add	r2, r1
 8005a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	e133      	b.n	8005cb4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	791b      	ldrb	r3, [r3, #4]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d015      	beq.n	8005aa0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 811b 	beq.w	8005cb4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	2101      	movs	r1, #1
 8005a90:	fa01 f303 	lsl.w	r3, r1, r3
 8005a94:	69f9      	ldr	r1, [r7, #28]
 8005a96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	634b      	str	r3, [r1, #52]	; 0x34
 8005a9e:	e109      	b.n	8005cb4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d110      	bne.n	8005ad2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	e00f      	b.n	8005af2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	6919      	ldr	r1, [r3, #16]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	b298      	uxth	r0, r3
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	4603      	mov	r3, r0
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fade 	bl	80060c8 <USB_WritePacket>
 8005b0c:	e0d2      	b.n	8005cb4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b28:	0cdb      	lsrs	r3, r3, #19
 8005b2a:	04db      	lsls	r3, r3, #19
 8005b2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d126      	bne.n	8005ba8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b70:	69b9      	ldr	r1, [r7, #24]
 8005b72:	0148      	lsls	r0, r1, #5
 8005b74:	69f9      	ldr	r1, [r7, #28]
 8005b76:	4401      	add	r1, r0
 8005b78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b9e:	6113      	str	r3, [r2, #16]
 8005ba0:	e03a      	b.n	8005c18 <USB_EPStartXfer+0x3e4>
 8005ba2:	bf00      	nop
 8005ba4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	699a      	ldr	r2, [r3, #24]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	1e5a      	subs	r2, r3, #1
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	8afa      	ldrh	r2, [r7, #22]
 8005bc4:	fb03 f202 	mul.w	r2, r3, r2
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	8afb      	ldrh	r3, [r7, #22]
 8005bdc:	04d9      	lsls	r1, r3, #19
 8005bde:	4b38      	ldr	r3, [pc, #224]	; (8005cc0 <USB_EPStartXfer+0x48c>)
 8005be0:	400b      	ands	r3, r1
 8005be2:	69b9      	ldr	r1, [r7, #24]
 8005be4:	0148      	lsls	r0, r1, #5
 8005be6:	69f9      	ldr	r1, [r7, #28]
 8005be8:	4401      	add	r1, r0
 8005bea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c08:	69b9      	ldr	r1, [r7, #24]
 8005c0a:	0148      	lsls	r0, r1, #5
 8005c0c:	69f9      	ldr	r1, [r7, #28]
 8005c0e:	4401      	add	r1, r0
 8005c10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c14:	4313      	orrs	r3, r2
 8005c16:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d10d      	bne.n	8005c3a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d009      	beq.n	8005c3a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6919      	ldr	r1, [r3, #16]
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	460a      	mov	r2, r1
 8005c38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	791b      	ldrb	r3, [r3, #4]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d128      	bne.n	8005c94 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d110      	bne.n	8005c74 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	e00f      	b.n	8005c94 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	1ff80000 	.word	0x1ff80000

08005cc4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	f040 80ce 	bne.w	8005e82 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d132      	bne.n	8005d54 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4c:	0cdb      	lsrs	r3, r3, #19
 8005d4e:	04db      	lsls	r3, r3, #19
 8005d50:	6113      	str	r3, [r2, #16]
 8005d52:	e04e      	b.n	8005df2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6e:	0cdb      	lsrs	r3, r3, #19
 8005d70:	04db      	lsls	r3, r3, #19
 8005d72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	699a      	ldr	r2, [r3, #24]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d903      	bls.n	8005dac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de2:	6939      	ldr	r1, [r7, #16]
 8005de4:	0148      	lsls	r0, r1, #5
 8005de6:	6979      	ldr	r1, [r7, #20]
 8005de8:	4401      	add	r1, r0
 8005dea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dee:	4313      	orrs	r3, r2
 8005df0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d11e      	bne.n	8005e36 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	e097      	b.n	8005f66 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e54:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8083 	beq.w	8005f66 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	2101      	movs	r1, #1
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	6979      	ldr	r1, [r7, #20]
 8005e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	634b      	str	r3, [r1, #52]	; 0x34
 8005e80:	e071      	b.n	8005f66 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9c:	0cdb      	lsrs	r3, r3, #19
 8005e9e:	04db      	lsls	r3, r3, #19
 8005ea0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ebc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ec0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ec4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	0151      	lsls	r1, r2, #5
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	440a      	add	r2, r1
 8005ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005efc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f14:	6939      	ldr	r1, [r7, #16]
 8005f16:	0148      	lsls	r0, r1, #5
 8005f18:	6979      	ldr	r1, [r7, #20]
 8005f1a:	4401      	add	r1, r0
 8005f1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f20:	4313      	orrs	r3, r2
 8005f22:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d10d      	bne.n	8005f46 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6919      	ldr	r1, [r3, #16]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f42:	460a      	mov	r2, r1
 8005f44:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d14a      	bne.n	8006028 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005faa:	f040 8086 	bne.w	80060ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	7812      	ldrb	r2, [r2, #0]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ff4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f242 7210 	movw	r2, #10000	; 0x2710
 8006002:	4293      	cmp	r3, r2
 8006004:	d902      	bls.n	800600c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	75fb      	strb	r3, [r7, #23]
          break;
 800600a:	e056      	b.n	80060ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006024:	d0e7      	beq.n	8005ff6 <USB_EPStopXfer+0x82>
 8006026:	e048      	b.n	80060ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800603c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006040:	d13b      	bne.n	80060ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	440a      	add	r2, r1
 800605c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006060:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006064:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006088:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3301      	adds	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f242 7210 	movw	r2, #10000	; 0x2710
 8006096:	4293      	cmp	r3, r2
 8006098:	d902      	bls.n	80060a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	75fb      	strb	r3, [r7, #23]
          break;
 800609e:	e00c      	b.n	80060ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060b8:	d0e7      	beq.n	800608a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	371c      	adds	r7, #28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b089      	sub	sp, #36	; 0x24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	4611      	mov	r1, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	460b      	mov	r3, r1
 80060d8:	71fb      	strb	r3, [r7, #7]
 80060da:	4613      	mov	r3, r2
 80060dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80060e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d123      	bne.n	8006136 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060ee:	88bb      	ldrh	r3, [r7, #4]
 80060f0:	3303      	adds	r3, #3
 80060f2:	089b      	lsrs	r3, r3, #2
 80060f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	e018      	b.n	800612e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	031a      	lsls	r2, r3, #12
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	4413      	add	r3, r2
 8006104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006108:	461a      	mov	r2, r3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	3301      	adds	r3, #1
 8006114:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	3301      	adds	r3, #1
 800611a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	3301      	adds	r3, #1
 8006120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	3301      	adds	r3, #1
 8006126:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	3301      	adds	r3, #1
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	429a      	cmp	r2, r3
 8006134:	d3e2      	bcc.n	80060fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3724      	adds	r7, #36	; 0x24
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006144:	b480      	push	{r7}
 8006146:	b08b      	sub	sp, #44	; 0x2c
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	b29b      	uxth	r3, r3
 8006160:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800616a:	2300      	movs	r3, #0
 800616c:	623b      	str	r3, [r7, #32]
 800616e:	e014      	b.n	800619a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	601a      	str	r2, [r3, #0]
    pDest++;
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	3301      	adds	r3, #1
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	3301      	adds	r3, #1
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	3301      	adds	r3, #1
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	3301      	adds	r3, #1
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	3301      	adds	r3, #1
 8006198:	623b      	str	r3, [r7, #32]
 800619a:	6a3a      	ldr	r2, [r7, #32]
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d3e6      	bcc.n	8006170 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061a2:	8bfb      	ldrh	r3, [r7, #30]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01e      	beq.n	80061e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b2:	461a      	mov	r2, r3
 80061b4:	f107 0310 	add.w	r3, r7, #16
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	701a      	strb	r2, [r3, #0]
      i++;
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	3301      	adds	r3, #1
 80061d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	3301      	adds	r3, #1
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80061da:	8bfb      	ldrh	r3, [r7, #30]
 80061dc:	3b01      	subs	r3, #1
 80061de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80061e0:	8bfb      	ldrh	r3, [r7, #30]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1ea      	bne.n	80061bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	372c      	adds	r7, #44	; 0x2c
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d12c      	bne.n	800626a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	db12      	blt.n	8006248 <USB_EPSetStall+0x54>
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00f      	beq.n	8006248 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	440a      	add	r2, r1
 800623e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006242:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006246:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	0151      	lsls	r1, r2, #5
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	440a      	add	r2, r1
 800625e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006262:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	e02b      	b.n	80062c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	db12      	blt.n	80062a2 <USB_EPSetStall+0xae>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00f      	beq.n	80062a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	440a      	add	r2, r1
 8006298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d128      	bne.n	800633e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	440a      	add	r2, r1
 8006302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006306:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800630a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	791b      	ldrb	r3, [r3, #4]
 8006310:	2b03      	cmp	r3, #3
 8006312:	d003      	beq.n	800631c <USB_EPClearStall+0x4c>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	791b      	ldrb	r3, [r3, #4]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d138      	bne.n	800638e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	440a      	add	r2, r1
 8006332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	e027      	b.n	800638e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	440a      	add	r2, r1
 8006354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006358:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800635c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	791b      	ldrb	r3, [r3, #4]
 8006362:	2b03      	cmp	r3, #3
 8006364:	d003      	beq.n	800636e <USB_EPClearStall+0x9e>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	791b      	ldrb	r3, [r3, #4]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d10f      	bne.n	800638e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800638c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80063be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80063d0:	68f9      	ldr	r1, [r7, #12]
 80063d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d6:	4313      	orrs	r3, r2
 80063d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006416:	f023 0302 	bic.w	r3, r3, #2
 800641a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006444:	f023 0303 	bic.w	r3, r3, #3
 8006448:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006458:	f043 0302 	orr.w	r3, r3, #2
 800645c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4013      	ands	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006484:	68fb      	ldr	r3, [r7, #12]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	0c1b      	lsrs	r3, r3, #16
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b085      	sub	sp, #20
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	4013      	ands	r3, r2
 80064e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	b29b      	uxth	r3, r3
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	460b      	mov	r3, r1
 8006504:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4013      	ands	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006528:	68bb      	ldr	r3, [r7, #8]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006536:	b480      	push	{r7}
 8006538:	b087      	sub	sp, #28
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800655a:	78fb      	ldrb	r3, [r7, #3]
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	fa22 f303 	lsr.w	r3, r2, r3
 8006566:	01db      	lsls	r3, r3, #7
 8006568:	b2db      	uxtb	r3, r3
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4013      	ands	r3, r2
 8006582:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006584:	68bb      	ldr	r3, [r7, #8]
}
 8006586:	4618      	mov	r0, r3
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f003 0301 	and.w	r3, r3, #1
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065cc:	f023 0307 	bic.w	r3, r3, #7
 80065d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	460b      	mov	r3, r1
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	333c      	adds	r3, #60	; 0x3c
 800660a:	3304      	adds	r3, #4
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	4a26      	ldr	r2, [pc, #152]	; (80066ac <USB_EP0_OutStart+0xb8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d90a      	bls.n	800662e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006628:	d101      	bne.n	800662e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	e037      	b.n	800669e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	461a      	mov	r2, r3
 8006636:	2300      	movs	r3, #0
 8006638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800664c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800665c:	f043 0318 	orr.w	r3, r3, #24
 8006660:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006670:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006674:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d10f      	bne.n	800669c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006696:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800669a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	4f54300a 	.word	0x4f54300a

080066b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3301      	adds	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4a13      	ldr	r2, [pc, #76]	; (8006714 <USB_CoreReset+0x64>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d901      	bls.n	80066ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e01b      	b.n	8006706 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	daf2      	bge.n	80066bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f043 0201 	orr.w	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3301      	adds	r3, #1
 80066ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4a09      	ldr	r2, [pc, #36]	; (8006714 <USB_CoreReset+0x64>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e006      	b.n	8006706 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b01      	cmp	r3, #1
 8006702:	d0f0      	beq.n	80066e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	00030d40 	.word	0x00030d40

08006718 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006724:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006728:	f002 fcca 	bl	80090c0 <USBD_static_malloc>
 800672c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d109      	bne.n	8006748 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	32b0      	adds	r2, #176	; 0xb0
 800673e:	2100      	movs	r1, #0
 8006740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006744:	2302      	movs	r3, #2
 8006746:	e0d4      	b.n	80068f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006748:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800674c:	2100      	movs	r1, #0
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f002 fe8a 	bl	8009468 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	32b0      	adds	r2, #176	; 0xb0
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	32b0      	adds	r2, #176	; 0xb0
 800676e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	7c1b      	ldrb	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d138      	bne.n	80067f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006780:	4b5e      	ldr	r3, [pc, #376]	; (80068fc <USBD_CDC_Init+0x1e4>)
 8006782:	7819      	ldrb	r1, [r3, #0]
 8006784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006788:	2202      	movs	r2, #2
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f002 fb75 	bl	8008e7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006790:	4b5a      	ldr	r3, [pc, #360]	; (80068fc <USBD_CDC_Init+0x1e4>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	f003 020f 	and.w	r2, r3, #15
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	3324      	adds	r3, #36	; 0x24
 80067a6:	2201      	movs	r2, #1
 80067a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80067aa:	4b55      	ldr	r3, [pc, #340]	; (8006900 <USBD_CDC_Init+0x1e8>)
 80067ac:	7819      	ldrb	r1, [r3, #0]
 80067ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067b2:	2202      	movs	r2, #2
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f002 fb60 	bl	8008e7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80067ba:	4b51      	ldr	r3, [pc, #324]	; (8006900 <USBD_CDC_Init+0x1e8>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	f003 020f 	and.w	r2, r3, #15
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067d2:	2201      	movs	r2, #1
 80067d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80067d6:	4b4b      	ldr	r3, [pc, #300]	; (8006904 <USBD_CDC_Init+0x1ec>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	f003 020f 	and.w	r2, r3, #15
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	3326      	adds	r3, #38	; 0x26
 80067ec:	2210      	movs	r2, #16
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	e035      	b.n	800685e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80067f2:	4b42      	ldr	r3, [pc, #264]	; (80068fc <USBD_CDC_Init+0x1e4>)
 80067f4:	7819      	ldrb	r1, [r3, #0]
 80067f6:	2340      	movs	r3, #64	; 0x40
 80067f8:	2202      	movs	r2, #2
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f002 fb3d 	bl	8008e7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006800:	4b3e      	ldr	r3, [pc, #248]	; (80068fc <USBD_CDC_Init+0x1e4>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	f003 020f 	and.w	r2, r3, #15
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	3324      	adds	r3, #36	; 0x24
 8006816:	2201      	movs	r2, #1
 8006818:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800681a:	4b39      	ldr	r3, [pc, #228]	; (8006900 <USBD_CDC_Init+0x1e8>)
 800681c:	7819      	ldrb	r1, [r3, #0]
 800681e:	2340      	movs	r3, #64	; 0x40
 8006820:	2202      	movs	r2, #2
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f002 fb29 	bl	8008e7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006828:	4b35      	ldr	r3, [pc, #212]	; (8006900 <USBD_CDC_Init+0x1e8>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f003 020f 	and.w	r2, r3, #15
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006840:	2201      	movs	r2, #1
 8006842:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006844:	4b2f      	ldr	r3, [pc, #188]	; (8006904 <USBD_CDC_Init+0x1ec>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 020f 	and.w	r2, r3, #15
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	440b      	add	r3, r1
 8006858:	3326      	adds	r3, #38	; 0x26
 800685a:	2210      	movs	r2, #16
 800685c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800685e:	4b29      	ldr	r3, [pc, #164]	; (8006904 <USBD_CDC_Init+0x1ec>)
 8006860:	7819      	ldrb	r1, [r3, #0]
 8006862:	2308      	movs	r3, #8
 8006864:	2203      	movs	r2, #3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f002 fb07 	bl	8008e7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800686c:	4b25      	ldr	r3, [pc, #148]	; (8006904 <USBD_CDC_Init+0x1ec>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f003 020f 	and.w	r2, r3, #15
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	3324      	adds	r3, #36	; 0x24
 8006882:	2201      	movs	r2, #1
 8006884:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	33b0      	adds	r3, #176	; 0xb0
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80068bc:	2302      	movs	r3, #2
 80068be:	e018      	b.n	80068f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	7c1b      	ldrb	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068c8:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <USBD_CDC_Init+0x1e8>)
 80068ca:	7819      	ldrb	r1, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f002 fbbe 	bl	8009058 <USBD_LL_PrepareReceive>
 80068dc:	e008      	b.n	80068f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068de:	4b08      	ldr	r3, [pc, #32]	; (8006900 <USBD_CDC_Init+0x1e8>)
 80068e0:	7819      	ldrb	r1, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068e8:	2340      	movs	r3, #64	; 0x40
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f002 fbb4 	bl	8009058 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000093 	.word	0x20000093
 8006900:	20000094 	.word	0x20000094
 8006904:	20000095 	.word	0x20000095

08006908 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006914:	4b3a      	ldr	r3, [pc, #232]	; (8006a00 <USBD_CDC_DeInit+0xf8>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f002 fad3 	bl	8008ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006920:	4b37      	ldr	r3, [pc, #220]	; (8006a00 <USBD_CDC_DeInit+0xf8>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	f003 020f 	and.w	r2, r3, #15
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	3324      	adds	r3, #36	; 0x24
 8006936:	2200      	movs	r2, #0
 8006938:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800693a:	4b32      	ldr	r3, [pc, #200]	; (8006a04 <USBD_CDC_DeInit+0xfc>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f002 fac0 	bl	8008ec6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006946:	4b2f      	ldr	r3, [pc, #188]	; (8006a04 <USBD_CDC_DeInit+0xfc>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	f003 020f 	and.w	r2, r3, #15
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800695e:	2200      	movs	r2, #0
 8006960:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006962:	4b29      	ldr	r3, [pc, #164]	; (8006a08 <USBD_CDC_DeInit+0x100>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f002 faac 	bl	8008ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800696e:	4b26      	ldr	r3, [pc, #152]	; (8006a08 <USBD_CDC_DeInit+0x100>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	f003 020f 	and.w	r2, r3, #15
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	2200      	movs	r2, #0
 8006986:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006988:	4b1f      	ldr	r3, [pc, #124]	; (8006a08 <USBD_CDC_DeInit+0x100>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	f003 020f 	and.w	r2, r3, #15
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	3326      	adds	r3, #38	; 0x26
 800699e:	2200      	movs	r2, #0
 80069a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	32b0      	adds	r2, #176	; 0xb0
 80069ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01f      	beq.n	80069f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	33b0      	adds	r3, #176	; 0xb0
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	32b0      	adds	r2, #176	; 0xb0
 80069d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f002 fb80 	bl	80090dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	32b0      	adds	r2, #176	; 0xb0
 80069e6:	2100      	movs	r1, #0
 80069e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000093 	.word	0x20000093
 8006a04:	20000094 	.word	0x20000094
 8006a08:	20000095 	.word	0x20000095

08006a0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	32b0      	adds	r2, #176	; 0xb0
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e0bf      	b.n	8006bbc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d050      	beq.n	8006aea <USBD_CDC_Setup+0xde>
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	f040 80af 	bne.w	8006bac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	88db      	ldrh	r3, [r3, #6]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d03a      	beq.n	8006acc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	da1b      	bge.n	8006a98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	33b0      	adds	r3, #176	; 0xb0
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006a76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	88d2      	ldrh	r2, [r2, #6]
 8006a7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	88db      	ldrh	r3, [r3, #6]
 8006a82:	2b07      	cmp	r3, #7
 8006a84:	bf28      	it	cs
 8006a86:	2307      	movcs	r3, #7
 8006a88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	89fa      	ldrh	r2, [r7, #14]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 fd89 	bl	80085a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006a96:	e090      	b.n	8006bba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	785a      	ldrb	r2, [r3, #1]
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	88db      	ldrh	r3, [r3, #6]
 8006aa6:	2b3f      	cmp	r3, #63	; 0x3f
 8006aa8:	d803      	bhi.n	8006ab2 <USBD_CDC_Setup+0xa6>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	88db      	ldrh	r3, [r3, #6]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	e000      	b.n	8006ab4 <USBD_CDC_Setup+0xa8>
 8006ab2:	2240      	movs	r2, #64	; 0x40
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006aba:	6939      	ldr	r1, [r7, #16]
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fd9b 	bl	8008600 <USBD_CtlPrepareRx>
      break;
 8006aca:	e076      	b.n	8006bba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	33b0      	adds	r3, #176	; 0xb0
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	7850      	ldrb	r0, [r2, #1]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	4798      	blx	r3
      break;
 8006ae8:	e067      	b.n	8006bba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	2b0b      	cmp	r3, #11
 8006af0:	d851      	bhi.n	8006b96 <USBD_CDC_Setup+0x18a>
 8006af2:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <USBD_CDC_Setup+0xec>)
 8006af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af8:	08006b29 	.word	0x08006b29
 8006afc:	08006ba5 	.word	0x08006ba5
 8006b00:	08006b97 	.word	0x08006b97
 8006b04:	08006b97 	.word	0x08006b97
 8006b08:	08006b97 	.word	0x08006b97
 8006b0c:	08006b97 	.word	0x08006b97
 8006b10:	08006b97 	.word	0x08006b97
 8006b14:	08006b97 	.word	0x08006b97
 8006b18:	08006b97 	.word	0x08006b97
 8006b1c:	08006b97 	.word	0x08006b97
 8006b20:	08006b53 	.word	0x08006b53
 8006b24:	08006b7d 	.word	0x08006b7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d107      	bne.n	8006b44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b34:	f107 030a 	add.w	r3, r7, #10
 8006b38:	2202      	movs	r2, #2
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 fd33 	bl	80085a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b42:	e032      	b.n	8006baa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 fcbd 	bl	80084c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	75fb      	strb	r3, [r7, #23]
          break;
 8006b50:	e02b      	b.n	8006baa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d107      	bne.n	8006b6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b5e:	f107 030d 	add.w	r3, r7, #13
 8006b62:	2201      	movs	r2, #1
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f001 fd1e 	bl	80085a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b6c:	e01d      	b.n	8006baa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 fca8 	bl	80084c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b76:	2303      	movs	r3, #3
 8006b78:	75fb      	strb	r3, [r7, #23]
          break;
 8006b7a:	e016      	b.n	8006baa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d00f      	beq.n	8006ba8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fc9b 	bl	80084c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b90:	2303      	movs	r3, #3
 8006b92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b94:	e008      	b.n	8006ba8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 fc94 	bl	80084c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ba2:	e002      	b.n	8006baa <USBD_CDC_Setup+0x19e>
          break;
 8006ba4:	bf00      	nop
 8006ba6:	e008      	b.n	8006bba <USBD_CDC_Setup+0x1ae>
          break;
 8006ba8:	bf00      	nop
      }
      break;
 8006baa:	e006      	b.n	8006bba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 fc89 	bl	80084c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	32b0      	adds	r2, #176	; 0xb0
 8006be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e065      	b.n	8006cba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	32b0      	adds	r2, #176	; 0xb0
 8006bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	f003 020f 	and.w	r2, r3, #15
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	3318      	adds	r3, #24
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d02f      	beq.n	8006c78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	f003 020f 	and.w	r2, r3, #15
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	3318      	adds	r3, #24
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	78fb      	ldrb	r3, [r7, #3]
 8006c30:	f003 010f 	and.w	r1, r3, #15
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	460b      	mov	r3, r1
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	440b      	add	r3, r1
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4403      	add	r3, r0
 8006c40:	3348      	adds	r3, #72	; 0x48
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c48:	fb01 f303 	mul.w	r3, r1, r3
 8006c4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d112      	bne.n	8006c78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	f003 020f 	and.w	r2, r3, #15
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	440b      	add	r3, r1
 8006c64:	3318      	adds	r3, #24
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c6a:	78f9      	ldrb	r1, [r7, #3]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2200      	movs	r2, #0
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f002 f9d0 	bl	8009016 <USBD_LL_Transmit>
 8006c76:	e01f      	b.n	8006cb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	33b0      	adds	r3, #176	; 0xb0
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d010      	beq.n	8006cb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	33b0      	adds	r3, #176	; 0xb0
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	32b0      	adds	r2, #176	; 0xb0
 8006cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	32b0      	adds	r2, #176	; 0xb0
 8006ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e01a      	b.n	8006d2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f002 f9ce 	bl	800909a <USBD_LL_GetRxDataSize>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	33b0      	adds	r3, #176	; 0xb0
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006d24:	4611      	mov	r1, r2
 8006d26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	32b0      	adds	r2, #176	; 0xb0
 8006d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e025      	b.n	8006da0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	33b0      	adds	r3, #176	; 0xb0
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01a      	beq.n	8006d9e <USBD_CDC_EP0_RxReady+0x6c>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d6e:	2bff      	cmp	r3, #255	; 0xff
 8006d70:	d015      	beq.n	8006d9e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	33b0      	adds	r3, #176	; 0xb0
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006d8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d92:	b292      	uxth	r2, r2
 8006d94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	22ff      	movs	r2, #255	; 0xff
 8006d9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006db0:	2182      	movs	r1, #130	; 0x82
 8006db2:	4818      	ldr	r0, [pc, #96]	; (8006e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006db4:	f000 fd4f 	bl	8007856 <USBD_GetEpDesc>
 8006db8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006dba:	2101      	movs	r1, #1
 8006dbc:	4815      	ldr	r0, [pc, #84]	; (8006e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006dbe:	f000 fd4a 	bl	8007856 <USBD_GetEpDesc>
 8006dc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006dc4:	2181      	movs	r1, #129	; 0x81
 8006dc6:	4813      	ldr	r0, [pc, #76]	; (8006e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006dc8:	f000 fd45 	bl	8007856 <USBD_GetEpDesc>
 8006dcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2210      	movs	r2, #16
 8006dd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d006      	beq.n	8006dee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de8:	711a      	strb	r2, [r3, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d006      	beq.n	8006e02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dfc:	711a      	strb	r2, [r3, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2243      	movs	r2, #67	; 0x43
 8006e06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e08:	4b02      	ldr	r3, [pc, #8]	; (8006e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000050 	.word	0x20000050

08006e18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e20:	2182      	movs	r1, #130	; 0x82
 8006e22:	4818      	ldr	r0, [pc, #96]	; (8006e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006e24:	f000 fd17 	bl	8007856 <USBD_GetEpDesc>
 8006e28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	4815      	ldr	r0, [pc, #84]	; (8006e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006e2e:	f000 fd12 	bl	8007856 <USBD_GetEpDesc>
 8006e32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e34:	2181      	movs	r1, #129	; 0x81
 8006e36:	4813      	ldr	r0, [pc, #76]	; (8006e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006e38:	f000 fd0d 	bl	8007856 <USBD_GetEpDesc>
 8006e3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2210      	movs	r2, #16
 8006e48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d006      	beq.n	8006e5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2200      	movs	r2, #0
 8006e54:	711a      	strb	r2, [r3, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f042 0202 	orr.w	r2, r2, #2
 8006e5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d006      	beq.n	8006e72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	711a      	strb	r2, [r3, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f042 0202 	orr.w	r2, r2, #2
 8006e70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2243      	movs	r2, #67	; 0x43
 8006e76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e78:	4b02      	ldr	r3, [pc, #8]	; (8006e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20000050 	.word	0x20000050

08006e88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e90:	2182      	movs	r1, #130	; 0x82
 8006e92:	4818      	ldr	r0, [pc, #96]	; (8006ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e94:	f000 fcdf 	bl	8007856 <USBD_GetEpDesc>
 8006e98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	4815      	ldr	r0, [pc, #84]	; (8006ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e9e:	f000 fcda 	bl	8007856 <USBD_GetEpDesc>
 8006ea2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ea4:	2181      	movs	r1, #129	; 0x81
 8006ea6:	4813      	ldr	r0, [pc, #76]	; (8006ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ea8:	f000 fcd5 	bl	8007856 <USBD_GetEpDesc>
 8006eac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2210      	movs	r2, #16
 8006eb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d006      	beq.n	8006ece <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ec8:	711a      	strb	r2, [r3, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d006      	beq.n	8006ee2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006edc:	711a      	strb	r2, [r3, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2243      	movs	r2, #67	; 0x43
 8006ee6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ee8:	4b02      	ldr	r3, [pc, #8]	; (8006ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000050 	.word	0x20000050

08006ef8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	220a      	movs	r2, #10
 8006f04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f06:	4b03      	ldr	r3, [pc, #12]	; (8006f14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	2000000c 	.word	0x2000000c

08006f18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e009      	b.n	8006f40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	33b0      	adds	r3, #176	; 0xb0
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	32b0      	adds	r2, #176	; 0xb0
 8006f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f66:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e008      	b.n	8006f84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	32b0      	adds	r2, #176	; 0xb0
 8006fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e004      	b.n	8006fbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
	...

08006fcc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	32b0      	adds	r2, #176	; 0xb0
 8006fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	32b0      	adds	r2, #176	; 0xb0
 8006ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e025      	b.n	800704a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007004:	2b00      	cmp	r3, #0
 8007006:	d11f      	bne.n	8007048 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2201      	movs	r2, #1
 800700c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007010:	4b10      	ldr	r3, [pc, #64]	; (8007054 <USBD_CDC_TransmitPacket+0x88>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 020f 	and.w	r2, r3, #15
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4403      	add	r3, r0
 800702a:	3318      	adds	r3, #24
 800702c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <USBD_CDC_TransmitPacket+0x88>)
 8007030:	7819      	ldrb	r1, [r3, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 ffe9 	bl	8009016 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000093 	.word	0x20000093

08007058 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	32b0      	adds	r2, #176	; 0xb0
 800706a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32b0      	adds	r2, #176	; 0xb0
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007082:	2303      	movs	r3, #3
 8007084:	e018      	b.n	80070b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	7c1b      	ldrb	r3, [r3, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10a      	bne.n	80070a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800708e:	4b0c      	ldr	r3, [pc, #48]	; (80070c0 <USBD_CDC_ReceivePacket+0x68>)
 8007090:	7819      	ldrb	r1, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 ffdb 	bl	8009058 <USBD_LL_PrepareReceive>
 80070a2:	e008      	b.n	80070b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070a4:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <USBD_CDC_ReceivePacket+0x68>)
 80070a6:	7819      	ldrb	r1, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070ae:	2340      	movs	r3, #64	; 0x40
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 ffd1 	bl	8009058 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20000094 	.word	0x20000094

080070c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	4613      	mov	r3, r2
 80070d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80070d8:	2303      	movs	r3, #3
 80070da:	e01f      	b.n	800711c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	79fa      	ldrb	r2, [r7, #7]
 800710e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f001 fe4b 	bl	8008dac <USBD_LL_Init>
 8007116:	4603      	mov	r3, r0
 8007118:	75fb      	strb	r3, [r7, #23]

  return ret;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007138:	2303      	movs	r3, #3
 800713a:	e025      	b.n	8007188 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	32ae      	adds	r2, #174	; 0xae
 800714e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00f      	beq.n	8007178 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	32ae      	adds	r2, #174	; 0xae
 8007162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	f107 020e 	add.w	r2, r7, #14
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	4602      	mov	r2, r0
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fe53 	bl	8008e44 <USBD_LL_Start>
 800719e:	4603      	mov	r3, r0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	460b      	mov	r3, r1
 80071c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d009      	beq.n	80071ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	4611      	mov	r1, r2
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	4798      	blx	r3
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	78fa      	ldrb	r2, [r7, #3]
 8007210:	4611      	mov	r1, r2
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	4798      	blx	r3
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f001 f908 	bl	8008452 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007250:	461a      	mov	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800725e:	f003 031f 	and.w	r3, r3, #31
 8007262:	2b02      	cmp	r3, #2
 8007264:	d01a      	beq.n	800729c <USBD_LL_SetupStage+0x72>
 8007266:	2b02      	cmp	r3, #2
 8007268:	d822      	bhi.n	80072b0 <USBD_LL_SetupStage+0x86>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <USBD_LL_SetupStage+0x4a>
 800726e:	2b01      	cmp	r3, #1
 8007270:	d00a      	beq.n	8007288 <USBD_LL_SetupStage+0x5e>
 8007272:	e01d      	b.n	80072b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fb5f 	bl	8007940 <USBD_StdDevReq>
 8007282:	4603      	mov	r3, r0
 8007284:	73fb      	strb	r3, [r7, #15]
      break;
 8007286:	e020      	b.n	80072ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fbc7 	bl	8007a24 <USBD_StdItfReq>
 8007296:	4603      	mov	r3, r0
 8007298:	73fb      	strb	r3, [r7, #15]
      break;
 800729a:	e016      	b.n	80072ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fc29 	bl	8007afc <USBD_StdEPReq>
 80072aa:	4603      	mov	r3, r0
 80072ac:	73fb      	strb	r3, [r7, #15]
      break;
 80072ae:	e00c      	b.n	80072ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 fe20 	bl	8008f04 <USBD_LL_StallEP>
 80072c4:	4603      	mov	r3, r0
 80072c6:	73fb      	strb	r3, [r7, #15]
      break;
 80072c8:	bf00      	nop
  }

  return ret;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	460b      	mov	r3, r1
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80072e6:	7afb      	ldrb	r3, [r7, #11]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d16e      	bne.n	80073ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	f040 8098 	bne.w	8007430 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	429a      	cmp	r2, r3
 800730a:	d913      	bls.n	8007334 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	1ad2      	subs	r2, r2, r3
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	4293      	cmp	r3, r2
 8007324:	bf28      	it	cs
 8007326:	4613      	movcs	r3, r2
 8007328:	461a      	mov	r2, r3
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f001 f984 	bl	800863a <USBD_CtlContinueRx>
 8007332:	e07d      	b.n	8007430 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800733a:	f003 031f 	and.w	r3, r3, #31
 800733e:	2b02      	cmp	r3, #2
 8007340:	d014      	beq.n	800736c <USBD_LL_DataOutStage+0x98>
 8007342:	2b02      	cmp	r3, #2
 8007344:	d81d      	bhi.n	8007382 <USBD_LL_DataOutStage+0xae>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <USBD_LL_DataOutStage+0x7c>
 800734a:	2b01      	cmp	r3, #1
 800734c:	d003      	beq.n	8007356 <USBD_LL_DataOutStage+0x82>
 800734e:	e018      	b.n	8007382 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	75bb      	strb	r3, [r7, #22]
            break;
 8007354:	e018      	b.n	8007388 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800735c:	b2db      	uxtb	r3, r3
 800735e:	4619      	mov	r1, r3
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 fa5e 	bl	8007822 <USBD_CoreFindIF>
 8007366:	4603      	mov	r3, r0
 8007368:	75bb      	strb	r3, [r7, #22]
            break;
 800736a:	e00d      	b.n	8007388 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007372:	b2db      	uxtb	r3, r3
 8007374:	4619      	mov	r1, r3
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 fa60 	bl	800783c <USBD_CoreFindEP>
 800737c:	4603      	mov	r3, r0
 800737e:	75bb      	strb	r3, [r7, #22]
            break;
 8007380:	e002      	b.n	8007388 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	75bb      	strb	r3, [r7, #22]
            break;
 8007386:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007388:	7dbb      	ldrb	r3, [r7, #22]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d119      	bne.n	80073c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b03      	cmp	r3, #3
 8007398:	d113      	bne.n	80073c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800739a:	7dba      	ldrb	r2, [r7, #22]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	32ae      	adds	r2, #174	; 0xae
 80073a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00b      	beq.n	80073c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80073aa:	7dba      	ldrb	r2, [r7, #22]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80073b2:	7dba      	ldrb	r2, [r7, #22]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	32ae      	adds	r2, #174	; 0xae
 80073b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f001 f94a 	bl	800865c <USBD_CtlSendStatus>
 80073c8:	e032      	b.n	8007430 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80073ca:	7afb      	ldrb	r3, [r7, #11]
 80073cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	4619      	mov	r1, r3
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 fa31 	bl	800783c <USBD_CoreFindEP>
 80073da:	4603      	mov	r3, r0
 80073dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073de:	7dbb      	ldrb	r3, [r7, #22]
 80073e0:	2bff      	cmp	r3, #255	; 0xff
 80073e2:	d025      	beq.n	8007430 <USBD_LL_DataOutStage+0x15c>
 80073e4:	7dbb      	ldrb	r3, [r7, #22]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d122      	bne.n	8007430 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d117      	bne.n	8007426 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80073f6:	7dba      	ldrb	r2, [r7, #22]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	32ae      	adds	r2, #174	; 0xae
 80073fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00f      	beq.n	8007426 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007406:	7dba      	ldrb	r2, [r7, #22]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800740e:	7dba      	ldrb	r2, [r7, #22]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	32ae      	adds	r2, #174	; 0xae
 8007414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	7afa      	ldrb	r2, [r7, #11]
 800741c:	4611      	mov	r1, r2
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	4798      	blx	r3
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	e000      	b.n	8007432 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b086      	sub	sp, #24
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	460b      	mov	r3, r1
 8007444:	607a      	str	r2, [r7, #4]
 8007446:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d16f      	bne.n	800752e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3314      	adds	r3, #20
 8007452:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800745a:	2b02      	cmp	r3, #2
 800745c:	d15a      	bne.n	8007514 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	429a      	cmp	r2, r3
 8007468:	d914      	bls.n	8007494 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	1ad2      	subs	r2, r2, r3
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	461a      	mov	r2, r3
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f001 f8ac 	bl	80085de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007486:	2300      	movs	r3, #0
 8007488:	2200      	movs	r2, #0
 800748a:	2100      	movs	r1, #0
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f001 fde3 	bl	8009058 <USBD_LL_PrepareReceive>
 8007492:	e03f      	b.n	8007514 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	429a      	cmp	r2, r3
 800749e:	d11c      	bne.n	80074da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d316      	bcc.n	80074da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d20f      	bcs.n	80074da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074ba:	2200      	movs	r2, #0
 80074bc:	2100      	movs	r1, #0
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f001 f88d 	bl	80085de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074cc:	2300      	movs	r3, #0
 80074ce:	2200      	movs	r2, #0
 80074d0:	2100      	movs	r1, #0
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f001 fdc0 	bl	8009058 <USBD_LL_PrepareReceive>
 80074d8:	e01c      	b.n	8007514 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d10f      	bne.n	8007506 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d009      	beq.n	8007506 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007506:	2180      	movs	r1, #128	; 0x80
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f001 fcfb 	bl	8008f04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f001 f8b7 	bl	8008682 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d03a      	beq.n	8007594 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff fe42 	bl	80071a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800752c:	e032      	b.n	8007594 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800752e:	7afb      	ldrb	r3, [r7, #11]
 8007530:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007534:	b2db      	uxtb	r3, r3
 8007536:	4619      	mov	r1, r3
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f97f 	bl	800783c <USBD_CoreFindEP>
 800753e:	4603      	mov	r3, r0
 8007540:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	2bff      	cmp	r3, #255	; 0xff
 8007546:	d025      	beq.n	8007594 <USBD_LL_DataInStage+0x15a>
 8007548:	7dfb      	ldrb	r3, [r7, #23]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d122      	bne.n	8007594 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b03      	cmp	r3, #3
 8007558:	d11c      	bne.n	8007594 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800755a:	7dfa      	ldrb	r2, [r7, #23]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	32ae      	adds	r2, #174	; 0xae
 8007560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d014      	beq.n	8007594 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800756a:	7dfa      	ldrb	r2, [r7, #23]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007572:	7dfa      	ldrb	r2, [r7, #23]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	32ae      	adds	r2, #174	; 0xae
 8007578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	7afa      	ldrb	r2, [r7, #11]
 8007580:	4611      	mov	r1, r2
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	4798      	blx	r3
 8007586:	4603      	mov	r3, r0
 8007588:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800758a:	7dbb      	ldrb	r3, [r7, #22]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007590:	7dbb      	ldrb	r3, [r7, #22]
 8007592:	e000      	b.n	8007596 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b084      	sub	sp, #16
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d014      	beq.n	8007604 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00e      	beq.n	8007604 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6852      	ldr	r2, [r2, #4]
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	4611      	mov	r1, r2
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007600:	2303      	movs	r3, #3
 8007602:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007604:	2340      	movs	r3, #64	; 0x40
 8007606:	2200      	movs	r2, #0
 8007608:	2100      	movs	r1, #0
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 fc35 	bl	8008e7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2240      	movs	r2, #64	; 0x40
 800761c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007620:	2340      	movs	r3, #64	; 0x40
 8007622:	2200      	movs	r2, #0
 8007624:	2180      	movs	r1, #128	; 0x80
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fc27 	bl	8008e7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2240      	movs	r2, #64	; 0x40
 8007636:	621a      	str	r2, [r3, #32]

  return ret;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	78fa      	ldrb	r2, [r7, #3]
 8007652:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007670:	b2da      	uxtb	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2204      	movs	r2, #4
 800767c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d106      	bne.n	80076b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d110      	bne.n	80076f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00b      	beq.n	80076f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	32ae      	adds	r2, #174	; 0xae
 8007714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800771c:	2303      	movs	r3, #3
 800771e:	e01c      	b.n	800775a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b03      	cmp	r3, #3
 800772a:	d115      	bne.n	8007758 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	32ae      	adds	r2, #174	; 0xae
 8007736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	32ae      	adds	r2, #174	; 0xae
 800774a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	78fa      	ldrb	r2, [r7, #3]
 8007752:	4611      	mov	r1, r2
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b082      	sub	sp, #8
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	32ae      	adds	r2, #174	; 0xae
 8007778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007780:	2303      	movs	r3, #3
 8007782:	e01c      	b.n	80077be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b03      	cmp	r3, #3
 800778e:	d115      	bne.n	80077bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	32ae      	adds	r2, #174	; 0xae
 800779a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	32ae      	adds	r2, #174	; 0xae
 80077ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	78fa      	ldrb	r2, [r7, #3]
 80077b6:	4611      	mov	r1, r2
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00e      	beq.n	8007818 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6852      	ldr	r2, [r2, #4]
 8007806:	b2d2      	uxtb	r2, r2
 8007808:	4611      	mov	r1, r2
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	4798      	blx	r3
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007814:	2303      	movs	r3, #3
 8007816:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800782e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007830:	4618      	mov	r0, r3
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007848:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800784a:	4618      	mov	r0, r3
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b086      	sub	sp, #24
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	885b      	ldrh	r3, [r3, #2]
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	b29b      	uxth	r3, r3
 800787a:	429a      	cmp	r2, r3
 800787c:	d920      	bls.n	80078c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007886:	e013      	b.n	80078b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007888:	f107 030a 	add.w	r3, r7, #10
 800788c:	4619      	mov	r1, r3
 800788e:	6978      	ldr	r0, [r7, #20]
 8007890:	f000 f81b 	bl	80078ca <USBD_GetNextDesc>
 8007894:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b05      	cmp	r3, #5
 800789c:	d108      	bne.n	80078b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	789b      	ldrb	r3, [r3, #2]
 80078a6:	78fa      	ldrb	r2, [r7, #3]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d008      	beq.n	80078be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80078ac:	2300      	movs	r3, #0
 80078ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	885b      	ldrh	r3, [r3, #2]
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	897b      	ldrh	r3, [r7, #10]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d8e5      	bhi.n	8007888 <USBD_GetEpDesc+0x32>
 80078bc:	e000      	b.n	80078c0 <USBD_GetEpDesc+0x6a>
          break;
 80078be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80078c0:	693b      	ldr	r3, [r7, #16]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b085      	sub	sp, #20
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	881a      	ldrh	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4413      	add	r3, r2
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4413      	add	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80078f6:	68fb      	ldr	r3, [r7, #12]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	3301      	adds	r3, #1
 800791a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007922:	8a3b      	ldrh	r3, [r7, #16]
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	b21a      	sxth	r2, r3
 8007928:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800792c:	4313      	orrs	r3, r2
 800792e:	b21b      	sxth	r3, r3
 8007930:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007932:	89fb      	ldrh	r3, [r7, #14]
}
 8007934:	4618      	mov	r0, r3
 8007936:	371c      	adds	r7, #28
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007956:	2b40      	cmp	r3, #64	; 0x40
 8007958:	d005      	beq.n	8007966 <USBD_StdDevReq+0x26>
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d857      	bhi.n	8007a0e <USBD_StdDevReq+0xce>
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00f      	beq.n	8007982 <USBD_StdDevReq+0x42>
 8007962:	2b20      	cmp	r3, #32
 8007964:	d153      	bne.n	8007a0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	32ae      	adds	r2, #174	; 0xae
 8007970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	4798      	blx	r3
 800797c:	4603      	mov	r3, r0
 800797e:	73fb      	strb	r3, [r7, #15]
      break;
 8007980:	e04a      	b.n	8007a18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	2b09      	cmp	r3, #9
 8007988:	d83b      	bhi.n	8007a02 <USBD_StdDevReq+0xc2>
 800798a:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <USBD_StdDevReq+0x50>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079e5 	.word	0x080079e5
 8007994:	080079f9 	.word	0x080079f9
 8007998:	08007a03 	.word	0x08007a03
 800799c:	080079ef 	.word	0x080079ef
 80079a0:	08007a03 	.word	0x08007a03
 80079a4:	080079c3 	.word	0x080079c3
 80079a8:	080079b9 	.word	0x080079b9
 80079ac:	08007a03 	.word	0x08007a03
 80079b0:	080079db 	.word	0x080079db
 80079b4:	080079cd 	.word	0x080079cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fa3c 	bl	8007e38 <USBD_GetDescriptor>
          break;
 80079c0:	e024      	b.n	8007a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fba1 	bl	800810c <USBD_SetAddress>
          break;
 80079ca:	e01f      	b.n	8007a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fbe0 	bl	8008194 <USBD_SetConfig>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73fb      	strb	r3, [r7, #15]
          break;
 80079d8:	e018      	b.n	8007a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fc83 	bl	80082e8 <USBD_GetConfig>
          break;
 80079e2:	e013      	b.n	8007a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fcb4 	bl	8008354 <USBD_GetStatus>
          break;
 80079ec:	e00e      	b.n	8007a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fce3 	bl	80083bc <USBD_SetFeature>
          break;
 80079f6:	e009      	b.n	8007a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fd07 	bl	800840e <USBD_ClrFeature>
          break;
 8007a00:	e004      	b.n	8007a0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fd5e 	bl	80084c6 <USBD_CtlError>
          break;
 8007a0a:	bf00      	nop
      }
      break;
 8007a0c:	e004      	b.n	8007a18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fd58 	bl	80084c6 <USBD_CtlError>
      break;
 8007a16:	bf00      	nop
  }

  return ret;
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop

08007a24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a3a:	2b40      	cmp	r3, #64	; 0x40
 8007a3c:	d005      	beq.n	8007a4a <USBD_StdItfReq+0x26>
 8007a3e:	2b40      	cmp	r3, #64	; 0x40
 8007a40:	d852      	bhi.n	8007ae8 <USBD_StdItfReq+0xc4>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <USBD_StdItfReq+0x26>
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	d14e      	bne.n	8007ae8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d840      	bhi.n	8007ada <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	889b      	ldrh	r3, [r3, #4]
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d836      	bhi.n	8007ad0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	889b      	ldrh	r3, [r3, #4]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff fed9 	bl	8007822 <USBD_CoreFindIF>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2bff      	cmp	r3, #255	; 0xff
 8007a78:	d01d      	beq.n	8007ab6 <USBD_StdItfReq+0x92>
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d11a      	bne.n	8007ab6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007a80:	7bba      	ldrb	r2, [r7, #14]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	32ae      	adds	r2, #174	; 0xae
 8007a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00f      	beq.n	8007ab0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007a90:	7bba      	ldrb	r2, [r7, #14]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a98:	7bba      	ldrb	r2, [r7, #14]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32ae      	adds	r2, #174	; 0xae
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	4798      	blx	r3
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007aae:	e004      	b.n	8007aba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ab4:	e001      	b.n	8007aba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	88db      	ldrh	r3, [r3, #6]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d110      	bne.n	8007ae4 <USBD_StdItfReq+0xc0>
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10d      	bne.n	8007ae4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fdc7 	bl	800865c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ace:	e009      	b.n	8007ae4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fcf7 	bl	80084c6 <USBD_CtlError>
          break;
 8007ad8:	e004      	b.n	8007ae4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fcf2 	bl	80084c6 <USBD_CtlError>
          break;
 8007ae2:	e000      	b.n	8007ae6 <USBD_StdItfReq+0xc2>
          break;
 8007ae4:	bf00      	nop
      }
      break;
 8007ae6:	e004      	b.n	8007af2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fceb 	bl	80084c6 <USBD_CtlError>
      break;
 8007af0:	bf00      	nop
  }

  return ret;
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	889b      	ldrh	r3, [r3, #4]
 8007b0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b18:	2b40      	cmp	r3, #64	; 0x40
 8007b1a:	d007      	beq.n	8007b2c <USBD_StdEPReq+0x30>
 8007b1c:	2b40      	cmp	r3, #64	; 0x40
 8007b1e:	f200 817f 	bhi.w	8007e20 <USBD_StdEPReq+0x324>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d02a      	beq.n	8007b7c <USBD_StdEPReq+0x80>
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	f040 817a 	bne.w	8007e20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff fe83 	bl	800783c <USBD_CoreFindEP>
 8007b36:	4603      	mov	r3, r0
 8007b38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b3a:	7b7b      	ldrb	r3, [r7, #13]
 8007b3c:	2bff      	cmp	r3, #255	; 0xff
 8007b3e:	f000 8174 	beq.w	8007e2a <USBD_StdEPReq+0x32e>
 8007b42:	7b7b      	ldrb	r3, [r7, #13]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f040 8170 	bne.w	8007e2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007b4a:	7b7a      	ldrb	r2, [r7, #13]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007b52:	7b7a      	ldrb	r2, [r7, #13]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	32ae      	adds	r2, #174	; 0xae
 8007b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8163 	beq.w	8007e2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007b64:	7b7a      	ldrb	r2, [r7, #13]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	32ae      	adds	r2, #174	; 0xae
 8007b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b7a:	e156      	b.n	8007e2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d008      	beq.n	8007b96 <USBD_StdEPReq+0x9a>
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	f300 8145 	bgt.w	8007e14 <USBD_StdEPReq+0x318>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 809b 	beq.w	8007cc6 <USBD_StdEPReq+0x1ca>
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d03c      	beq.n	8007c0e <USBD_StdEPReq+0x112>
 8007b94:	e13e      	b.n	8007e14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d002      	beq.n	8007ba8 <USBD_StdEPReq+0xac>
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d016      	beq.n	8007bd4 <USBD_StdEPReq+0xd8>
 8007ba6:	e02c      	b.n	8007c02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00d      	beq.n	8007bca <USBD_StdEPReq+0xce>
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	2b80      	cmp	r3, #128	; 0x80
 8007bb2:	d00a      	beq.n	8007bca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 f9a3 	bl	8008f04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bbe:	2180      	movs	r1, #128	; 0x80
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 f99f 	bl	8008f04 <USBD_LL_StallEP>
 8007bc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bc8:	e020      	b.n	8007c0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fc7a 	bl	80084c6 <USBD_CtlError>
              break;
 8007bd2:	e01b      	b.n	8007c0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	885b      	ldrh	r3, [r3, #2]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10e      	bne.n	8007bfa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00b      	beq.n	8007bfa <USBD_StdEPReq+0xfe>
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b80      	cmp	r3, #128	; 0x80
 8007be6:	d008      	beq.n	8007bfa <USBD_StdEPReq+0xfe>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	88db      	ldrh	r3, [r3, #6]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d104      	bne.n	8007bfa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 f985 	bl	8008f04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fd2e 	bl	800865c <USBD_CtlSendStatus>

              break;
 8007c00:	e004      	b.n	8007c0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fc5e 	bl	80084c6 <USBD_CtlError>
              break;
 8007c0a:	bf00      	nop
          }
          break;
 8007c0c:	e107      	b.n	8007e1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d002      	beq.n	8007c20 <USBD_StdEPReq+0x124>
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d016      	beq.n	8007c4c <USBD_StdEPReq+0x150>
 8007c1e:	e04b      	b.n	8007cb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00d      	beq.n	8007c42 <USBD_StdEPReq+0x146>
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	2b80      	cmp	r3, #128	; 0x80
 8007c2a:	d00a      	beq.n	8007c42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 f967 	bl	8008f04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c36:	2180      	movs	r1, #128	; 0x80
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 f963 	bl	8008f04 <USBD_LL_StallEP>
 8007c3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c40:	e040      	b.n	8007cc4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fc3e 	bl	80084c6 <USBD_CtlError>
              break;
 8007c4a:	e03b      	b.n	8007cc4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	885b      	ldrh	r3, [r3, #2]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d136      	bne.n	8007cc2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d004      	beq.n	8007c68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 f96d 	bl	8008f42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fcf7 	bl	800865c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff fde2 	bl	800783c <USBD_CoreFindEP>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c7c:	7b7b      	ldrb	r3, [r7, #13]
 8007c7e:	2bff      	cmp	r3, #255	; 0xff
 8007c80:	d01f      	beq.n	8007cc2 <USBD_StdEPReq+0x1c6>
 8007c82:	7b7b      	ldrb	r3, [r7, #13]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d11c      	bne.n	8007cc2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007c88:	7b7a      	ldrb	r2, [r7, #13]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007c90:	7b7a      	ldrb	r2, [r7, #13]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	32ae      	adds	r2, #174	; 0xae
 8007c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d010      	beq.n	8007cc2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ca0:	7b7a      	ldrb	r2, [r7, #13]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	32ae      	adds	r2, #174	; 0xae
 8007ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	4798      	blx	r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007cb6:	e004      	b.n	8007cc2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fc03 	bl	80084c6 <USBD_CtlError>
              break;
 8007cc0:	e000      	b.n	8007cc4 <USBD_StdEPReq+0x1c8>
              break;
 8007cc2:	bf00      	nop
          }
          break;
 8007cc4:	e0ab      	b.n	8007e1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d002      	beq.n	8007cd8 <USBD_StdEPReq+0x1dc>
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d032      	beq.n	8007d3c <USBD_StdEPReq+0x240>
 8007cd6:	e097      	b.n	8007e08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d007      	beq.n	8007cee <USBD_StdEPReq+0x1f2>
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b80      	cmp	r3, #128	; 0x80
 8007ce2:	d004      	beq.n	8007cee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fbed 	bl	80084c6 <USBD_CtlError>
                break;
 8007cec:	e091      	b.n	8007e12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	da0b      	bge.n	8007d0e <USBD_StdEPReq+0x212>
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	3310      	adds	r3, #16
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	4413      	add	r3, r2
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	e00b      	b.n	8007d26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	4413      	add	r3, r2
 8007d24:	3304      	adds	r3, #4
 8007d26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2202      	movs	r2, #2
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fc37 	bl	80085a8 <USBD_CtlSendData>
              break;
 8007d3a:	e06a      	b.n	8007e12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	da11      	bge.n	8007d68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	f003 020f 	and.w	r2, r3, #15
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	3324      	adds	r3, #36	; 0x24
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d117      	bne.n	8007d8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fbb0 	bl	80084c6 <USBD_CtlError>
                  break;
 8007d66:	e054      	b.n	8007e12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	f003 020f 	and.w	r2, r3, #15
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	440b      	add	r3, r1
 8007d7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d104      	bne.n	8007d8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fb9d 	bl	80084c6 <USBD_CtlError>
                  break;
 8007d8c:	e041      	b.n	8007e12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	da0b      	bge.n	8007dae <USBD_StdEPReq+0x2b2>
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	3310      	adds	r3, #16
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	4413      	add	r3, r2
 8007daa:	3304      	adds	r3, #4
 8007dac:	e00b      	b.n	8007dc6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <USBD_StdEPReq+0x2d8>
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b80      	cmp	r3, #128	; 0x80
 8007dd2:	d103      	bne.n	8007ddc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	e00e      	b.n	8007dfa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 f8cd 	bl	8008f80 <USBD_LL_IsStallEP>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2201      	movs	r2, #1
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	e002      	b.n	8007dfa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fbd1 	bl	80085a8 <USBD_CtlSendData>
              break;
 8007e06:	e004      	b.n	8007e12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fb5b 	bl	80084c6 <USBD_CtlError>
              break;
 8007e10:	bf00      	nop
          }
          break;
 8007e12:	e004      	b.n	8007e1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fb55 	bl	80084c6 <USBD_CtlError>
          break;
 8007e1c:	bf00      	nop
      }
      break;
 8007e1e:	e005      	b.n	8007e2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fb4f 	bl	80084c6 <USBD_CtlError>
      break;
 8007e28:	e000      	b.n	8007e2c <USBD_StdEPReq+0x330>
      break;
 8007e2a:	bf00      	nop
  }

  return ret;
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
	...

08007e38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	885b      	ldrh	r3, [r3, #2]
 8007e52:	0a1b      	lsrs	r3, r3, #8
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	3b01      	subs	r3, #1
 8007e58:	2b06      	cmp	r3, #6
 8007e5a:	f200 8128 	bhi.w	80080ae <USBD_GetDescriptor+0x276>
 8007e5e:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <USBD_GetDescriptor+0x2c>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007e81 	.word	0x08007e81
 8007e68:	08007e99 	.word	0x08007e99
 8007e6c:	08007ed9 	.word	0x08007ed9
 8007e70:	080080af 	.word	0x080080af
 8007e74:	080080af 	.word	0x080080af
 8007e78:	0800804f 	.word	0x0800804f
 8007e7c:	0800807b 	.word	0x0800807b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	7c12      	ldrb	r2, [r2, #16]
 8007e8c:	f107 0108 	add.w	r1, r7, #8
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	60f8      	str	r0, [r7, #12]
      break;
 8007e96:	e112      	b.n	80080be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	7c1b      	ldrb	r3, [r3, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10d      	bne.n	8007ebc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea8:	f107 0208 	add.w	r2, r7, #8
 8007eac:	4610      	mov	r0, r2
 8007eae:	4798      	blx	r3
 8007eb0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007eba:	e100      	b.n	80080be <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	f107 0208 	add.w	r2, r7, #8
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4798      	blx	r3
 8007ecc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	701a      	strb	r2, [r3, #0]
      break;
 8007ed6:	e0f2      	b.n	80080be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	885b      	ldrh	r3, [r3, #2]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b05      	cmp	r3, #5
 8007ee0:	f200 80ac 	bhi.w	800803c <USBD_GetDescriptor+0x204>
 8007ee4:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <USBD_GetDescriptor+0xb4>)
 8007ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eea:	bf00      	nop
 8007eec:	08007f05 	.word	0x08007f05
 8007ef0:	08007f39 	.word	0x08007f39
 8007ef4:	08007f6d 	.word	0x08007f6d
 8007ef8:	08007fa1 	.word	0x08007fa1
 8007efc:	08007fd5 	.word	0x08007fd5
 8007f00:	08008009 	.word	0x08008009
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	7c12      	ldrb	r2, [r2, #16]
 8007f1c:	f107 0108 	add.w	r1, r7, #8
 8007f20:	4610      	mov	r0, r2
 8007f22:	4798      	blx	r3
 8007f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f26:	e091      	b.n	800804c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 facb 	bl	80084c6 <USBD_CtlError>
            err++;
 8007f30:	7afb      	ldrb	r3, [r7, #11]
 8007f32:	3301      	adds	r3, #1
 8007f34:	72fb      	strb	r3, [r7, #11]
          break;
 8007f36:	e089      	b.n	800804c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	7c12      	ldrb	r2, [r2, #16]
 8007f50:	f107 0108 	add.w	r1, r7, #8
 8007f54:	4610      	mov	r0, r2
 8007f56:	4798      	blx	r3
 8007f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f5a:	e077      	b.n	800804c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fab1 	bl	80084c6 <USBD_CtlError>
            err++;
 8007f64:	7afb      	ldrb	r3, [r7, #11]
 8007f66:	3301      	adds	r3, #1
 8007f68:	72fb      	strb	r3, [r7, #11]
          break;
 8007f6a:	e06f      	b.n	800804c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00b      	beq.n	8007f90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	7c12      	ldrb	r2, [r2, #16]
 8007f84:	f107 0108 	add.w	r1, r7, #8
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4798      	blx	r3
 8007f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f8e:	e05d      	b.n	800804c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa97 	bl	80084c6 <USBD_CtlError>
            err++;
 8007f98:	7afb      	ldrb	r3, [r7, #11]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f9e:	e055      	b.n	800804c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00b      	beq.n	8007fc4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	7c12      	ldrb	r2, [r2, #16]
 8007fb8:	f107 0108 	add.w	r1, r7, #8
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	4798      	blx	r3
 8007fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fc2:	e043      	b.n	800804c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fa7d 	bl	80084c6 <USBD_CtlError>
            err++;
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fd2:	e03b      	b.n	800804c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00b      	beq.n	8007ff8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe6:	695b      	ldr	r3, [r3, #20]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	7c12      	ldrb	r2, [r2, #16]
 8007fec:	f107 0108 	add.w	r1, r7, #8
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4798      	blx	r3
 8007ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ff6:	e029      	b.n	800804c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fa63 	bl	80084c6 <USBD_CtlError>
            err++;
 8008000:	7afb      	ldrb	r3, [r7, #11]
 8008002:	3301      	adds	r3, #1
 8008004:	72fb      	strb	r3, [r7, #11]
          break;
 8008006:	e021      	b.n	800804c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	7c12      	ldrb	r2, [r2, #16]
 8008020:	f107 0108 	add.w	r1, r7, #8
 8008024:	4610      	mov	r0, r2
 8008026:	4798      	blx	r3
 8008028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800802a:	e00f      	b.n	800804c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa49 	bl	80084c6 <USBD_CtlError>
            err++;
 8008034:	7afb      	ldrb	r3, [r7, #11]
 8008036:	3301      	adds	r3, #1
 8008038:	72fb      	strb	r3, [r7, #11]
          break;
 800803a:	e007      	b.n	800804c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa41 	bl	80084c6 <USBD_CtlError>
          err++;
 8008044:	7afb      	ldrb	r3, [r7, #11]
 8008046:	3301      	adds	r3, #1
 8008048:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800804a:	bf00      	nop
      }
      break;
 800804c:	e037      	b.n	80080be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	7c1b      	ldrb	r3, [r3, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d109      	bne.n	800806a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805e:	f107 0208 	add.w	r2, r7, #8
 8008062:	4610      	mov	r0, r2
 8008064:	4798      	blx	r3
 8008066:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008068:	e029      	b.n	80080be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fa2a 	bl	80084c6 <USBD_CtlError>
        err++;
 8008072:	7afb      	ldrb	r3, [r7, #11]
 8008074:	3301      	adds	r3, #1
 8008076:	72fb      	strb	r3, [r7, #11]
      break;
 8008078:	e021      	b.n	80080be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7c1b      	ldrb	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10d      	bne.n	800809e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808a:	f107 0208 	add.w	r2, r7, #8
 800808e:	4610      	mov	r0, r2
 8008090:	4798      	blx	r3
 8008092:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3301      	adds	r3, #1
 8008098:	2207      	movs	r2, #7
 800809a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800809c:	e00f      	b.n	80080be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fa10 	bl	80084c6 <USBD_CtlError>
        err++;
 80080a6:	7afb      	ldrb	r3, [r7, #11]
 80080a8:	3301      	adds	r3, #1
 80080aa:	72fb      	strb	r3, [r7, #11]
      break;
 80080ac:	e007      	b.n	80080be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fa08 	bl	80084c6 <USBD_CtlError>
      err++;
 80080b6:	7afb      	ldrb	r3, [r7, #11]
 80080b8:	3301      	adds	r3, #1
 80080ba:	72fb      	strb	r3, [r7, #11]
      break;
 80080bc:	bf00      	nop
  }

  if (err != 0U)
 80080be:	7afb      	ldrb	r3, [r7, #11]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d11e      	bne.n	8008102 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	88db      	ldrh	r3, [r3, #6]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d016      	beq.n	80080fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80080cc:	893b      	ldrh	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00e      	beq.n	80080f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	88da      	ldrh	r2, [r3, #6]
 80080d6:	893b      	ldrh	r3, [r7, #8]
 80080d8:	4293      	cmp	r3, r2
 80080da:	bf28      	it	cs
 80080dc:	4613      	movcs	r3, r2
 80080de:	b29b      	uxth	r3, r3
 80080e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80080e2:	893b      	ldrh	r3, [r7, #8]
 80080e4:	461a      	mov	r2, r3
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fa5d 	bl	80085a8 <USBD_CtlSendData>
 80080ee:	e009      	b.n	8008104 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f9e7 	bl	80084c6 <USBD_CtlError>
 80080f8:	e004      	b.n	8008104 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 faae 	bl	800865c <USBD_CtlSendStatus>
 8008100:	e000      	b.n	8008104 <USBD_GetDescriptor+0x2cc>
    return;
 8008102:	bf00      	nop
  }
}
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop

0800810c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	889b      	ldrh	r3, [r3, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d131      	bne.n	8008182 <USBD_SetAddress+0x76>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	88db      	ldrh	r3, [r3, #6]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d12d      	bne.n	8008182 <USBD_SetAddress+0x76>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	885b      	ldrh	r3, [r3, #2]
 800812a:	2b7f      	cmp	r3, #127	; 0x7f
 800812c:	d829      	bhi.n	8008182 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	885b      	ldrh	r3, [r3, #2]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008138:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b03      	cmp	r3, #3
 8008144:	d104      	bne.n	8008150 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f9bc 	bl	80084c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814e:	e01d      	b.n	800818c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7bfa      	ldrb	r2, [r7, #15]
 8008154:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 ff3b 	bl	8008fd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa7a 	bl	800865c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d004      	beq.n	8008178 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2202      	movs	r2, #2
 8008172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008176:	e009      	b.n	800818c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008180:	e004      	b.n	800818c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f99e 	bl	80084c6 <USBD_CtlError>
  }
}
 800818a:	bf00      	nop
 800818c:	bf00      	nop
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	885b      	ldrh	r3, [r3, #2]
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	4b4e      	ldr	r3, [pc, #312]	; (80082e4 <USBD_SetConfig+0x150>)
 80081aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081ac:	4b4d      	ldr	r3, [pc, #308]	; (80082e4 <USBD_SetConfig+0x150>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d905      	bls.n	80081c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f985 	bl	80084c6 <USBD_CtlError>
    return USBD_FAIL;
 80081bc:	2303      	movs	r3, #3
 80081be:	e08c      	b.n	80082da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d002      	beq.n	80081d2 <USBD_SetConfig+0x3e>
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d029      	beq.n	8008224 <USBD_SetConfig+0x90>
 80081d0:	e075      	b.n	80082be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80081d2:	4b44      	ldr	r3, [pc, #272]	; (80082e4 <USBD_SetConfig+0x150>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d020      	beq.n	800821c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80081da:	4b42      	ldr	r3, [pc, #264]	; (80082e4 <USBD_SetConfig+0x150>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081e4:	4b3f      	ldr	r3, [pc, #252]	; (80082e4 <USBD_SetConfig+0x150>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fe ffe7 	bl	80071be <USBD_SetClassConfig>
 80081f0:	4603      	mov	r3, r0
 80081f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d008      	beq.n	800820c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f962 	bl	80084c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800820a:	e065      	b.n	80082d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fa25 	bl	800865c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2203      	movs	r2, #3
 8008216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800821a:	e05d      	b.n	80082d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fa1d 	bl	800865c <USBD_CtlSendStatus>
      break;
 8008222:	e059      	b.n	80082d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008224:	4b2f      	ldr	r3, [pc, #188]	; (80082e4 <USBD_SetConfig+0x150>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d112      	bne.n	8008252 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008234:	4b2b      	ldr	r3, [pc, #172]	; (80082e4 <USBD_SetConfig+0x150>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800823e:	4b29      	ldr	r3, [pc, #164]	; (80082e4 <USBD_SetConfig+0x150>)
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7fe ffd6 	bl	80071f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fa06 	bl	800865c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008250:	e042      	b.n	80082d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008252:	4b24      	ldr	r3, [pc, #144]	; (80082e4 <USBD_SetConfig+0x150>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	429a      	cmp	r2, r3
 800825e:	d02a      	beq.n	80082b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7fe ffc4 	bl	80071f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800826e:	4b1d      	ldr	r3, [pc, #116]	; (80082e4 <USBD_SetConfig+0x150>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008278:	4b1a      	ldr	r3, [pc, #104]	; (80082e4 <USBD_SetConfig+0x150>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7fe ff9d 	bl	80071be <USBD_SetClassConfig>
 8008284:	4603      	mov	r3, r0
 8008286:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00f      	beq.n	80082ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f918 	bl	80084c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7fe ffa9 	bl	80071f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082ac:	e014      	b.n	80082d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f9d4 	bl	800865c <USBD_CtlSendStatus>
      break;
 80082b4:	e010      	b.n	80082d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f9d0 	bl	800865c <USBD_CtlSendStatus>
      break;
 80082bc:	e00c      	b.n	80082d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f900 	bl	80084c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082c6:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <USBD_SetConfig+0x150>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7fe ff92 	bl	80071f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80082d2:	2303      	movs	r3, #3
 80082d4:	73fb      	strb	r3, [r7, #15]
      break;
 80082d6:	bf00      	nop
  }

  return ret;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20000494 	.word	0x20000494

080082e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	88db      	ldrh	r3, [r3, #6]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d004      	beq.n	8008304 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f8e2 	bl	80084c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008302:	e023      	b.n	800834c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	dc02      	bgt.n	8008316 <USBD_GetConfig+0x2e>
 8008310:	2b00      	cmp	r3, #0
 8008312:	dc03      	bgt.n	800831c <USBD_GetConfig+0x34>
 8008314:	e015      	b.n	8008342 <USBD_GetConfig+0x5a>
 8008316:	2b03      	cmp	r3, #3
 8008318:	d00b      	beq.n	8008332 <USBD_GetConfig+0x4a>
 800831a:	e012      	b.n	8008342 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	3308      	adds	r3, #8
 8008326:	2201      	movs	r2, #1
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f93c 	bl	80085a8 <USBD_CtlSendData>
        break;
 8008330:	e00c      	b.n	800834c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3304      	adds	r3, #4
 8008336:	2201      	movs	r2, #1
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f934 	bl	80085a8 <USBD_CtlSendData>
        break;
 8008340:	e004      	b.n	800834c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f8be 	bl	80084c6 <USBD_CtlError>
        break;
 800834a:	bf00      	nop
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008364:	b2db      	uxtb	r3, r3
 8008366:	3b01      	subs	r3, #1
 8008368:	2b02      	cmp	r3, #2
 800836a:	d81e      	bhi.n	80083aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	88db      	ldrh	r3, [r3, #6]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d004      	beq.n	800837e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f8a5 	bl	80084c6 <USBD_CtlError>
        break;
 800837c:	e01a      	b.n	80083b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800838a:	2b00      	cmp	r3, #0
 800838c:	d005      	beq.n	800839a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f043 0202 	orr.w	r2, r3, #2
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	330c      	adds	r3, #12
 800839e:	2202      	movs	r2, #2
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f900 	bl	80085a8 <USBD_CtlSendData>
      break;
 80083a8:	e004      	b.n	80083b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f88a 	bl	80084c6 <USBD_CtlError>
      break;
 80083b2:	bf00      	nop
  }
}
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	885b      	ldrh	r3, [r3, #2]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d107      	bne.n	80083de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f940 	bl	800865c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80083dc:	e013      	b.n	8008406 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	885b      	ldrh	r3, [r3, #2]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d10b      	bne.n	80083fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	889b      	ldrh	r3, [r3, #4]
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f930 	bl	800865c <USBD_CtlSendStatus>
}
 80083fc:	e003      	b.n	8008406 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f860 	bl	80084c6 <USBD_CtlError>
}
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841e:	b2db      	uxtb	r3, r3
 8008420:	3b01      	subs	r3, #1
 8008422:	2b02      	cmp	r3, #2
 8008424:	d80b      	bhi.n	800843e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	885b      	ldrh	r3, [r3, #2]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d10c      	bne.n	8008448 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f910 	bl	800865c <USBD_CtlSendStatus>
      }
      break;
 800843c:	e004      	b.n	8008448 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f840 	bl	80084c6 <USBD_CtlError>
      break;
 8008446:	e000      	b.n	800844a <USBD_ClrFeature+0x3c>
      break;
 8008448:	bf00      	nop
  }
}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	781a      	ldrb	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3301      	adds	r3, #1
 800846c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	781a      	ldrb	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7ff fa41 	bl	8007904 <SWAPBYTE>
 8008482:	4603      	mov	r3, r0
 8008484:	461a      	mov	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3301      	adds	r3, #1
 800848e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3301      	adds	r3, #1
 8008494:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f7ff fa34 	bl	8007904 <SWAPBYTE>
 800849c:	4603      	mov	r3, r0
 800849e:	461a      	mov	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3301      	adds	r3, #1
 80084a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3301      	adds	r3, #1
 80084ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f7ff fa27 	bl	8007904 <SWAPBYTE>
 80084b6:	4603      	mov	r3, r0
 80084b8:	461a      	mov	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	80da      	strh	r2, [r3, #6]
}
 80084be:	bf00      	nop
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80084d0:	2180      	movs	r1, #128	; 0x80
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fd16 	bl	8008f04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80084d8:	2100      	movs	r1, #0
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fd12 	bl	8008f04 <USBD_LL_StallEP>
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d036      	beq.n	800856c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008502:	6938      	ldr	r0, [r7, #16]
 8008504:	f000 f836 	bl	8008574 <USBD_GetLen>
 8008508:	4603      	mov	r3, r0
 800850a:	3301      	adds	r3, #1
 800850c:	b29b      	uxth	r3, r3
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	b29a      	uxth	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008516:	7dfb      	ldrb	r3, [r7, #23]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	4413      	add	r3, r2
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	7812      	ldrb	r2, [r2, #0]
 8008520:	701a      	strb	r2, [r3, #0]
  idx++;
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	3301      	adds	r3, #1
 8008526:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	4413      	add	r3, r2
 800852e:	2203      	movs	r2, #3
 8008530:	701a      	strb	r2, [r3, #0]
  idx++;
 8008532:	7dfb      	ldrb	r3, [r7, #23]
 8008534:	3301      	adds	r3, #1
 8008536:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008538:	e013      	b.n	8008562 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800853a:	7dfb      	ldrb	r3, [r7, #23]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	4413      	add	r3, r2
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	7812      	ldrb	r2, [r2, #0]
 8008544:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	3301      	adds	r3, #1
 800854a:	613b      	str	r3, [r7, #16]
    idx++;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
 800854e:	3301      	adds	r3, #1
 8008550:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	4413      	add	r3, r2
 8008558:	2200      	movs	r2, #0
 800855a:	701a      	strb	r2, [r3, #0]
    idx++;
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	3301      	adds	r3, #1
 8008560:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e7      	bne.n	800853a <USBD_GetString+0x52>
 800856a:	e000      	b.n	800856e <USBD_GetString+0x86>
    return;
 800856c:	bf00      	nop
  }
}
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008584:	e005      	b.n	8008592 <USBD_GetLen+0x1e>
  {
    len++;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	3301      	adds	r3, #1
 800858a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	3301      	adds	r3, #1
 8008590:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1f5      	bne.n	8008586 <USBD_GetLen+0x12>
  }

  return len;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	2100      	movs	r1, #0
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fd21 	bl	8009016 <USBD_LL_Transmit>

  return USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	2100      	movs	r1, #0
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fd10 	bl	8009016 <USBD_LL_Transmit>

  return USBD_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2203      	movs	r2, #3
 8008610:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	2100      	movs	r1, #0
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fd14 	bl	8009058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	2100      	movs	r1, #0
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 fd03 	bl	8009058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2204      	movs	r2, #4
 8008668:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800866c:	2300      	movs	r3, #0
 800866e:	2200      	movs	r2, #0
 8008670:	2100      	movs	r1, #0
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fccf 	bl	8009016 <USBD_LL_Transmit>

  return USBD_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2205      	movs	r2, #5
 800868e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008692:	2300      	movs	r3, #0
 8008694:	2200      	movs	r2, #0
 8008696:	2100      	movs	r1, #0
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fcdd 	bl	8009058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086ac:	2200      	movs	r2, #0
 80086ae:	4912      	ldr	r1, [pc, #72]	; (80086f8 <MX_USB_DEVICE_Init+0x50>)
 80086b0:	4812      	ldr	r0, [pc, #72]	; (80086fc <MX_USB_DEVICE_Init+0x54>)
 80086b2:	f7fe fd07 	bl	80070c4 <USBD_Init>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086bc:	f7f8 f9e6 	bl	8000a8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80086c0:	490f      	ldr	r1, [pc, #60]	; (8008700 <MX_USB_DEVICE_Init+0x58>)
 80086c2:	480e      	ldr	r0, [pc, #56]	; (80086fc <MX_USB_DEVICE_Init+0x54>)
 80086c4:	f7fe fd2e 	bl	8007124 <USBD_RegisterClass>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086ce:	f7f8 f9dd 	bl	8000a8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80086d2:	490c      	ldr	r1, [pc, #48]	; (8008704 <MX_USB_DEVICE_Init+0x5c>)
 80086d4:	4809      	ldr	r0, [pc, #36]	; (80086fc <MX_USB_DEVICE_Init+0x54>)
 80086d6:	f7fe fc1f 	bl	8006f18 <USBD_CDC_RegisterInterface>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80086e0:	f7f8 f9d4 	bl	8000a8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086e4:	4805      	ldr	r0, [pc, #20]	; (80086fc <MX_USB_DEVICE_Init+0x54>)
 80086e6:	f7fe fd53 	bl	8007190 <USBD_Start>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80086f0:	f7f8 f9cc 	bl	8000a8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086f4:	bf00      	nop
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	200000ac 	.word	0x200000ac
 80086fc:	20000498 	.word	0x20000498
 8008700:	20000018 	.word	0x20000018
 8008704:	20000098 	.word	0x20000098

08008708 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800870c:	2200      	movs	r2, #0
 800870e:	4905      	ldr	r1, [pc, #20]	; (8008724 <CDC_Init_FS+0x1c>)
 8008710:	4805      	ldr	r0, [pc, #20]	; (8008728 <CDC_Init_FS+0x20>)
 8008712:	f7fe fc1b 	bl	8006f4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008716:	4905      	ldr	r1, [pc, #20]	; (800872c <CDC_Init_FS+0x24>)
 8008718:	4803      	ldr	r0, [pc, #12]	; (8008728 <CDC_Init_FS+0x20>)
 800871a:	f7fe fc39 	bl	8006f90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800871e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008720:	4618      	mov	r0, r3
 8008722:	bd80      	pop	{r7, pc}
 8008724:	20000f74 	.word	0x20000f74
 8008728:	20000498 	.word	0x20000498
 800872c:	20000774 	.word	0x20000774

08008730 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008734:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008736:	4618      	mov	r0, r3
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	6039      	str	r1, [r7, #0]
 800874a:	71fb      	strb	r3, [r7, #7]
 800874c:	4613      	mov	r3, r2
 800874e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	//USB connection has been detected.
	cdcHandeler.cdcUsbConnectionFlag = true;
 8008750:	4b2c      	ldr	r3, [pc, #176]	; (8008804 <CDC_Control_FS+0xc4>)
 8008752:	2201      	movs	r2, #1
 8008754:	821a      	strh	r2, [r3, #16]

	switch(cmd)
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b23      	cmp	r3, #35	; 0x23
 800875a:	d84b      	bhi.n	80087f4 <CDC_Control_FS+0xb4>
 800875c:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <CDC_Control_FS+0x24>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	080087f5 	.word	0x080087f5
 8008768:	080087f5 	.word	0x080087f5
 800876c:	080087f5 	.word	0x080087f5
 8008770:	080087f5 	.word	0x080087f5
 8008774:	080087f5 	.word	0x080087f5
 8008778:	080087f5 	.word	0x080087f5
 800877c:	080087f5 	.word	0x080087f5
 8008780:	080087f5 	.word	0x080087f5
 8008784:	080087f5 	.word	0x080087f5
 8008788:	080087f5 	.word	0x080087f5
 800878c:	080087f5 	.word	0x080087f5
 8008790:	080087f5 	.word	0x080087f5
 8008794:	080087f5 	.word	0x080087f5
 8008798:	080087f5 	.word	0x080087f5
 800879c:	080087f5 	.word	0x080087f5
 80087a0:	080087f5 	.word	0x080087f5
 80087a4:	080087f5 	.word	0x080087f5
 80087a8:	080087f5 	.word	0x080087f5
 80087ac:	080087f5 	.word	0x080087f5
 80087b0:	080087f5 	.word	0x080087f5
 80087b4:	080087f5 	.word	0x080087f5
 80087b8:	080087f5 	.word	0x080087f5
 80087bc:	080087f5 	.word	0x080087f5
 80087c0:	080087f5 	.word	0x080087f5
 80087c4:	080087f5 	.word	0x080087f5
 80087c8:	080087f5 	.word	0x080087f5
 80087cc:	080087f5 	.word	0x080087f5
 80087d0:	080087f5 	.word	0x080087f5
 80087d4:	080087f5 	.word	0x080087f5
 80087d8:	080087f5 	.word	0x080087f5
 80087dc:	080087f5 	.word	0x080087f5
 80087e0:	080087f5 	.word	0x080087f5
 80087e4:	080087f5 	.word	0x080087f5
 80087e8:	080087f5 	.word	0x080087f5
 80087ec:	080087f5 	.word	0x080087f5
 80087f0:	080087f5 	.word	0x080087f5
	case CDC_SEND_BREAK:

	break;

	default:
	break;
 80087f4:	bf00      	nop
	}

	return (USBD_OK);
 80087f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	20001774 	.word	0x20001774

08008808 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	480b      	ldr	r0, [pc, #44]	; (8008844 <CDC_Receive_FS+0x3c>)
 8008816:	f7fe fbbb 	bl	8006f90 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800881a:	480a      	ldr	r0, [pc, #40]	; (8008844 <CDC_Receive_FS+0x3c>)
 800881c:	f7fe fc1c 	bl	8007058 <USBD_CDC_ReceivePacket>
	//Set the received packet length
	cdcHandeler.cdcRxPacketSize = *Len;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	b29a      	uxth	r2, r3
 8008826:	4b08      	ldr	r3, [pc, #32]	; (8008848 <CDC_Receive_FS+0x40>)
 8008828:	811a      	strh	r2, [r3, #8]

	cdcHandeler.cbCdcRxPacket((char*)cdcHandeler.pCdcRxBuffer, cdcHandeler.cdcRxPacketSize);
 800882a:	4b07      	ldr	r3, [pc, #28]	; (8008848 <CDC_Receive_FS+0x40>)
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	4a06      	ldr	r2, [pc, #24]	; (8008848 <CDC_Receive_FS+0x40>)
 8008830:	6812      	ldr	r2, [r2, #0]
 8008832:	4905      	ldr	r1, [pc, #20]	; (8008848 <CDC_Receive_FS+0x40>)
 8008834:	8909      	ldrh	r1, [r1, #8]
 8008836:	4610      	mov	r0, r2
 8008838:	4798      	blx	r3

	return (USBD_OK);
 800883a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	20000498 	.word	0x20000498
 8008848:	20001774 	.word	0x20001774

0800884c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800885c:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <CDC_Transmit_FS+0x48>)
 800885e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008862:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800886e:	2301      	movs	r3, #1
 8008870:	e00b      	b.n	800888a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008872:	887b      	ldrh	r3, [r7, #2]
 8008874:	461a      	mov	r2, r3
 8008876:	6879      	ldr	r1, [r7, #4]
 8008878:	4806      	ldr	r0, [pc, #24]	; (8008894 <CDC_Transmit_FS+0x48>)
 800887a:	f7fe fb67 	bl	8006f4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800887e:	4805      	ldr	r0, [pc, #20]	; (8008894 <CDC_Transmit_FS+0x48>)
 8008880:	f7fe fba4 	bl	8006fcc <USBD_CDC_TransmitPacket>
 8008884:	4603      	mov	r3, r0
 8008886:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20000498 	.word	0x20000498

08008898 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	4613      	mov	r3, r2
 80088a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80088aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	371c      	adds	r7, #28
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
	...

080088bc <CDC_Handler_Init_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Handler_Init_FS	(void* cdcRxCallback)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	memset(&cdcHandeler, 0, sizeof(hCdcBuffer_t));
 80088c4:	2214      	movs	r2, #20
 80088c6:	2100      	movs	r1, #0
 80088c8:	4807      	ldr	r0, [pc, #28]	; (80088e8 <CDC_Handler_Init_FS+0x2c>)
 80088ca:	f000 fdcd 	bl	8009468 <memset>

	cdcHandeler.cbCdcRxPacket = cdcRxCallback;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a05      	ldr	r2, [pc, #20]	; (80088e8 <CDC_Handler_Init_FS+0x2c>)
 80088d2:	60d3      	str	r3, [r2, #12]

	cdcHandeler.pCdcRxBuffer = UserRxBufferFS;
 80088d4:	4b04      	ldr	r3, [pc, #16]	; (80088e8 <CDC_Handler_Init_FS+0x2c>)
 80088d6:	4a05      	ldr	r2, [pc, #20]	; (80088ec <CDC_Handler_Init_FS+0x30>)
 80088d8:	601a      	str	r2, [r3, #0]

	cdcHandeler.pCdcTxBuffer = UserTxBufferFS;
 80088da:	4b03      	ldr	r3, [pc, #12]	; (80088e8 <CDC_Handler_Init_FS+0x2c>)
 80088dc:	4a04      	ldr	r2, [pc, #16]	; (80088f0 <CDC_Handler_Init_FS+0x34>)
 80088de:	605a      	str	r2, [r3, #4]
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20001774 	.word	0x20001774
 80088ec:	20000774 	.word	0x20000774
 80088f0:	20000f74 	.word	0x20000f74

080088f4 <CDC_UsbConnectionCheck>:

	return packetSize;
}

bool CDC_UsbConnectionCheck(void)
{
 80088f4:	b480      	push	{r7}
 80088f6:	af00      	add	r7, sp, #0
	return cdcHandeler.cdcUsbConnectionFlag;
 80088f8:	4b05      	ldr	r3, [pc, #20]	; (8008910 <CDC_UsbConnectionCheck+0x1c>)
 80088fa:	8a1b      	ldrh	r3, [r3, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bf14      	ite	ne
 8008900:	2301      	movne	r3, #1
 8008902:	2300      	moveq	r3, #0
 8008904:	b2db      	uxtb	r3, r3
}
 8008906:	4618      	mov	r0, r3
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	20001774 	.word	0x20001774

08008914 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	4603      	mov	r3, r0
 800891c:	6039      	str	r1, [r7, #0]
 800891e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2212      	movs	r2, #18
 8008924:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008926:	4b03      	ldr	r3, [pc, #12]	; (8008934 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	200000c8 	.word	0x200000c8

08008938 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	6039      	str	r1, [r7, #0]
 8008942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2204      	movs	r2, #4
 8008948:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800894a:	4b03      	ldr	r3, [pc, #12]	; (8008958 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	200000dc 	.word	0x200000dc

0800895c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	6039      	str	r1, [r7, #0]
 8008966:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d105      	bne.n	800897a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	4907      	ldr	r1, [pc, #28]	; (8008990 <USBD_FS_ProductStrDescriptor+0x34>)
 8008972:	4808      	ldr	r0, [pc, #32]	; (8008994 <USBD_FS_ProductStrDescriptor+0x38>)
 8008974:	f7ff fdb8 	bl	80084e8 <USBD_GetString>
 8008978:	e004      	b.n	8008984 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	4904      	ldr	r1, [pc, #16]	; (8008990 <USBD_FS_ProductStrDescriptor+0x34>)
 800897e:	4805      	ldr	r0, [pc, #20]	; (8008994 <USBD_FS_ProductStrDescriptor+0x38>)
 8008980:	f7ff fdb2 	bl	80084e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008984:	4b02      	ldr	r3, [pc, #8]	; (8008990 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	20001788 	.word	0x20001788
 8008994:	08009d70 	.word	0x08009d70

08008998 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	4904      	ldr	r1, [pc, #16]	; (80089b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089a8:	4804      	ldr	r0, [pc, #16]	; (80089bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089aa:	f7ff fd9d 	bl	80084e8 <USBD_GetString>
  return USBD_StrDesc;
 80089ae:	4b02      	ldr	r3, [pc, #8]	; (80089b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	20001788 	.word	0x20001788
 80089bc:	08009d7c 	.word	0x08009d7c

080089c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	6039      	str	r1, [r7, #0]
 80089ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	221a      	movs	r2, #26
 80089d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089d2:	f000 f843 	bl	8008a5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80089d6:	4b02      	ldr	r3, [pc, #8]	; (80089e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	200000e0 	.word	0x200000e0

080089e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	6039      	str	r1, [r7, #0]
 80089ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089f0:	79fb      	ldrb	r3, [r7, #7]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d105      	bne.n	8008a02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	4907      	ldr	r1, [pc, #28]	; (8008a18 <USBD_FS_ConfigStrDescriptor+0x34>)
 80089fa:	4808      	ldr	r0, [pc, #32]	; (8008a1c <USBD_FS_ConfigStrDescriptor+0x38>)
 80089fc:	f7ff fd74 	bl	80084e8 <USBD_GetString>
 8008a00:	e004      	b.n	8008a0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	4904      	ldr	r1, [pc, #16]	; (8008a18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a06:	4805      	ldr	r0, [pc, #20]	; (8008a1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a08:	f7ff fd6e 	bl	80084e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a0c:	4b02      	ldr	r3, [pc, #8]	; (8008a18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	20001788 	.word	0x20001788
 8008a1c:	08009d90 	.word	0x08009d90

08008a20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	6039      	str	r1, [r7, #0]
 8008a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d105      	bne.n	8008a3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	4907      	ldr	r1, [pc, #28]	; (8008a54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a36:	4808      	ldr	r0, [pc, #32]	; (8008a58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a38:	f7ff fd56 	bl	80084e8 <USBD_GetString>
 8008a3c:	e004      	b.n	8008a48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	4904      	ldr	r1, [pc, #16]	; (8008a54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a42:	4805      	ldr	r0, [pc, #20]	; (8008a58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a44:	f7ff fd50 	bl	80084e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a48:	4b02      	ldr	r3, [pc, #8]	; (8008a54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20001788 	.word	0x20001788
 8008a58:	08009d9c 	.word	0x08009d9c

08008a5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a62:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <Get_SerialNum+0x44>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a68:	4b0e      	ldr	r3, [pc, #56]	; (8008aa4 <Get_SerialNum+0x48>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a6e:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <Get_SerialNum+0x4c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4413      	add	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d009      	beq.n	8008a96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a82:	2208      	movs	r2, #8
 8008a84:	4909      	ldr	r1, [pc, #36]	; (8008aac <Get_SerialNum+0x50>)
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 f814 	bl	8008ab4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a8c:	2204      	movs	r2, #4
 8008a8e:	4908      	ldr	r1, [pc, #32]	; (8008ab0 <Get_SerialNum+0x54>)
 8008a90:	68b8      	ldr	r0, [r7, #8]
 8008a92:	f000 f80f 	bl	8008ab4 <IntToUnicode>
  }
}
 8008a96:	bf00      	nop
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	1fff7a10 	.word	0x1fff7a10
 8008aa4:	1fff7a14 	.word	0x1fff7a14
 8008aa8:	1fff7a18 	.word	0x1fff7a18
 8008aac:	200000e2 	.word	0x200000e2
 8008ab0:	200000f2 	.word	0x200000f2

08008ab4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	75fb      	strb	r3, [r7, #23]
 8008aca:	e027      	b.n	8008b1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	0f1b      	lsrs	r3, r3, #28
 8008ad0:	2b09      	cmp	r3, #9
 8008ad2:	d80b      	bhi.n	8008aec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	0f1b      	lsrs	r3, r3, #28
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	7dfb      	ldrb	r3, [r7, #23]
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	4619      	mov	r1, r3
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	440b      	add	r3, r1
 8008ae4:	3230      	adds	r2, #48	; 0x30
 8008ae6:	b2d2      	uxtb	r2, r2
 8008ae8:	701a      	strb	r2, [r3, #0]
 8008aea:	e00a      	b.n	8008b02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	0f1b      	lsrs	r3, r3, #28
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	7dfb      	ldrb	r3, [r7, #23]
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	4619      	mov	r1, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	440b      	add	r3, r1
 8008afc:	3237      	adds	r2, #55	; 0x37
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	011b      	lsls	r3, r3, #4
 8008b06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	4413      	add	r3, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	75fb      	strb	r3, [r7, #23]
 8008b1c:	7dfa      	ldrb	r2, [r7, #23]
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d3d3      	bcc.n	8008acc <IntToUnicode+0x18>
  }
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
	...

08008b34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08a      	sub	sp, #40	; 0x28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b3c:	f107 0314 	add.w	r3, r7, #20
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	605a      	str	r2, [r3, #4]
 8008b46:	609a      	str	r2, [r3, #8]
 8008b48:	60da      	str	r2, [r3, #12]
 8008b4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b54:	d13a      	bne.n	8008bcc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b56:	2300      	movs	r3, #0
 8008b58:	613b      	str	r3, [r7, #16]
 8008b5a:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <HAL_PCD_MspInit+0xa0>)
 8008b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5e:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <HAL_PCD_MspInit+0xa0>)
 8008b60:	f043 0301 	orr.w	r3, r3, #1
 8008b64:	6313      	str	r3, [r2, #48]	; 0x30
 8008b66:	4b1b      	ldr	r3, [pc, #108]	; (8008bd4 <HAL_PCD_MspInit+0xa0>)
 8008b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	613b      	str	r3, [r7, #16]
 8008b70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b80:	2303      	movs	r3, #3
 8008b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b84:	230a      	movs	r3, #10
 8008b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b88:	f107 0314 	add.w	r3, r7, #20
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4812      	ldr	r0, [pc, #72]	; (8008bd8 <HAL_PCD_MspInit+0xa4>)
 8008b90:	f7f8 fece 	bl	8001930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b94:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <HAL_PCD_MspInit+0xa0>)
 8008b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b98:	4a0e      	ldr	r2, [pc, #56]	; (8008bd4 <HAL_PCD_MspInit+0xa0>)
 8008b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b9e:	6353      	str	r3, [r2, #52]	; 0x34
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <HAL_PCD_MspInit+0xa0>)
 8008ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ba8:	4a0a      	ldr	r2, [pc, #40]	; (8008bd4 <HAL_PCD_MspInit+0xa0>)
 8008baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bae:	6453      	str	r3, [r2, #68]	; 0x44
 8008bb0:	4b08      	ldr	r3, [pc, #32]	; (8008bd4 <HAL_PCD_MspInit+0xa0>)
 8008bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	2043      	movs	r0, #67	; 0x43
 8008bc2:	f7f8 fa7c 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008bc6:	2043      	movs	r0, #67	; 0x43
 8008bc8:	f7f8 fa95 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008bcc:	bf00      	nop
 8008bce:	3728      	adds	r7, #40	; 0x28
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	40023800 	.word	0x40023800
 8008bd8:	40020000 	.word	0x40020000

08008bdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7fe fb19 	bl	800722a <USBD_LL_SetupStage>
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c12:	78fa      	ldrb	r2, [r7, #3]
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	4613      	mov	r3, r2
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	440b      	add	r3, r1
 8008c20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	f7fe fb53 	bl	80072d4 <USBD_LL_DataOutStage>
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c48:	78fa      	ldrb	r2, [r7, #3]
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	4413      	add	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	334c      	adds	r3, #76	; 0x4c
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	f7fe fbec 	bl	800743a <USBD_LL_DataInStage>
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fe fd20 	bl	80076be <USBD_LL_SOF>
}
 8008c7e:	bf00      	nop
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d001      	beq.n	8008c9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008c9a:	f7f7 fef7 	bl	8000a8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ca4:	7bfa      	ldrb	r2, [r7, #15]
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7fe fcca 	bl	8007642 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe fc72 	bl	800759e <USBD_LL_Reset>
}
 8008cba:	bf00      	nop
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fcc5 	bl	8007662 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	6812      	ldr	r2, [r2, #0]
 8008ce6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cea:	f043 0301 	orr.w	r3, r3, #1
 8008cee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <HAL_PCD_SuspendCallback+0x48>)
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	4a03      	ldr	r2, [pc, #12]	; (8008d0c <HAL_PCD_SuspendCallback+0x48>)
 8008cfe:	f043 0306 	orr.w	r3, r3, #6
 8008d02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d04:	bf00      	nop
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	e000ed00 	.word	0xe000ed00

08008d10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fcb5 	bl	800768e <USBD_LL_Resume>
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d3e:	78fa      	ldrb	r2, [r7, #3]
 8008d40:	4611      	mov	r1, r2
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe fd0d 	bl	8007762 <USBD_LL_IsoOUTIncomplete>
}
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d62:	78fa      	ldrb	r2, [r7, #3]
 8008d64:	4611      	mov	r1, r2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe fcc9 	bl	80076fe <USBD_LL_IsoINIncomplete>
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fd1f 	bl	80077c6 <USBD_LL_DevConnected>
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe fd1c 	bl	80077dc <USBD_LL_DevDisconnected>
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d13c      	bne.n	8008e36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008dbc:	4a20      	ldr	r2, [pc, #128]	; (8008e40 <USBD_LL_Init+0x94>)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a1e      	ldr	r2, [pc, #120]	; (8008e40 <USBD_LL_Init+0x94>)
 8008dc8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008dcc:	4b1c      	ldr	r3, [pc, #112]	; (8008e40 <USBD_LL_Init+0x94>)
 8008dce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008dd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008dd4:	4b1a      	ldr	r3, [pc, #104]	; (8008e40 <USBD_LL_Init+0x94>)
 8008dd6:	2204      	movs	r2, #4
 8008dd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008dda:	4b19      	ldr	r3, [pc, #100]	; (8008e40 <USBD_LL_Init+0x94>)
 8008ddc:	2202      	movs	r2, #2
 8008dde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008de0:	4b17      	ldr	r3, [pc, #92]	; (8008e40 <USBD_LL_Init+0x94>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008de6:	4b16      	ldr	r3, [pc, #88]	; (8008e40 <USBD_LL_Init+0x94>)
 8008de8:	2202      	movs	r2, #2
 8008dea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008dec:	4b14      	ldr	r3, [pc, #80]	; (8008e40 <USBD_LL_Init+0x94>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008df2:	4b13      	ldr	r3, [pc, #76]	; (8008e40 <USBD_LL_Init+0x94>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008df8:	4b11      	ldr	r3, [pc, #68]	; (8008e40 <USBD_LL_Init+0x94>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008dfe:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <USBD_LL_Init+0x94>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e04:	4b0e      	ldr	r3, [pc, #56]	; (8008e40 <USBD_LL_Init+0x94>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e0a:	480d      	ldr	r0, [pc, #52]	; (8008e40 <USBD_LL_Init+0x94>)
 8008e0c:	f7f8 ff47 	bl	8001c9e <HAL_PCD_Init>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e16:	f7f7 fe39 	bl	8000a8c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e1a:	2180      	movs	r1, #128	; 0x80
 8008e1c:	4808      	ldr	r0, [pc, #32]	; (8008e40 <USBD_LL_Init+0x94>)
 8008e1e:	f7fa f99e 	bl	800315e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e22:	2240      	movs	r2, #64	; 0x40
 8008e24:	2100      	movs	r1, #0
 8008e26:	4806      	ldr	r0, [pc, #24]	; (8008e40 <USBD_LL_Init+0x94>)
 8008e28:	f7fa f952 	bl	80030d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e2c:	2280      	movs	r2, #128	; 0x80
 8008e2e:	2101      	movs	r1, #1
 8008e30:	4803      	ldr	r0, [pc, #12]	; (8008e40 <USBD_LL_Init+0x94>)
 8008e32:	f7fa f94d 	bl	80030d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20001988 	.word	0x20001988

08008e44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7f9 f83c 	bl	8001ed8 <HAL_PCD_Start>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 f942 	bl	80090f0 <USBD_Get_USB_Status>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	4608      	mov	r0, r1
 8008e84:	4611      	mov	r1, r2
 8008e86:	461a      	mov	r2, r3
 8008e88:	4603      	mov	r3, r0
 8008e8a:	70fb      	strb	r3, [r7, #3]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	70bb      	strb	r3, [r7, #2]
 8008e90:	4613      	mov	r3, r2
 8008e92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ea2:	78bb      	ldrb	r3, [r7, #2]
 8008ea4:	883a      	ldrh	r2, [r7, #0]
 8008ea6:	78f9      	ldrb	r1, [r7, #3]
 8008ea8:	f7f9 fd0d 	bl	80028c6 <HAL_PCD_EP_Open>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 f91c 	bl	80090f0 <USBD_Get_USB_Status>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ee0:	78fa      	ldrb	r2, [r7, #3]
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7f9 fd56 	bl	8002996 <HAL_PCD_EP_Close>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f8fd 	bl	80090f0 <USBD_Get_USB_Status>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f1e:	78fa      	ldrb	r2, [r7, #3]
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7f9 fe2e 	bl	8002b84 <HAL_PCD_EP_SetStall>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f8de 	bl	80090f0 <USBD_Get_USB_Status>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f5c:	78fa      	ldrb	r2, [r7, #3]
 8008f5e:	4611      	mov	r1, r2
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7f9 fe73 	bl	8002c4c <HAL_PCD_EP_ClrStall>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 f8bf 	bl	80090f0 <USBD_Get_USB_Status>
 8008f72:	4603      	mov	r3, r0
 8008f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	da0b      	bge.n	8008fb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f9c:	78fb      	ldrb	r3, [r7, #3]
 8008f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fa2:	68f9      	ldr	r1, [r7, #12]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	440b      	add	r3, r1
 8008fae:	333e      	adds	r3, #62	; 0x3e
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	e00b      	b.n	8008fcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fba:	68f9      	ldr	r1, [r7, #12]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	440b      	add	r3, r1
 8008fc6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008fca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7f9 fc40 	bl	800287c <HAL_PCD_SetAddress>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 f874 	bl	80090f0 <USBD_Get_USB_Status>
 8009008:	4603      	mov	r3, r0
 800900a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800900c:	7bbb      	ldrb	r3, [r7, #14]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b086      	sub	sp, #24
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	603b      	str	r3, [r7, #0]
 8009022:	460b      	mov	r3, r1
 8009024:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009034:	7af9      	ldrb	r1, [r7, #11]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	f7f9 fd59 	bl	8002af0 <HAL_PCD_EP_Transmit>
 800903e:	4603      	mov	r3, r0
 8009040:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	4618      	mov	r0, r3
 8009046:	f000 f853 	bl	80090f0 <USBD_Get_USB_Status>
 800904a:	4603      	mov	r3, r0
 800904c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800904e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	607a      	str	r2, [r7, #4]
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	460b      	mov	r3, r1
 8009066:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009076:	7af9      	ldrb	r1, [r7, #11]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	f7f9 fcd5 	bl	8002a2a <HAL_PCD_EP_Receive>
 8009080:	4603      	mov	r3, r0
 8009082:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	4618      	mov	r0, r3
 8009088:	f000 f832 	bl	80090f0 <USBD_Get_USB_Status>
 800908c:	4603      	mov	r3, r0
 800908e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009090:	7dbb      	ldrb	r3, [r7, #22]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	460b      	mov	r3, r1
 80090a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090ac:	78fa      	ldrb	r2, [r7, #3]
 80090ae:	4611      	mov	r1, r2
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7f9 fd05 	bl	8002ac0 <HAL_PCD_EP_GetRxCount>
 80090b6:	4603      	mov	r3, r0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090c8:	4b03      	ldr	r3, [pc, #12]	; (80090d8 <USBD_static_malloc+0x18>)
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	20001e94 	.word	0x20001e94

080090dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]

}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	2b03      	cmp	r3, #3
 8009102:	d817      	bhi.n	8009134 <USBD_Get_USB_Status+0x44>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <USBD_Get_USB_Status+0x1c>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	0800911d 	.word	0x0800911d
 8009110:	08009123 	.word	0x08009123
 8009114:	08009129 	.word	0x08009129
 8009118:	0800912f 	.word	0x0800912f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
    break;
 8009120:	e00b      	b.n	800913a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009122:	2303      	movs	r3, #3
 8009124:	73fb      	strb	r3, [r7, #15]
    break;
 8009126:	e008      	b.n	800913a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009128:	2301      	movs	r3, #1
 800912a:	73fb      	strb	r3, [r7, #15]
    break;
 800912c:	e005      	b.n	800913a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800912e:	2303      	movs	r3, #3
 8009130:	73fb      	strb	r3, [r7, #15]
    break;
 8009132:	e002      	b.n	800913a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009134:	2303      	movs	r3, #3
 8009136:	73fb      	strb	r3, [r7, #15]
    break;
 8009138:	bf00      	nop
  }
  return usb_status;
 800913a:	7bfb      	ldrb	r3, [r7, #15]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <rybg211_bleModuleInit>:

/* PRIVATE FUNCTIONS DECLARATION ---------------------------------------------*/

/* FUNCTION PROTOTYPES -------------------------------------------------------*/
void rybg211_bleModuleInit(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
	memset(&hBleModule, 0, sizeof(hBleModule_t));
 800914c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009150:	2100      	movs	r1, #0
 8009152:	4805      	ldr	r0, [pc, #20]	; (8009168 <rybg211_bleModuleInit+0x20>)
 8009154:	f000 f988 	bl	8009468 <memset>

	HAL_GPIO_WritePin(BLE_MODULE_RESET_GPIO_PORT, BLE_MODULE_RESET_PIN, ENABLE);
 8009158:	2201      	movs	r2, #1
 800915a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800915e:	4803      	ldr	r0, [pc, #12]	; (800916c <rybg211_bleModuleInit+0x24>)
 8009160:	f7f8 fd6a 	bl	8001c38 <HAL_GPIO_WritePin>
}
 8009164:	bf00      	nop
 8009166:	bd80      	pop	{r7, pc}
 8009168:	200020b4 	.word	0x200020b4
 800916c:	40020400 	.word	0x40020400

08009170 <rybg211_setDeviceName>:

void rybg211_setDeviceName(char* moduleBuffer, char* nameString)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af04      	add	r7, sp, #16
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
	uint8_t nameStringSize = strlen(nameString);
 800917a:	6838      	ldr	r0, [r7, #0]
 800917c:	f7f7 f830 	bl	80001e0 <strlen>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]

	memcpy(moduleBuffer ,BLE_NAME_SET, sizeof(BLE_NAME_SET));
 8009184:	2209      	movs	r2, #9
 8009186:	4910      	ldr	r1, [pc, #64]	; (80091c8 <rybg211_setDeviceName+0x58>)
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f95f 	bl	800944c <memcpy>

	sprintf((char*)moduleBuffer, "%s%d%s%s%s",BLE_NAME_SET,
 800918e:	7bfa      	ldrb	r2, [r7, #15]
 8009190:	4b0e      	ldr	r3, [pc, #56]	; (80091cc <rybg211_setDeviceName+0x5c>)
 8009192:	9302      	str	r3, [sp, #8]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <rybg211_setDeviceName+0x60>)
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	4613      	mov	r3, r2
 800919e:	4a0a      	ldr	r2, [pc, #40]	; (80091c8 <rybg211_setDeviceName+0x58>)
 80091a0:	490c      	ldr	r1, [pc, #48]	; (80091d4 <rybg211_setDeviceName+0x64>)
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f968 	bl	8009478 <siprintf>
										BLE_NEW_FIELD,
										nameString,
										BLE_CMD_TERM);


	hBleModule.txPacketSize = strlen((char*)moduleBuffer);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7f7 f819 	bl	80001e0 <strlen>
 80091ae:	4603      	mov	r3, r0
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <rybg211_setDeviceName+0x68>)
 80091b4:	805a      	strh	r2, [r3, #2]

	hBleModule.controlFlags.flag.packetToTransmit = ENABLE;
 80091b6:	4a08      	ldr	r2, [pc, #32]	; (80091d8 <rybg211_setDeviceName+0x68>)
 80091b8:	7813      	ldrb	r3, [r2, #0]
 80091ba:	f043 0302 	orr.w	r3, r3, #2
 80091be:	7013      	strb	r3, [r2, #0]
}
 80091c0:	bf00      	nop
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	08009dac 	.word	0x08009dac
 80091cc:	08009dc4 	.word	0x08009dc4
 80091d0:	08009dc8 	.word	0x08009dc8
 80091d4:	08009db8 	.word	0x08009db8
 80091d8:	200020b4 	.word	0x200020b4

080091dc <rybg211_rxPacketParser>:
 * @param 	packetSize		:	Received packet size.
 *
 * @return	returns 1 if there is a received message should be carried to the bridge handler.
 */
uint8_t rybg211_rxPacketParser(char* moduleBuffer, uint8_t packetSize)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	70fb      	strb	r3, [r7, #3]
	uint8_t packetToRead = false;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]

	if(0 == memcmp(moduleBuffer, BLE_DATA_RX, BLE_PARSER_CHAR_COUNT))
 80091ec:	2204      	movs	r2, #4
 80091ee:	4919      	ldr	r1, [pc, #100]	; (8009254 <rybg211_rxPacketParser+0x78>)
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f91b 	bl	800942c <memcmp>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <rybg211_rxPacketParser+0x26>
	{
		//Activation to read the data part of the received packet.
		packetToRead = true;
 80091fc:	2301      	movs	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
 8009200:	e023      	b.n	800924a <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_CONNECTION,BLE_PARSER_CHAR_COUNT))
 8009202:	2204      	movs	r2, #4
 8009204:	4914      	ldr	r1, [pc, #80]	; (8009258 <rybg211_rxPacketParser+0x7c>)
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f910 	bl	800942c <memcmp>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10a      	bne.n	8009228 <rybg211_rxPacketParser+0x4c>
	{
		hBleModule.ConnectedDevice = moduleBuffer[6];
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	799a      	ldrb	r2, [r3, #6]
 8009216:	4b11      	ldr	r3, [pc, #68]	; (800925c <rybg211_rxPacketParser+0x80>)
 8009218:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 800921a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800921e:	2100      	movs	r1, #0
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f921 	bl	8009468 <memset>
 8009226:	e010      	b.n	800924a <rybg211_rxPacketParser+0x6e>
	}
	else if(0 == memcmp(moduleBuffer, BLE_NEW_DISCONNECTION, BLE_PARSER_CHAR_COUNT))
 8009228:	2204      	movs	r2, #4
 800922a:	490d      	ldr	r1, [pc, #52]	; (8009260 <rybg211_rxPacketParser+0x84>)
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f8fd 	bl	800942c <memcmp>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d108      	bne.n	800924a <rybg211_rxPacketParser+0x6e>
	{
		hBleModule.ConnectedDevice = 0;
 8009238:	4b08      	ldr	r3, [pc, #32]	; (800925c <rybg211_rxPacketParser+0x80>)
 800923a:	2200      	movs	r2, #0
 800923c:	751a      	strb	r2, [r3, #20]
		//Clear the UART DMA RX buffer
		memset(moduleBuffer, 0, BLE_MODULE_BUFFER_SIZE);
 800923e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009242:	2100      	movs	r1, #0
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f90f 	bl	8009468 <memset>
	}

	return packetToRead;
 800924a:	7bfb      	ldrb	r3, [r7, #15]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	08009dcc 	.word	0x08009dcc
 8009258:	08009dd4 	.word	0x08009dd4
 800925c:	200020b4 	.word	0x200020b4
 8009260:	08009ddc 	.word	0x08009ddc

08009264 <asciiToValue>:
 * 						  stored in targetValue. the value stored in String won't be changed.
 *
 * @return	This function will return the number of found digits in the passed String.
 */
uint8_t asciiToValue(uint32_t* targetValue, uint8_t* String)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
	uint8_t 	digitCount  = 0;
 800926e:	2300      	movs	r3, #0
 8009270:	75fb      	strb	r3, [r7, #23]
	uint32_t 	tempValue 	= 0;
 8009272:	2300      	movs	r3, #0
 8009274:	613b      	str	r3, [r7, #16]
	uint16_t 	tens 		= 0;
 8009276:	2300      	movs	r3, #0
 8009278:	81fb      	strh	r3, [r7, #14]
	//Count the number of digits in the string
	while(isdigit(String[digitCount]))
 800927a:	e002      	b.n	8009282 <asciiToValue+0x1e>
	{
		++digitCount;
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	3301      	adds	r3, #1
 8009280:	75fb      	strb	r3, [r7, #23]
	while(isdigit(String[digitCount]))
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	4413      	add	r3, r2
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	3301      	adds	r3, #1
 800928c:	4a26      	ldr	r2, [pc, #152]	; (8009328 <asciiToValue+0xc4>)
 800928e:	4413      	add	r3, r2
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	f003 0304 	and.w	r3, r3, #4
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1f0      	bne.n	800927c <asciiToValue+0x18>
	}
	//This check is done to prevent this function from execution if non alphanumeric string is passed to this function.
	if(0 != digitCount)
 800929a:	7dfb      	ldrb	r3, [r7, #23]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d03c      	beq.n	800931a <asciiToValue+0xb6>
	{
		//Operation fix
		digitCount -= 1;
 80092a0:	7dfb      	ldrb	r3, [r7, #23]
 80092a2:	3b01      	subs	r3, #1
 80092a4:	75fb      	strb	r3, [r7, #23]
		//determines the multiplications of tens
		tens = digitCount == ONE_DIGIT   ? 1   : tens;
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <asciiToValue+0x4c>
 80092ac:	89fb      	ldrh	r3, [r7, #14]
 80092ae:	e000      	b.n	80092b2 <asciiToValue+0x4e>
 80092b0:	2301      	movs	r3, #1
 80092b2:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == TWO_DIGIT   ? 10  : tens;
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d001      	beq.n	80092be <asciiToValue+0x5a>
 80092ba:	89fb      	ldrh	r3, [r7, #14]
 80092bc:	e000      	b.n	80092c0 <asciiToValue+0x5c>
 80092be:	230a      	movs	r3, #10
 80092c0:	81fb      	strh	r3, [r7, #14]
		tens = digitCount == THREE_DIGIT ? 100 : tens;
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d001      	beq.n	80092cc <asciiToValue+0x68>
 80092c8:	89fb      	ldrh	r3, [r7, #14]
 80092ca:	e000      	b.n	80092ce <asciiToValue+0x6a>
 80092cc:	2364      	movs	r3, #100	; 0x64
 80092ce:	81fb      	strh	r3, [r7, #14]
		//Start calculating the integer value out of the passed digits
		for(int8_t i = 0; i <= digitCount; ++i)
 80092d0:	2300      	movs	r3, #0
 80092d2:	737b      	strb	r3, [r7, #13]
 80092d4:	e016      	b.n	8009304 <asciiToValue+0xa0>
		{
			tempValue = tempValue + ((String[i] - ASCII_STARTING_VALUE) * tens);
 80092d6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	4413      	add	r3, r2
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	3b30      	subs	r3, #48	; 0x30
 80092e2:	89fa      	ldrh	r2, [r7, #14]
 80092e4:	fb02 f303 	mul.w	r3, r2, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	4413      	add	r3, r2
 80092ee:	613b      	str	r3, [r7, #16]
			tens = tens / 10;
 80092f0:	89fb      	ldrh	r3, [r7, #14]
 80092f2:	4a0e      	ldr	r2, [pc, #56]	; (800932c <asciiToValue+0xc8>)
 80092f4:	fba2 2303 	umull	r2, r3, r2, r3
 80092f8:	08db      	lsrs	r3, r3, #3
 80092fa:	81fb      	strh	r3, [r7, #14]
		for(int8_t i = 0; i <= digitCount; ++i)
 80092fc:	7b7b      	ldrb	r3, [r7, #13]
 80092fe:	3301      	adds	r3, #1
 8009300:	b2db      	uxtb	r3, r3
 8009302:	737b      	strb	r3, [r7, #13]
 8009304:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8009308:	7dfb      	ldrb	r3, [r7, #23]
 800930a:	429a      	cmp	r2, r3
 800930c:	dde3      	ble.n	80092d6 <asciiToValue+0x72>
		}
		//Pass the obtained integer value to targetValue that will be returned
		*targetValue = tempValue;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	601a      	str	r2, [r3, #0]
		//digitCount will carry the number of found digits in the String
		++digitCount;
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	3301      	adds	r3, #1
 8009318:	75fb      	strb	r3, [r7, #23]
	}
	return digitCount;
 800931a:	7dfb      	ldrb	r3, [r7, #23]
}
 800931c:	4618      	mov	r0, r3
 800931e:	371c      	adds	r7, #28
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	08009e20 	.word	0x08009e20
 800932c:	cccccccd 	.word	0xcccccccd

08009330 <rybg211_rxDataRead>:
 * @param moduleBuffer
 * @param targertBuffer
 * @return
 */
uint32_t rybg211_rxDataRead(char* moduleBuffer, char* targertBuffer)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
	//+1 is used to ignore the ',' from the received packet and jump directly to the data field.
	uint8_t dataPositionOffset = BLE_RX_SIZE_BYTE_POSITION + 1;
 800933a:	2308      	movs	r3, #8
 800933c:	73fb      	strb	r3, [r7, #15]

	uint32_t length = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	60bb      	str	r3, [r7, #8]
	//Convert the size from ASCII to integer format and obtain the number of digits to adjust the correct data positio.
	dataPositionOffset += asciiToValue(&length, (uint8_t*)moduleBuffer + BLE_RX_SIZE_BYTE_POSITION);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	1dda      	adds	r2, r3, #7
 8009346:	f107 0308 	add.w	r3, r7, #8
 800934a:	4611      	mov	r1, r2
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff ff89 	bl	8009264 <asciiToValue>
 8009352:	4603      	mov	r3, r0
 8009354:	461a      	mov	r2, r3
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	4413      	add	r3, r2
 800935a:	73fb      	strb	r3, [r7, #15]

	memcpy(targertBuffer, moduleBuffer + dataPositionOffset, length);
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	4413      	add	r3, r2
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	4619      	mov	r1, r3
 8009366:	6838      	ldr	r0, [r7, #0]
 8009368:	f000 f870 	bl	800944c <memcpy>

	return length;
 800936c:	68bb      	ldr	r3, [r7, #8]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <rybg211_txDataSend>:

void  rybg211_txDataSend			(char* sourceBuffer, uint16_t packetSize)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af06      	add	r7, sp, #24
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	807b      	strh	r3, [r7, #2]

	sprintf((char*)hBleModule.txBuffer, "%s%c%s%d%s%s%s",BLE_DATA_SEND,
													hBleModule.ConnectedDevice,
 8009384:	4b0e      	ldr	r3, [pc, #56]	; (80093c0 <rybg211_txDataSend+0x48>)
 8009386:	7d1b      	ldrb	r3, [r3, #20]
	sprintf((char*)hBleModule.txBuffer, "%s%c%s%d%s%s%s",BLE_DATA_SEND,
 8009388:	4619      	mov	r1, r3
 800938a:	887b      	ldrh	r3, [r7, #2]
 800938c:	4a0d      	ldr	r2, [pc, #52]	; (80093c4 <rybg211_txDataSend+0x4c>)
 800938e:	9204      	str	r2, [sp, #16]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	9203      	str	r2, [sp, #12]
 8009394:	4a0c      	ldr	r2, [pc, #48]	; (80093c8 <rybg211_txDataSend+0x50>)
 8009396:	9202      	str	r2, [sp, #8]
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <rybg211_txDataSend+0x50>)
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	460b      	mov	r3, r1
 80093a0:	4a0a      	ldr	r2, [pc, #40]	; (80093cc <rybg211_txDataSend+0x54>)
 80093a2:	490b      	ldr	r1, [pc, #44]	; (80093d0 <rybg211_txDataSend+0x58>)
 80093a4:	480b      	ldr	r0, [pc, #44]	; (80093d4 <rybg211_txDataSend+0x5c>)
 80093a6:	f000 f867 	bl	8009478 <siprintf>
													packetSize,
													BLE_NEW_FIELD,
													sourceBuffer,
													BLE_CMD_TERM);

	hBleModule.txPacketSize = strlen(hBleModule.txBuffer);
 80093aa:	480a      	ldr	r0, [pc, #40]	; (80093d4 <rybg211_txDataSend+0x5c>)
 80093ac:	f7f6 ff18 	bl	80001e0 <strlen>
 80093b0:	4603      	mov	r3, r0
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	4b02      	ldr	r3, [pc, #8]	; (80093c0 <rybg211_txDataSend+0x48>)
 80093b6:	805a      	strh	r2, [r3, #2]
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	200020b4 	.word	0x200020b4
 80093c4:	08009dc4 	.word	0x08009dc4
 80093c8:	08009dc8 	.word	0x08009dc8
 80093cc:	08009de4 	.word	0x08009de4
 80093d0:	08009df0 	.word	0x08009df0
 80093d4:	200020c9 	.word	0x200020c9

080093d8 <__errno>:
 80093d8:	4b01      	ldr	r3, [pc, #4]	; (80093e0 <__errno+0x8>)
 80093da:	6818      	ldr	r0, [r3, #0]
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	200000fc 	.word	0x200000fc

080093e4 <__libc_init_array>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	4d0d      	ldr	r5, [pc, #52]	; (800941c <__libc_init_array+0x38>)
 80093e8:	4c0d      	ldr	r4, [pc, #52]	; (8009420 <__libc_init_array+0x3c>)
 80093ea:	1b64      	subs	r4, r4, r5
 80093ec:	10a4      	asrs	r4, r4, #2
 80093ee:	2600      	movs	r6, #0
 80093f0:	42a6      	cmp	r6, r4
 80093f2:	d109      	bne.n	8009408 <__libc_init_array+0x24>
 80093f4:	4d0b      	ldr	r5, [pc, #44]	; (8009424 <__libc_init_array+0x40>)
 80093f6:	4c0c      	ldr	r4, [pc, #48]	; (8009428 <__libc_init_array+0x44>)
 80093f8:	f000 fc9e 	bl	8009d38 <_init>
 80093fc:	1b64      	subs	r4, r4, r5
 80093fe:	10a4      	asrs	r4, r4, #2
 8009400:	2600      	movs	r6, #0
 8009402:	42a6      	cmp	r6, r4
 8009404:	d105      	bne.n	8009412 <__libc_init_array+0x2e>
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	f855 3b04 	ldr.w	r3, [r5], #4
 800940c:	4798      	blx	r3
 800940e:	3601      	adds	r6, #1
 8009410:	e7ee      	b.n	80093f0 <__libc_init_array+0xc>
 8009412:	f855 3b04 	ldr.w	r3, [r5], #4
 8009416:	4798      	blx	r3
 8009418:	3601      	adds	r6, #1
 800941a:	e7f2      	b.n	8009402 <__libc_init_array+0x1e>
 800941c:	08009f5c 	.word	0x08009f5c
 8009420:	08009f5c 	.word	0x08009f5c
 8009424:	08009f5c 	.word	0x08009f5c
 8009428:	08009f60 	.word	0x08009f60

0800942c <memcmp>:
 800942c:	b510      	push	{r4, lr}
 800942e:	3901      	subs	r1, #1
 8009430:	4402      	add	r2, r0
 8009432:	4290      	cmp	r0, r2
 8009434:	d101      	bne.n	800943a <memcmp+0xe>
 8009436:	2000      	movs	r0, #0
 8009438:	e005      	b.n	8009446 <memcmp+0x1a>
 800943a:	7803      	ldrb	r3, [r0, #0]
 800943c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009440:	42a3      	cmp	r3, r4
 8009442:	d001      	beq.n	8009448 <memcmp+0x1c>
 8009444:	1b18      	subs	r0, r3, r4
 8009446:	bd10      	pop	{r4, pc}
 8009448:	3001      	adds	r0, #1
 800944a:	e7f2      	b.n	8009432 <memcmp+0x6>

0800944c <memcpy>:
 800944c:	440a      	add	r2, r1
 800944e:	4291      	cmp	r1, r2
 8009450:	f100 33ff 	add.w	r3, r0, #4294967295
 8009454:	d100      	bne.n	8009458 <memcpy+0xc>
 8009456:	4770      	bx	lr
 8009458:	b510      	push	{r4, lr}
 800945a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800945e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009462:	4291      	cmp	r1, r2
 8009464:	d1f9      	bne.n	800945a <memcpy+0xe>
 8009466:	bd10      	pop	{r4, pc}

08009468 <memset>:
 8009468:	4402      	add	r2, r0
 800946a:	4603      	mov	r3, r0
 800946c:	4293      	cmp	r3, r2
 800946e:	d100      	bne.n	8009472 <memset+0xa>
 8009470:	4770      	bx	lr
 8009472:	f803 1b01 	strb.w	r1, [r3], #1
 8009476:	e7f9      	b.n	800946c <memset+0x4>

08009478 <siprintf>:
 8009478:	b40e      	push	{r1, r2, r3}
 800947a:	b500      	push	{lr}
 800947c:	b09c      	sub	sp, #112	; 0x70
 800947e:	ab1d      	add	r3, sp, #116	; 0x74
 8009480:	9002      	str	r0, [sp, #8]
 8009482:	9006      	str	r0, [sp, #24]
 8009484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009488:	4809      	ldr	r0, [pc, #36]	; (80094b0 <siprintf+0x38>)
 800948a:	9107      	str	r1, [sp, #28]
 800948c:	9104      	str	r1, [sp, #16]
 800948e:	4909      	ldr	r1, [pc, #36]	; (80094b4 <siprintf+0x3c>)
 8009490:	f853 2b04 	ldr.w	r2, [r3], #4
 8009494:	9105      	str	r1, [sp, #20]
 8009496:	6800      	ldr	r0, [r0, #0]
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	a902      	add	r1, sp, #8
 800949c:	f000 f868 	bl	8009570 <_svfiprintf_r>
 80094a0:	9b02      	ldr	r3, [sp, #8]
 80094a2:	2200      	movs	r2, #0
 80094a4:	701a      	strb	r2, [r3, #0]
 80094a6:	b01c      	add	sp, #112	; 0x70
 80094a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094ac:	b003      	add	sp, #12
 80094ae:	4770      	bx	lr
 80094b0:	200000fc 	.word	0x200000fc
 80094b4:	ffff0208 	.word	0xffff0208

080094b8 <__ssputs_r>:
 80094b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094bc:	688e      	ldr	r6, [r1, #8]
 80094be:	429e      	cmp	r6, r3
 80094c0:	4682      	mov	sl, r0
 80094c2:	460c      	mov	r4, r1
 80094c4:	4690      	mov	r8, r2
 80094c6:	461f      	mov	r7, r3
 80094c8:	d838      	bhi.n	800953c <__ssputs_r+0x84>
 80094ca:	898a      	ldrh	r2, [r1, #12]
 80094cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094d0:	d032      	beq.n	8009538 <__ssputs_r+0x80>
 80094d2:	6825      	ldr	r5, [r4, #0]
 80094d4:	6909      	ldr	r1, [r1, #16]
 80094d6:	eba5 0901 	sub.w	r9, r5, r1
 80094da:	6965      	ldr	r5, [r4, #20]
 80094dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094e4:	3301      	adds	r3, #1
 80094e6:	444b      	add	r3, r9
 80094e8:	106d      	asrs	r5, r5, #1
 80094ea:	429d      	cmp	r5, r3
 80094ec:	bf38      	it	cc
 80094ee:	461d      	movcc	r5, r3
 80094f0:	0553      	lsls	r3, r2, #21
 80094f2:	d531      	bpl.n	8009558 <__ssputs_r+0xa0>
 80094f4:	4629      	mov	r1, r5
 80094f6:	f000 fb55 	bl	8009ba4 <_malloc_r>
 80094fa:	4606      	mov	r6, r0
 80094fc:	b950      	cbnz	r0, 8009514 <__ssputs_r+0x5c>
 80094fe:	230c      	movs	r3, #12
 8009500:	f8ca 3000 	str.w	r3, [sl]
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800950a:	81a3      	strh	r3, [r4, #12]
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009514:	6921      	ldr	r1, [r4, #16]
 8009516:	464a      	mov	r2, r9
 8009518:	f7ff ff98 	bl	800944c <memcpy>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	6126      	str	r6, [r4, #16]
 800952a:	6165      	str	r5, [r4, #20]
 800952c:	444e      	add	r6, r9
 800952e:	eba5 0509 	sub.w	r5, r5, r9
 8009532:	6026      	str	r6, [r4, #0]
 8009534:	60a5      	str	r5, [r4, #8]
 8009536:	463e      	mov	r6, r7
 8009538:	42be      	cmp	r6, r7
 800953a:	d900      	bls.n	800953e <__ssputs_r+0x86>
 800953c:	463e      	mov	r6, r7
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	4632      	mov	r2, r6
 8009542:	4641      	mov	r1, r8
 8009544:	f000 faa8 	bl	8009a98 <memmove>
 8009548:	68a3      	ldr	r3, [r4, #8]
 800954a:	1b9b      	subs	r3, r3, r6
 800954c:	60a3      	str	r3, [r4, #8]
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	4433      	add	r3, r6
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	2000      	movs	r0, #0
 8009556:	e7db      	b.n	8009510 <__ssputs_r+0x58>
 8009558:	462a      	mov	r2, r5
 800955a:	f000 fb97 	bl	8009c8c <_realloc_r>
 800955e:	4606      	mov	r6, r0
 8009560:	2800      	cmp	r0, #0
 8009562:	d1e1      	bne.n	8009528 <__ssputs_r+0x70>
 8009564:	6921      	ldr	r1, [r4, #16]
 8009566:	4650      	mov	r0, sl
 8009568:	f000 fab0 	bl	8009acc <_free_r>
 800956c:	e7c7      	b.n	80094fe <__ssputs_r+0x46>
	...

08009570 <_svfiprintf_r>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	4698      	mov	r8, r3
 8009576:	898b      	ldrh	r3, [r1, #12]
 8009578:	061b      	lsls	r3, r3, #24
 800957a:	b09d      	sub	sp, #116	; 0x74
 800957c:	4607      	mov	r7, r0
 800957e:	460d      	mov	r5, r1
 8009580:	4614      	mov	r4, r2
 8009582:	d50e      	bpl.n	80095a2 <_svfiprintf_r+0x32>
 8009584:	690b      	ldr	r3, [r1, #16]
 8009586:	b963      	cbnz	r3, 80095a2 <_svfiprintf_r+0x32>
 8009588:	2140      	movs	r1, #64	; 0x40
 800958a:	f000 fb0b 	bl	8009ba4 <_malloc_r>
 800958e:	6028      	str	r0, [r5, #0]
 8009590:	6128      	str	r0, [r5, #16]
 8009592:	b920      	cbnz	r0, 800959e <_svfiprintf_r+0x2e>
 8009594:	230c      	movs	r3, #12
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	f04f 30ff 	mov.w	r0, #4294967295
 800959c:	e0d1      	b.n	8009742 <_svfiprintf_r+0x1d2>
 800959e:	2340      	movs	r3, #64	; 0x40
 80095a0:	616b      	str	r3, [r5, #20]
 80095a2:	2300      	movs	r3, #0
 80095a4:	9309      	str	r3, [sp, #36]	; 0x24
 80095a6:	2320      	movs	r3, #32
 80095a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80095b0:	2330      	movs	r3, #48	; 0x30
 80095b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800975c <_svfiprintf_r+0x1ec>
 80095b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ba:	f04f 0901 	mov.w	r9, #1
 80095be:	4623      	mov	r3, r4
 80095c0:	469a      	mov	sl, r3
 80095c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095c6:	b10a      	cbz	r2, 80095cc <_svfiprintf_r+0x5c>
 80095c8:	2a25      	cmp	r2, #37	; 0x25
 80095ca:	d1f9      	bne.n	80095c0 <_svfiprintf_r+0x50>
 80095cc:	ebba 0b04 	subs.w	fp, sl, r4
 80095d0:	d00b      	beq.n	80095ea <_svfiprintf_r+0x7a>
 80095d2:	465b      	mov	r3, fp
 80095d4:	4622      	mov	r2, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	4638      	mov	r0, r7
 80095da:	f7ff ff6d 	bl	80094b8 <__ssputs_r>
 80095de:	3001      	adds	r0, #1
 80095e0:	f000 80aa 	beq.w	8009738 <_svfiprintf_r+0x1c8>
 80095e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095e6:	445a      	add	r2, fp
 80095e8:	9209      	str	r2, [sp, #36]	; 0x24
 80095ea:	f89a 3000 	ldrb.w	r3, [sl]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 80a2 	beq.w	8009738 <_svfiprintf_r+0x1c8>
 80095f4:	2300      	movs	r3, #0
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295
 80095fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095fe:	f10a 0a01 	add.w	sl, sl, #1
 8009602:	9304      	str	r3, [sp, #16]
 8009604:	9307      	str	r3, [sp, #28]
 8009606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800960a:	931a      	str	r3, [sp, #104]	; 0x68
 800960c:	4654      	mov	r4, sl
 800960e:	2205      	movs	r2, #5
 8009610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009614:	4851      	ldr	r0, [pc, #324]	; (800975c <_svfiprintf_r+0x1ec>)
 8009616:	f7f6 fdeb 	bl	80001f0 <memchr>
 800961a:	9a04      	ldr	r2, [sp, #16]
 800961c:	b9d8      	cbnz	r0, 8009656 <_svfiprintf_r+0xe6>
 800961e:	06d0      	lsls	r0, r2, #27
 8009620:	bf44      	itt	mi
 8009622:	2320      	movmi	r3, #32
 8009624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009628:	0711      	lsls	r1, r2, #28
 800962a:	bf44      	itt	mi
 800962c:	232b      	movmi	r3, #43	; 0x2b
 800962e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009632:	f89a 3000 	ldrb.w	r3, [sl]
 8009636:	2b2a      	cmp	r3, #42	; 0x2a
 8009638:	d015      	beq.n	8009666 <_svfiprintf_r+0xf6>
 800963a:	9a07      	ldr	r2, [sp, #28]
 800963c:	4654      	mov	r4, sl
 800963e:	2000      	movs	r0, #0
 8009640:	f04f 0c0a 	mov.w	ip, #10
 8009644:	4621      	mov	r1, r4
 8009646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800964a:	3b30      	subs	r3, #48	; 0x30
 800964c:	2b09      	cmp	r3, #9
 800964e:	d94e      	bls.n	80096ee <_svfiprintf_r+0x17e>
 8009650:	b1b0      	cbz	r0, 8009680 <_svfiprintf_r+0x110>
 8009652:	9207      	str	r2, [sp, #28]
 8009654:	e014      	b.n	8009680 <_svfiprintf_r+0x110>
 8009656:	eba0 0308 	sub.w	r3, r0, r8
 800965a:	fa09 f303 	lsl.w	r3, r9, r3
 800965e:	4313      	orrs	r3, r2
 8009660:	9304      	str	r3, [sp, #16]
 8009662:	46a2      	mov	sl, r4
 8009664:	e7d2      	b.n	800960c <_svfiprintf_r+0x9c>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	1d19      	adds	r1, r3, #4
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	9103      	str	r1, [sp, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	bfbb      	ittet	lt
 8009672:	425b      	neglt	r3, r3
 8009674:	f042 0202 	orrlt.w	r2, r2, #2
 8009678:	9307      	strge	r3, [sp, #28]
 800967a:	9307      	strlt	r3, [sp, #28]
 800967c:	bfb8      	it	lt
 800967e:	9204      	strlt	r2, [sp, #16]
 8009680:	7823      	ldrb	r3, [r4, #0]
 8009682:	2b2e      	cmp	r3, #46	; 0x2e
 8009684:	d10c      	bne.n	80096a0 <_svfiprintf_r+0x130>
 8009686:	7863      	ldrb	r3, [r4, #1]
 8009688:	2b2a      	cmp	r3, #42	; 0x2a
 800968a:	d135      	bne.n	80096f8 <_svfiprintf_r+0x188>
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	1d1a      	adds	r2, r3, #4
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	9203      	str	r2, [sp, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	bfb8      	it	lt
 8009698:	f04f 33ff 	movlt.w	r3, #4294967295
 800969c:	3402      	adds	r4, #2
 800969e:	9305      	str	r3, [sp, #20]
 80096a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800976c <_svfiprintf_r+0x1fc>
 80096a4:	7821      	ldrb	r1, [r4, #0]
 80096a6:	2203      	movs	r2, #3
 80096a8:	4650      	mov	r0, sl
 80096aa:	f7f6 fda1 	bl	80001f0 <memchr>
 80096ae:	b140      	cbz	r0, 80096c2 <_svfiprintf_r+0x152>
 80096b0:	2340      	movs	r3, #64	; 0x40
 80096b2:	eba0 000a 	sub.w	r0, r0, sl
 80096b6:	fa03 f000 	lsl.w	r0, r3, r0
 80096ba:	9b04      	ldr	r3, [sp, #16]
 80096bc:	4303      	orrs	r3, r0
 80096be:	3401      	adds	r4, #1
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c6:	4826      	ldr	r0, [pc, #152]	; (8009760 <_svfiprintf_r+0x1f0>)
 80096c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096cc:	2206      	movs	r2, #6
 80096ce:	f7f6 fd8f 	bl	80001f0 <memchr>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d038      	beq.n	8009748 <_svfiprintf_r+0x1d8>
 80096d6:	4b23      	ldr	r3, [pc, #140]	; (8009764 <_svfiprintf_r+0x1f4>)
 80096d8:	bb1b      	cbnz	r3, 8009722 <_svfiprintf_r+0x1b2>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	3307      	adds	r3, #7
 80096de:	f023 0307 	bic.w	r3, r3, #7
 80096e2:	3308      	adds	r3, #8
 80096e4:	9303      	str	r3, [sp, #12]
 80096e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e8:	4433      	add	r3, r6
 80096ea:	9309      	str	r3, [sp, #36]	; 0x24
 80096ec:	e767      	b.n	80095be <_svfiprintf_r+0x4e>
 80096ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80096f2:	460c      	mov	r4, r1
 80096f4:	2001      	movs	r0, #1
 80096f6:	e7a5      	b.n	8009644 <_svfiprintf_r+0xd4>
 80096f8:	2300      	movs	r3, #0
 80096fa:	3401      	adds	r4, #1
 80096fc:	9305      	str	r3, [sp, #20]
 80096fe:	4619      	mov	r1, r3
 8009700:	f04f 0c0a 	mov.w	ip, #10
 8009704:	4620      	mov	r0, r4
 8009706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800970a:	3a30      	subs	r2, #48	; 0x30
 800970c:	2a09      	cmp	r2, #9
 800970e:	d903      	bls.n	8009718 <_svfiprintf_r+0x1a8>
 8009710:	2b00      	cmp	r3, #0
 8009712:	d0c5      	beq.n	80096a0 <_svfiprintf_r+0x130>
 8009714:	9105      	str	r1, [sp, #20]
 8009716:	e7c3      	b.n	80096a0 <_svfiprintf_r+0x130>
 8009718:	fb0c 2101 	mla	r1, ip, r1, r2
 800971c:	4604      	mov	r4, r0
 800971e:	2301      	movs	r3, #1
 8009720:	e7f0      	b.n	8009704 <_svfiprintf_r+0x194>
 8009722:	ab03      	add	r3, sp, #12
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	462a      	mov	r2, r5
 8009728:	4b0f      	ldr	r3, [pc, #60]	; (8009768 <_svfiprintf_r+0x1f8>)
 800972a:	a904      	add	r1, sp, #16
 800972c:	4638      	mov	r0, r7
 800972e:	f3af 8000 	nop.w
 8009732:	1c42      	adds	r2, r0, #1
 8009734:	4606      	mov	r6, r0
 8009736:	d1d6      	bne.n	80096e6 <_svfiprintf_r+0x176>
 8009738:	89ab      	ldrh	r3, [r5, #12]
 800973a:	065b      	lsls	r3, r3, #25
 800973c:	f53f af2c 	bmi.w	8009598 <_svfiprintf_r+0x28>
 8009740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009742:	b01d      	add	sp, #116	; 0x74
 8009744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009748:	ab03      	add	r3, sp, #12
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	462a      	mov	r2, r5
 800974e:	4b06      	ldr	r3, [pc, #24]	; (8009768 <_svfiprintf_r+0x1f8>)
 8009750:	a904      	add	r1, sp, #16
 8009752:	4638      	mov	r0, r7
 8009754:	f000 f87a 	bl	800984c <_printf_i>
 8009758:	e7eb      	b.n	8009732 <_svfiprintf_r+0x1c2>
 800975a:	bf00      	nop
 800975c:	08009f21 	.word	0x08009f21
 8009760:	08009f2b 	.word	0x08009f2b
 8009764:	00000000 	.word	0x00000000
 8009768:	080094b9 	.word	0x080094b9
 800976c:	08009f27 	.word	0x08009f27

08009770 <_printf_common>:
 8009770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009774:	4616      	mov	r6, r2
 8009776:	4699      	mov	r9, r3
 8009778:	688a      	ldr	r2, [r1, #8]
 800977a:	690b      	ldr	r3, [r1, #16]
 800977c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009780:	4293      	cmp	r3, r2
 8009782:	bfb8      	it	lt
 8009784:	4613      	movlt	r3, r2
 8009786:	6033      	str	r3, [r6, #0]
 8009788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800978c:	4607      	mov	r7, r0
 800978e:	460c      	mov	r4, r1
 8009790:	b10a      	cbz	r2, 8009796 <_printf_common+0x26>
 8009792:	3301      	adds	r3, #1
 8009794:	6033      	str	r3, [r6, #0]
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	0699      	lsls	r1, r3, #26
 800979a:	bf42      	ittt	mi
 800979c:	6833      	ldrmi	r3, [r6, #0]
 800979e:	3302      	addmi	r3, #2
 80097a0:	6033      	strmi	r3, [r6, #0]
 80097a2:	6825      	ldr	r5, [r4, #0]
 80097a4:	f015 0506 	ands.w	r5, r5, #6
 80097a8:	d106      	bne.n	80097b8 <_printf_common+0x48>
 80097aa:	f104 0a19 	add.w	sl, r4, #25
 80097ae:	68e3      	ldr	r3, [r4, #12]
 80097b0:	6832      	ldr	r2, [r6, #0]
 80097b2:	1a9b      	subs	r3, r3, r2
 80097b4:	42ab      	cmp	r3, r5
 80097b6:	dc26      	bgt.n	8009806 <_printf_common+0x96>
 80097b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097bc:	1e13      	subs	r3, r2, #0
 80097be:	6822      	ldr	r2, [r4, #0]
 80097c0:	bf18      	it	ne
 80097c2:	2301      	movne	r3, #1
 80097c4:	0692      	lsls	r2, r2, #26
 80097c6:	d42b      	bmi.n	8009820 <_printf_common+0xb0>
 80097c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097cc:	4649      	mov	r1, r9
 80097ce:	4638      	mov	r0, r7
 80097d0:	47c0      	blx	r8
 80097d2:	3001      	adds	r0, #1
 80097d4:	d01e      	beq.n	8009814 <_printf_common+0xa4>
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	68e5      	ldr	r5, [r4, #12]
 80097da:	6832      	ldr	r2, [r6, #0]
 80097dc:	f003 0306 	and.w	r3, r3, #6
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	bf08      	it	eq
 80097e4:	1aad      	subeq	r5, r5, r2
 80097e6:	68a3      	ldr	r3, [r4, #8]
 80097e8:	6922      	ldr	r2, [r4, #16]
 80097ea:	bf0c      	ite	eq
 80097ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097f0:	2500      	movne	r5, #0
 80097f2:	4293      	cmp	r3, r2
 80097f4:	bfc4      	itt	gt
 80097f6:	1a9b      	subgt	r3, r3, r2
 80097f8:	18ed      	addgt	r5, r5, r3
 80097fa:	2600      	movs	r6, #0
 80097fc:	341a      	adds	r4, #26
 80097fe:	42b5      	cmp	r5, r6
 8009800:	d11a      	bne.n	8009838 <_printf_common+0xc8>
 8009802:	2000      	movs	r0, #0
 8009804:	e008      	b.n	8009818 <_printf_common+0xa8>
 8009806:	2301      	movs	r3, #1
 8009808:	4652      	mov	r2, sl
 800980a:	4649      	mov	r1, r9
 800980c:	4638      	mov	r0, r7
 800980e:	47c0      	blx	r8
 8009810:	3001      	adds	r0, #1
 8009812:	d103      	bne.n	800981c <_printf_common+0xac>
 8009814:	f04f 30ff 	mov.w	r0, #4294967295
 8009818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981c:	3501      	adds	r5, #1
 800981e:	e7c6      	b.n	80097ae <_printf_common+0x3e>
 8009820:	18e1      	adds	r1, r4, r3
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	2030      	movs	r0, #48	; 0x30
 8009826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800982a:	4422      	add	r2, r4
 800982c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009834:	3302      	adds	r3, #2
 8009836:	e7c7      	b.n	80097c8 <_printf_common+0x58>
 8009838:	2301      	movs	r3, #1
 800983a:	4622      	mov	r2, r4
 800983c:	4649      	mov	r1, r9
 800983e:	4638      	mov	r0, r7
 8009840:	47c0      	blx	r8
 8009842:	3001      	adds	r0, #1
 8009844:	d0e6      	beq.n	8009814 <_printf_common+0xa4>
 8009846:	3601      	adds	r6, #1
 8009848:	e7d9      	b.n	80097fe <_printf_common+0x8e>
	...

0800984c <_printf_i>:
 800984c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009850:	7e0f      	ldrb	r7, [r1, #24]
 8009852:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009854:	2f78      	cmp	r7, #120	; 0x78
 8009856:	4691      	mov	r9, r2
 8009858:	4680      	mov	r8, r0
 800985a:	460c      	mov	r4, r1
 800985c:	469a      	mov	sl, r3
 800985e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009862:	d807      	bhi.n	8009874 <_printf_i+0x28>
 8009864:	2f62      	cmp	r7, #98	; 0x62
 8009866:	d80a      	bhi.n	800987e <_printf_i+0x32>
 8009868:	2f00      	cmp	r7, #0
 800986a:	f000 80d8 	beq.w	8009a1e <_printf_i+0x1d2>
 800986e:	2f58      	cmp	r7, #88	; 0x58
 8009870:	f000 80a3 	beq.w	80099ba <_printf_i+0x16e>
 8009874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800987c:	e03a      	b.n	80098f4 <_printf_i+0xa8>
 800987e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009882:	2b15      	cmp	r3, #21
 8009884:	d8f6      	bhi.n	8009874 <_printf_i+0x28>
 8009886:	a101      	add	r1, pc, #4	; (adr r1, 800988c <_printf_i+0x40>)
 8009888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800988c:	080098e5 	.word	0x080098e5
 8009890:	080098f9 	.word	0x080098f9
 8009894:	08009875 	.word	0x08009875
 8009898:	08009875 	.word	0x08009875
 800989c:	08009875 	.word	0x08009875
 80098a0:	08009875 	.word	0x08009875
 80098a4:	080098f9 	.word	0x080098f9
 80098a8:	08009875 	.word	0x08009875
 80098ac:	08009875 	.word	0x08009875
 80098b0:	08009875 	.word	0x08009875
 80098b4:	08009875 	.word	0x08009875
 80098b8:	08009a05 	.word	0x08009a05
 80098bc:	08009929 	.word	0x08009929
 80098c0:	080099e7 	.word	0x080099e7
 80098c4:	08009875 	.word	0x08009875
 80098c8:	08009875 	.word	0x08009875
 80098cc:	08009a27 	.word	0x08009a27
 80098d0:	08009875 	.word	0x08009875
 80098d4:	08009929 	.word	0x08009929
 80098d8:	08009875 	.word	0x08009875
 80098dc:	08009875 	.word	0x08009875
 80098e0:	080099ef 	.word	0x080099ef
 80098e4:	682b      	ldr	r3, [r5, #0]
 80098e6:	1d1a      	adds	r2, r3, #4
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	602a      	str	r2, [r5, #0]
 80098ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098f4:	2301      	movs	r3, #1
 80098f6:	e0a3      	b.n	8009a40 <_printf_i+0x1f4>
 80098f8:	6820      	ldr	r0, [r4, #0]
 80098fa:	6829      	ldr	r1, [r5, #0]
 80098fc:	0606      	lsls	r6, r0, #24
 80098fe:	f101 0304 	add.w	r3, r1, #4
 8009902:	d50a      	bpl.n	800991a <_printf_i+0xce>
 8009904:	680e      	ldr	r6, [r1, #0]
 8009906:	602b      	str	r3, [r5, #0]
 8009908:	2e00      	cmp	r6, #0
 800990a:	da03      	bge.n	8009914 <_printf_i+0xc8>
 800990c:	232d      	movs	r3, #45	; 0x2d
 800990e:	4276      	negs	r6, r6
 8009910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009914:	485e      	ldr	r0, [pc, #376]	; (8009a90 <_printf_i+0x244>)
 8009916:	230a      	movs	r3, #10
 8009918:	e019      	b.n	800994e <_printf_i+0x102>
 800991a:	680e      	ldr	r6, [r1, #0]
 800991c:	602b      	str	r3, [r5, #0]
 800991e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009922:	bf18      	it	ne
 8009924:	b236      	sxthne	r6, r6
 8009926:	e7ef      	b.n	8009908 <_printf_i+0xbc>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	6820      	ldr	r0, [r4, #0]
 800992c:	1d19      	adds	r1, r3, #4
 800992e:	6029      	str	r1, [r5, #0]
 8009930:	0601      	lsls	r1, r0, #24
 8009932:	d501      	bpl.n	8009938 <_printf_i+0xec>
 8009934:	681e      	ldr	r6, [r3, #0]
 8009936:	e002      	b.n	800993e <_printf_i+0xf2>
 8009938:	0646      	lsls	r6, r0, #25
 800993a:	d5fb      	bpl.n	8009934 <_printf_i+0xe8>
 800993c:	881e      	ldrh	r6, [r3, #0]
 800993e:	4854      	ldr	r0, [pc, #336]	; (8009a90 <_printf_i+0x244>)
 8009940:	2f6f      	cmp	r7, #111	; 0x6f
 8009942:	bf0c      	ite	eq
 8009944:	2308      	moveq	r3, #8
 8009946:	230a      	movne	r3, #10
 8009948:	2100      	movs	r1, #0
 800994a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800994e:	6865      	ldr	r5, [r4, #4]
 8009950:	60a5      	str	r5, [r4, #8]
 8009952:	2d00      	cmp	r5, #0
 8009954:	bfa2      	ittt	ge
 8009956:	6821      	ldrge	r1, [r4, #0]
 8009958:	f021 0104 	bicge.w	r1, r1, #4
 800995c:	6021      	strge	r1, [r4, #0]
 800995e:	b90e      	cbnz	r6, 8009964 <_printf_i+0x118>
 8009960:	2d00      	cmp	r5, #0
 8009962:	d04d      	beq.n	8009a00 <_printf_i+0x1b4>
 8009964:	4615      	mov	r5, r2
 8009966:	fbb6 f1f3 	udiv	r1, r6, r3
 800996a:	fb03 6711 	mls	r7, r3, r1, r6
 800996e:	5dc7      	ldrb	r7, [r0, r7]
 8009970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009974:	4637      	mov	r7, r6
 8009976:	42bb      	cmp	r3, r7
 8009978:	460e      	mov	r6, r1
 800997a:	d9f4      	bls.n	8009966 <_printf_i+0x11a>
 800997c:	2b08      	cmp	r3, #8
 800997e:	d10b      	bne.n	8009998 <_printf_i+0x14c>
 8009980:	6823      	ldr	r3, [r4, #0]
 8009982:	07de      	lsls	r6, r3, #31
 8009984:	d508      	bpl.n	8009998 <_printf_i+0x14c>
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	6861      	ldr	r1, [r4, #4]
 800998a:	4299      	cmp	r1, r3
 800998c:	bfde      	ittt	le
 800998e:	2330      	movle	r3, #48	; 0x30
 8009990:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009994:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009998:	1b52      	subs	r2, r2, r5
 800999a:	6122      	str	r2, [r4, #16]
 800999c:	f8cd a000 	str.w	sl, [sp]
 80099a0:	464b      	mov	r3, r9
 80099a2:	aa03      	add	r2, sp, #12
 80099a4:	4621      	mov	r1, r4
 80099a6:	4640      	mov	r0, r8
 80099a8:	f7ff fee2 	bl	8009770 <_printf_common>
 80099ac:	3001      	adds	r0, #1
 80099ae:	d14c      	bne.n	8009a4a <_printf_i+0x1fe>
 80099b0:	f04f 30ff 	mov.w	r0, #4294967295
 80099b4:	b004      	add	sp, #16
 80099b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ba:	4835      	ldr	r0, [pc, #212]	; (8009a90 <_printf_i+0x244>)
 80099bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099c0:	6829      	ldr	r1, [r5, #0]
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80099c8:	6029      	str	r1, [r5, #0]
 80099ca:	061d      	lsls	r5, r3, #24
 80099cc:	d514      	bpl.n	80099f8 <_printf_i+0x1ac>
 80099ce:	07df      	lsls	r7, r3, #31
 80099d0:	bf44      	itt	mi
 80099d2:	f043 0320 	orrmi.w	r3, r3, #32
 80099d6:	6023      	strmi	r3, [r4, #0]
 80099d8:	b91e      	cbnz	r6, 80099e2 <_printf_i+0x196>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	f023 0320 	bic.w	r3, r3, #32
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	2310      	movs	r3, #16
 80099e4:	e7b0      	b.n	8009948 <_printf_i+0xfc>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	f043 0320 	orr.w	r3, r3, #32
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	2378      	movs	r3, #120	; 0x78
 80099f0:	4828      	ldr	r0, [pc, #160]	; (8009a94 <_printf_i+0x248>)
 80099f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099f6:	e7e3      	b.n	80099c0 <_printf_i+0x174>
 80099f8:	0659      	lsls	r1, r3, #25
 80099fa:	bf48      	it	mi
 80099fc:	b2b6      	uxthmi	r6, r6
 80099fe:	e7e6      	b.n	80099ce <_printf_i+0x182>
 8009a00:	4615      	mov	r5, r2
 8009a02:	e7bb      	b.n	800997c <_printf_i+0x130>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	6826      	ldr	r6, [r4, #0]
 8009a08:	6961      	ldr	r1, [r4, #20]
 8009a0a:	1d18      	adds	r0, r3, #4
 8009a0c:	6028      	str	r0, [r5, #0]
 8009a0e:	0635      	lsls	r5, r6, #24
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	d501      	bpl.n	8009a18 <_printf_i+0x1cc>
 8009a14:	6019      	str	r1, [r3, #0]
 8009a16:	e002      	b.n	8009a1e <_printf_i+0x1d2>
 8009a18:	0670      	lsls	r0, r6, #25
 8009a1a:	d5fb      	bpl.n	8009a14 <_printf_i+0x1c8>
 8009a1c:	8019      	strh	r1, [r3, #0]
 8009a1e:	2300      	movs	r3, #0
 8009a20:	6123      	str	r3, [r4, #16]
 8009a22:	4615      	mov	r5, r2
 8009a24:	e7ba      	b.n	800999c <_printf_i+0x150>
 8009a26:	682b      	ldr	r3, [r5, #0]
 8009a28:	1d1a      	adds	r2, r3, #4
 8009a2a:	602a      	str	r2, [r5, #0]
 8009a2c:	681d      	ldr	r5, [r3, #0]
 8009a2e:	6862      	ldr	r2, [r4, #4]
 8009a30:	2100      	movs	r1, #0
 8009a32:	4628      	mov	r0, r5
 8009a34:	f7f6 fbdc 	bl	80001f0 <memchr>
 8009a38:	b108      	cbz	r0, 8009a3e <_printf_i+0x1f2>
 8009a3a:	1b40      	subs	r0, r0, r5
 8009a3c:	6060      	str	r0, [r4, #4]
 8009a3e:	6863      	ldr	r3, [r4, #4]
 8009a40:	6123      	str	r3, [r4, #16]
 8009a42:	2300      	movs	r3, #0
 8009a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a48:	e7a8      	b.n	800999c <_printf_i+0x150>
 8009a4a:	6923      	ldr	r3, [r4, #16]
 8009a4c:	462a      	mov	r2, r5
 8009a4e:	4649      	mov	r1, r9
 8009a50:	4640      	mov	r0, r8
 8009a52:	47d0      	blx	sl
 8009a54:	3001      	adds	r0, #1
 8009a56:	d0ab      	beq.n	80099b0 <_printf_i+0x164>
 8009a58:	6823      	ldr	r3, [r4, #0]
 8009a5a:	079b      	lsls	r3, r3, #30
 8009a5c:	d413      	bmi.n	8009a86 <_printf_i+0x23a>
 8009a5e:	68e0      	ldr	r0, [r4, #12]
 8009a60:	9b03      	ldr	r3, [sp, #12]
 8009a62:	4298      	cmp	r0, r3
 8009a64:	bfb8      	it	lt
 8009a66:	4618      	movlt	r0, r3
 8009a68:	e7a4      	b.n	80099b4 <_printf_i+0x168>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	4649      	mov	r1, r9
 8009a70:	4640      	mov	r0, r8
 8009a72:	47d0      	blx	sl
 8009a74:	3001      	adds	r0, #1
 8009a76:	d09b      	beq.n	80099b0 <_printf_i+0x164>
 8009a78:	3501      	adds	r5, #1
 8009a7a:	68e3      	ldr	r3, [r4, #12]
 8009a7c:	9903      	ldr	r1, [sp, #12]
 8009a7e:	1a5b      	subs	r3, r3, r1
 8009a80:	42ab      	cmp	r3, r5
 8009a82:	dcf2      	bgt.n	8009a6a <_printf_i+0x21e>
 8009a84:	e7eb      	b.n	8009a5e <_printf_i+0x212>
 8009a86:	2500      	movs	r5, #0
 8009a88:	f104 0619 	add.w	r6, r4, #25
 8009a8c:	e7f5      	b.n	8009a7a <_printf_i+0x22e>
 8009a8e:	bf00      	nop
 8009a90:	08009f32 	.word	0x08009f32
 8009a94:	08009f43 	.word	0x08009f43

08009a98 <memmove>:
 8009a98:	4288      	cmp	r0, r1
 8009a9a:	b510      	push	{r4, lr}
 8009a9c:	eb01 0402 	add.w	r4, r1, r2
 8009aa0:	d902      	bls.n	8009aa8 <memmove+0x10>
 8009aa2:	4284      	cmp	r4, r0
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	d807      	bhi.n	8009ab8 <memmove+0x20>
 8009aa8:	1e43      	subs	r3, r0, #1
 8009aaa:	42a1      	cmp	r1, r4
 8009aac:	d008      	beq.n	8009ac0 <memmove+0x28>
 8009aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ab6:	e7f8      	b.n	8009aaa <memmove+0x12>
 8009ab8:	4402      	add	r2, r0
 8009aba:	4601      	mov	r1, r0
 8009abc:	428a      	cmp	r2, r1
 8009abe:	d100      	bne.n	8009ac2 <memmove+0x2a>
 8009ac0:	bd10      	pop	{r4, pc}
 8009ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aca:	e7f7      	b.n	8009abc <memmove+0x24>

08009acc <_free_r>:
 8009acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ace:	2900      	cmp	r1, #0
 8009ad0:	d044      	beq.n	8009b5c <_free_r+0x90>
 8009ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ad6:	9001      	str	r0, [sp, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f1a1 0404 	sub.w	r4, r1, #4
 8009ade:	bfb8      	it	lt
 8009ae0:	18e4      	addlt	r4, r4, r3
 8009ae2:	f000 f913 	bl	8009d0c <__malloc_lock>
 8009ae6:	4a1e      	ldr	r2, [pc, #120]	; (8009b60 <_free_r+0x94>)
 8009ae8:	9801      	ldr	r0, [sp, #4]
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	b933      	cbnz	r3, 8009afc <_free_r+0x30>
 8009aee:	6063      	str	r3, [r4, #4]
 8009af0:	6014      	str	r4, [r2, #0]
 8009af2:	b003      	add	sp, #12
 8009af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009af8:	f000 b90e 	b.w	8009d18 <__malloc_unlock>
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	d908      	bls.n	8009b12 <_free_r+0x46>
 8009b00:	6825      	ldr	r5, [r4, #0]
 8009b02:	1961      	adds	r1, r4, r5
 8009b04:	428b      	cmp	r3, r1
 8009b06:	bf01      	itttt	eq
 8009b08:	6819      	ldreq	r1, [r3, #0]
 8009b0a:	685b      	ldreq	r3, [r3, #4]
 8009b0c:	1949      	addeq	r1, r1, r5
 8009b0e:	6021      	streq	r1, [r4, #0]
 8009b10:	e7ed      	b.n	8009aee <_free_r+0x22>
 8009b12:	461a      	mov	r2, r3
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	b10b      	cbz	r3, 8009b1c <_free_r+0x50>
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	d9fa      	bls.n	8009b12 <_free_r+0x46>
 8009b1c:	6811      	ldr	r1, [r2, #0]
 8009b1e:	1855      	adds	r5, r2, r1
 8009b20:	42a5      	cmp	r5, r4
 8009b22:	d10b      	bne.n	8009b3c <_free_r+0x70>
 8009b24:	6824      	ldr	r4, [r4, #0]
 8009b26:	4421      	add	r1, r4
 8009b28:	1854      	adds	r4, r2, r1
 8009b2a:	42a3      	cmp	r3, r4
 8009b2c:	6011      	str	r1, [r2, #0]
 8009b2e:	d1e0      	bne.n	8009af2 <_free_r+0x26>
 8009b30:	681c      	ldr	r4, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	6053      	str	r3, [r2, #4]
 8009b36:	4421      	add	r1, r4
 8009b38:	6011      	str	r1, [r2, #0]
 8009b3a:	e7da      	b.n	8009af2 <_free_r+0x26>
 8009b3c:	d902      	bls.n	8009b44 <_free_r+0x78>
 8009b3e:	230c      	movs	r3, #12
 8009b40:	6003      	str	r3, [r0, #0]
 8009b42:	e7d6      	b.n	8009af2 <_free_r+0x26>
 8009b44:	6825      	ldr	r5, [r4, #0]
 8009b46:	1961      	adds	r1, r4, r5
 8009b48:	428b      	cmp	r3, r1
 8009b4a:	bf04      	itt	eq
 8009b4c:	6819      	ldreq	r1, [r3, #0]
 8009b4e:	685b      	ldreq	r3, [r3, #4]
 8009b50:	6063      	str	r3, [r4, #4]
 8009b52:	bf04      	itt	eq
 8009b54:	1949      	addeq	r1, r1, r5
 8009b56:	6021      	streq	r1, [r4, #0]
 8009b58:	6054      	str	r4, [r2, #4]
 8009b5a:	e7ca      	b.n	8009af2 <_free_r+0x26>
 8009b5c:	b003      	add	sp, #12
 8009b5e:	bd30      	pop	{r4, r5, pc}
 8009b60:	200022cc 	.word	0x200022cc

08009b64 <sbrk_aligned>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	4e0e      	ldr	r6, [pc, #56]	; (8009ba0 <sbrk_aligned+0x3c>)
 8009b68:	460c      	mov	r4, r1
 8009b6a:	6831      	ldr	r1, [r6, #0]
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	b911      	cbnz	r1, 8009b76 <sbrk_aligned+0x12>
 8009b70:	f000 f8bc 	bl	8009cec <_sbrk_r>
 8009b74:	6030      	str	r0, [r6, #0]
 8009b76:	4621      	mov	r1, r4
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f000 f8b7 	bl	8009cec <_sbrk_r>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d00a      	beq.n	8009b98 <sbrk_aligned+0x34>
 8009b82:	1cc4      	adds	r4, r0, #3
 8009b84:	f024 0403 	bic.w	r4, r4, #3
 8009b88:	42a0      	cmp	r0, r4
 8009b8a:	d007      	beq.n	8009b9c <sbrk_aligned+0x38>
 8009b8c:	1a21      	subs	r1, r4, r0
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f000 f8ac 	bl	8009cec <_sbrk_r>
 8009b94:	3001      	adds	r0, #1
 8009b96:	d101      	bne.n	8009b9c <sbrk_aligned+0x38>
 8009b98:	f04f 34ff 	mov.w	r4, #4294967295
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	200022d0 	.word	0x200022d0

08009ba4 <_malloc_r>:
 8009ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba8:	1ccd      	adds	r5, r1, #3
 8009baa:	f025 0503 	bic.w	r5, r5, #3
 8009bae:	3508      	adds	r5, #8
 8009bb0:	2d0c      	cmp	r5, #12
 8009bb2:	bf38      	it	cc
 8009bb4:	250c      	movcc	r5, #12
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	4607      	mov	r7, r0
 8009bba:	db01      	blt.n	8009bc0 <_malloc_r+0x1c>
 8009bbc:	42a9      	cmp	r1, r5
 8009bbe:	d905      	bls.n	8009bcc <_malloc_r+0x28>
 8009bc0:	230c      	movs	r3, #12
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bcc:	4e2e      	ldr	r6, [pc, #184]	; (8009c88 <_malloc_r+0xe4>)
 8009bce:	f000 f89d 	bl	8009d0c <__malloc_lock>
 8009bd2:	6833      	ldr	r3, [r6, #0]
 8009bd4:	461c      	mov	r4, r3
 8009bd6:	bb34      	cbnz	r4, 8009c26 <_malloc_r+0x82>
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4638      	mov	r0, r7
 8009bdc:	f7ff ffc2 	bl	8009b64 <sbrk_aligned>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	4604      	mov	r4, r0
 8009be4:	d14d      	bne.n	8009c82 <_malloc_r+0xde>
 8009be6:	6834      	ldr	r4, [r6, #0]
 8009be8:	4626      	mov	r6, r4
 8009bea:	2e00      	cmp	r6, #0
 8009bec:	d140      	bne.n	8009c70 <_malloc_r+0xcc>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	4631      	mov	r1, r6
 8009bf2:	4638      	mov	r0, r7
 8009bf4:	eb04 0803 	add.w	r8, r4, r3
 8009bf8:	f000 f878 	bl	8009cec <_sbrk_r>
 8009bfc:	4580      	cmp	r8, r0
 8009bfe:	d13a      	bne.n	8009c76 <_malloc_r+0xd2>
 8009c00:	6821      	ldr	r1, [r4, #0]
 8009c02:	3503      	adds	r5, #3
 8009c04:	1a6d      	subs	r5, r5, r1
 8009c06:	f025 0503 	bic.w	r5, r5, #3
 8009c0a:	3508      	adds	r5, #8
 8009c0c:	2d0c      	cmp	r5, #12
 8009c0e:	bf38      	it	cc
 8009c10:	250c      	movcc	r5, #12
 8009c12:	4629      	mov	r1, r5
 8009c14:	4638      	mov	r0, r7
 8009c16:	f7ff ffa5 	bl	8009b64 <sbrk_aligned>
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	d02b      	beq.n	8009c76 <_malloc_r+0xd2>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	442b      	add	r3, r5
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	e00e      	b.n	8009c44 <_malloc_r+0xa0>
 8009c26:	6822      	ldr	r2, [r4, #0]
 8009c28:	1b52      	subs	r2, r2, r5
 8009c2a:	d41e      	bmi.n	8009c6a <_malloc_r+0xc6>
 8009c2c:	2a0b      	cmp	r2, #11
 8009c2e:	d916      	bls.n	8009c5e <_malloc_r+0xba>
 8009c30:	1961      	adds	r1, r4, r5
 8009c32:	42a3      	cmp	r3, r4
 8009c34:	6025      	str	r5, [r4, #0]
 8009c36:	bf18      	it	ne
 8009c38:	6059      	strne	r1, [r3, #4]
 8009c3a:	6863      	ldr	r3, [r4, #4]
 8009c3c:	bf08      	it	eq
 8009c3e:	6031      	streq	r1, [r6, #0]
 8009c40:	5162      	str	r2, [r4, r5]
 8009c42:	604b      	str	r3, [r1, #4]
 8009c44:	4638      	mov	r0, r7
 8009c46:	f104 060b 	add.w	r6, r4, #11
 8009c4a:	f000 f865 	bl	8009d18 <__malloc_unlock>
 8009c4e:	f026 0607 	bic.w	r6, r6, #7
 8009c52:	1d23      	adds	r3, r4, #4
 8009c54:	1af2      	subs	r2, r6, r3
 8009c56:	d0b6      	beq.n	8009bc6 <_malloc_r+0x22>
 8009c58:	1b9b      	subs	r3, r3, r6
 8009c5a:	50a3      	str	r3, [r4, r2]
 8009c5c:	e7b3      	b.n	8009bc6 <_malloc_r+0x22>
 8009c5e:	6862      	ldr	r2, [r4, #4]
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	bf0c      	ite	eq
 8009c64:	6032      	streq	r2, [r6, #0]
 8009c66:	605a      	strne	r2, [r3, #4]
 8009c68:	e7ec      	b.n	8009c44 <_malloc_r+0xa0>
 8009c6a:	4623      	mov	r3, r4
 8009c6c:	6864      	ldr	r4, [r4, #4]
 8009c6e:	e7b2      	b.n	8009bd6 <_malloc_r+0x32>
 8009c70:	4634      	mov	r4, r6
 8009c72:	6876      	ldr	r6, [r6, #4]
 8009c74:	e7b9      	b.n	8009bea <_malloc_r+0x46>
 8009c76:	230c      	movs	r3, #12
 8009c78:	603b      	str	r3, [r7, #0]
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	f000 f84c 	bl	8009d18 <__malloc_unlock>
 8009c80:	e7a1      	b.n	8009bc6 <_malloc_r+0x22>
 8009c82:	6025      	str	r5, [r4, #0]
 8009c84:	e7de      	b.n	8009c44 <_malloc_r+0xa0>
 8009c86:	bf00      	nop
 8009c88:	200022cc 	.word	0x200022cc

08009c8c <_realloc_r>:
 8009c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c90:	4680      	mov	r8, r0
 8009c92:	4614      	mov	r4, r2
 8009c94:	460e      	mov	r6, r1
 8009c96:	b921      	cbnz	r1, 8009ca2 <_realloc_r+0x16>
 8009c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9c:	4611      	mov	r1, r2
 8009c9e:	f7ff bf81 	b.w	8009ba4 <_malloc_r>
 8009ca2:	b92a      	cbnz	r2, 8009cb0 <_realloc_r+0x24>
 8009ca4:	f7ff ff12 	bl	8009acc <_free_r>
 8009ca8:	4625      	mov	r5, r4
 8009caa:	4628      	mov	r0, r5
 8009cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb0:	f000 f838 	bl	8009d24 <_malloc_usable_size_r>
 8009cb4:	4284      	cmp	r4, r0
 8009cb6:	4607      	mov	r7, r0
 8009cb8:	d802      	bhi.n	8009cc0 <_realloc_r+0x34>
 8009cba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cbe:	d812      	bhi.n	8009ce6 <_realloc_r+0x5a>
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	f7ff ff6e 	bl	8009ba4 <_malloc_r>
 8009cc8:	4605      	mov	r5, r0
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d0ed      	beq.n	8009caa <_realloc_r+0x1e>
 8009cce:	42bc      	cmp	r4, r7
 8009cd0:	4622      	mov	r2, r4
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	bf28      	it	cs
 8009cd6:	463a      	movcs	r2, r7
 8009cd8:	f7ff fbb8 	bl	800944c <memcpy>
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4640      	mov	r0, r8
 8009ce0:	f7ff fef4 	bl	8009acc <_free_r>
 8009ce4:	e7e1      	b.n	8009caa <_realloc_r+0x1e>
 8009ce6:	4635      	mov	r5, r6
 8009ce8:	e7df      	b.n	8009caa <_realloc_r+0x1e>
	...

08009cec <_sbrk_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4d06      	ldr	r5, [pc, #24]	; (8009d08 <_sbrk_r+0x1c>)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	602b      	str	r3, [r5, #0]
 8009cf8:	f7f6 fffe 	bl	8000cf8 <_sbrk>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	d102      	bne.n	8009d06 <_sbrk_r+0x1a>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	b103      	cbz	r3, 8009d06 <_sbrk_r+0x1a>
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	bd38      	pop	{r3, r4, r5, pc}
 8009d08:	200022d4 	.word	0x200022d4

08009d0c <__malloc_lock>:
 8009d0c:	4801      	ldr	r0, [pc, #4]	; (8009d14 <__malloc_lock+0x8>)
 8009d0e:	f000 b811 	b.w	8009d34 <__retarget_lock_acquire_recursive>
 8009d12:	bf00      	nop
 8009d14:	200022d8 	.word	0x200022d8

08009d18 <__malloc_unlock>:
 8009d18:	4801      	ldr	r0, [pc, #4]	; (8009d20 <__malloc_unlock+0x8>)
 8009d1a:	f000 b80c 	b.w	8009d36 <__retarget_lock_release_recursive>
 8009d1e:	bf00      	nop
 8009d20:	200022d8 	.word	0x200022d8

08009d24 <_malloc_usable_size_r>:
 8009d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d28:	1f18      	subs	r0, r3, #4
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	bfbc      	itt	lt
 8009d2e:	580b      	ldrlt	r3, [r1, r0]
 8009d30:	18c0      	addlt	r0, r0, r3
 8009d32:	4770      	bx	lr

08009d34 <__retarget_lock_acquire_recursive>:
 8009d34:	4770      	bx	lr

08009d36 <__retarget_lock_release_recursive>:
 8009d36:	4770      	bx	lr

08009d38 <_init>:
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3a:	bf00      	nop
 8009d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3e:	bc08      	pop	{r3}
 8009d40:	469e      	mov	lr, r3
 8009d42:	4770      	bx	lr

08009d44 <_fini>:
 8009d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d46:	bf00      	nop
 8009d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4a:	bc08      	pop	{r3}
 8009d4c:	469e      	mov	lr, r3
 8009d4e:	4770      	bx	lr
